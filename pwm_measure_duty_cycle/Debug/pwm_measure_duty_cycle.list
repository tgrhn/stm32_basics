
pwm_measure_duty_cycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a14  08003a14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003a30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003a30  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cd7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016aa  00000000  00000000  00028d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000756  00000000  00000000  0002ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e782  00000000  00000000  0002b4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a35c  00000000  00000000  00049c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc7df  00000000  00000000  00053fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000284c  00000000  00000000  00110794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00112fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080039ec 	.word	0x080039ec

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080039ec 	.word	0x080039ec

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	; 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000432:	2afd      	cmp	r2, #253	; 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	; 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_fdiv>:
 8000548:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000550:	bf1e      	ittt	ne
 8000552:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000556:	ea92 0f0c 	teqne	r2, ip
 800055a:	ea93 0f0c 	teqne	r3, ip
 800055e:	d069      	beq.n	8000634 <__aeabi_fdiv+0xec>
 8000560:	eba2 0203 	sub.w	r2, r2, r3
 8000564:	ea80 0c01 	eor.w	ip, r0, r1
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800056e:	d037      	beq.n	80005e0 <__aeabi_fdiv+0x98>
 8000570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000574:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000578:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800057c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000580:	428b      	cmp	r3, r1
 8000582:	bf38      	it	cc
 8000584:	005b      	lslcc	r3, r3, #1
 8000586:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800058a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800058e:	428b      	cmp	r3, r1
 8000590:	bf24      	itt	cs
 8000592:	1a5b      	subcs	r3, r3, r1
 8000594:	ea40 000c 	orrcs.w	r0, r0, ip
 8000598:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800059c:	bf24      	itt	cs
 800059e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005aa:	bf24      	itt	cs
 80005ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ca:	d1e0      	bne.n	800058e <__aeabi_fdiv+0x46>
 80005cc:	2afd      	cmp	r2, #253	; 0xfd
 80005ce:	f63f af50 	bhi.w	8000472 <__aeabi_fmul+0x92>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005e8:	327f      	adds	r2, #127	; 0x7f
 80005ea:	bfc2      	ittt	gt
 80005ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f4:	4770      	bxgt	lr
 80005f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	3a01      	subs	r2, #1
 8000600:	e737      	b.n	8000472 <__aeabi_fmul+0x92>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800060a:	bf02      	ittt	eq
 800060c:	0040      	lsleq	r0, r0, #1
 800060e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000612:	3a01      	subeq	r2, #1
 8000614:	d0f9      	beq.n	800060a <__aeabi_fdiv+0xc2>
 8000616:	ea40 000c 	orr.w	r0, r0, ip
 800061a:	f093 0f00 	teq	r3, #0
 800061e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0049      	lsleq	r1, r1, #1
 8000626:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800062a:	3b01      	subeq	r3, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xda>
 800062e:	ea41 010c 	orr.w	r1, r1, ip
 8000632:	e795      	b.n	8000560 <__aeabi_fdiv+0x18>
 8000634:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000638:	ea92 0f0c 	teq	r2, ip
 800063c:	d108      	bne.n	8000650 <__aeabi_fdiv+0x108>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	f47f af7d 	bne.w	800053e <__aeabi_fmul+0x15e>
 8000644:	ea93 0f0c 	teq	r3, ip
 8000648:	f47f af70 	bne.w	800052c <__aeabi_fmul+0x14c>
 800064c:	4608      	mov	r0, r1
 800064e:	e776      	b.n	800053e <__aeabi_fmul+0x15e>
 8000650:	ea93 0f0c 	teq	r3, ip
 8000654:	d104      	bne.n	8000660 <__aeabi_fdiv+0x118>
 8000656:	024b      	lsls	r3, r1, #9
 8000658:	f43f af4c 	beq.w	80004f4 <__aeabi_fmul+0x114>
 800065c:	4608      	mov	r0, r1
 800065e:	e76e      	b.n	800053e <__aeabi_fmul+0x15e>
 8000660:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000664:	bf18      	it	ne
 8000666:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800066a:	d1ca      	bne.n	8000602 <__aeabi_fdiv+0xba>
 800066c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000670:	f47f af5c 	bne.w	800052c <__aeabi_fmul+0x14c>
 8000674:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000678:	f47f af3c 	bne.w	80004f4 <__aeabi_fmul+0x114>
 800067c:	e75f      	b.n	800053e <__aeabi_fmul+0x15e>
 800067e:	bf00      	nop

08000680 <__aeabi_f2uiz>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	d20e      	bcs.n	80006a2 <__aeabi_f2uiz+0x22>
 8000684:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000688:	d30b      	bcc.n	80006a2 <__aeabi_f2uiz+0x22>
 800068a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800068e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000692:	d409      	bmi.n	80006a8 <__aeabi_f2uiz+0x28>
 8000694:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800069c:	fa23 f002 	lsr.w	r0, r3, r2
 80006a0:	4770      	bx	lr
 80006a2:	f04f 0000 	mov.w	r0, #0
 80006a6:	4770      	bx	lr
 80006a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006ac:	d101      	bne.n	80006b2 <__aeabi_f2uiz+0x32>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	d102      	bne.n	80006b8 <__aeabi_f2uiz+0x38>
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295
 80006b6:	4770      	bx	lr
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <__aeabi_uldivmod>:
 80006c0:	b953      	cbnz	r3, 80006d8 <__aeabi_uldivmod+0x18>
 80006c2:	b94a      	cbnz	r2, 80006d8 <__aeabi_uldivmod+0x18>
 80006c4:	2900      	cmp	r1, #0
 80006c6:	bf08      	it	eq
 80006c8:	2800      	cmpeq	r0, #0
 80006ca:	bf1c      	itt	ne
 80006cc:	f04f 31ff 	movne.w	r1, #4294967295
 80006d0:	f04f 30ff 	movne.w	r0, #4294967295
 80006d4:	f000 b972 	b.w	80009bc <__aeabi_idiv0>
 80006d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e0:	f000 f806 	bl	80006f0 <__udivmoddi4>
 80006e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr

080006f0 <__udivmoddi4>:
 80006f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f4:	9e08      	ldr	r6, [sp, #32]
 80006f6:	460d      	mov	r5, r1
 80006f8:	4604      	mov	r4, r0
 80006fa:	468e      	mov	lr, r1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d14c      	bne.n	800079a <__udivmoddi4+0xaa>
 8000700:	428a      	cmp	r2, r1
 8000702:	4694      	mov	ip, r2
 8000704:	d967      	bls.n	80007d6 <__udivmoddi4+0xe6>
 8000706:	fab2 f382 	clz	r3, r2
 800070a:	b153      	cbz	r3, 8000722 <__udivmoddi4+0x32>
 800070c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000710:	f1c3 0220 	rsb	r2, r3, #32
 8000714:	fa01 fe03 	lsl.w	lr, r1, r3
 8000718:	fa20 f202 	lsr.w	r2, r0, r2
 800071c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000720:	409c      	lsls	r4, r3
 8000722:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000726:	fbbe f1f7 	udiv	r1, lr, r7
 800072a:	fa1f f58c 	uxth.w	r5, ip
 800072e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000732:	fb01 f005 	mul.w	r0, r1, r5
 8000736:	0c22      	lsrs	r2, r4, #16
 8000738:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800073c:	4290      	cmp	r0, r2
 800073e:	d90a      	bls.n	8000756 <__udivmoddi4+0x66>
 8000740:	eb1c 0202 	adds.w	r2, ip, r2
 8000744:	f101 3eff 	add.w	lr, r1, #4294967295
 8000748:	f080 8119 	bcs.w	800097e <__udivmoddi4+0x28e>
 800074c:	4290      	cmp	r0, r2
 800074e:	f240 8116 	bls.w	800097e <__udivmoddi4+0x28e>
 8000752:	3902      	subs	r1, #2
 8000754:	4462      	add	r2, ip
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	fbb2 f0f7 	udiv	r0, r2, r7
 800075c:	fb07 2210 	mls	r2, r7, r0, r2
 8000760:	fb00 f505 	mul.w	r5, r0, r5
 8000764:	b2a4      	uxth	r4, r4
 8000766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800076a:	42a5      	cmp	r5, r4
 800076c:	d90a      	bls.n	8000784 <__udivmoddi4+0x94>
 800076e:	eb1c 0404 	adds.w	r4, ip, r4
 8000772:	f100 32ff 	add.w	r2, r0, #4294967295
 8000776:	f080 8104 	bcs.w	8000982 <__udivmoddi4+0x292>
 800077a:	42a5      	cmp	r5, r4
 800077c:	f240 8101 	bls.w	8000982 <__udivmoddi4+0x292>
 8000780:	4464      	add	r4, ip
 8000782:	3802      	subs	r0, #2
 8000784:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000788:	2100      	movs	r1, #0
 800078a:	1b64      	subs	r4, r4, r5
 800078c:	b11e      	cbz	r6, 8000796 <__udivmoddi4+0xa6>
 800078e:	40dc      	lsrs	r4, r3
 8000790:	2300      	movs	r3, #0
 8000792:	e9c6 4300 	strd	r4, r3, [r6]
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	428b      	cmp	r3, r1
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0xc0>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	f000 80ea 	beq.w	8000978 <__udivmoddi4+0x288>
 80007a4:	2100      	movs	r1, #0
 80007a6:	e9c6 0500 	strd	r0, r5, [r6]
 80007aa:	4608      	mov	r0, r1
 80007ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b0:	fab3 f183 	clz	r1, r3
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d148      	bne.n	800084a <__udivmoddi4+0x15a>
 80007b8:	42ab      	cmp	r3, r5
 80007ba:	d302      	bcc.n	80007c2 <__udivmoddi4+0xd2>
 80007bc:	4282      	cmp	r2, r0
 80007be:	f200 80f8 	bhi.w	80009b2 <__udivmoddi4+0x2c2>
 80007c2:	1a84      	subs	r4, r0, r2
 80007c4:	eb65 0203 	sbc.w	r2, r5, r3
 80007c8:	2001      	movs	r0, #1
 80007ca:	4696      	mov	lr, r2
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d0e2      	beq.n	8000796 <__udivmoddi4+0xa6>
 80007d0:	e9c6 4e00 	strd	r4, lr, [r6]
 80007d4:	e7df      	b.n	8000796 <__udivmoddi4+0xa6>
 80007d6:	b902      	cbnz	r2, 80007da <__udivmoddi4+0xea>
 80007d8:	deff      	udf	#255	; 0xff
 80007da:	fab2 f382 	clz	r3, r2
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f040 808e 	bne.w	8000900 <__udivmoddi4+0x210>
 80007e4:	1a88      	subs	r0, r1, r2
 80007e6:	2101      	movs	r1, #1
 80007e8:	0c17      	lsrs	r7, r2, #16
 80007ea:	fa1f fe82 	uxth.w	lr, r2
 80007ee:	fbb0 f5f7 	udiv	r5, r0, r7
 80007f2:	fb07 0015 	mls	r0, r7, r5, r0
 80007f6:	0c22      	lsrs	r2, r4, #16
 80007f8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007fc:	fb0e f005 	mul.w	r0, lr, r5
 8000800:	4290      	cmp	r0, r2
 8000802:	d908      	bls.n	8000816 <__udivmoddi4+0x126>
 8000804:	eb1c 0202 	adds.w	r2, ip, r2
 8000808:	f105 38ff 	add.w	r8, r5, #4294967295
 800080c:	d202      	bcs.n	8000814 <__udivmoddi4+0x124>
 800080e:	4290      	cmp	r0, r2
 8000810:	f200 80cc 	bhi.w	80009ac <__udivmoddi4+0x2bc>
 8000814:	4645      	mov	r5, r8
 8000816:	1a12      	subs	r2, r2, r0
 8000818:	fbb2 f0f7 	udiv	r0, r2, r7
 800081c:	fb07 2210 	mls	r2, r7, r0, r2
 8000820:	fb0e fe00 	mul.w	lr, lr, r0
 8000824:	b2a4      	uxth	r4, r4
 8000826:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082a:	45a6      	cmp	lr, r4
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x150>
 800082e:	eb1c 0404 	adds.w	r4, ip, r4
 8000832:	f100 32ff 	add.w	r2, r0, #4294967295
 8000836:	d202      	bcs.n	800083e <__udivmoddi4+0x14e>
 8000838:	45a6      	cmp	lr, r4
 800083a:	f200 80b4 	bhi.w	80009a6 <__udivmoddi4+0x2b6>
 800083e:	4610      	mov	r0, r2
 8000840:	eba4 040e 	sub.w	r4, r4, lr
 8000844:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000848:	e7a0      	b.n	800078c <__udivmoddi4+0x9c>
 800084a:	f1c1 0720 	rsb	r7, r1, #32
 800084e:	408b      	lsls	r3, r1
 8000850:	fa22 fc07 	lsr.w	ip, r2, r7
 8000854:	ea4c 0c03 	orr.w	ip, ip, r3
 8000858:	fa25 fa07 	lsr.w	sl, r5, r7
 800085c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000860:	fbba f8f9 	udiv	r8, sl, r9
 8000864:	408d      	lsls	r5, r1
 8000866:	fa20 f307 	lsr.w	r3, r0, r7
 800086a:	fb09 aa18 	mls	sl, r9, r8, sl
 800086e:	fa1f fe8c 	uxth.w	lr, ip
 8000872:	432b      	orrs	r3, r5
 8000874:	fa00 f501 	lsl.w	r5, r0, r1
 8000878:	fb08 f00e 	mul.w	r0, r8, lr
 800087c:	0c1c      	lsrs	r4, r3, #16
 800087e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000882:	42a0      	cmp	r0, r4
 8000884:	fa02 f201 	lsl.w	r2, r2, r1
 8000888:	d90b      	bls.n	80008a2 <__udivmoddi4+0x1b2>
 800088a:	eb1c 0404 	adds.w	r4, ip, r4
 800088e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000892:	f080 8086 	bcs.w	80009a2 <__udivmoddi4+0x2b2>
 8000896:	42a0      	cmp	r0, r4
 8000898:	f240 8083 	bls.w	80009a2 <__udivmoddi4+0x2b2>
 800089c:	f1a8 0802 	sub.w	r8, r8, #2
 80008a0:	4464      	add	r4, ip
 80008a2:	1a24      	subs	r4, r4, r0
 80008a4:	b298      	uxth	r0, r3
 80008a6:	fbb4 f3f9 	udiv	r3, r4, r9
 80008aa:	fb09 4413 	mls	r4, r9, r3, r4
 80008ae:	fb03 fe0e 	mul.w	lr, r3, lr
 80008b2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80008b6:	45a6      	cmp	lr, r4
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x1dc>
 80008ba:	eb1c 0404 	adds.w	r4, ip, r4
 80008be:	f103 30ff 	add.w	r0, r3, #4294967295
 80008c2:	d26a      	bcs.n	800099a <__udivmoddi4+0x2aa>
 80008c4:	45a6      	cmp	lr, r4
 80008c6:	d968      	bls.n	800099a <__udivmoddi4+0x2aa>
 80008c8:	3b02      	subs	r3, #2
 80008ca:	4464      	add	r4, ip
 80008cc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80008d0:	fba0 9302 	umull	r9, r3, r0, r2
 80008d4:	eba4 040e 	sub.w	r4, r4, lr
 80008d8:	429c      	cmp	r4, r3
 80008da:	46c8      	mov	r8, r9
 80008dc:	469e      	mov	lr, r3
 80008de:	d354      	bcc.n	800098a <__udivmoddi4+0x29a>
 80008e0:	d051      	beq.n	8000986 <__udivmoddi4+0x296>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d067      	beq.n	80009b6 <__udivmoddi4+0x2c6>
 80008e6:	ebb5 0308 	subs.w	r3, r5, r8
 80008ea:	eb64 040e 	sbc.w	r4, r4, lr
 80008ee:	40cb      	lsrs	r3, r1
 80008f0:	fa04 f707 	lsl.w	r7, r4, r7
 80008f4:	431f      	orrs	r7, r3
 80008f6:	40cc      	lsrs	r4, r1
 80008f8:	e9c6 7400 	strd	r7, r4, [r6]
 80008fc:	2100      	movs	r1, #0
 80008fe:	e74a      	b.n	8000796 <__udivmoddi4+0xa6>
 8000900:	fa02 fc03 	lsl.w	ip, r2, r3
 8000904:	f1c3 0020 	rsb	r0, r3, #32
 8000908:	40c1      	lsrs	r1, r0
 800090a:	409d      	lsls	r5, r3
 800090c:	fa24 f000 	lsr.w	r0, r4, r0
 8000910:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000914:	4328      	orrs	r0, r5
 8000916:	fbb1 f5f7 	udiv	r5, r1, r7
 800091a:	fb07 1115 	mls	r1, r7, r5, r1
 800091e:	fa1f fe8c 	uxth.w	lr, ip
 8000922:	0c02      	lsrs	r2, r0, #16
 8000924:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000928:	fb05 f10e 	mul.w	r1, r5, lr
 800092c:	4291      	cmp	r1, r2
 800092e:	fa04 f403 	lsl.w	r4, r4, r3
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x256>
 8000934:	eb1c 0202 	adds.w	r2, ip, r2
 8000938:	f105 38ff 	add.w	r8, r5, #4294967295
 800093c:	d22f      	bcs.n	800099e <__udivmoddi4+0x2ae>
 800093e:	4291      	cmp	r1, r2
 8000940:	d92d      	bls.n	800099e <__udivmoddi4+0x2ae>
 8000942:	3d02      	subs	r5, #2
 8000944:	4462      	add	r2, ip
 8000946:	1a52      	subs	r2, r2, r1
 8000948:	fbb2 f1f7 	udiv	r1, r2, r7
 800094c:	fb07 2211 	mls	r2, r7, r1, r2
 8000950:	b280      	uxth	r0, r0
 8000952:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000956:	fb01 f20e 	mul.w	r2, r1, lr
 800095a:	4282      	cmp	r2, r0
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x280>
 800095e:	eb1c 0000 	adds.w	r0, ip, r0
 8000962:	f101 38ff 	add.w	r8, r1, #4294967295
 8000966:	d216      	bcs.n	8000996 <__udivmoddi4+0x2a6>
 8000968:	4282      	cmp	r2, r0
 800096a:	d914      	bls.n	8000996 <__udivmoddi4+0x2a6>
 800096c:	3902      	subs	r1, #2
 800096e:	4460      	add	r0, ip
 8000970:	1a80      	subs	r0, r0, r2
 8000972:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000976:	e73a      	b.n	80007ee <__udivmoddi4+0xfe>
 8000978:	4631      	mov	r1, r6
 800097a:	4630      	mov	r0, r6
 800097c:	e70b      	b.n	8000796 <__udivmoddi4+0xa6>
 800097e:	4671      	mov	r1, lr
 8000980:	e6e9      	b.n	8000756 <__udivmoddi4+0x66>
 8000982:	4610      	mov	r0, r2
 8000984:	e6fe      	b.n	8000784 <__udivmoddi4+0x94>
 8000986:	454d      	cmp	r5, r9
 8000988:	d2ab      	bcs.n	80008e2 <__udivmoddi4+0x1f2>
 800098a:	ebb9 0802 	subs.w	r8, r9, r2
 800098e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000992:	3801      	subs	r0, #1
 8000994:	e7a5      	b.n	80008e2 <__udivmoddi4+0x1f2>
 8000996:	4641      	mov	r1, r8
 8000998:	e7ea      	b.n	8000970 <__udivmoddi4+0x280>
 800099a:	4603      	mov	r3, r0
 800099c:	e796      	b.n	80008cc <__udivmoddi4+0x1dc>
 800099e:	4645      	mov	r5, r8
 80009a0:	e7d1      	b.n	8000946 <__udivmoddi4+0x256>
 80009a2:	46d0      	mov	r8, sl
 80009a4:	e77d      	b.n	80008a2 <__udivmoddi4+0x1b2>
 80009a6:	4464      	add	r4, ip
 80009a8:	3802      	subs	r0, #2
 80009aa:	e749      	b.n	8000840 <__udivmoddi4+0x150>
 80009ac:	3d02      	subs	r5, #2
 80009ae:	4462      	add	r2, ip
 80009b0:	e731      	b.n	8000816 <__udivmoddi4+0x126>
 80009b2:	4608      	mov	r0, r1
 80009b4:	e70a      	b.n	80007cc <__udivmoddi4+0xdc>
 80009b6:	4631      	mov	r1, r6
 80009b8:	e6ed      	b.n	8000796 <__udivmoddi4+0xa6>
 80009ba:	bf00      	nop

080009bc <__aeabi_idiv0>:
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <HAL_TIM_IC_CaptureCallback+0x90>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d139      	bne.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x86>
			risingEdgeTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009d2:	2100      	movs	r1, #0
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f002 f9db 	bl	8002d90 <HAL_TIM_ReadCapturedValue>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <HAL_TIM_IC_CaptureCallback+0x94>)
 80009de:	6013      	str	r3, [r2, #0]
			fallingEdgeTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80009e0:	2104      	movs	r1, #4
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f002 f9d4 	bl	8002d90 <HAL_TIM_ReadCapturedValue>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x98>)
 80009ec:	6013      	str	r3, [r2, #0]

			frequency = (float) risingEdgeTime + 1;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_TIM_IC_CaptureCallback+0x94>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc9c 	bl	8000330 <__aeabi_ui2f>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fbe6 	bl	80001d0 <__addsf3>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe3a 	bl	8000680 <__aeabi_f2uiz>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a10:	6013      	str	r3, [r2, #0]
			duty = (float) 100 * fallingEdgeTime / risingEdgeTime;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fc8a 	bl	8000330 <__aeabi_ui2f>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4910      	ldr	r1, [pc, #64]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fcdd 	bl	80003e0 <__aeabi_fmul>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461c      	mov	r4, r3
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fc7e 	bl	8000330 <__aeabi_ui2f>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f7ff fd85 	bl	8000548 <__aeabi_fdiv>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000a44:	601a      	str	r2, [r3, #0]
		}
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40000400 	.word	0x40000400
 8000a54:	200000b8 	.word	0x200000b8
 8000a58:	200000bc 	.word	0x200000bc
 8000a5c:	200000c0 	.word	0x200000c0
 8000a60:	42c80000 	.word	0x42c80000
 8000a64:	200000c4 	.word	0x200000c4

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fb34 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f81c 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f994 	bl	8000da0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a78:	f000 f854 	bl	8000b24 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a7c:	f000 f8f2 	bl	8000c64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET)
 	  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
   if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
  	  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);*/
  TIM1->CCR1 = 11;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <main+0x38>)
 8000a82:	220b      	movs	r2, #11
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a86:	2100      	movs	r1, #0
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <main+0x3c>)
 8000a8a:	f001 faed 	bl	8002068 <HAL_TIM_PWM_Start>
   HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <main+0x40>)
 8000a92:	f001 fce5 	bl	8002460 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000a96:	2104      	movs	r1, #4
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <main+0x40>)
 8000a9a:	f001 fc05 	bl	80022a8 <HAL_TIM_IC_Start>
  // HAL_TIM_Base_Start_IT(&htim3);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x36>
 8000aa0:	40010000 	.word	0x40010000
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	20000070 	.word	0x20000070

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	; 0x48
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 ff69 	bl	8003992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fe12 	bl	800170c <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000aee:	f000 f97d 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f852 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f969 	bl	8000dec <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3748      	adds	r7, #72	; 0x48
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2220      	movs	r2, #32
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 ff18 	bl	8003992 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b64:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <MX_TIM1_Init+0x13c>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000 - 1;
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b6a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10 - 1;
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b78:	2209      	movs	r2, #9
 8000b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8e:	4833      	ldr	r0, [pc, #204]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b90:	f001 f9c2 	bl	8001f18 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f000 f927 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482c      	ldr	r0, [pc, #176]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000bac:	f001 ffe6 	bl	8002b7c <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f000 f919 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bba:	4828      	ldr	r0, [pc, #160]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000bbc:	f001 f9fb 	bl	8001fb6 <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bc6:	f000 f911 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4820      	ldr	r0, [pc, #128]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000bda:	f002 fdfd 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000be4:	f000 f902 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	; 0x60
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 9;
 8000bec:	2309      	movs	r3, #9
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000c0e:	f001 fef3 	bl	80029f8 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c18:	f000 f8e8 	bl	8000dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000c40:	f002 fe44 	bl	80038cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c4a:	f000 f8cf 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000c50:	f000 f97e 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3758      	adds	r7, #88	; 0x58
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000028 	.word	0x20000028
 8000c60:	40010000 	.word	0x40010000

08000c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b090      	sub	sp, #64	; 0x40
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000ca0:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <MX_TIM3_Init+0x138>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600 - 1;
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000ca6:	f240 623f 	movw	r2, #1599	; 0x63f
 8000caa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100 - 1;
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000cb4:	2263      	movs	r2, #99	; 0x63
 8000cb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc4:	4834      	ldr	r0, [pc, #208]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000cc6:	f001 f927 	bl	8001f18 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f000 f88c 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482d      	ldr	r0, [pc, #180]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000ce2:	f001 ff4b 	bl	8002b7c <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f87e 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000cf0:	4829      	ldr	r0, [pc, #164]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000cf2:	f001 fa81 	bl	80021f8 <HAL_TIM_IC_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cfc:	f000 f876 	bl	8000dec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d00:	2304      	movs	r3, #4
 8000d02:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d04:	2350      	movs	r3, #80	; 0x50
 8000d06:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481f      	ldr	r0, [pc, #124]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000d1c:	f001 fff5 	bl	8002d0a <HAL_TIM_SlaveConfigSynchro>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8000d26:	f000 f861 	bl	8000dec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4619      	mov	r1, r3
 8000d42:	4815      	ldr	r0, [pc, #84]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000d44:	f001 fdbc 	bl	80028c0 <HAL_TIM_IC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000d4e:	f000 f84d 	bl	8000dec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d52:	2302      	movs	r3, #2
 8000d54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d56:	2302      	movs	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000d64:	f001 fdac 	bl	80028c0 <HAL_TIM_IC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000d6e:	f000 f83d 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_TIM3_Init+0x134>)
 8000d80:	f002 fd2a 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8000d8a:	f000 f82f 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3740      	adds	r7, #64	; 0x40
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000070 	.word	0x20000070
 8000d9c:	40000400 	.word	0x40000400

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_GPIO_Init+0x48>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <MX_GPIO_Init+0x48>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_GPIO_Init+0x48>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_GPIO_Init+0x48>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <MX_GPIO_Init+0x48>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <MX_GPIO_Init+0x48>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40023800 	.word	0x40023800

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x48>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x48>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x48>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_MspInit+0x48>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_MspInit+0x48>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_MspInit+0x48>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <HAL_TIM_Base_MspInit+0xfc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12e      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a35      	ldr	r2, [pc, #212]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2018      	movs	r0, #24
 8000e88:	f000 fa6b 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e8c:	2018      	movs	r0, #24
 8000e8e:	f000 fa84 	bl	800139a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2019      	movs	r0, #25
 8000e98:	f000 fa63 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e9c:	2019      	movs	r0, #25
 8000e9e:	f000 fa7c 	bl	800139a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	201a      	movs	r0, #26
 8000ea8:	f000 fa5b 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000eac:	201a      	movs	r0, #26
 8000eae:	f000 fa74 	bl	800139a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	201b      	movs	r0, #27
 8000eb8:	f000 fa53 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ebc:	201b      	movs	r0, #27
 8000ebe:	f000 fa6c 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ec2:	e038      	b.n	8000f36 <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_TIM_Base_MspInit+0x104>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d133      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_TIM_Base_MspInit+0x100>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f16:	2302      	movs	r3, #2
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <HAL_TIM_Base_MspInit+0x108>)
 8000f22:	f000 fa55 	bl	80013d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	201d      	movs	r0, #29
 8000f2c:	f000 fa19 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f30:	201d      	movs	r0, #29
 8000f32:	f000 fa32 	bl	800139a <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d11e      	bne.n	8000fb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_TIM_MspPostInit+0x70>)
 8000fac:	f000 fa10 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f000 f8b7 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800101a:	f001 fb49 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000028 	.word	0x20000028

08001028 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800102e:	f001 fb3f 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000028 	.word	0x20000028

0800103c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001042:	f001 fb35 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000028 	.word	0x20000028

08001050 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM1_CC_IRQHandler+0x10>)
 8001056:	f001 fb2b 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000028 	.word	0x20000028

08001064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM3_IRQHandler+0x10>)
 800106a:	f001 fb21 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000070 	.word	0x20000070

08001078 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001088:	f7ff fff6 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 fc77 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fcd7 	bl	8000a68 <main>
  bx  lr
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c8:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 80010cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d0:	200000cc 	.word	0x200000cc

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f923 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fe74 	bl	8000df8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f93b 	bl	80013b6 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f903 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000008 	.word	0x20000008
 800119c:	200000c8 	.word	0x200000c8

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200000c8 	.word	0x200000c8

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff2d 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff42 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff35 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e16f      	b.n	80016c0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8161 	beq.w	80016ba <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0203 	and.w	r2, r3, #3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80bb 	beq.w	80016ba <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b64      	ldr	r3, [pc, #400]	; (80016dc <HAL_GPIO_Init+0x30c>)
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	4a63      	ldr	r2, [pc, #396]	; (80016dc <HAL_GPIO_Init+0x30c>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6453      	str	r3, [r2, #68]	; 0x44
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_GPIO_Init+0x30c>)
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001560:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <HAL_GPIO_Init+0x310>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_GPIO_Init+0x314>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d031      	beq.n	80015f0 <HAL_GPIO_Init+0x220>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a56      	ldr	r2, [pc, #344]	; (80016e8 <HAL_GPIO_Init+0x318>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d02b      	beq.n	80015ec <HAL_GPIO_Init+0x21c>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a55      	ldr	r2, [pc, #340]	; (80016ec <HAL_GPIO_Init+0x31c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d025      	beq.n	80015e8 <HAL_GPIO_Init+0x218>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x320>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d01f      	beq.n	80015e4 <HAL_GPIO_Init+0x214>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a53      	ldr	r2, [pc, #332]	; (80016f4 <HAL_GPIO_Init+0x324>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d019      	beq.n	80015e0 <HAL_GPIO_Init+0x210>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_GPIO_Init+0x328>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d013      	beq.n	80015dc <HAL_GPIO_Init+0x20c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x32c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_Init+0x208>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_GPIO_Init+0x330>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_GPIO_Init+0x334>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_GPIO_Init+0x200>
 80015cc:	2308      	movs	r3, #8
 80015ce:	e010      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015d0:	2309      	movs	r3, #9
 80015d2:	e00e      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015d4:	2307      	movs	r3, #7
 80015d6:	e00c      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015d8:	2306      	movs	r3, #6
 80015da:	e00a      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015dc:	2305      	movs	r3, #5
 80015de:	e008      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e004      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x222>
 80015f0:	2300      	movs	r3, #0
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001604:	4936      	ldr	r1, [pc, #216]	; (80016e0 <HAL_GPIO_Init+0x310>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_GPIO_Init+0x338>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001636:	4a34      	ldr	r2, [pc, #208]	; (8001708 <HAL_GPIO_Init+0x338>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x338>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <HAL_GPIO_Init+0x338>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_GPIO_Init+0x338>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_GPIO_Init+0x338>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x338>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_GPIO_Init+0x338>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f47f ae88 	bne.w	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40021400 	.word	0x40021400
 80016fc:	40021800 	.word	0x40021800
 8001700:	40021c00 	.word	0x40021c00
 8001704:	40022000 	.word	0x40022000
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e23b      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d050      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172a:	4b9e      	ldr	r3, [pc, #632]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b9b      	ldr	r3, [pc, #620]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b98      	ldr	r3, [pc, #608]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d036      	beq.n	80017ca <HAL_RCC_OscConfig+0xbe>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d132      	bne.n	80017ca <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e216      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_RCC_OscConfig+0x29c>)
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d013      	beq.n	80017a2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fd11 	bl	80011a0 <HAL_GetTick>
 800177e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001782:	f7ff fd0d 	bl	80011a0 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e200      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001794:	4b83      	ldr	r3, [pc, #524]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x76>
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fcfd 	bl	80011a0 <HAL_GetTick>
 80017a6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017aa:	f7ff fcf9 	bl	80011a0 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b64      	cmp	r3, #100	; 0x64
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1ec      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x9e>
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d077      	beq.n	80018c8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d8:	4b72      	ldr	r3, [pc, #456]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00b      	beq.n	80017fc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d126      	bne.n	800183e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f0:	4b6c      	ldr	r3, [pc, #432]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d120      	bne.n	800183e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e1c0      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	21f8      	movs	r1, #248	; 0xf8
 8001822:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	fa91 f1a1 	rbit	r1, r1
 800182a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800182c:	6979      	ldr	r1, [r7, #20]
 800182e:	fab1 f181 	clz	r1, r1
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	408b      	lsls	r3, r1
 8001836:	495b      	ldr	r1, [pc, #364]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183c:	e044      	b.n	80018c8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d02a      	beq.n	800189c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_OscConfig+0x2a0>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fca8 	bl	80011a0 <HAL_GetTick>
 8001850:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001854:	f7ff fca4 	bl	80011a0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e197      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	21f8      	movs	r1, #248	; 0xf8
 8001880:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	6939      	ldr	r1, [r7, #16]
 8001884:	fa91 f1a1 	rbit	r1, r1
 8001888:	60f9      	str	r1, [r7, #12]
  return result;
 800188a:	68f9      	ldr	r1, [r7, #12]
 800188c:	fab1 f181 	clz	r1, r1
 8001890:	b2c9      	uxtb	r1, r1
 8001892:	408b      	lsls	r3, r1
 8001894:	4943      	ldr	r1, [pc, #268]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
 800189a:	e015      	b.n	80018c8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x2a0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fc7d 	bl	80011a0 <HAL_GetTick>
 80018a6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc79 	bl	80011a0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e16c      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d030      	beq.n	8001936 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d016      	beq.n	800190a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x2a4>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fc5d 	bl	80011a0 <HAL_GetTick>
 80018e6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fc59 	bl	80011a0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e14c      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 80018fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_RCC_OscConfig+0x2a4>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff fc46 	bl	80011a0 <HAL_GetTick>
 8001914:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc42 	bl	80011a0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e135      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8087 	beq.w	8001a52 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d110      	bne.n	8001978 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_RCC_OscConfig+0x298>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_RCC_OscConfig+0x2a8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_RCC_OscConfig+0x2a8>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x2a8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d122      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_RCC_OscConfig+0x2a8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_RCC_OscConfig+0x2a8>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199c:	f7ff fc00 	bl	80011a0 <HAL_GetTick>
 80019a0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	e012      	b.n	80019ca <HAL_RCC_OscConfig+0x2be>
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40023802 	.word	0x40023802
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
 80019b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b8:	f7ff fbf2 	bl	80011a0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0e5      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ca:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x494>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x498>)
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d015      	beq.n	8001a14 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fbda 	bl	80011a0 <HAL_GetTick>
 80019ec:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff fbd6 	bl	80011a0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0c7      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	4b68      	ldr	r3, [pc, #416]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0ee      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2e4>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fbc4 	bl	80011a0 <HAL_GetTick>
 8001a18:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fbc0 	bl	80011a0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0b1      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ee      	bne.n	8001a1c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a57      	ldr	r2, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 809c 	beq.w	8001b94 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5c:	4b52      	ldr	r3, [pc, #328]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d146      	bne.n	8001afe <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_OscConfig+0x4a0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb93 	bl	80011a0 <HAL_GetTick>
 8001a7a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fb8f 	bl	80011a0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e082      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	69d1      	ldr	r1, [r2, #28]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6a12      	ldr	r2, [r2, #32]
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab2:	0192      	lsls	r2, r2, #6
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aba:	0612      	lsls	r2, r2, #24
 8001abc:	4311      	orrs	r1, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ac2:	0852      	lsrs	r2, r2, #1
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	4937      	ldr	r1, [pc, #220]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_RCC_OscConfig+0x4a0>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb63 	bl	80011a0 <HAL_GetTick>
 8001ada:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff fb5f 	bl	80011a0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e052      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x3d2>
 8001afc:	e04a      	b.n	8001b94 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x4a0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb4c 	bl	80011a0 <HAL_GetTick>
 8001b08:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fb48 	bl	80011a0 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e03b      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x400>
 8001b2a:	e033      	b.n	8001b94 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e02e      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x49c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d121      	bne.n	8001b90 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d11a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b66:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	40023870 	.word	0x40023870
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470060 	.word	0x42470060
 8001bb0:	f0bc8000 	.word	0xf0bc8000

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d2      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0be      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b5c      	ldr	r3, [pc, #368]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a5b      	ldr	r2, [pc, #364]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a55      	ldr	r2, [pc, #340]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4950      	ldr	r1, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d040      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d115      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e085      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e079      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e071      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4939      	ldr	r1, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff fa80 	bl	80011a0 <HAL_GetTick>
 8001ca0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff fa7c 	bl	80011a0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e059      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20c      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e03c      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	491b      	ldr	r1, [pc, #108]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4913      	ldr	r1, [pc, #76]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001d32:	f000 f82b 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d40:	22f0      	movs	r2, #240	; 0xf0
 8001d42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	fab2 f282 	clz	r2, r2
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	40d3      	lsrs	r3, r2
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1cc>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1d0>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9d8 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08003a04 	.word	0x08003a04
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d90:	b090      	sub	sp, #64	; 0x40
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00d      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f200 80a2 	bhi.w	8001efa <HAL_RCC_GetSysClockFreq+0x16e>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dbe:	e09c      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001dc4:	e09c      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dca:	e099      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d027      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	2200      	movs	r2, #0
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	627a      	str	r2, [r7, #36]	; 0x24
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001df4:	2100      	movs	r1, #0
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001df8:	fb03 f201 	mul.w	r2, r3, r1
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	fb00 f303 	mul.w	r3, r0, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	4a43      	ldr	r2, [pc, #268]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e06:	fba0 2102 	umull	r2, r1, r0, r2
 8001e0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e10:	4413      	add	r3, r2
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	2200      	movs	r2, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	61fa      	str	r2, [r7, #28]
 8001e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e24:	f7fe fc4c 	bl	80006c0 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e30:	e055      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	2200      	movs	r2, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	617a      	str	r2, [r7, #20]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e44:	f04f 0b00 	mov.w	fp, #0
 8001e48:	4652      	mov	r2, sl
 8001e4a:	465b      	mov	r3, fp
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0159      	lsls	r1, r3, #5
 8001e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5a:	0150      	lsls	r0, r2, #5
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	ebb2 080a 	subs.w	r8, r2, sl
 8001e64:	eb63 090b 	sbc.w	r9, r3, fp
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e74:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e78:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e7c:	ebb2 0408 	subs.w	r4, r2, r8
 8001e80:	eb63 0509 	sbc.w	r5, r3, r9
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	00eb      	lsls	r3, r5, #3
 8001e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e92:	00e2      	lsls	r2, r4, #3
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	eb14 030a 	adds.w	r3, r4, sl
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	eb45 030b 	adc.w	r3, r5, fp
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	028b      	lsls	r3, r1, #10
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	4604      	mov	r4, r0
 8001eba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	028a      	lsls	r2, r1, #10
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	60fa      	str	r2, [r7, #12]
 8001ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ed2:	f7fe fbf5 	bl	80006c0 <__aeabi_uldivmod>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4613      	mov	r3, r2
 8001edc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ef8:	e002      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x184>)
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3740      	adds	r7, #64	; 0x40
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	017d7840 	.word	0x017d7840

08001f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e041      	b.n	8001fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe ff80 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 ff82 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e041      	b.n	800204c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f839 	bl	8002054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f000 ff33 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
	...

08002068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_TIM_PWM_Start+0x24>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e022      	b.n	80020d2 <HAL_TIM_PWM_Start+0x6a>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b04      	cmp	r3, #4
 8002090:	d109      	bne.n	80020a6 <HAL_TIM_PWM_Start+0x3e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	e015      	b.n	80020d2 <HAL_TIM_PWM_Start+0x6a>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d109      	bne.n	80020c0 <HAL_TIM_PWM_Start+0x58>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e008      	b.n	80020d2 <HAL_TIM_PWM_Start+0x6a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07c      	b.n	80021d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <HAL_TIM_PWM_Start+0x82>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e8:	e013      	b.n	8002112 <HAL_TIM_PWM_Start+0xaa>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d104      	bne.n	80020fa <HAL_TIM_PWM_Start+0x92>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f8:	e00b      	b.n	8002112 <HAL_TIM_PWM_Start+0xaa>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d104      	bne.n	800210a <HAL_TIM_PWM_Start+0xa2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002108:	e003      	b.n	8002112 <HAL_TIM_PWM_Start+0xaa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fb37 	bl	800378e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_TIM_PWM_Start+0x174>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_TIM_PWM_Start+0xcc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <HAL_TIM_PWM_Start+0x178>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_TIM_PWM_Start+0xd0>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_TIM_PWM_Start+0xd2>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_TIM_PWM_Start+0x174>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d01d      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_TIM_PWM_Start+0x17c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_TIM_PWM_Start+0x180>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_TIM_PWM_Start+0x184>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <HAL_TIM_PWM_Start+0x178>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_PWM_Start+0x188>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_PWM_Start+0x136>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_TIM_PWM_Start+0x18c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d111      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d010      	beq.n	80021d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	e007      	b.n	80021d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40010400 	.word	0x40010400
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00
 80021f0:	40014000 	.word	0x40014000
 80021f4:	40001800 	.word	0x40001800

080021f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e041      	b.n	800228e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f839 	bl	8002296 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f000 fe12 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <HAL_TIM_IC_Start+0x1a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	e013      	b.n	80022ea <HAL_TIM_IC_Start+0x42>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_IC_Start+0x2a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e00b      	b.n	80022ea <HAL_TIM_IC_Start+0x42>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_IC_Start+0x3a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e003      	b.n	80022ea <HAL_TIM_IC_Start+0x42>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <HAL_TIM_IC_Start+0x54>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e013      	b.n	8002324 <HAL_TIM_IC_Start+0x7c>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d104      	bne.n	800230c <HAL_TIM_IC_Start+0x64>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e00b      	b.n	8002324 <HAL_TIM_IC_Start+0x7c>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d104      	bne.n	800231c <HAL_TIM_IC_Start+0x74>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e003      	b.n	8002324 <HAL_TIM_IC_Start+0x7c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002322:	b2db      	uxtb	r3, r3
 8002324:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800232c:	7bbb      	ldrb	r3, [r7, #14]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e081      	b.n	800243a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <HAL_TIM_IC_Start+0x9e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	e013      	b.n	800236e <HAL_TIM_IC_Start+0xc6>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d104      	bne.n	8002356 <HAL_TIM_IC_Start+0xae>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002354:	e00b      	b.n	800236e <HAL_TIM_IC_Start+0xc6>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d104      	bne.n	8002366 <HAL_TIM_IC_Start+0xbe>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	e003      	b.n	800236e <HAL_TIM_IC_Start+0xc6>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <HAL_TIM_IC_Start+0xd6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	e013      	b.n	80023a6 <HAL_TIM_IC_Start+0xfe>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d104      	bne.n	800238e <HAL_TIM_IC_Start+0xe6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238c:	e00b      	b.n	80023a6 <HAL_TIM_IC_Start+0xfe>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d104      	bne.n	800239e <HAL_TIM_IC_Start+0xf6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800239c:	e003      	b.n	80023a6 <HAL_TIM_IC_Start+0xfe>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 f9ed 	bl	800378e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_TIM_IC_Start+0x19c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d022      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c6:	d01d      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_TIM_IC_Start+0x1a0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d018      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_TIM_IC_Start+0x1a4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <HAL_TIM_IC_Start+0x1a8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_TIM_IC_Start+0x1ac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_TIM_IC_Start+0x1b0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_TIM_IC_Start+0x15c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_TIM_IC_Start+0x1b4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d111      	bne.n	8002428 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b06      	cmp	r3, #6
 8002414:	d010      	beq.n	8002438 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002426:	e007      	b.n	8002438 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40010000 	.word	0x40010000
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40010400 	.word	0x40010400
 8002458:	40014000 	.word	0x40014000
 800245c:	40001800 	.word	0x40001800

08002460 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_TIM_IC_Start_IT+0x1e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800247a:	b2db      	uxtb	r3, r3
 800247c:	e013      	b.n	80024a6 <HAL_TIM_IC_Start_IT+0x46>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d104      	bne.n	800248e <HAL_TIM_IC_Start_IT+0x2e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800248a:	b2db      	uxtb	r3, r3
 800248c:	e00b      	b.n	80024a6 <HAL_TIM_IC_Start_IT+0x46>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d104      	bne.n	800249e <HAL_TIM_IC_Start_IT+0x3e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e003      	b.n	80024a6 <HAL_TIM_IC_Start_IT+0x46>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <HAL_TIM_IC_Start_IT+0x58>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e013      	b.n	80024e0 <HAL_TIM_IC_Start_IT+0x80>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d104      	bne.n	80024c8 <HAL_TIM_IC_Start_IT+0x68>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e00b      	b.n	80024e0 <HAL_TIM_IC_Start_IT+0x80>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d104      	bne.n	80024d8 <HAL_TIM_IC_Start_IT+0x78>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e003      	b.n	80024e0 <HAL_TIM_IC_Start_IT+0x80>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024e2:	7bbb      	ldrb	r3, [r7, #14]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024e8:	7b7b      	ldrb	r3, [r7, #13]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0cc      	b.n	800268c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_TIM_IC_Start_IT+0xa2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	e013      	b.n	800252a <HAL_TIM_IC_Start_IT+0xca>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d104      	bne.n	8002512 <HAL_TIM_IC_Start_IT+0xb2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002510:	e00b      	b.n	800252a <HAL_TIM_IC_Start_IT+0xca>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d104      	bne.n	8002522 <HAL_TIM_IC_Start_IT+0xc2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002520:	e003      	b.n	800252a <HAL_TIM_IC_Start_IT+0xca>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d104      	bne.n	800253a <HAL_TIM_IC_Start_IT+0xda>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	e013      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x102>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d104      	bne.n	800254a <HAL_TIM_IC_Start_IT+0xea>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002548:	e00b      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x102>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d104      	bne.n	800255a <HAL_TIM_IC_Start_IT+0xfa>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	e003      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x102>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d841      	bhi.n	80025ec <HAL_TIM_IC_Start_IT+0x18c>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <HAL_TIM_IC_Start_IT+0x110>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	080025a5 	.word	0x080025a5
 8002574:	080025ed 	.word	0x080025ed
 8002578:	080025ed 	.word	0x080025ed
 800257c:	080025ed 	.word	0x080025ed
 8002580:	080025b7 	.word	0x080025b7
 8002584:	080025ed 	.word	0x080025ed
 8002588:	080025ed 	.word	0x080025ed
 800258c:	080025ed 	.word	0x080025ed
 8002590:	080025c9 	.word	0x080025c9
 8002594:	080025ed 	.word	0x080025ed
 8002598:	080025ed 	.word	0x080025ed
 800259c:	080025ed 	.word	0x080025ed
 80025a0:	080025db 	.word	0x080025db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0202 	orr.w	r2, r2, #2
 80025b2:	60da      	str	r2, [r3, #12]
      break;
 80025b4:	e01d      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0204 	orr.w	r2, r2, #4
 80025c4:	60da      	str	r2, [r3, #12]
      break;
 80025c6:	e014      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	60da      	str	r2, [r3, #12]
      break;
 80025d8:	e00b      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0210 	orr.w	r2, r2, #16
 80025e8:	60da      	str	r2, [r3, #12]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d148      	bne.n	800268a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	6839      	ldr	r1, [r7, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f8c4 	bl	800378e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_TIM_IC_Start_IT+0x234>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d022      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002618:	d01d      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_TIM_IC_Start_IT+0x238>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d018      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_TIM_IC_Start_IT+0x23c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <HAL_TIM_IC_Start_IT+0x240>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00e      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_TIM_IC_Start_IT+0x244>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_TIM_IC_Start_IT+0x248>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_TIM_IC_Start_IT+0x1f6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_TIM_IC_Start_IT+0x24c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d111      	bne.n	800267a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d010      	beq.n	800268a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002678:	e007      	b.n	800268a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010000 	.word	0x40010000
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800
 80026a0:	40000c00 	.word	0x40000c00
 80026a4:	40010400 	.word	0x40010400
 80026a8:	40014000 	.word	0x40014000
 80026ac:	40001800 	.word	0x40001800

080026b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe f964 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fb95 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fb9b 	bl	8002e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0204 	mvn.w	r2, #4
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe f93a 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fb6b 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fb71 	bl	8002e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b08      	cmp	r3, #8
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0208 	mvn.w	r2, #8
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2204      	movs	r2, #4
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f910 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fb41 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fb47 	bl	8002e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0210 	mvn.w	r2, #16
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f8e6 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fb17 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb1d 	bl	8002e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0201 	mvn.w	r2, #1
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 faf2 	bl	8002e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f001 f890 	bl	8003980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fae1 	bl	8002e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0220 	mvn.w	r2, #32
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 f85b 	bl	800396e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_TIM_IC_ConfigChannel+0x1e>
 80028da:	2302      	movs	r3, #2
 80028dc:	e088      	b.n	80029f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11b      	bne.n	8002924 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80028fc:	f000 fd8c 	bl	8003418 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020c 	bic.w	r2, r2, #12
 800290e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6999      	ldr	r1, [r3, #24]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	e060      	b.n	80029e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d11c      	bne.n	8002964 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800293a:	f000 fe0d 	bl	8003558 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800294c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6999      	ldr	r1, [r3, #24]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	e040      	b.n	80029e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11b      	bne.n	80029a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800297a:	f000 fe58 	bl	800362e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 020c 	bic.w	r2, r2, #12
 800298c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69d9      	ldr	r1, [r3, #28]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	e021      	b.n	80029e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d11c      	bne.n	80029e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80029b8:	f000 fe74 	bl	80036a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69d9      	ldr	r1, [r3, #28]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	021a      	lsls	r2, r3, #8
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	61da      	str	r2, [r3, #28]
 80029e0:	e001      	b.n	80029e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0ae      	b.n	8002b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	f200 809f 	bhi.w	8002b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002b65 	.word	0x08002b65
 8002a34:	08002b65 	.word	0x08002b65
 8002a38:	08002b65 	.word	0x08002b65
 8002a3c:	08002aa1 	.word	0x08002aa1
 8002a40:	08002b65 	.word	0x08002b65
 8002a44:	08002b65 	.word	0x08002b65
 8002a48:	08002b65 	.word	0x08002b65
 8002a4c:	08002ae3 	.word	0x08002ae3
 8002a50:	08002b65 	.word	0x08002b65
 8002a54:	08002b65 	.word	0x08002b65
 8002a58:	08002b65 	.word	0x08002b65
 8002a5c:	08002b23 	.word	0x08002b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa98 	bl	8002f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e064      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fae8 	bl	800307c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e043      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fb3b 	bl	8003164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e023      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fb8f 	bl	800324c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
      break;
 8002b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_ConfigClockSource+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0b4      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x186>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d03e      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0xd4>
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	f200 8087 	bhi.w	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	f000 8086 	beq.w	8002cee <HAL_TIM_ConfigClockSource+0x172>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d87f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b70      	cmp	r3, #112	; 0x70
 8002bea:	d01a      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0xa6>
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d87b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b60      	cmp	r3, #96	; 0x60
 8002bf2:	d050      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x11a>
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d877      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b50      	cmp	r3, #80	; 0x50
 8002bfa:	d03c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xfa>
 8002bfc:	2b50      	cmp	r3, #80	; 0x50
 8002bfe:	d873      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d058      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d86f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b30      	cmp	r3, #48	; 0x30
 8002c0a:	d064      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d86b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d060      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d867      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d05a      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	e062      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c32:	f000 fd8d 	bl	8003750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
      break;
 8002c4e:	e04f      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c60:	f000 fd76 	bl	8003750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	609a      	str	r2, [r3, #8]
      break;
 8002c74:	e03c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fc3a 	bl	80034fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2150      	movs	r1, #80	; 0x50
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fd44 	bl	800371c <TIM_ITRx_SetConfig>
      break;
 8002c94:	e02c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fc94 	bl	80035d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2160      	movs	r1, #96	; 0x60
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fd34 	bl	800371c <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e01c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f000 fc1a 	bl	80034fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fd24 	bl	800371c <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e00c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 fd1b 	bl	800371c <TIM_ITRx_SetConfig>
      break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e031      	b.n	8002d86 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fadd 	bl	80032f4 <TIM_SlaveTimer_SetConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e018      	b.n	8002d86 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d62:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d72:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d831      	bhi.n	8002e08 <HAL_TIM_ReadCapturedValue+0x78>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_TIM_ReadCapturedValue+0x1c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002e09 	.word	0x08002e09
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002e09 	.word	0x08002e09
 8002dbc:	08002deb 	.word	0x08002deb
 8002dc0:	08002e09 	.word	0x08002e09
 8002dc4:	08002e09 	.word	0x08002e09
 8002dc8:	08002e09 	.word	0x08002e09
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002e09 	.word	0x08002e09
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e09 	.word	0x08002e09
 8002ddc:	08002dff 	.word	0x08002dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	60fb      	str	r3, [r7, #12]

      break;
 8002de8:	e00f      	b.n	8002e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	60fb      	str	r3, [r7, #12]

      break;
 8002df2:	e00a      	b.n	8002e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	60fb      	str	r3, [r7, #12]

      break;
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	60fb      	str	r3, [r7, #12]

      break;
 8002e06:	e000      	b.n	8002e0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e08:	bf00      	nop
  }

  return tmpreg;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3f      	ldr	r2, [pc, #252]	; (8002f70 <TIM_Base_SetConfig+0x110>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d00f      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <TIM_Base_SetConfig+0x118>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <TIM_Base_SetConfig+0x11c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2e      	ldr	r2, [pc, #184]	; (8002f70 <TIM_Base_SetConfig+0x110>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d02b      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d027      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d023      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <TIM_Base_SetConfig+0x118>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <TIM_Base_SetConfig+0x11c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01b      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d017      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <TIM_Base_SetConfig+0x124>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <TIM_Base_SetConfig+0x128>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00f      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_Base_SetConfig+0x12c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <TIM_Base_SetConfig+0x130>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <TIM_Base_SetConfig+0x134>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <TIM_Base_SetConfig+0x138>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <TIM_Base_SetConfig+0x110>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_Base_SetConfig+0xf8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	615a      	str	r2, [r3, #20]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	40010400 	.word	0x40010400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40014800 	.word	0x40014800
 8002f90:	40001800 	.word	0x40001800
 8002f94:	40001c00 	.word	0x40001c00
 8002f98:	40002000 	.word	0x40002000

08002f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f023 0201 	bic.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a20      	ldr	r2, [pc, #128]	; (8003074 <TIM_OC1_SetConfig+0xd8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC1_SetConfig+0x64>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <TIM_OC1_SetConfig+0xdc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0308 	bic.w	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a15      	ldr	r2, [pc, #84]	; (8003074 <TIM_OC1_SetConfig+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_OC1_SetConfig+0x8e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <TIM_OC1_SetConfig+0xdc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d111      	bne.n	800304e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	621a      	str	r2, [r3, #32]
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40010000 	.word	0x40010000
 8003078:	40010400 	.word	0x40010400

0800307c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0210 	bic.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0320 	bic.w	r3, r3, #32
 80030c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a21      	ldr	r2, [pc, #132]	; (800315c <TIM_OC2_SetConfig+0xe0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_OC2_SetConfig+0x68>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a20      	ldr	r2, [pc, #128]	; (8003160 <TIM_OC2_SetConfig+0xe4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d10d      	bne.n	8003100 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a16      	ldr	r2, [pc, #88]	; (800315c <TIM_OC2_SetConfig+0xe0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_OC2_SetConfig+0x94>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a15      	ldr	r2, [pc, #84]	; (8003160 <TIM_OC2_SetConfig+0xe4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d113      	bne.n	8003138 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800311e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40010000 	.word	0x40010000
 8003160:	40010400 	.word	0x40010400

08003164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <TIM_OC3_SetConfig+0xe0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d003      	beq.n	80031ca <TIM_OC3_SetConfig+0x66>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a20      	ldr	r2, [pc, #128]	; (8003248 <TIM_OC3_SetConfig+0xe4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <TIM_OC3_SetConfig+0xe0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_OC3_SetConfig+0x92>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <TIM_OC3_SetConfig+0xe4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40010400 	.word	0x40010400

0800324c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a11      	ldr	r2, [pc, #68]	; (80032ec <TIM_OC4_SetConfig+0xa0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC4_SetConfig+0x68>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <TIM_OC4_SetConfig+0xa4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d109      	bne.n	80032c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40010400 	.word	0x40010400

080032f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 0307 	bic.w	r3, r3, #7
 8003322:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b70      	cmp	r3, #112	; 0x70
 800333c:	d01a      	beq.n	8003374 <TIM_SlaveTimer_SetConfig+0x80>
 800333e:	2b70      	cmp	r3, #112	; 0x70
 8003340:	d860      	bhi.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
 8003342:	2b60      	cmp	r3, #96	; 0x60
 8003344:	d054      	beq.n	80033f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003346:	2b60      	cmp	r3, #96	; 0x60
 8003348:	d85c      	bhi.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
 800334a:	2b50      	cmp	r3, #80	; 0x50
 800334c:	d046      	beq.n	80033dc <TIM_SlaveTimer_SetConfig+0xe8>
 800334e:	2b50      	cmp	r3, #80	; 0x50
 8003350:	d858      	bhi.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d019      	beq.n	800338a <TIM_SlaveTimer_SetConfig+0x96>
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d854      	bhi.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d055      	beq.n	800340a <TIM_SlaveTimer_SetConfig+0x116>
 800335e:	2b30      	cmp	r3, #48	; 0x30
 8003360:	d850      	bhi.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
 8003362:	2b20      	cmp	r3, #32
 8003364:	d051      	beq.n	800340a <TIM_SlaveTimer_SetConfig+0x116>
 8003366:	2b20      	cmp	r3, #32
 8003368:	d84c      	bhi.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d04d      	beq.n	800340a <TIM_SlaveTimer_SetConfig+0x116>
 800336e:	2b10      	cmp	r3, #16
 8003370:	d04b      	beq.n	800340a <TIM_SlaveTimer_SetConfig+0x116>
 8003372:	e047      	b.n	8003404 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	f000 f9e4 	bl	8003750 <TIM_ETR_SetConfig>
      break;
 8003388:	e040      	b.n	800340c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b05      	cmp	r3, #5
 8003390:	d101      	bne.n	8003396 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e03b      	b.n	800340e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
      break;
 80033da:	e017      	b.n	800340c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e8:	461a      	mov	r2, r3
 80033ea:	f000 f887 	bl	80034fc <TIM_TI1_ConfigInputStage>
      break;
 80033ee:	e00d      	b.n	800340c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fc:	461a      	mov	r2, r3
 80033fe:	f000 f8e7 	bl	80035d0 <TIM_TI2_ConfigInputStage>
      break;
 8003402:	e003      	b.n	800340c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
      break;
 8003408:	e000      	b.n	800340c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800340a:	bf00      	nop
  }

  return status;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0201 	bic.w	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <TIM_TI1_SetConfig+0xc8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01b      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d017      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <TIM_TI1_SetConfig+0xcc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <TIM_TI1_SetConfig+0xd0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00f      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a22      	ldr	r2, [pc, #136]	; (80034ec <TIM_TI1_SetConfig+0xd4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00b      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <TIM_TI1_SetConfig+0xd8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <TIM_TI1_SetConfig+0xdc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_TI1_SetConfig+0x66>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <TIM_TI1_SetConfig+0xe0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <TIM_TI1_SetConfig+0x6a>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <TIM_TI1_SetConfig+0x6c>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e003      	b.n	80034a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f023 030a 	bic.w	r3, r3, #10
 80034bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f003 030a 	and.w	r3, r3, #10
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40010400 	.word	0x40010400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40001800 	.word	0x40001800

080034fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0201 	bic.w	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 030a 	bic.w	r3, r3, #10
 8003538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 0210 	bic.w	r2, r3, #16
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	031b      	lsls	r3, r3, #12
 800359c:	b29b      	uxth	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f023 0210 	bic.w	r2, r3, #16
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	031b      	lsls	r3, r3, #12
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800360c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800362e:	b480      	push	{r7}
 8003630:	b087      	sub	sp, #28
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	b2db      	uxtb	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800367e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	031b      	lsls	r3, r3, #12
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	031b      	lsls	r3, r3, #12
 80036fc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	f043 0307 	orr.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	609a      	str	r2, [r3, #8]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	431a      	orrs	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2201      	movs	r2, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e05a      	b.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d01d      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10c      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	40010400 	.word	0x40010400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40001800 	.word	0x40001800

080038cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e03d      	b.n	8003964 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <memset>:
 8003992:	4603      	mov	r3, r0
 8003994:	4402      	add	r2, r0
 8003996:	4293      	cmp	r3, r2
 8003998:	d100      	bne.n	800399c <memset+0xa>
 800399a:	4770      	bx	lr
 800399c:	f803 1b01 	strb.w	r1, [r3], #1
 80039a0:	e7f9      	b.n	8003996 <memset+0x4>
	...

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	2600      	movs	r6, #0
 80039a8:	4d0c      	ldr	r5, [pc, #48]	; (80039dc <__libc_init_array+0x38>)
 80039aa:	4c0d      	ldr	r4, [pc, #52]	; (80039e0 <__libc_init_array+0x3c>)
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	f000 f81a 	bl	80039ec <_init>
 80039b8:	2600      	movs	r6, #0
 80039ba:	4d0a      	ldr	r5, [pc, #40]	; (80039e4 <__libc_init_array+0x40>)
 80039bc:	4c0a      	ldr	r4, [pc, #40]	; (80039e8 <__libc_init_array+0x44>)
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	10a4      	asrs	r4, r4, #2
 80039c2:	42a6      	cmp	r6, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039cc:	4798      	blx	r3
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d6:	4798      	blx	r3
 80039d8:	3601      	adds	r6, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	08003a1c 	.word	0x08003a1c
 80039e0:	08003a1c 	.word	0x08003a1c
 80039e4:	08003a1c 	.word	0x08003a1c
 80039e8:	08003a20 	.word	0x08003a20

080039ec <_init>:
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	bf00      	nop
 80039f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f2:	bc08      	pop	{r3}
 80039f4:	469e      	mov	lr, r3
 80039f6:	4770      	bx	lr

080039f8 <_fini>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	bf00      	nop
 80039fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fe:	bc08      	pop	{r3}
 8003a00:	469e      	mov	lr, r3
 8003a02:	4770      	bx	lr

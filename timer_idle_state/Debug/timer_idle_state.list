
timer_idle_state.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002054  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e8  080021e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021f0  080021f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f4  080021f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080021f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08002208  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002208  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088f6  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001656  00000000  00000000  00028972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  00029fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000731  00000000  00000000  0002a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e782  00000000  00000000  0002b049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1d1  00000000  00000000  000497cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc70f  00000000  00000000  0005399c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026e4  00000000  00000000  001100ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00112790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000010 	.word	0x20000010
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080021c0 	.word	0x080021c0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000014 	.word	0x20000014
 80001c0:	080021c0 	.word	0x080021c0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	static int i = 0;
	static int prev_state = 1;
	if (i < 10 && prev_state)
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b09      	cmp	r3, #9
 80004d2:	dc17      	bgt.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x40>
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d013      	beq.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	4818      	ldr	r0, [pc, #96]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80004e2:	f000 fd0d 	bl	8000f00 <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d105      	bne.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x34>
			i++;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	e005      	b.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x40>
		else
		{
			i = 0;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
			prev_state = 0;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
		}
	}
	if (i == 10)
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b0a      	cmp	r3, #10
 800050a:	d10b      	bne.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000514:	f000 fd0b 	bl	8000f2e <HAL_GPIO_WritePin>
		i = 0;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim3);
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000520:	f001 f9da 	bl	80018d8 <HAL_TIM_Base_Stop>
	}
	if (i == 0)
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		prev_state = 1;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000074 	.word	0x20000074
 8000540:	20000000 	.word	0x20000000
 8000544:	40020800 	.word	0x40020800
 8000548:	40020400 	.word	0x40020400
 800054c:	2000002c 	.word	0x2000002c

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 f9ba 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f824 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8ac 	bl	80006b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000560:	f000 f85c 	bl	800061c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET)
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <main+0x4c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b01      	cmp	r3, #1
 8000570:	d104      	bne.n	800057c <main+0x2c>
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <main+0x4c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f06f 0201 	mvn.w	r2, #1
 800057a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <main+0x4c>)
 800057e:	f001 f9d1 	bl	8001924 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x50>)
 8000588:	f000 fcba 	bl	8000f00 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1f7      	bne.n	8000582 <main+0x32>
				HAL_TIM_Base_Start(&htim3);
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <main+0x4c>)
 8000594:	f001 f93a 	bl	800180c <HAL_TIM_Base_Start>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000598:	e7f3      	b.n	8000582 <main+0x32>
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	40020800 	.word	0x40020800

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b092      	sub	sp, #72	; 0x48
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fdd8 	bl	8002168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ce:	2310      	movs	r3, #16
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fcc0 	bl	8000f60 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005e6:	f000 f8bb 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff00 	bl	8001408 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800060e:	f000 f8a7 	bl	8000760 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3748      	adds	r7, #72	; 0x48
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_TIM3_Init+0x94>)
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <MX_TIM3_Init+0x98>)
 800063c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600 - 1;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000640:	f240 623f 	movw	r2, #1599	; 0x63f
 8000644:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2 - 1;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_TIM3_Init+0x94>)
 800064e:	2201      	movs	r2, #1
 8000650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_TIM3_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000660:	f001 f884 	bl	800176c <HAL_TIM_Base_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f879 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_TIM3_Init+0x94>)
 800067c:	f001 fac8 	bl	8001c10 <HAL_TIM_ConfigClockSource>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f86b 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_TIM3_Init+0x94>)
 8000698:	f001 fcda 	bl	8002050 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80006a2:	f000 f85d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	40000400 	.word	0x40000400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0x9c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <MX_GPIO_Init+0x9c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_GPIO_Init+0x9c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_GPIO_Init+0x9c>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <MX_GPIO_Init+0xa0>)
 800070e:	f000 fc0e 	bl	8000f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8;
 8000712:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_GPIO_Init+0xa4>)
 8000728:	f000 fa4c 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800072c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xa0>)
 8000746:	f000 fa3d 	bl	8000bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x48>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x48>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x48>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x48>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_MspInit+0x48>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x48>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_TIM_Base_MspInit+0x48>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d115      	bne.n	80007f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_TIM_Base_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <HAL_TIM_Base_MspInit+0x4c>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_TIM_Base_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	201d      	movs	r0, #29
 80007ec:	f000 f9b3 	bl	8000b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007f0:	201d      	movs	r0, #29
 80007f2:	f000 f9cc 	bl	8000b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40000400 	.word	0x40000400
 8000804:	40023800 	.word	0x40023800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f88f 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <TIM3_IRQHandler+0x10>)
 800085e:	f001 f8cf 	bl	8001a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000002c 	.word	0x2000002c

0800086c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800087c:	f7ff fff6 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 fc67 	bl	8002178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008aa:	f7ff fe51 	bl	8000550 <main>
  bx  lr
 80008ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008bc:	080021f8 	.word	0x080021f8
  ldr r2, =_sbss
 80008c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008c4:	2000007c 	.word	0x2000007c

080008c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <HAL_Init+0x40>)
 80008d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_Init+0x40>)
 80008e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_Init+0x40>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f923 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	200f      	movs	r0, #15
 80008fc:	f000 f808 	bl	8000910 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff ff34 	bl	800076c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023c00 	.word	0x40023c00

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f93b 	bl	8000baa <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f903 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_InitTick+0x5c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000004 	.word	0x20000004
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000008 	.word	0x20000008

08000970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_IncTick+0x20>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	2000000c 	.word	0x2000000c
 8000990:	20000078 	.word	0x20000078

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000078 	.word	0x20000078

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <__NVIC_EnableIRQ+0x34>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff90 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff2d 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff42 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff90 	bl	8000a98 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5f 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff35 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffa2 	bl	8000afc <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e16f      	b.n	8000eb4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8161 	beq.w	8000eae <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d005      	beq.n	8000c04 <HAL_GPIO_Init+0x40>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d130      	bne.n	8000c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	f003 0201 	and.w	r2, r3, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d017      	beq.n	8000ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d123      	bne.n	8000cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	6939      	ldr	r1, [r7, #16]
 8000cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0203 	and.w	r2, r3, #3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80bb 	beq.w	8000eae <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	4b64      	ldr	r3, [pc, #400]	; (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	4a63      	ldr	r2, [pc, #396]	; (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6453      	str	r3, [r2, #68]	; 0x44
 8000d48:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d54:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <HAL_GPIO_Init+0x310>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <HAL_GPIO_Init+0x314>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d031      	beq.n	8000de4 <HAL_GPIO_Init+0x220>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a56      	ldr	r2, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x318>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d02b      	beq.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <HAL_GPIO_Init+0x31c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d025      	beq.n	8000ddc <HAL_GPIO_Init+0x218>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a54      	ldr	r2, [pc, #336]	; (8000ee4 <HAL_GPIO_Init+0x320>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d01f      	beq.n	8000dd8 <HAL_GPIO_Init+0x214>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a53      	ldr	r2, [pc, #332]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d019      	beq.n	8000dd4 <HAL_GPIO_Init+0x210>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x328>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d013      	beq.n	8000dd0 <HAL_GPIO_Init+0x20c>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <HAL_GPIO_Init+0x32c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x208>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a50      	ldr	r2, [pc, #320]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x204>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x334>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x200>
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	e010      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	e00e      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000dc8:	2307      	movs	r3, #7
 8000dca:	e00c      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000dcc:	2306      	movs	r3, #6
 8000dce:	e00a      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	e008      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e006      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e004      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <HAL_GPIO_Init+0x222>
 8000de4:	2300      	movs	r3, #0
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	f002 0203 	and.w	r2, r2, #3
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	4093      	lsls	r3, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df8:	4936      	ldr	r1, [pc, #216]	; (8000ed4 <HAL_GPIO_Init+0x310>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a34      	ldr	r2, [pc, #208]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e54:	4a29      	ldr	r2, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f47f ae88 	bne.w	8000bd4 <HAL_GPIO_Init+0x10>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40021c00 	.word	0x40021c00
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	40013c00 	.word	0x40013c00

08000f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3e:	787b      	ldrb	r3, [r7, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e23b      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d050      	beq.n	8001020 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f7e:	4b9e      	ldr	r3, [pc, #632]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d00c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8a:	4b9b      	ldr	r3, [pc, #620]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d112      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f96:	4b98      	ldr	r3, [pc, #608]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fa2:	d10b      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	4b94      	ldr	r3, [pc, #592]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d036      	beq.n	800101e <HAL_RCC_OscConfig+0xbe>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d132      	bne.n	800101e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e216      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4b8e      	ldr	r3, [pc, #568]	; (80011fc <HAL_RCC_OscConfig+0x29c>)
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d013      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fce1 	bl	8000994 <HAL_GetTick>
 8000fd2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fcdd 	bl	8000994 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b64      	cmp	r3, #100	; 0x64
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e200      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe8:	4b83      	ldr	r3, [pc, #524]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x76>
 8000ff4:	e014      	b.n	8001020 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fccd 	bl	8000994 <HAL_GetTick>
 8000ffa:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fcc9 	bl	8000994 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e1ec      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001010:	4b79      	ldr	r3, [pc, #484]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x9e>
 800101c:	e000      	b.n	8001020 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d077      	beq.n	800111c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800102c:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00b      	beq.n	8001050 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001038:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001040:	2b08      	cmp	r3, #8
 8001042:	d126      	bne.n	8001092 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001044:	4b6c      	ldr	r3, [pc, #432]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d120      	bne.n	8001092 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001050:	4b69      	ldr	r3, [pc, #420]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d001      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e1c0      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	21f8      	movs	r1, #248	; 0xf8
 8001076:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	69b9      	ldr	r1, [r7, #24]
 800107a:	fa91 f1a1 	rbit	r1, r1
 800107e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	fab1 f181 	clz	r1, r1
 8001086:	b2c9      	uxtb	r1, r1
 8001088:	408b      	lsls	r3, r1
 800108a:	495b      	ldr	r1, [pc, #364]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001090:	e044      	b.n	800111c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d02a      	beq.n	80010f0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109a:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_OscConfig+0x2a0>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc78 	bl	8000994 <HAL_GetTick>
 80010a4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fc74 	bl	8000994 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e197      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	21f8      	movs	r1, #248	; 0xf8
 80010d4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	6939      	ldr	r1, [r7, #16]
 80010d8:	fa91 f1a1 	rbit	r1, r1
 80010dc:	60f9      	str	r1, [r7, #12]
  return result;
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	fab1 f181 	clz	r1, r1
 80010e4:	b2c9      	uxtb	r1, r1
 80010e6:	408b      	lsls	r3, r1
 80010e8:	4943      	ldr	r1, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
 80010ee:	e015      	b.n	800111c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f0:	4b43      	ldr	r3, [pc, #268]	; (8001200 <HAL_RCC_OscConfig+0x2a0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fc4d 	bl	8000994 <HAL_GetTick>
 80010fa:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff fc49 	bl	8000994 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e16c      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001110:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d030      	beq.n	800118a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d016      	beq.n	800115e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_RCC_OscConfig+0x2a4>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fc2d 	bl	8000994 <HAL_GetTick>
 800113a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fc29 	bl	8000994 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e14c      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8001152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x1de>
 800115c:	e015      	b.n	800118a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_RCC_OscConfig+0x2a4>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fc16 	bl	8000994 <HAL_GetTick>
 8001168:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fc12 	bl	8000994 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e135      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 8001180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8087 	beq.w	80012a6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d110      	bne.n	80011cc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_RCC_OscConfig+0x298>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_RCC_OscConfig+0x2a8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_RCC_OscConfig+0x2a8>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_OscConfig+0x2a8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d122      	bne.n	800122a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_RCC_OscConfig+0x2a8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_RCC_OscConfig+0x2a8>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fbd0 	bl	8000994 <HAL_GetTick>
 80011f4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	e012      	b.n	800121e <HAL_RCC_OscConfig+0x2be>
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40023802 	.word	0x40023802
 8001200:	42470000 	.word	0x42470000
 8001204:	42470e80 	.word	0x42470e80
 8001208:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120c:	f7ff fbc2 	bl	8000994 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e0e5      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_RCC_OscConfig+0x494>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HAL_RCC_OscConfig+0x498>)
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d015      	beq.n	8001268 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fbaa 	bl	8000994 <HAL_GetTick>
 8001240:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fba6 	bl	8000994 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0c7      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125a:	4b68      	ldr	r3, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0ee      	beq.n	8001244 <HAL_RCC_OscConfig+0x2e4>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fb94 	bl	8000994 <HAL_GetTick>
 800126c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff fb90 	bl	8000994 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e0b1      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001286:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ee      	bne.n	8001270 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b58      	ldr	r3, [pc, #352]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a57      	ldr	r2, [pc, #348]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 809c 	beq.w	80013e8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b0:	4b52      	ldr	r3, [pc, #328]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <HAL_RCC_OscConfig+0x4a0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb63 	bl	8000994 <HAL_GetTick>
 80012ce:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb5f 	bl	8000994 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b64      	cmp	r3, #100	; 0x64
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e082      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_OscConfig+0x4a4>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	69d1      	ldr	r1, [r2, #28]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6a12      	ldr	r2, [r2, #32]
 8001300:	4311      	orrs	r1, r2
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001306:	0192      	lsls	r2, r2, #6
 8001308:	4311      	orrs	r1, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800130e:	0612      	lsls	r2, r2, #24
 8001310:	4311      	orrs	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001316:	0852      	lsrs	r2, r2, #1
 8001318:	3a01      	subs	r2, #1
 800131a:	0412      	lsls	r2, r2, #16
 800131c:	430a      	orrs	r2, r1
 800131e:	4937      	ldr	r1, [pc, #220]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x4a0>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb33 	bl	8000994 <HAL_GetTick>
 800132e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb2f 	bl	8000994 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b64      	cmp	r3, #100	; 0x64
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e052      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x3d2>
 8001350:	e04a      	b.n	80013e8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_RCC_OscConfig+0x4a0>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb1c 	bl	8000994 <HAL_GetTick>
 800135c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb18 	bl	8000994 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e03b      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x400>
 800137e:	e033      	b.n	80013e8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e02e      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x49c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	d121      	bne.n	80013e4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d11a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013b4:	4013      	ands	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013ba:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013bc:	4293      	cmp	r3, r2
 80013be:	d111      	bne.n	80013e4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	3b01      	subs	r3, #1
 80013ce:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000
 80013f8:	40023870 	.word	0x40023870
 80013fc:	40023800 	.word	0x40023800
 8001400:	42470060 	.word	0x42470060
 8001404:	f0bc8000 	.word	0xf0bc8000

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0d2      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d90c      	bls.n	8001444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0be      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a5b      	ldr	r2, [pc, #364]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001474:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a55      	ldr	r2, [pc, #340]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800147a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4950      	ldr	r1, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d040      	beq.n	8001520 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d115      	bne.n	80014de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e085      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e079      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e071      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f023 0203 	bic.w	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4939      	ldr	r1, [pc, #228]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f0:	f7ff fa50 	bl	8000994 <HAL_GetTick>
 80014f4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	e00a      	b.n	800150e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f8:	f7ff fa4c 	bl	8000994 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e059      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 020c 	and.w	r2, r3, #12
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	429a      	cmp	r2, r3
 800151e:	d1eb      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d20c      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e03c      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	491b      	ldr	r1, [pc, #108]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4913      	ldr	r1, [pc, #76]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001586:	f000 f82b 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800158a:	4601      	mov	r1, r0
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001594:	22f0      	movs	r2, #240	; 0xf0
 8001596:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	fa92 f2a2 	rbit	r2, r2
 800159e:	60fa      	str	r2, [r7, #12]
  return result;
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	fab2 f282 	clz	r2, r2
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	40d3      	lsrs	r3, r2
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1cc>)
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	fa21 f303 	lsr.w	r3, r1, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1d0>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1d4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f9a8 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00
 80015d0:	40023800 	.word	0x40023800
 80015d4:	080021d8 	.word	0x080021d8
 80015d8:	20000004 	.word	0x20000004
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e4:	b090      	sub	sp, #64	; 0x40
 80015e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d00d      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x40>
 8001604:	2b08      	cmp	r3, #8
 8001606:	f200 80a2 	bhi.w	800174e <HAL_RCC_GetSysClockFreq+0x16e>
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x34>
 800160e:	2b04      	cmp	r3, #4
 8001610:	d003      	beq.n	800161a <HAL_RCC_GetSysClockFreq+0x3a>
 8001612:	e09c      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_GetSysClockFreq+0x184>)
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001618:	e09c      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_GetSysClockFreq+0x188>)
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800161e:	e099      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d027      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	2200      	movs	r2, #0
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	627a      	str	r2, [r7, #36]	; 0x24
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001648:	2100      	movs	r1, #0
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_GetSysClockFreq+0x188>)
 800164c:	fb03 f201 	mul.w	r2, r3, r1
 8001650:	2300      	movs	r3, #0
 8001652:	fb00 f303 	mul.w	r3, r0, r3
 8001656:	4413      	add	r3, r2
 8001658:	4a43      	ldr	r2, [pc, #268]	; (8001768 <HAL_RCC_GetSysClockFreq+0x188>)
 800165a:	fba0 2102 	umull	r2, r1, r0, r2
 800165e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001660:	62ba      	str	r2, [r7, #40]	; 0x28
 8001662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001664:	4413      	add	r3, r2
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	2200      	movs	r2, #0
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	61fa      	str	r2, [r7, #28]
 8001670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001674:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001678:	f7fe fda4 	bl	80001c4 <__aeabi_uldivmod>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4613      	mov	r3, r2
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001684:	e055      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	2200      	movs	r2, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	617a      	str	r2, [r7, #20]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001698:	f04f 0b00 	mov.w	fp, #0
 800169c:	4652      	mov	r2, sl
 800169e:	465b      	mov	r3, fp
 80016a0:	f04f 0000 	mov.w	r0, #0
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	0159      	lsls	r1, r3, #5
 80016aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ae:	0150      	lsls	r0, r2, #5
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	ebb2 080a 	subs.w	r8, r2, sl
 80016b8:	eb63 090b 	sbc.w	r9, r3, fp
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016c8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016cc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016d0:	ebb2 0408 	subs.w	r4, r2, r8
 80016d4:	eb63 0509 	sbc.w	r5, r3, r9
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	00eb      	lsls	r3, r5, #3
 80016e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016e6:	00e2      	lsls	r2, r4, #3
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	eb14 030a 	adds.w	r3, r4, sl
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	eb45 030b 	adc.w	r3, r5, fp
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001704:	4629      	mov	r1, r5
 8001706:	028b      	lsls	r3, r1, #10
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	4604      	mov	r4, r0
 800170e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001712:	4601      	mov	r1, r0
 8001714:	028a      	lsls	r2, r1, #10
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	2200      	movs	r2, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	60fa      	str	r2, [r7, #12]
 8001722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001726:	f7fe fd4d 	bl	80001c4 <__aeabi_uldivmod>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4613      	mov	r3, r2
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	3301      	adds	r3, #1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800174c:	e002      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetSysClockFreq+0x184>)
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001752:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001756:	4618      	mov	r0, r3
 8001758:	3740      	adds	r7, #64	; 0x40
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	00f42400 	.word	0x00f42400
 8001768:	017d7840 	.word	0x017d7840

0800176c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e041      	b.n	8001802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff f810 	bl	80007b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3304      	adds	r3, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f000 fb1c 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d001      	beq.n	8001824 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e046      	b.n	80018b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_TIM_Base_Start+0xb0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d022      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d01d      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_TIM_Base_Start+0xb4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d018      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_TIM_Base_Start+0xb8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_TIM_Base_Start+0xbc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00e      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_TIM_Base_Start+0xc0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d009      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_TIM_Base_Start+0xc4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d004      	beq.n	800187c <HAL_TIM_Base_Start+0x70>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_TIM_Base_Start+0xc8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d111      	bne.n	80018a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b06      	cmp	r3, #6
 800188c:	d010      	beq.n	80018b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189e:	e007      	b.n	80018b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40000800 	.word	0x40000800
 80018c8:	40000c00 	.word	0x40000c00
 80018cc:	40010400 	.word	0x40010400
 80018d0:	40014000 	.word	0x40014000
 80018d4:	40001800 	.word	0x40001800

080018d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10f      	bne.n	8001910 <HAL_TIM_Base_Stop+0x38>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	f240 4344 	movw	r3, #1092	; 0x444
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HAL_TIM_Base_Stop+0x38>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d001      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e04e      	b.n	80019da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d022      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001966:	d01d      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_TIM_Base_Start_IT+0xc8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00e      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x80>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_TIM_Base_Start_IT+0xd8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d111      	bne.n	80019c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d010      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c6:	e007      	b.n	80019d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40000800 	.word	0x40000800
 80019f0:	40000c00 	.word	0x40000c00
 80019f4:	40010400 	.word	0x40010400
 80019f8:	40014000 	.word	0x40014000
 80019fc:	40001800 	.word	0x40001800

08001a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d122      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11b      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0202 	mvn.w	r2, #2
 8001a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9b4 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f9a7 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f9b6 	bl	8001dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0204 	mvn.w	r2, #4
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f98a 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f97d 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f98c 	bl	8001dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0208 	mvn.w	r2, #8
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f960 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f953 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f962 	bl	8001dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0210 	mvn.w	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f936 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f929 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f938 	bl	8001dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0201 	mvn.w	r2, #1
 8001b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fca0 	bl	80004c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fad3 	bl	8002156 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8fc 	bl	8001dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa9e 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_TIM_ConfigClockSource+0x1c>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e0b4      	b.n	8001d96 <HAL_TIM_ConfigClockSource+0x186>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c64:	d03e      	beq.n	8001ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8001c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6a:	f200 8087 	bhi.w	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c72:	f000 8086 	beq.w	8001d82 <HAL_TIM_ConfigClockSource+0x172>
 8001c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7a:	d87f      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001c7c:	2b70      	cmp	r3, #112	; 0x70
 8001c7e:	d01a      	beq.n	8001cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8001c80:	2b70      	cmp	r3, #112	; 0x70
 8001c82:	d87b      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001c84:	2b60      	cmp	r3, #96	; 0x60
 8001c86:	d050      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0x11a>
 8001c88:	2b60      	cmp	r3, #96	; 0x60
 8001c8a:	d877      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001c8c:	2b50      	cmp	r3, #80	; 0x50
 8001c8e:	d03c      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0xfa>
 8001c90:	2b50      	cmp	r3, #80	; 0x50
 8001c92:	d873      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d058      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x13a>
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d86f      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001c9c:	2b30      	cmp	r3, #48	; 0x30
 8001c9e:	d064      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0x15a>
 8001ca0:	2b30      	cmp	r3, #48	; 0x30
 8001ca2:	d86b      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d060      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0x15a>
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d867      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05c      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0x15a>
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d05a      	beq.n	8001d6a <HAL_TIM_ConfigClockSource+0x15a>
 8001cb4:	e062      	b.n	8001d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cc6:	f000 f9a4 	bl	8002012 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	609a      	str	r2, [r3, #8]
      break;
 8001ce2:	e04f      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cf4:	f000 f98d 	bl	8002012 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d06:	609a      	str	r2, [r3, #8]
      break;
 8001d08:	e03c      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d16:	461a      	mov	r2, r3
 8001d18:	f000 f904 	bl	8001f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2150      	movs	r1, #80	; 0x50
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f95b 	bl	8001fde <TIM_ITRx_SetConfig>
      break;
 8001d28:	e02c      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d36:	461a      	mov	r2, r3
 8001d38:	f000 f922 	bl	8001f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2160      	movs	r1, #96	; 0x60
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f94b 	bl	8001fde <TIM_ITRx_SetConfig>
      break;
 8001d48:	e01c      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d56:	461a      	mov	r2, r3
 8001d58:	f000 f8e4 	bl	8001f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f93b 	bl	8001fde <TIM_ITRx_SetConfig>
      break;
 8001d68:	e00c      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f000 f932 	bl	8001fde <TIM_ITRx_SetConfig>
      break;
 8001d7a:	e003      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d80:	e000      	b.n	8001d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <TIM_Base_SetConfig+0x110>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d00f      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3c      	ldr	r2, [pc, #240]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00b      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a39      	ldr	r2, [pc, #228]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ef8 <TIM_Base_SetConfig+0x110>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d027      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d023      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01b      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a28      	ldr	r2, [pc, #160]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d017      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <TIM_Base_SetConfig+0x128>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00f      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <TIM_Base_SetConfig+0x12c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00b      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <TIM_Base_SetConfig+0x130>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <TIM_Base_SetConfig+0x134>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d003      	beq.n	8001e9a <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <TIM_Base_SetConfig+0x138>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <TIM_Base_SetConfig+0x110>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d103      	bne.n	8001ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40000c00 	.word	0x40000c00
 8001f08:	40010400 	.word	0x40010400
 8001f0c:	40014000 	.word	0x40014000
 8001f10:	40014400 	.word	0x40014400
 8001f14:	40014800 	.word	0x40014800
 8001f18:	40001800 	.word	0x40001800
 8001f1c:	40001c00 	.word	0x40001c00
 8001f20:	40002000 	.word	0x40002000

08001f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	f023 0201 	bic.w	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f023 030a 	bic.w	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	621a      	str	r2, [r3, #32]
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f023 0210 	bic.w	r2, r3, #16
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	031b      	lsls	r3, r3, #12
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	621a      	str	r2, [r3, #32]
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f043 0307 	orr.w	r3, r3, #7
 8002000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002012:	b480      	push	{r7}
 8002014:	b087      	sub	sp, #28
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800202c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	021a      	lsls	r2, r3, #8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	431a      	orrs	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4313      	orrs	r3, r2
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	609a      	str	r2, [r3, #8]
}
 8002046:	bf00      	nop
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002064:	2302      	movs	r3, #2
 8002066:	e05a      	b.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a20      	ldr	r2, [pc, #128]	; (8002128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d022      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d01d      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d018      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10c      	bne.n	800210c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4313      	orrs	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40010400 	.word	0x40010400
 800213c:	40014000 	.word	0x40014000
 8002140:	40001800 	.word	0x40001800

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <memset>:
 8002168:	4603      	mov	r3, r0
 800216a:	4402      	add	r2, r0
 800216c:	4293      	cmp	r3, r2
 800216e:	d100      	bne.n	8002172 <memset+0xa>
 8002170:	4770      	bx	lr
 8002172:	f803 1b01 	strb.w	r1, [r3], #1
 8002176:	e7f9      	b.n	800216c <memset+0x4>

08002178 <__libc_init_array>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	2600      	movs	r6, #0
 800217c:	4d0c      	ldr	r5, [pc, #48]	; (80021b0 <__libc_init_array+0x38>)
 800217e:	4c0d      	ldr	r4, [pc, #52]	; (80021b4 <__libc_init_array+0x3c>)
 8002180:	1b64      	subs	r4, r4, r5
 8002182:	10a4      	asrs	r4, r4, #2
 8002184:	42a6      	cmp	r6, r4
 8002186:	d109      	bne.n	800219c <__libc_init_array+0x24>
 8002188:	f000 f81a 	bl	80021c0 <_init>
 800218c:	2600      	movs	r6, #0
 800218e:	4d0a      	ldr	r5, [pc, #40]	; (80021b8 <__libc_init_array+0x40>)
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <__libc_init_array+0x44>)
 8002192:	1b64      	subs	r4, r4, r5
 8002194:	10a4      	asrs	r4, r4, #2
 8002196:	42a6      	cmp	r6, r4
 8002198:	d105      	bne.n	80021a6 <__libc_init_array+0x2e>
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a0:	4798      	blx	r3
 80021a2:	3601      	adds	r6, #1
 80021a4:	e7ee      	b.n	8002184 <__libc_init_array+0xc>
 80021a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021aa:	4798      	blx	r3
 80021ac:	3601      	adds	r6, #1
 80021ae:	e7f2      	b.n	8002196 <__libc_init_array+0x1e>
 80021b0:	080021f0 	.word	0x080021f0
 80021b4:	080021f0 	.word	0x080021f0
 80021b8:	080021f0 	.word	0x080021f0
 80021bc:	080021f4 	.word	0x080021f4

080021c0 <_init>:
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c2:	bf00      	nop
 80021c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c6:	bc08      	pop	{r3}
 80021c8:	469e      	mov	lr, r3
 80021ca:	4770      	bx	lr

080021cc <_fini>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr

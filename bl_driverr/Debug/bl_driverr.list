
bl_driverr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f90  08004f90  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004f90  08004f90  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f90  08004f90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000010  08004fa8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004fa8  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2f0  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002211  00000000  00000000  0002e36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b69  00000000  00000000  00031410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018373  00000000  00000000  00031f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118c4  00000000  00000000  0004a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ce1a  00000000  00000000  0005bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034ac  00000000  00000000  000f89cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fbe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ee4 	.word	0x08004ee4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004ee4 	.word	0x08004ee4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fead 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f855 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fb97 	bl	8000960 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000232:	f000 f8d9 	bl	80003e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000236:	f000 f9a1 	bl	800057c <MX_TIM3_Init>
  MX_TIM14_Init();
 800023a:	f000 fa37 	bl	80006ac <MX_TIM14_Init>
  MX_TIM16_Init();
 800023e:	f000 fa83 	bl	8000748 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000242:	f000 fb07 	bl	8000854 <MX_TIM17_Init>
  MX_I2C2_Init();
 8000246:	f000 f88f 	bl	8000368 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800024a:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <main+0x98>)
 800024c:	2100      	movs	r1, #0
 800024e:	0018      	movs	r0, r3
 8000250:	f003 fcd2 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x9c>)
 8000256:	2100      	movs	r1, #0
 8000258:	0018      	movs	r0, r3
 800025a:	f003 fccd 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <main+0x9c>)
 8000260:	2108      	movs	r1, #8
 8000262:	0018      	movs	r0, r3
 8000264:	f003 fcc8 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0x9c>)
 800026a:	210c      	movs	r1, #12
 800026c:	0018      	movs	r0, r3
 800026e:	f003 fcc3 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <main+0xa0>)
 8000274:	2100      	movs	r1, #0
 8000276:	0018      	movs	r0, r3
 8000278:	f003 fcbe 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0xa4>)
 800027e:	2100      	movs	r1, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f003 fcb9 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <main+0xa8>)
 8000288:	2100      	movs	r1, #0
 800028a:	0018      	movs	r0, r3
 800028c:	f003 fcb4 	bl	8003bf8 <HAL_TIM_PWM_Start>
  {
	//  ina219_calibration();
	// ina219_reading();

	  // LTR
	  HAL_I2C_Master_Transmit(&hi2c2, ADDRESS << 1, &ID, 1, HAL_MAX_DELAY);
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <main+0xac>)
 8000292:	480f      	ldr	r0, [pc, #60]	; (80002d0 <main+0xb0>)
 8000294:	2301      	movs	r3, #1
 8000296:	425b      	negs	r3, r3
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2301      	movs	r3, #1
 800029c:	2152      	movs	r1, #82	; 0x52
 800029e:	f001 fa45 	bl	800172c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2, ADDRESS << 1, rxData, 2, HAL_MAX_DELAY);
 80002a2:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <main+0xb4>)
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <main+0xb0>)
 80002a6:	2301      	movs	r3, #1
 80002a8:	425b      	negs	r3, r3
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2302      	movs	r3, #2
 80002ae:	2152      	movs	r1, #82	; 0x52
 80002b0:	f001 fb44 	bl	800193c <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Transmit(&hi2c2, ADDRESS << 1, &ID, 1, HAL_MAX_DELAY);
 80002b4:	e7ec      	b.n	8000290 <main+0x70>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000080 	.word	0x20000080
 80002bc:	200000cc 	.word	0x200000cc
 80002c0:	20000118 	.word	0x20000118
 80002c4:	20000164 	.word	0x20000164
 80002c8:	200001b0 	.word	0x200001b0
 80002cc:	20000000 	.word	0x20000000
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	200001fc 	.word	0x200001fc

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b093      	sub	sp, #76	; 0x4c
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2410      	movs	r4, #16
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2338      	movs	r3, #56	; 0x38
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f004 fdcf 	bl	8004e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f004 fdc8 	bl	8004e8c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	0018      	movs	r0, r3
 8000302:	f002 fd05 	bl	8002d10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	193b      	adds	r3, r7, r4
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	193b      	adds	r3, r7, r4
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2240      	movs	r2, #64	; 0x40
 800031e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	193b      	adds	r3, r7, r4
 8000328:	0018      	movs	r0, r3
 800032a:	f002 fd31 	bl	8002d90 <HAL_RCC_OscConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000332:	f000 fb37 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	003b      	movs	r3, r7
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	003b      	movs	r3, r7
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	003b      	movs	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034e:	003b      	movs	r3, r7
 8000350:	2100      	movs	r1, #0
 8000352:	0018      	movs	r0, r3
 8000354:	f003 f836 	bl	80033c4 <HAL_RCC_ClockConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800035c:	f000 fb22 	bl	80009a4 <Error_Handler>
  }
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b013      	add	sp, #76	; 0x4c
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C2_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_I2C2_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_I2C2_Init+0x74>)
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_I2C2_Init+0x7c>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_I2C2_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C2_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_I2C2_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C2_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C2_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_I2C2_Init+0x74>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f92b 	bl	8001600 <HAL_I2C_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003ae:	f000 faf9 	bl	80009a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_I2C2_Init+0x74>)
 80003b4:	2100      	movs	r1, #0
 80003b6:	0018      	movs	r0, r3
 80003b8:	f002 fc12 	bl	8002be0 <HAL_I2CEx_ConfigAnalogFilter>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003c0:	f000 faf0 	bl	80009a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <MX_I2C2_Init+0x74>)
 80003c6:	2100      	movs	r1, #0
 80003c8:	0018      	movs	r0, r3
 80003ca:	f002 fc55 	bl	8002c78 <HAL_I2CEx_ConfigDigitalFilter>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003d2:	f000 fae7 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000002c 	.word	0x2000002c
 80003e0:	40005800 	.word	0x40005800
 80003e4:	00303d5b 	.word	0x00303d5b

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b09c      	sub	sp, #112	; 0x70
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	2360      	movs	r3, #96	; 0x60
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f004 fd47 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	2354      	movs	r3, #84	; 0x54
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	230c      	movs	r3, #12
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f004 fd3f 	bl	8004e8c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040e:	2338      	movs	r3, #56	; 0x38
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	0018      	movs	r0, r3
 8000414:	231c      	movs	r3, #28
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f004 fd37 	bl	8004e8c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	0018      	movs	r0, r3
 8000422:	2334      	movs	r3, #52	; 0x34
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f004 fd30 	bl	8004e8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800042c:	4b51      	ldr	r3, [pc, #324]	; (8000574 <MX_TIM1_Init+0x18c>)
 800042e:	4a52      	ldr	r2, [pc, #328]	; (8000578 <MX_TIM1_Init+0x190>)
 8000430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16 - 1;
 8000432:	4b50      	ldr	r3, [pc, #320]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000434:	220f      	movs	r2, #15
 8000436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b4e      	ldr	r3, [pc, #312]	; (8000574 <MX_TIM1_Init+0x18c>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 800043e:	4b4d      	ldr	r3, [pc, #308]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000440:	2263      	movs	r2, #99	; 0x63
 8000442:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000444:	4b4b      	ldr	r3, [pc, #300]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800044a:	4b4a      	ldr	r3, [pc, #296]	; (8000574 <MX_TIM1_Init+0x18c>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b48      	ldr	r3, [pc, #288]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000456:	4b47      	ldr	r3, [pc, #284]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000458:	0018      	movs	r0, r3
 800045a:	f003 fb15 	bl	8003a88 <HAL_TIM_Base_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000462:	f000 fa9f 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000466:	2160      	movs	r1, #96	; 0x60
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0152      	lsls	r2, r2, #5
 800046e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000470:	187a      	adds	r2, r7, r1
 8000472:	4b40      	ldr	r3, [pc, #256]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f003 feda 	bl	8004230 <HAL_TIM_ConfigClockSource>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000480:	f000 fa90 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fb56 	bl	8003b38 <HAL_TIM_PWM_Init>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000490:	f000 fa88 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000494:	2154      	movs	r1, #84	; 0x54
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a8:	187a      	adds	r2, r7, r1
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <MX_TIM1_Init+0x18c>)
 80004ac:	0011      	movs	r1, r2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f004 fbc0 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80004b8:	f000 fa74 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004bc:	2138      	movs	r1, #56	; 0x38
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2260      	movs	r2, #96	; 0x60
 80004c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 60;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	223c      	movs	r2, #60	; 0x3c
 80004c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004e8:	1879      	adds	r1, r7, r1
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_TIM1_Init+0x18c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fd9e 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80004f8:	f000 fa54 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	0192      	lsls	r2, r2, #6
 8000520:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	0492      	lsls	r2, r2, #18
 800053a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800054e:	1d3a      	adds	r2, r7, #4
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f004 fbdb 	bl	8004d10 <HAL_TIMEx_ConfigBreakDeadTime>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800055e:	f000 fa21 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <MX_TIM1_Init+0x18c>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fb57 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b01c      	add	sp, #112	; 0x70
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000080 	.word	0x20000080
 8000578:	40012c00 	.word	0x40012c00

0800057c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	2328      	movs	r3, #40	; 0x28
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	0018      	movs	r0, r3
 8000588:	2310      	movs	r3, #16
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f004 fc7d 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000592:	231c      	movs	r3, #28
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	0018      	movs	r0, r3
 8000598:	230c      	movs	r3, #12
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f004 fc75 	bl	8004e8c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	231c      	movs	r3, #28
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f004 fc6e 	bl	8004e8c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b0:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005b2:	4a3d      	ldr	r2, [pc, #244]	; (80006a8 <MX_TIM3_Init+0x12c>)
 80005b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005b8:	220f      	movs	r2, #15
 80005ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100 - 1;
 80005c2:	4b38      	ldr	r3, [pc, #224]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005c4:	2263      	movs	r2, #99	; 0x63
 80005c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f003 fa56 	bl	8003a88 <HAL_TIM_Base_Init>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005e0:	f000 f9e0 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e4:	2128      	movs	r1, #40	; 0x28
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	0152      	lsls	r2, r2, #5
 80005ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ee:	187a      	adds	r2, r7, r1
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <MX_TIM3_Init+0x128>)
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f003 fe1b 	bl	8004230 <HAL_TIM_ConfigClockSource>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005fe:	f000 f9d1 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_TIM3_Init+0x128>)
 8000604:	0018      	movs	r0, r3
 8000606:	f003 fa97 	bl	8003b38 <HAL_TIM_PWM_Init>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800060e:	f000 f9c9 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000612:	211c      	movs	r1, #28
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000620:	187a      	adds	r2, r7, r1
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_TIM3_Init+0x128>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f004 fb04 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000630:	f000 f9b8 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000634:	003b      	movs	r3, r7
 8000636:	2260      	movs	r2, #96	; 0x60
 8000638:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800063a:	003b      	movs	r3, r7
 800063c:	2232      	movs	r2, #50	; 0x32
 800063e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000640:	003b      	movs	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000646:	003b      	movs	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064c:	0039      	movs	r1, r7
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_TIM3_Init+0x128>)
 8000650:	2200      	movs	r2, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f003 fcec 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800065c:	f000 f9a2 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.Pulse = 80;
 8000660:	003b      	movs	r3, r7
 8000662:	2250      	movs	r2, #80	; 0x50
 8000664:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000666:	0039      	movs	r1, r7
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_TIM3_Init+0x128>)
 800066a:	2208      	movs	r2, #8
 800066c:	0018      	movs	r0, r3
 800066e:	f003 fcdf 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000676:	f000 f995 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.Pulse = 90;
 800067a:	003b      	movs	r3, r7
 800067c:	225a      	movs	r2, #90	; 0x5a
 800067e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000680:	0039      	movs	r1, r7
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_TIM3_Init+0x128>)
 8000684:	220c      	movs	r2, #12
 8000686:	0018      	movs	r0, r3
 8000688:	f003 fcd2 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000690:	f000 f988 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <MX_TIM3_Init+0x128>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fabe 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b00e      	add	sp, #56	; 0x38
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000cc 	.word	0x200000cc
 80006a8:	40000400 	.word	0x40000400

080006ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	231c      	movs	r3, #28
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f004 fbe6 	bl	8004e8c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_TIM14_Init+0x94>)
 80006c2:	4a20      	ldr	r2, [pc, #128]	; (8000744 <MX_TIM14_Init+0x98>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16 - 1;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_TIM14_Init+0x94>)
 80006c8:	220f      	movs	r2, #15
 80006ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_TIM14_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100 - 1;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_TIM14_Init+0x94>)
 80006d4:	2263      	movs	r2, #99	; 0x63
 80006d6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_TIM14_Init+0x94>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_TIM14_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_TIM14_Init+0x94>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f003 f9ce 	bl	8003a88 <HAL_TIM_Base_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80006f0:	f000 f958 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_TIM14_Init+0x94>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f003 fa1e 	bl	8003b38 <HAL_TIM_PWM_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f950 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2260      	movs	r2, #96	; 0x60
 8000708:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 20;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2214      	movs	r2, #20
 800070e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071c:	1d39      	adds	r1, r7, #4
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_TIM14_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f003 fc84 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800072c:	f000 f93a 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <MX_TIM14_Init+0x94>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fa70 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b008      	add	sp, #32
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000118 	.word	0x20000118
 8000744:	40002000 	.word	0x40002000

08000748 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800074e:	2334      	movs	r3, #52	; 0x34
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	231c      	movs	r3, #28
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f004 fb97 	bl	8004e8c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075e:	003b      	movs	r3, r7
 8000760:	0018      	movs	r0, r3
 8000762:	2334      	movs	r3, #52	; 0x34
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f004 fb90 	bl	8004e8c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_TIM16_Init+0x104>)
 800076e:	4a38      	ldr	r2, [pc, #224]	; (8000850 <MX_TIM16_Init+0x108>)
 8000770:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16 - 1;
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_TIM16_Init+0x104>)
 8000774:	220f      	movs	r2, #15
 8000776:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_TIM16_Init+0x104>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100 - 1;
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_TIM16_Init+0x104>)
 8000780:	2263      	movs	r2, #99	; 0x63
 8000782:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_TIM16_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_TIM16_Init+0x104>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_TIM16_Init+0x104>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_TIM16_Init+0x104>)
 8000798:	0018      	movs	r0, r3
 800079a:	f003 f975 	bl	8003a88 <HAL_TIM_Base_Init>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 f8ff 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_TIM16_Init+0x104>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 f9c5 	bl	8003b38 <HAL_TIM_PWM_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f8f7 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2134      	movs	r1, #52	; 0x34
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2260      	movs	r2, #96	; 0x60
 80007bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 40;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2228      	movs	r2, #40	; 0x28
 80007c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	1879      	adds	r1, r7, r1
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_TIM16_Init+0x104>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 fc21 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80007f2:	f000 f8d7 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080e:	003b      	movs	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000814:	003b      	movs	r3, r7
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	0192      	lsls	r2, r2, #6
 800081a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000822:	003b      	movs	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	003a      	movs	r2, r7
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_TIM16_Init+0x104>)
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f004 fa6e 	bl	8004d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000838:	f000 f8b4 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <MX_TIM16_Init+0x104>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 f9ea 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b014      	add	sp, #80	; 0x50
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000164 	.word	0x20000164
 8000850:	40014400 	.word	0x40014400

08000854 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	2334      	movs	r3, #52	; 0x34
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	0018      	movs	r0, r3
 8000860:	231c      	movs	r3, #28
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f004 fb11 	bl	8004e8c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800086a:	003b      	movs	r3, r7
 800086c:	0018      	movs	r0, r3
 800086e:	2334      	movs	r3, #52	; 0x34
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f004 fb0a 	bl	8004e8c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000878:	4b37      	ldr	r3, [pc, #220]	; (8000958 <MX_TIM17_Init+0x104>)
 800087a:	4a38      	ldr	r2, [pc, #224]	; (800095c <MX_TIM17_Init+0x108>)
 800087c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16 - 1;
 800087e:	4b36      	ldr	r3, [pc, #216]	; (8000958 <MX_TIM17_Init+0x104>)
 8000880:	220f      	movs	r2, #15
 8000882:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b34      	ldr	r3, [pc, #208]	; (8000958 <MX_TIM17_Init+0x104>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100 - 1;
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_TIM17_Init+0x104>)
 800088c:	2263      	movs	r2, #99	; 0x63
 800088e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_TIM17_Init+0x104>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_TIM17_Init+0x104>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_TIM17_Init+0x104>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_TIM17_Init+0x104>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f003 f8ef 	bl	8003a88 <HAL_TIM_Base_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80008ae:	f000 f879 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_TIM17_Init+0x104>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f003 f93f 	bl	8003b38 <HAL_TIM_PWM_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 f871 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c2:	2134      	movs	r1, #52	; 0x34
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2260      	movs	r2, #96	; 0x60
 80008c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	221e      	movs	r2, #30
 80008ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ee:	1879      	adds	r1, r7, r1
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM17_Init+0x104>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 fb9b 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80008fe:	f000 f851 	bl	80009a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000902:	003b      	movs	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091a:	003b      	movs	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	003b      	movs	r3, r7
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0192      	lsls	r2, r2, #6
 8000926:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000928:	003b      	movs	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800092e:	003b      	movs	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000934:	003a      	movs	r2, r7
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_TIM17_Init+0x104>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f004 f9e8 	bl	8004d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000944:	f000 f82e 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <MX_TIM17_Init+0x104>)
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f964 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b014      	add	sp, #80	; 0x50
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001b0 	.word	0x200001b0
 800095c:	40014800 	.word	0x40014800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_GPIO_Init+0x40>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_GPIO_Init+0x40>)
 8000984:	2102      	movs	r1, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x40>)
 800098c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098e:	2202      	movs	r2, #2
 8000990:	4013      	ands	r3, r2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0549      	lsls	r1, r1, #21
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_MspInit+0x44>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	055b      	lsls	r3, r3, #21
 80009e4:	4013      	ands	r3, r2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	2414      	movs	r4, #20
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f004 fa3e 	bl	8004e8c <memset>
  if(hi2c->Instance==I2C2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <HAL_I2C_MspInit+0xa0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d139      	bne.n	8000a8e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	22c0      	movs	r2, #192	; 0xc0
 8000a36:	0152      	lsls	r2, r2, #5
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2212      	movs	r2, #18
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2206      	movs	r2, #6
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fc6b 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	03c9      	lsls	r1, r1, #15
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	03db      	lsls	r3, r3, #15
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2018      	movs	r0, #24
 8000a84:	f000 fbb0 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000a88:	2018      	movs	r0, #24
 8000a8a:	f000 fbc2 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b00b      	add	sp, #44	; 0x2c
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40005800 	.word	0x40005800
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b097      	sub	sp, #92	; 0x5c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	2420      	movs	r4, #32
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2338      	movs	r3, #56	; 0x38
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f004 f9ea 	bl	8004e8c <memset>
  if(htim_base->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a50      	ldr	r2, [pc, #320]	; (8000c00 <HAL_TIM_Base_MspInit+0x160>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12d      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	0392      	lsls	r2, r2, #14
 8000ac8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 fe00 	bl	80036d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000adc:	f7ff ff62 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae0:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae4:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0109      	lsls	r1, r1, #4
 8000aea:	430a      	orrs	r2, r1
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
 8000aee:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4013      	ands	r3, r2
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	200d      	movs	r0, #13
 8000b02:	f000 fb71 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b06:	200d      	movs	r0, #13
 8000b08:	f000 fb83 	bl	8001212 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	200e      	movs	r0, #14
 8000b12:	f000 fb69 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b16:	200e      	movs	r0, #14
 8000b18:	f000 fb7b 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b1c:	e06c      	b.n	8000bf8 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM3)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a39      	ldr	r2, [pc, #228]	; (8000c08 <HAL_TIM_Base_MspInit+0x168>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d114      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2c:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b2e:	2102      	movs	r1, #2
 8000b30:	430a      	orrs	r2, r1
 8000b32:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	2202      	movs	r2, #2
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2010      	movs	r0, #16
 8000b46:	f000 fb4f 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b4a:	2010      	movs	r0, #16
 8000b4c:	f000 fb61 	bl	8001212 <HAL_NVIC_EnableIRQ>
}
 8000b50:	e052      	b.n	8000bf8 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM14)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a2d      	ldr	r2, [pc, #180]	; (8000c0c <HAL_TIM_Base_MspInit+0x16c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d116      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0209      	lsls	r1, r1, #8
 8000b66:	430a      	orrs	r2, r1
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	4013      	ands	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2013      	movs	r0, #19
 8000b7e:	f000 fb33 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000b82:	2013      	movs	r0, #19
 8000b84:	f000 fb45 	bl	8001212 <HAL_NVIC_EnableIRQ>
}
 8000b88:	e036      	b.n	8000bf8 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM16)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <HAL_TIM_Base_MspInit+0x170>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d116      	bne.n	8000bc2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	0289      	lsls	r1, r1, #10
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2015      	movs	r0, #21
 8000bb6:	f000 fb17 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000bba:	2015      	movs	r0, #21
 8000bbc:	f000 fb29 	bl	8001212 <HAL_NVIC_EnableIRQ>
}
 8000bc0:	e01a      	b.n	8000bf8 <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM17)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_TIM_Base_MspInit+0x174>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d115      	bne.n	8000bf8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	02c9      	lsls	r1, r1, #11
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x164>)
 8000bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	02db      	lsls	r3, r3, #11
 8000be2:	4013      	ands	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2016      	movs	r0, #22
 8000bee:	f000 fafb 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000bf2:	2016      	movs	r0, #22
 8000bf4:	f000 fb0d 	bl	8001212 <HAL_NVIC_EnableIRQ>
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b017      	add	sp, #92	; 0x5c
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40000400 	.word	0x40000400
 8000c0c:	40002000 	.word	0x40002000
 8000c10:	40014400 	.word	0x40014400
 8000c14:	40014800 	.word	0x40014800

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08f      	sub	sp, #60	; 0x3c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	2424      	movs	r4, #36	; 0x24
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2314      	movs	r3, #20
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f004 f92e 	bl	8004e8c <memset>
  if(htim->Instance==TIM1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a78      	ldr	r2, [pc, #480]	; (8000e18 <HAL_TIM_MspPostInit+0x200>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d124      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3e:	4b77      	ldr	r3, [pc, #476]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
 8000c46:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	623b      	str	r3, [r7, #32]
 8000c50:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	0052      	lsls	r2, r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2202      	movs	r2, #2
 8000c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2202      	movs	r2, #2
 8000c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	187a      	adds	r2, r7, r1
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fb5b 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000c82:	e0c4      	b.n	8000e0e <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a65      	ldr	r2, [pc, #404]	; (8000e20 <HAL_TIM_MspPostInit+0x208>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d145      	bne.n	8000d1a <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c92:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	430a      	orrs	r2, r1
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9a:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000cac:	2102      	movs	r1, #2
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb2:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cbe:	2424      	movs	r4, #36	; 0x24
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	193a      	adds	r2, r7, r4
 8000ce0:	23a0      	movs	r3, #160	; 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fb26 	bl	8001338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cec:	0021      	movs	r1, r4
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	4a45      	ldr	r2, [pc, #276]	; (8000e24 <HAL_TIM_MspPostInit+0x20c>)
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f000 fb10 	bl	8001338 <HAL_GPIO_Init>
}
 8000d18:	e079      	b.n	8000e0e <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM14)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <HAL_TIM_MspPostInit+0x210>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d123      	bne.n	8000d6c <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d30:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d34:	2201      	movs	r2, #1
 8000d36:	4013      	ands	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d3c:	2124      	movs	r1, #36	; 0x24
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2210      	movs	r2, #16
 8000d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2204      	movs	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	187a      	adds	r2, r7, r1
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fae7 	bl	8001338 <HAL_GPIO_Init>
}
 8000d6a:	e050      	b.n	8000e0e <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM16)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <HAL_TIM_MspPostInit+0x214>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d123      	bne.n	8000dbe <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	2202      	movs	r2, #2
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d8e:	2124      	movs	r1, #36	; 0x24
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2202      	movs	r2, #2
 8000dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_TIM_MspPostInit+0x20c>)
 8000db4:	0019      	movs	r1, r3
 8000db6:	0010      	movs	r0, r2
 8000db8:	f000 fabe 	bl	8001338 <HAL_GPIO_Init>
}
 8000dbc:	e027      	b.n	8000e0e <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM17)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_TIM_MspPostInit+0x218>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d122      	bne.n	8000e0e <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_TIM_MspPostInit+0x204>)
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000de0:	2124      	movs	r1, #36	; 0x24
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2202      	movs	r2, #2
 8000dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	187a      	adds	r2, r7, r1
 8000e02:	23a0      	movs	r3, #160	; 0xa0
 8000e04:	05db      	lsls	r3, r3, #23
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 fa95 	bl	8001338 <HAL_GPIO_Init>
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b00f      	add	sp, #60	; 0x3c
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40000400 	.word	0x40000400
 8000e24:	50000400 	.word	0x50000400
 8000e28:	40002000 	.word	0x40002000
 8000e2c:	40014400 	.word	0x40014400
 8000e30:	40014800 	.word	0x40014800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8fe 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f002 ffae 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	20000080 	.word	0x20000080

08000e7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <TIM1_CC_IRQHandler+0x14>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f002 ffa2 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20000080 	.word	0x20000080

08000e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <TIM3_IRQHandler+0x14>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f002 ff96 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	200000cc 	.word	0x200000cc

08000eac <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <TIM14_IRQHandler+0x14>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f002 ff8a 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000118 	.word	0x20000118

08000ec4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <TIM16_IRQHandler+0x14>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f002 ff7e 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	20000164 	.word	0x20000164

08000edc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <TIM17_IRQHandler+0x14>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f002 ff72 	bl	8003dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	200001b0 	.word	0x200001b0

08000ef4 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <I2C2_IRQHandler+0x2c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	699a      	ldr	r2, [r3, #24]
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	d004      	beq.n	8000f10 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <I2C2_IRQHandler+0x2c>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 fe39 	bl	8001b80 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8000f0e:	e003      	b.n	8000f18 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <I2C2_IRQHandler+0x2c>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fe1a 	bl	8001b4c <HAL_I2C_EV_IRQHandler>
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	2000002c 	.word	0x2000002c

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f34:	f7ff fff6 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f5e:	f003 ff9d 	bl	8004e9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f62:	f7ff f95d 	bl	8000220 <main>

08000f66 <LoopForever>:

LoopForever:
  b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f74:	08004f98 	.word	0x08004f98
  ldr r2, =_sbss
 8000f78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f7c:	20000204 	.word	0x20000204

08000f80 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_COMP_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x3c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Init+0x3c>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0049      	lsls	r1, r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 f810 	bl	8000fc4 <HAL_InitTick>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e001      	b.n	8000fb4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fcfe 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_InitTick+0x88>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d02b      	beq.n	8001034 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_InitTick+0x8c>)
 8000fde:	681c      	ldr	r4, [r3, #0]
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_InitTick+0x88>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	23fa      	movs	r3, #250	; 0xfa
 8000fe8:	0098      	lsls	r0, r3, #2
 8000fea:	f7ff f88d 	bl	8000108 <__udivsi3>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	f7ff f888 	bl	8000108 <__udivsi3>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 f919 	bl	8001232 <HAL_SYSTICK_Config>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d112      	bne.n	800102a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d80a      	bhi.n	8001020 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	2301      	movs	r3, #1
 800100e:	425b      	negs	r3, r3
 8001010:	2200      	movs	r2, #0
 8001012:	0018      	movs	r0, r3
 8001014:	f000 f8e8 	bl	80011e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_InitTick+0x90>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e00d      	b.n	800103c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001020:	230f      	movs	r3, #15
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e008      	b.n	800103c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e003      	b.n	800103c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	781b      	ldrb	r3, [r3, #0]
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b005      	add	sp, #20
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	2000000c 	.word	0x2000000c
 8001050:	20000004 	.word	0x20000004
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_IncTick+0x1c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	001a      	movs	r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	18d2      	adds	r2, r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_IncTick+0x20>)
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	2000000c 	.word	0x2000000c
 8001078:	20000200 	.word	0x20000200

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000200 	.word	0x20000200

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	0002      	movs	r2, r0
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b7f      	cmp	r3, #127	; 0x7f
 80010a2:	d809      	bhi.n	80010b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	001a      	movs	r2, r3
 80010aa:	231f      	movs	r3, #31
 80010ac:	401a      	ands	r2, r3
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_EnableIRQ+0x30>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	4091      	lsls	r1, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b7f      	cmp	r3, #127	; 0x7f
 80010d8:	d828      	bhi.n	800112c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010da:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <__NVIC_SetPriority+0xd4>)
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	33c0      	adds	r3, #192	; 0xc0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	589b      	ldr	r3, [r3, r2]
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	0011      	movs	r1, r2
 80010f0:	2203      	movs	r2, #3
 80010f2:	400a      	ands	r2, r1
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	4091      	lsls	r1, r2
 80010fa:	000a      	movs	r2, r1
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	401a      	ands	r2, r3
 8001100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	019b      	lsls	r3, r3, #6
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	401a      	ands	r2, r3
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	0018      	movs	r0, r3
 8001110:	2303      	movs	r3, #3
 8001112:	4003      	ands	r3, r0
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	481f      	ldr	r0, [pc, #124]	; (8001198 <__NVIC_SetPriority+0xd4>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b25b      	sxtb	r3, r3
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	430a      	orrs	r2, r1
 8001124:	33c0      	adds	r3, #192	; 0xc0
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800112a:	e031      	b.n	8001190 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <__NVIC_SetPriority+0xd8>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0019      	movs	r1, r3
 8001134:	230f      	movs	r3, #15
 8001136:	400b      	ands	r3, r1
 8001138:	3b08      	subs	r3, #8
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3306      	adds	r3, #6
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	3304      	adds	r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1dfa      	adds	r2, r7, #7
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	0011      	movs	r1, r2
 800114c:	2203      	movs	r2, #3
 800114e:	400a      	ands	r2, r1
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	21ff      	movs	r1, #255	; 0xff
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	43d2      	mvns	r2, r2
 800115a:	401a      	ands	r2, r3
 800115c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	22ff      	movs	r2, #255	; 0xff
 8001164:	401a      	ands	r2, r3
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	2303      	movs	r3, #3
 800116e:	4003      	ands	r3, r0
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <__NVIC_SetPriority+0xd8>)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	001c      	movs	r4, r3
 800117c:	230f      	movs	r3, #15
 800117e:	4023      	ands	r3, r4
 8001180:	3b08      	subs	r3, #8
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	430a      	orrs	r2, r1
 8001186:	3306      	adds	r3, #6
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	18c3      	adds	r3, r0, r3
 800118c:	3304      	adds	r3, #4
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b003      	add	sp, #12
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	045b      	lsls	r3, r3, #17
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d301      	bcc.n	80011b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b4:	2301      	movs	r3, #1
 80011b6:	e010      	b.n	80011da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <SysTick_Config+0x44>)
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	3a01      	subs	r2, #1
 80011be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	2103      	movs	r1, #3
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7ff ff7c 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x44>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	210f      	movs	r1, #15
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	1c02      	adds	r2, r0, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	0002      	movs	r2, r0
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff33 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ffaf 	bl	80011a0 <SysTick_Config>
 8001242:	0003      	movs	r3, r0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001254:	210f      	movs	r1, #15
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2225      	movs	r2, #37	; 0x25
 8001260:	5c9b      	ldrb	r3, [r3, r2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d006      	beq.n	8001276 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2204      	movs	r2, #4
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e049      	b.n	800130a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	210e      	movs	r1, #14
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	438a      	bics	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	491d      	ldr	r1, [pc, #116]	; (8001318 <HAL_DMA_Abort_IT+0xcc>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_DMA_Abort_IT+0xd0>)
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	221c      	movs	r2, #28
 80012b0:	4013      	ands	r3, r2
 80012b2:	2201      	movs	r2, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_DMA_Abort_IT+0xd0>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <HAL_DMA_Abort_IT+0xcc>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80012e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2225      	movs	r2, #37	; 0x25
 80012ec:	2101      	movs	r1, #1
 80012ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	0010      	movs	r0, r2
 8001308:	4798      	blx	r3
    }
  }
  return status;
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	781b      	ldrb	r3, [r3, #0]
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}
 8001318:	fffffeff 	.word	0xfffffeff
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2225      	movs	r2, #37	; 0x25
 800132c:	5c9b      	ldrb	r3, [r3, r2]
 800132e:	b2db      	uxtb	r3, r3
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e147      	b.n	80015d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4091      	lsls	r1, r2
 8001352:	000a      	movs	r2, r1
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d100      	bne.n	8001360 <HAL_GPIO_Init+0x28>
 800135e:	e138      	b.n	80015d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	4013      	ands	r3, r2
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_GPIO_Init+0x40>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	4013      	ands	r3, r2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	409a      	lsls	r2, r3
 8001386:	0013      	movs	r3, r2
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	2201      	movs	r2, #1
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d017      	beq.n	8001416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	2b02      	cmp	r3, #2
 8001420:	d123      	bne.n	800146a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	58d3      	ldr	r3, [r2, r3]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2207      	movs	r2, #7
 8001434:	4013      	ands	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2107      	movs	r1, #7
 800144e:	400b      	ands	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	401a      	ands	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	23c0      	movs	r3, #192	; 0xc0
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d100      	bne.n	80014ac <HAL_GPIO_Init+0x174>
 80014aa:	e092      	b.n	80015d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014ac:	4a50      	ldr	r2, [pc, #320]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3318      	adds	r3, #24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	589b      	ldr	r3, [r3, r2]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	220f      	movs	r2, #15
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	23a0      	movs	r3, #160	; 0xa0
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x1ca>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <HAL_GPIO_Init+0x2bc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x1c6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a44      	ldr	r2, [pc, #272]	; (80015f8 <HAL_GPIO_Init+0x2c0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x1c2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a43      	ldr	r2, [pc, #268]	; (80015fc <HAL_GPIO_Init+0x2c4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x1be>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 8001502:	2300      	movs	r3, #0
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	2103      	movs	r1, #3
 8001508:	400a      	ands	r2, r1
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	4093      	lsls	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001514:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3318      	adds	r3, #24
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	035b      	lsls	r3, r3, #13
 800153a:	4013      	ands	r3, r2
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	039b      	lsls	r3, r3, #14
 8001564:	4013      	ands	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001578:	2384      	movs	r3, #132	; 0x84
 800157a:	58d3      	ldr	r3, [r2, r3]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800159c:	4914      	ldr	r1, [pc, #80]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800159e:	2284      	movs	r2, #132	; 0x84
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	58d3      	ldr	r3, [r2, r3]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	4013      	ands	r3, r2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	40da      	lsrs	r2, r3
 80015e0:	1e13      	subs	r3, r2, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_GPIO_Init+0x2ae>
 80015e4:	e6b0      	b.n	8001348 <HAL_GPIO_Init+0x10>
  }
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b006      	add	sp, #24
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021800 	.word	0x40021800
 80015f4:	50000400 	.word	0x50000400
 80015f8:	50000800 	.word	0x50000800
 80015fc:	50000c00 	.word	0x50000c00

08001600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e082      	b.n	8001718 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2241      	movs	r2, #65	; 0x41
 8001616:	5c9b      	ldrb	r3, [r3, r2]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	2100      	movs	r1, #0
 8001624:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff f9e5 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2241      	movs	r2, #65	; 0x41
 8001632:	2124      	movs	r1, #36	; 0x24
 8001634:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	438a      	bics	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4934      	ldr	r1, [pc, #208]	; (8001720 <HAL_I2C_Init+0x120>)
 8001650:	400a      	ands	r2, r1
 8001652:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4931      	ldr	r1, [pc, #196]	; (8001724 <HAL_I2C_Init+0x124>)
 8001660:	400a      	ands	r2, r1
 8001662:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	0209      	lsls	r1, r1, #8
 8001678:	430a      	orrs	r2, r1
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e007      	b.n	800168e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2184      	movs	r1, #132	; 0x84
 8001688:	0209      	lsls	r1, r1, #8
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d104      	bne.n	80016a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	491f      	ldr	r1, [pc, #124]	; (8001728 <HAL_I2C_Init+0x128>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	491a      	ldr	r1, [pc, #104]	; (8001724 <HAL_I2C_Init+0x124>)
 80016bc:	400a      	ands	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69d9      	ldr	r1, [r3, #28]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2241      	movs	r2, #65	; 0x41
 8001704:	2120      	movs	r1, #32
 8001706:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2242      	movs	r2, #66	; 0x42
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}
 8001720:	f0ffffff 	.word	0xf0ffffff
 8001724:	ffff7fff 	.word	0xffff7fff
 8001728:	02008000 	.word	0x02008000

0800172c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	0008      	movs	r0, r1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	0019      	movs	r1, r3
 800173a:	230a      	movs	r3, #10
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	1c02      	adds	r2, r0, #0
 8001740:	801a      	strh	r2, [r3, #0]
 8001742:	2308      	movs	r3, #8
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	1c0a      	adds	r2, r1, #0
 8001748:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2241      	movs	r2, #65	; 0x41
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b20      	cmp	r3, #32
 8001754:	d000      	beq.n	8001758 <HAL_I2C_Master_Transmit+0x2c>
 8001756:	e0e7      	b.n	8001928 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	5c9b      	ldrb	r3, [r3, r2]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x3a>
 8001762:	2302      	movs	r3, #2
 8001764:	e0e1      	b.n	800192a <HAL_I2C_Master_Transmit+0x1fe>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	2101      	movs	r1, #1
 800176c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800176e:	f7ff fc85 	bl	800107c <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	0219      	lsls	r1, r3, #8
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2319      	movs	r3, #25
 8001782:	2201      	movs	r2, #1
 8001784:	f000 ff5a 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2241      	movs	r2, #65	; 0x41
 8001794:	2121      	movs	r1, #33	; 0x21
 8001796:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2242      	movs	r2, #66	; 0x42
 800179c:	2110      	movs	r1, #16
 800179e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2208      	movs	r2, #8
 80017b0:	18ba      	adds	r2, r7, r2
 80017b2:	8812      	ldrh	r2, [r2, #0]
 80017b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d911      	bls.n	80017ea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	045c      	lsls	r4, r3, #17
 80017d6:	230a      	movs	r3, #10
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	8819      	ldrh	r1, [r3, #0]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <HAL_I2C_Master_Transmit+0x208>)
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	0023      	movs	r3, r4
 80017e4:	f001 f95e 	bl	8002aa4 <I2C_TransferConfig>
 80017e8:	e075      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	049c      	lsls	r4, r3, #18
 80017fe:	230a      	movs	r3, #10
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	8819      	ldrh	r1, [r3, #0]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_I2C_Master_Transmit+0x208>)
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	0023      	movs	r3, r4
 800180c:	f001 f94a 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001810:	e061      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	0018      	movs	r0, r3
 800181a:	f000 ff4e 	bl	80026ba <I2C_WaitOnTXISFlagUntilTimeout>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e081      	b.n	800192a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03a      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x1aa>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d136      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	0013      	movs	r3, r2
 8001872:	2200      	movs	r2, #0
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	f000 fee1 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e053      	b.n	800192a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2bff      	cmp	r3, #255	; 0xff
 800188a:	d911      	bls.n	80018b0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	22ff      	movs	r2, #255	; 0xff
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	b2da      	uxtb	r2, r3
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	045c      	lsls	r4, r3, #17
 800189c:	230a      	movs	r3, #10
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	8819      	ldrh	r1, [r3, #0]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	0023      	movs	r3, r4
 80018aa:	f001 f8fb 	bl	8002aa4 <I2C_TransferConfig>
 80018ae:	e012      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	049c      	lsls	r4, r3, #18
 80018c4:	230a      	movs	r3, #10
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	8819      	ldrh	r1, [r3, #0]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	0023      	movs	r3, r4
 80018d2:	f001 f8e7 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d198      	bne.n	8001812 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 ff26 	bl	8002738 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e01a      	b.n	800192a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2220      	movs	r2, #32
 80018fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	490c      	ldr	r1, [pc, #48]	; (8001938 <HAL_I2C_Master_Transmit+0x20c>)
 8001908:	400a      	ands	r2, r1
 800190a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2241      	movs	r2, #65	; 0x41
 8001910:	2120      	movs	r1, #32
 8001912:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2242      	movs	r2, #66	; 0x42
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	2100      	movs	r1, #0
 8001922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b007      	add	sp, #28
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	80002000 	.word	0x80002000
 8001938:	fe00e800 	.word	0xfe00e800

0800193c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	0008      	movs	r0, r1
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	0019      	movs	r1, r3
 800194a:	230a      	movs	r3, #10
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	1c02      	adds	r2, r0, #0
 8001950:	801a      	strh	r2, [r3, #0]
 8001952:	2308      	movs	r3, #8
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	1c0a      	adds	r2, r1, #0
 8001958:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2241      	movs	r2, #65	; 0x41
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	d000      	beq.n	8001968 <HAL_I2C_Master_Receive+0x2c>
 8001966:	e0e8      	b.n	8001b3a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_I2C_Master_Receive+0x3a>
 8001972:	2302      	movs	r3, #2
 8001974:	e0e2      	b.n	8001b3c <HAL_I2C_Master_Receive+0x200>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800197e:	f7ff fb7d 	bl	800107c <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	0219      	lsls	r1, r3, #8
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2319      	movs	r3, #25
 8001992:	2201      	movs	r2, #1
 8001994:	f000 fe52 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0cd      	b.n	8001b3c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2241      	movs	r2, #65	; 0x41
 80019a4:	2122      	movs	r1, #34	; 0x22
 80019a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2242      	movs	r2, #66	; 0x42
 80019ac:	2110      	movs	r1, #16
 80019ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2208      	movs	r2, #8
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d911      	bls.n	80019fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	22ff      	movs	r2, #255	; 0xff
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	045c      	lsls	r4, r3, #17
 80019e6:	230a      	movs	r3, #10
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	8819      	ldrh	r1, [r3, #0]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <HAL_I2C_Master_Receive+0x208>)
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	0023      	movs	r3, r4
 80019f4:	f001 f856 	bl	8002aa4 <I2C_TransferConfig>
 80019f8:	e076      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	049c      	lsls	r4, r3, #18
 8001a0e:	230a      	movs	r3, #10
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	8819      	ldrh	r1, [r3, #0]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_I2C_Master_Receive+0x208>)
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	0023      	movs	r3, r4
 8001a1c:	f001 f842 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a20:	e062      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 fec1 	bl	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e082      	b.n	8001b3c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03a      	beq.n	8001ae8 <HAL_I2C_Master_Receive+0x1ac>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d136      	bne.n	8001ae8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	0013      	movs	r3, r2
 8001a84:	2200      	movs	r2, #0
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	f000 fdd8 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e053      	b.n	8001b3c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	d911      	bls.n	8001ac2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	22ff      	movs	r2, #255	; 0xff
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	045c      	lsls	r4, r3, #17
 8001aae:	230a      	movs	r3, #10
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	8819      	ldrh	r1, [r3, #0]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	0023      	movs	r3, r4
 8001abc:	f000 fff2 	bl	8002aa4 <I2C_TransferConfig>
 8001ac0:	e012      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	049c      	lsls	r4, r3, #18
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	8819      	ldrh	r1, [r3, #0]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	0023      	movs	r3, r4
 8001ae4:	f000 ffde 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d197      	bne.n	8001a22 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 fe1d 	bl	8002738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01a      	b.n	8001b3c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	490b      	ldr	r1, [pc, #44]	; (8001b48 <HAL_I2C_Master_Receive+0x20c>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2241      	movs	r2, #65	; 0x41
 8001b22:	2120      	movs	r1, #32
 8001b24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2242      	movs	r2, #66	; 0x42
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
  }
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b007      	add	sp, #28
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	80002400 	.word	0x80002400
 8001b48:	fe00e800 	.word	0xfe00e800

08001b4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
  }
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	2201      	movs	r2, #1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	0052      	lsls	r2, r2, #1
 8001bbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d00e      	beq.n	8001be8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001bd0:	d00a      	beq.n	8001be8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d00e      	beq.n	8001c10 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001bf8:	d00a      	beq.n	8001c10 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	2202      	movs	r2, #2
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	220b      	movs	r2, #11
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d005      	beq.n	8001c2a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fbbd 	bl	80023a4 <I2C_ITError>
  }
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b006      	add	sp, #24
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	0008      	movs	r0, r1
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	1cfb      	adds	r3, r7, #3
 8001c60:	1c02      	adds	r2, r0, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	003b      	movs	r3, r7
 8001c66:	1c0a      	adds	r2, r1, #0
 8001c68:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <I2C_Slave_ISR_IT+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e0e6      	b.n	8001e96 <I2C_Slave_ISR_IT+0x1f2>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cde:	d005      	beq.n	8001cec <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0011      	movs	r1, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f9e4 	bl	80020b4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d052      	beq.n	8001d9a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cfa:	d04e      	beq.n	8001d9a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12d      	bne.n	8001d62 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2241      	movs	r2, #65	; 0x41
 8001d0a:	5c9b      	ldrb	r3, [r3, r2]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b28      	cmp	r3, #40	; 0x28
 8001d10:	d10b      	bne.n	8001d2a <I2C_Slave_ISR_IT+0x86>
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	049b      	lsls	r3, r3, #18
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d106      	bne.n	8001d2a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0011      	movs	r1, r2
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fae6 	bl	80022f4 <I2C_ITListenCplt>
 8001d28:	e036      	b.n	8001d98 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2241      	movs	r2, #65	; 0x41
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b29      	cmp	r3, #41	; 0x29
 8001d34:	d110      	bne.n	8001d58 <I2C_Slave_ISR_IT+0xb4>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <I2C_Slave_ISR_IT+0x1fc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00c      	beq.n	8001d58 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2210      	movs	r2, #16
 8001d44:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 fc36 	bl	80025ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 f94b 	bl	8001fec <I2C_ITSlaveSeqCplt>
 8001d56:	e01f      	b.n	8001d98 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001d60:	e091      	b.n	8001e86 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2210      	movs	r2, #16
 8001d68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	2204      	movs	r2, #4
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <I2C_Slave_ISR_IT+0xe4>
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	045b      	lsls	r3, r3, #17
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d000      	beq.n	8001d88 <I2C_Slave_ISR_IT+0xe4>
 8001d86:	e07e      	b.n	8001e86 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	0011      	movs	r1, r2
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 fb07 	bl	80023a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d96:	e076      	b.n	8001e86 <I2C_Slave_ISR_IT+0x1e2>
 8001d98:	e075      	b.n	8001e86 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d02f      	beq.n	8001e02 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001da8:	d02b      	beq.n	8001e02 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d018      	beq.n	8001de6 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d14c      	bne.n	8001e8a <I2C_Slave_ISR_IT+0x1e6>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <I2C_Slave_ISR_IT+0x1fc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d048      	beq.n	8001e8a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f8f6 	bl	8001fec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001e00:	e043      	b.n	8001e8a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2208      	movs	r2, #8
 8001e06:	4013      	ands	r3, r2
 8001e08:	d00a      	beq.n	8001e20 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e10:	d006      	beq.n	8001e20 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	0011      	movs	r1, r2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 f843 	bl	8001ea4 <I2C_ITAddrCplt>
 8001e1e:	e035      	b.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d031      	beq.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e2e:	d02d      	beq.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d018      	beq.n	8001e6c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e6a:	e00f      	b.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	045b      	lsls	r3, r3, #17
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d002      	beq.n	8001e7c <I2C_Slave_ISR_IT+0x1d8>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 f8b4 	bl	8001fec <I2C_ITSlaveSeqCplt>
 8001e84:	e002      	b.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	e000      	b.n	8001e8c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001e8a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b006      	add	sp, #24
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2241      	movs	r2, #65	; 0x41
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	2328      	movs	r3, #40	; 0x28
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b28      	cmp	r3, #40	; 0x28
 8001ebe:	d000      	beq.n	8001ec2 <I2C_ITAddrCplt+0x1e>
 8001ec0:	e088      	b.n	8001fd4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	250f      	movs	r5, #15
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	200c      	movs	r0, #12
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	21fe      	movs	r1, #254	; 0xfe
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	240a      	movs	r4, #10
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	0592      	lsls	r2, r2, #22
 8001ef8:	0d92      	lsrs	r2, r2, #22
 8001efa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2308      	movs	r3, #8
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	21fe      	movs	r1, #254	; 0xfe
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d148      	bne.n	8001fa8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001f16:	0021      	movs	r1, r4
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	09db      	lsrs	r3, r3, #7
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	183b      	adds	r3, r7, r0
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	4053      	eors	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	001a      	movs	r2, r3
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d120      	bne.n	8001f72 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001f30:	183b      	adds	r3, r7, r0
 8001f32:	187a      	adds	r2, r7, r1
 8001f34:	8812      	ldrh	r2, [r2, #0]
 8001f36:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d14c      	bne.n	8001fe4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2208      	movs	r2, #8
 8001f56:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	197b      	adds	r3, r7, r5
 8001f66:	7819      	ldrb	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff fe71 	bl	8001c52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001f70:	e038      	b.n	8001fe4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001f72:	240c      	movs	r4, #12
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	2208      	movs	r2, #8
 8001f78:	18ba      	adds	r2, r7, r2
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0011      	movs	r1, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fdc6 	bl	8002b18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f94:	193b      	adds	r3, r7, r4
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	7819      	ldrb	r1, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff fe56 	bl	8001c52 <HAL_I2C_AddrCallback>
}
 8001fa6:	e01d      	b.n	8001fe4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	021a      	lsls	r2, r3, #8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 fdb1 	bl	8002b18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	7819      	ldrb	r1, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fe40 	bl	8001c52 <HAL_I2C_AddrCallback>
}
 8001fd2:	e007      	b.n	8001fe4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}

08001fec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2242      	movs	r2, #66	; 0x42
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	01db      	lsls	r3, r3, #7
 800200a:	4013      	ands	r3, r2
 800200c:	d008      	beq.n	8002020 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4924      	ldr	r1, [pc, #144]	; (80020ac <I2C_ITSlaveSeqCplt+0xc0>)
 800201a:	400a      	ands	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e00c      	b.n	800203a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4013      	ands	r3, r2
 8002028:	d007      	beq.n	800203a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	491e      	ldr	r1, [pc, #120]	; (80020b0 <I2C_ITSlaveSeqCplt+0xc4>)
 8002036:	400a      	ands	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2241      	movs	r2, #65	; 0x41
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b29      	cmp	r3, #41	; 0x29
 8002044:	d114      	bne.n	8002070 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2241      	movs	r2, #65	; 0x41
 800204a:	2128      	movs	r1, #40	; 0x28
 800204c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2101      	movs	r1, #1
 8002058:	0018      	movs	r0, r3
 800205a:	f000 fd5d 	bl	8002b18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff fde2 	bl	8001c32 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800206e:	e019      	b.n	80020a4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2241      	movs	r2, #65	; 0x41
 8002074:	5c9b      	ldrb	r3, [r3, r2]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b2a      	cmp	r3, #42	; 0x2a
 800207a:	d113      	bne.n	80020a4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2241      	movs	r2, #65	; 0x41
 8002080:	2128      	movs	r1, #40	; 0x28
 8002082:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2222      	movs	r2, #34	; 0x22
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2102      	movs	r1, #2
 800208e:	0018      	movs	r0, r3
 8002090:	f000 fd42 	bl	8002b18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff fdcf 	bl	8001c42 <HAL_I2C_SlaveRxCpltCallback>
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	ffffbfff 	.word	0xffffbfff
 80020b0:	ffff7fff 	.word	0xffff7fff

080020b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020ca:	200f      	movs	r0, #15
 80020cc:	183b      	adds	r3, r7, r0
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	2141      	movs	r1, #65	; 0x41
 80020d2:	5c52      	ldrb	r2, [r2, r1]
 80020d4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2220      	movs	r2, #32
 80020dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b21      	cmp	r3, #33	; 0x21
 80020e4:	d003      	beq.n	80020ee <I2C_ITSlaveCplt+0x3a>
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b29      	cmp	r3, #41	; 0x29
 80020ec:	d109      	bne.n	8002102 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80020ee:	4a7b      	ldr	r2, [pc, #492]	; (80022dc <I2C_ITSlaveCplt+0x228>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 fd0f 	bl	8002b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2221      	movs	r2, #33	; 0x21
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002100:	e011      	b.n	8002126 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002102:	220f      	movs	r2, #15
 8002104:	18bb      	adds	r3, r7, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b22      	cmp	r3, #34	; 0x22
 800210a:	d003      	beq.n	8002114 <I2C_ITSlaveCplt+0x60>
 800210c:	18bb      	adds	r3, r7, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b2a      	cmp	r3, #42	; 0x2a
 8002112:	d108      	bne.n	8002126 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002114:	4a72      	ldr	r2, [pc, #456]	; (80022e0 <I2C_ITSlaveCplt+0x22c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0011      	movs	r1, r2
 800211a:	0018      	movs	r0, r3
 800211c:	f000 fcfc 	bl	8002b18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2222      	movs	r2, #34	; 0x22
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0209      	lsls	r1, r1, #8
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4968      	ldr	r1, [pc, #416]	; (80022e4 <I2C_ITSlaveCplt+0x230>)
 8002144:	400a      	ands	r2, r1
 8002146:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0018      	movs	r0, r3
 800214c:	f000 fa35 	bl	80025ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	01db      	lsls	r3, r3, #7
 8002156:	4013      	ands	r3, r2
 8002158:	d013      	beq.n	8002182 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4960      	ldr	r1, [pc, #384]	; (80022e8 <I2C_ITSlaveCplt+0x234>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01f      	beq.n	80021b2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002180:	e017      	b.n	80021b2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	4013      	ands	r3, r2
 800218a:	d012      	beq.n	80021b2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4955      	ldr	r1, [pc, #340]	; (80022ec <I2C_ITSlaveCplt+0x238>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2204      	movs	r2, #4
 80021b6:	4013      	ands	r3, r2
 80021b8:	d020      	beq.n	80021fc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2204      	movs	r2, #4
 80021be:	4393      	bics	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	2204      	movs	r2, #4
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2242      	movs	r2, #66	; 0x42
 8002216:	2100      	movs	r1, #0
 8002218:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f000 f8b7 	bl	80023a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2241      	movs	r2, #65	; 0x41
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b28      	cmp	r3, #40	; 0x28
 8002240:	d147      	bne.n	80022d2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f853 	bl	80022f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800224e:	e040      	b.n	80022d2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <I2C_ITSlaveCplt+0x23c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d016      	beq.n	8002288 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff fec5 	bl	8001fec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <I2C_ITSlaveCplt+0x23c>)
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2241      	movs	r2, #65	; 0x41
 800226c:	2120      	movs	r1, #32
 800226e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fcf6 	bl	8001c72 <HAL_I2C_ListenCpltCallback>
}
 8002286:	e024      	b.n	80022d2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2241      	movs	r2, #65	; 0x41
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b22      	cmp	r3, #34	; 0x22
 8002292:	d10f      	bne.n	80022b4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2241      	movs	r2, #65	; 0x41
 8002298:	2120      	movs	r1, #32
 800229a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fcc8 	bl	8001c42 <HAL_I2C_SlaveRxCpltCallback>
}
 80022b2:	e00e      	b.n	80022d2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2241      	movs	r2, #65	; 0x41
 80022b8:	2120      	movs	r1, #32
 80022ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fcb0 	bl	8001c32 <HAL_I2C_SlaveTxCpltCallback>
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b006      	add	sp, #24
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	00008001 	.word	0x00008001
 80022e0:	00008002 	.word	0x00008002
 80022e4:	fe00e800 	.word	0xfe00e800
 80022e8:	ffffbfff 	.word	0xffffbfff
 80022ec:	ffff7fff 	.word	0xffff7fff
 80022f0:	ffff0000 	.word	0xffff0000

080022f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <I2C_ITListenCplt+0xa8>)
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2241      	movs	r2, #65	; 0x41
 800230e:	2120      	movs	r1, #32
 8002310:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2242      	movs	r2, #66	; 0x42
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d022      	beq.n	800236e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	2204      	movs	r2, #4
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <I2C_ITListenCplt+0xac>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fbcf 	bl	8002b18 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2210      	movs	r2, #16
 8002380:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fc70 	bl	8001c72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	ffff0000 	.word	0xffff0000
 80023a0:	00008003 	.word	0x00008003

080023a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023ae:	200f      	movs	r0, #15
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	2141      	movs	r1, #65	; 0x41
 80023b6:	5c52      	ldrb	r2, [r2, r1]
 80023b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2242      	movs	r2, #66	; 0x42
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a62      	ldr	r2, [pc, #392]	; (8002550 <I2C_ITError+0x1ac>)
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b28      	cmp	r3, #40	; 0x28
 80023e0:	d007      	beq.n	80023f2 <I2C_ITError+0x4e>
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b29      	cmp	r3, #41	; 0x29
 80023e8:	d003      	beq.n	80023f2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80023ea:	183b      	adds	r3, r7, r0
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b2a      	cmp	r3, #42	; 0x2a
 80023f0:	d10c      	bne.n	800240c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2103      	movs	r1, #3
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fb8e 	bl	8002b18 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2241      	movs	r2, #65	; 0x41
 8002400:	2128      	movs	r1, #40	; 0x28
 8002402:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a53      	ldr	r2, [pc, #332]	; (8002554 <I2C_ITError+0x1b0>)
 8002408:	635a      	str	r2, [r3, #52]	; 0x34
 800240a:	e012      	b.n	8002432 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <I2C_ITError+0x1b4>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fb80 	bl	8002b18 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2241      	movs	r2, #65	; 0x41
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b60      	cmp	r3, #96	; 0x60
 8002422:	d003      	beq.n	800242c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2241      	movs	r2, #65	; 0x41
 8002428:	2120      	movs	r1, #32
 800242a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03b      	beq.n	80024b8 <I2C_ITError+0x114>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b11      	cmp	r3, #17
 8002444:	d002      	beq.n	800244c <I2C_ITError+0xa8>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d135      	bne.n	80024b8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	01db      	lsls	r3, r3, #7
 8002456:	401a      	ands	r2, r3
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	01db      	lsls	r3, r3, #7
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	493c      	ldr	r1, [pc, #240]	; (800255c <I2C_ITError+0x1b8>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	0018      	movs	r0, r3
 8002476:	f7fe ff53 	bl	8001320 <HAL_DMA_GetState>
 800247a:	0003      	movs	r3, r0
 800247c:	2b01      	cmp	r3, #1
 800247e:	d016      	beq.n	80024ae <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	4a36      	ldr	r2, [pc, #216]	; (8002560 <I2C_ITError+0x1bc>)
 8002486:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe fed9 	bl	800124c <HAL_DMA_Abort_IT>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d051      	beq.n	8002542 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	0018      	movs	r0, r3
 80024aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024ac:	e049      	b.n	8002542 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f859 	bl	8002568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024b6:	e044      	b.n	8002542 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03b      	beq.n	8002538 <I2C_ITError+0x194>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d002      	beq.n	80024cc <I2C_ITError+0x128>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b22      	cmp	r3, #34	; 0x22
 80024ca:	d135      	bne.n	8002538 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	401a      	ands	r2, r3
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	491e      	ldr	r1, [pc, #120]	; (8002564 <I2C_ITError+0x1c0>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fe ff13 	bl	8001320 <HAL_DMA_GetState>
 80024fa:	0003      	movs	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d016      	beq.n	800252e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <I2C_ITError+0x1bc>)
 8002506:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe fe99 	bl	800124c <HAL_DMA_Abort_IT>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d013      	beq.n	8002546 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	0018      	movs	r0, r3
 800252a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800252c:	e00b      	b.n	8002546 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f819 	bl	8002568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002536:	e006      	b.n	8002546 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f814 	bl	8002568 <I2C_TreatErrorCallback>
  }
}
 8002540:	e002      	b.n	8002548 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	e000      	b.n	8002548 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002546:	46c0      	nop			; (mov r8, r8)
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}
 8002550:	ffff0000 	.word	0xffff0000
 8002554:	08001ca5 	.word	0x08001ca5
 8002558:	00008003 	.word	0x00008003
 800255c:	ffffbfff 	.word	0xffffbfff
 8002560:	080025ff 	.word	0x080025ff
 8002564:	ffff7fff 	.word	0xffff7fff

08002568 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2241      	movs	r2, #65	; 0x41
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d10f      	bne.n	800259c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2241      	movs	r2, #65	; 0x41
 8002580:	2120      	movs	r1, #32
 8002582:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff fb7c 	bl	8001c92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800259a:	e00a      	b.n	80025b2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff fb68 	bl	8001c82 <HAL_I2C_ErrorCallback>
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}

080025ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d103      	bne.n	80025d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d007      	beq.n	80025f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	430a      	orrs	r2, r1
 80025f4:	619a      	str	r2, [r3, #24]
  }
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	2200      	movs	r2, #0
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	2200      	movs	r2, #0
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff ff9a 	bl	8002568 <I2C_TreatErrorCallback>
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	e021      	b.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	d01e      	beq.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002654:	f7fe fd12 	bl	800107c <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d113      	bne.n	8002692 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	2220      	movs	r2, #32
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2241      	movs	r2, #65	; 0x41
 800267a:	2120      	movs	r1, #32
 800267c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2242      	movs	r2, #66	; 0x42
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2240      	movs	r2, #64	; 0x40
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	425a      	negs	r2, r3
 80026a2:	4153      	adcs	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	001a      	movs	r2, r3
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d0ce      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b004      	add	sp, #16
 80026b8:	bd80      	pop	{r7, pc}

080026ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026c6:	e02b      	b.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 f8e8 	bl	80028a4 <I2C_IsErrorOccurred>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e029      	b.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3301      	adds	r3, #1
 80026e0:	d01e      	beq.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7fe fccb 	bl	800107c <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d113      	bne.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	2220      	movs	r2, #32
 80026fe:	431a      	orrs	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2241      	movs	r2, #65	; 0x41
 8002708:	2120      	movs	r1, #32
 800270a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2242      	movs	r2, #66	; 0x42
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d1cc      	bne.n	80026c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002744:	e028      	b.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f8a9 	bl	80028a4 <I2C_IsErrorOccurred>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e026      	b.n	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe fc8f 	bl	800107c <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d113      	bne.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	2220      	movs	r2, #32
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2241      	movs	r2, #65	; 0x41
 8002780:	2120      	movs	r1, #32
 8002782:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2242      	movs	r2, #66	; 0x42
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2220      	movs	r2, #32
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d1cf      	bne.n	8002746 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027bc:	e064      	b.n	8002888 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f86d 	bl	80028a4 <I2C_IsErrorOccurred>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e062      	b.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2220      	movs	r2, #32
 80027da:	4013      	ands	r3, r2
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d138      	bne.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d105      	bne.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e04e      	b.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2210      	movs	r2, #16
 8002802:	4013      	ands	r3, r2
 8002804:	2b10      	cmp	r3, #16
 8002806:	d107      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2210      	movs	r2, #16
 800280e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2204      	movs	r2, #4
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
 8002816:	e002      	b.n	800281e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2220      	movs	r2, #32
 8002824:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	491b      	ldr	r1, [pc, #108]	; (80028a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002832:	400a      	ands	r2, r1
 8002834:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2241      	movs	r2, #65	; 0x41
 800283a:	2120      	movs	r1, #32
 800283c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2242      	movs	r2, #66	; 0x42
 8002842:	2100      	movs	r1, #0
 8002844:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	2100      	movs	r1, #0
 800284c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e022      	b.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7fe fc13 	bl	800107c <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	2220      	movs	r2, #32
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2241      	movs	r2, #65	; 0x41
 8002878:	2120      	movs	r1, #32
 800287a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e007      	b.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	2b04      	cmp	r3, #4
 8002894:	d193      	bne.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	fe00e800 	.word	0xfe00e800

080028a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b08b      	sub	sp, #44	; 0x2c
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2327      	movs	r3, #39	; 0x27
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	d100      	bne.n	80028d2 <I2C_IsErrorOccurred+0x2e>
 80028d0:	e082      	b.n	80029d8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028da:	e060      	b.n	800299e <I2C_IsErrorOccurred+0xfa>
 80028dc:	2427      	movs	r4, #39	; 0x27
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	193a      	adds	r2, r7, r4
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	d058      	beq.n	800299e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ec:	f7fe fbc6 	bl	800107c <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d306      	bcc.n	800290a <I2C_IsErrorOccurred+0x66>
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	193a      	adds	r2, r7, r4
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d149      	bne.n	800299e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	01db      	lsls	r3, r3, #7
 8002914:	4013      	ands	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002918:	2013      	movs	r0, #19
 800291a:	183b      	adds	r3, r7, r0
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	2142      	movs	r1, #66	; 0x42
 8002920:	5c52      	ldrb	r2, [r2, r1]
 8002922:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	401a      	ands	r2, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	429a      	cmp	r2, r3
 8002936:	d126      	bne.n	8002986 <I2C_IsErrorOccurred+0xe2>
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	01db      	lsls	r3, r3, #7
 800293e:	429a      	cmp	r2, r3
 8002940:	d021      	beq.n	8002986 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002942:	183b      	adds	r3, r7, r0
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d01d      	beq.n	8002986 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	01c9      	lsls	r1, r1, #7
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295c:	f7fe fb8e 	bl	800107c <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	e00f      	b.n	8002986 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002966:	f7fe fb89 	bl	800107c <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b19      	cmp	r3, #25
 8002972:	d908      	bls.n	8002986 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2220      	movs	r2, #32
 8002978:	4313      	orrs	r3, r2
 800297a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800297c:	2327      	movs	r3, #39	; 0x27
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]

              break;
 8002984:	e00b      	b.n	800299e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	2127      	movs	r1, #39	; 0x27
 8002992:	187a      	adds	r2, r7, r1
 8002994:	1879      	adds	r1, r7, r1
 8002996:	7809      	ldrb	r1, [r1, #0]
 8002998:	7011      	strb	r1, [r2, #0]
 800299a:	2b20      	cmp	r3, #32
 800299c:	d1e3      	bne.n	8002966 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d004      	beq.n	80029b6 <I2C_IsErrorOccurred+0x112>
 80029ac:	2327      	movs	r3, #39	; 0x27
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d092      	beq.n	80028dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029b6:	2327      	movs	r3, #39	; 0x27
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4313      	orrs	r3, r2
 80029ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d0:	2327      	movs	r3, #39	; 0x27
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	d00c      	beq.n	8002a04 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4313      	orrs	r3, r2
 80029f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	0052      	lsls	r2, r2, #1
 80029fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fc:	2327      	movs	r3, #39	; 0x27
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00c      	beq.n	8002a28 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2208      	movs	r2, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	00d2      	lsls	r2, r2, #3
 8002a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a20:	2327      	movs	r3, #39	; 0x27
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00c      	beq.n	8002a4c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	2202      	movs	r2, #2
 8002a36:	4313      	orrs	r3, r2
 8002a38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a44:	2327      	movs	r3, #39	; 0x27
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a4c:	2327      	movs	r3, #39	; 0x27
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01d      	beq.n	8002a92 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff fdae 	bl	80025ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <I2C_IsErrorOccurred+0x1fc>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2241      	movs	r2, #65	; 0x41
 8002a7e:	2120      	movs	r1, #32
 8002a80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2242      	movs	r2, #66	; 0x42
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2240      	movs	r2, #64	; 0x40
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002a92:	2327      	movs	r3, #39	; 0x27
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b00b      	add	sp, #44	; 0x2c
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	fe00e800 	.word	0xfe00e800

08002aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	0008      	movs	r0, r1
 8002aae:	0011      	movs	r1, r2
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	240a      	movs	r4, #10
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	2009      	movs	r0, #9
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	1c0a      	adds	r2, r1, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	059b      	lsls	r3, r3, #22
 8002ac8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	0419      	lsls	r1, r3, #16
 8002ad0:	23ff      	movs	r3, #255	; 0xff
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	0d51      	lsrs	r1, r2, #21
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	400a      	ands	r2, r1
 8002af6:	4907      	ldr	r1, [pc, #28]	; (8002b14 <I2C_TransferConfig+0x70>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	43d2      	mvns	r2, r2
 8002afc:	401a      	ands	r2, r3
 8002afe:	0011      	movs	r1, r2
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b007      	add	sp, #28
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	03ff63ff 	.word	0x03ff63ff

08002b18 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	000a      	movs	r2, r1
 8002b22:	1cbb      	adds	r3, r7, #2
 8002b24:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002b2a:	1cbb      	adds	r3, r7, #2
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d010      	beq.n	8002b56 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2242      	movs	r2, #66	; 0x42
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2241      	movs	r2, #65	; 0x41
 8002b40:	5c9b      	ldrb	r3, [r3, r2]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	001a      	movs	r2, r3
 8002b46:	2328      	movs	r3, #40	; 0x28
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b28      	cmp	r3, #40	; 0x28
 8002b4c:	d003      	beq.n	8002b56 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	22b0      	movs	r2, #176	; 0xb0
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b56:	1cbb      	adds	r3, r7, #2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d010      	beq.n	8002b82 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2244      	movs	r2, #68	; 0x44
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2241      	movs	r2, #65	; 0x41
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	001a      	movs	r2, r3
 8002b72:	2328      	movs	r3, #40	; 0x28
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b28      	cmp	r3, #40	; 0x28
 8002b78:	d003      	beq.n	8002b82 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22b0      	movs	r2, #176	; 0xb0
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b82:	1cbb      	adds	r3, r7, #2
 8002b84:	2200      	movs	r2, #0
 8002b86:	5e9b      	ldrsh	r3, [r3, r2]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da03      	bge.n	8002b94 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	22b8      	movs	r2, #184	; 0xb8
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b94:	1cbb      	adds	r3, r7, #2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d103      	bne.n	8002ba4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2290      	movs	r2, #144	; 0x90
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ba4:	1cbb      	adds	r3, r7, #2
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d103      	bne.n	8002bb4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002bb4:	1cbb      	adds	r3, r7, #2
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d103      	bne.n	8002bc4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	; 0x40
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43d9      	mvns	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2241      	movs	r2, #65	; 0x41
 8002bee:	5c9b      	ldrb	r3, [r3, r2]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d138      	bne.n	8002c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e032      	b.n	8002c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2241      	movs	r2, #65	; 0x41
 8002c10:	2124      	movs	r1, #36	; 0x24
 8002c12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	438a      	bics	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4911      	ldr	r1, [pc, #68]	; (8002c74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2241      	movs	r2, #65	; 0x41
 8002c58:	2120      	movs	r1, #32
 8002c5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
  }
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	ffffefff 	.word	0xffffefff

08002c78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2241      	movs	r2, #65	; 0x41
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d139      	bne.n	8002d02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e033      	b.n	8002d04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2241      	movs	r2, #65	; 0x41
 8002ca8:	2124      	movs	r1, #36	; 0x24
 8002caa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	438a      	bics	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2241      	movs	r2, #65	; 0x41
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b004      	add	sp, #16
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	fffff0ff 	.word	0xfffff0ff

08002d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d11f      	bne.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	0013      	movs	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	189b      	adds	r3, r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4912      	ldr	r1, [pc, #72]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7fd f9e0 	bl	8000108 <__udivsi3>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4e:	e008      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e001      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e009      	b.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d0ed      	beq.n	8002d50 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40007000 	.word	0x40007000
 8002d84:	fffff9ff 	.word	0xfffff9ff
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	000f4240 	.word	0x000f4240

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e2fe      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d100      	bne.n	8002dae <HAL_RCC_OscConfig+0x1e>
 8002dac:	e07c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dae:	4bc3      	ldr	r3, [pc, #780]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2238      	movs	r2, #56	; 0x38
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db8:	4bc0      	ldr	r3, [pc, #768]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_OscConfig+0x3e>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4bb9      	ldr	r3, [pc, #740]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d062      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x116>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d15e      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e2d9      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x78>
 8002df8:	4bb0      	ldr	r3, [pc, #704]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4baf      	ldr	r3, [pc, #700]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0249      	lsls	r1, r1, #9
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e020      	b.n	8002e4a <HAL_RCC_OscConfig+0xba>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	23a0      	movs	r3, #160	; 0xa0
 8002e0e:	02db      	lsls	r3, r3, #11
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d10e      	bne.n	8002e32 <HAL_RCC_OscConfig+0xa2>
 8002e14:	4ba9      	ldr	r3, [pc, #676]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4ba8      	ldr	r3, [pc, #672]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	02c9      	lsls	r1, r1, #11
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4ba6      	ldr	r3, [pc, #664]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4ba5      	ldr	r3, [pc, #660]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	0249      	lsls	r1, r1, #9
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0xba>
 8002e32:	4ba2      	ldr	r3, [pc, #648]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4ba1      	ldr	r3, [pc, #644]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e38:	49a1      	ldr	r1, [pc, #644]	; (80030c0 <HAL_RCC_OscConfig+0x330>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	4b9f      	ldr	r3, [pc, #636]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b9e      	ldr	r3, [pc, #632]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e44:	499f      	ldr	r1, [pc, #636]	; (80030c4 <HAL_RCC_OscConfig+0x334>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d014      	beq.n	8002e7c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe f913 	bl	800107c <HAL_GetTick>
 8002e56:	0003      	movs	r3, r0
 8002e58:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe f90e 	bl	800107c <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e298      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6e:	4b93      	ldr	r3, [pc, #588]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	029b      	lsls	r3, r3, #10
 8002e76:	4013      	ands	r3, r2
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0xcc>
 8002e7a:	e015      	b.n	8002ea8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe f8fe 	bl	800107c <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e86:	f7fe f8f9 	bl	800107c <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e283      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e98:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0xf6>
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d100      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x124>
 8002eb2:	e099      	b.n	8002fe8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb4:	4b81      	ldr	r3, [pc, #516]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2238      	movs	r2, #56	; 0x38
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x144>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d002      	beq.n	8002eda <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d135      	bne.n	8002f46 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eda:	4b78      	ldr	r3, [pc, #480]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x162>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e256      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a74      	ldr	r2, [pc, #464]	; (80030c8 <HAL_RCC_OscConfig+0x338>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	4b6e      	ldr	r3, [pc, #440]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d112      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f0e:	4b6b      	ldr	r3, [pc, #428]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x33c>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f22:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0adb      	lsrs	r3, r3, #11
 8002f28:	2207      	movs	r2, #7
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	4a68      	ldr	r2, [pc, #416]	; (80030d0 <HAL_RCC_OscConfig+0x340>)
 8002f2e:	40da      	lsrs	r2, r3
 8002f30:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x344>)
 8002f32:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f34:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <HAL_RCC_OscConfig+0x348>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7fe f843 	bl	8000fc4 <HAL_InitTick>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d051      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e22c      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d030      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5e      	ldr	r2, [pc, #376]	; (80030cc <HAL_RCC_OscConfig+0x33c>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe f884 	bl	800107c <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7a:	f7fe f87f 	bl	800107c <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e209      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4013      	ands	r3, r2
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	4b48      	ldr	r3, [pc, #288]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_RCC_OscConfig+0x338>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	021a      	lsls	r2, r3, #8
 8002fa8:	4b44      	ldr	r3, [pc, #272]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	e01b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002fb0:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002fb6:	4949      	ldr	r1, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x34c>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f85e 	bl	800107c <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fe f859 	bl	800107c <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1e3      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x236>
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d047      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ff2:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2238      	movs	r2, #56	; 0x38
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b18      	cmp	r3, #24
 8002ffc:	d10a      	bne.n	8003014 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d03c      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d138      	bne.n	8003082 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e1c5      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d019      	beq.n	8003050 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 800301e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003020:	4b26      	ldr	r3, [pc, #152]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f828 	bl	800107c <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003032:	f7fe f823 	bl	800107c <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1ad      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8003046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d0f1      	beq.n	8003032 <HAL_RCC_OscConfig+0x2a2>
 800304e:	e018      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8003052:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8003056:	2101      	movs	r1, #1
 8003058:	438a      	bics	r2, r1
 800305a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe f80e 	bl	800107c <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003066:	f7fe f809 	bl	800107c <HAL_GetTick>
 800306a:	0002      	movs	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e193      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003078:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	2202      	movs	r2, #2
 800307e:	4013      	ands	r3, r2
 8003080:	d1f1      	bne.n	8003066 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2204      	movs	r2, #4
 8003088:	4013      	ands	r3, r2
 800308a:	d100      	bne.n	800308e <HAL_RCC_OscConfig+0x2fe>
 800308c:	e0c6      	b.n	800321c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	231f      	movs	r3, #31
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2238      	movs	r2, #56	; 0x38
 800309c:	4013      	ands	r3, r2
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d11e      	bne.n	80030e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x32c>)
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	2202      	movs	r2, #2
 80030a8:	4013      	ands	r3, r2
 80030aa:	d100      	bne.n	80030ae <HAL_RCC_OscConfig+0x31e>
 80030ac:	e0b6      	b.n	800321c <HAL_RCC_OscConfig+0x48c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d000      	beq.n	80030b8 <HAL_RCC_OscConfig+0x328>
 80030b6:	e0b1      	b.n	800321c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e171      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
 80030bc:	40021000 	.word	0x40021000
 80030c0:	fffeffff 	.word	0xfffeffff
 80030c4:	fffbffff 	.word	0xfffbffff
 80030c8:	ffff80ff 	.word	0xffff80ff
 80030cc:	ffffc7ff 	.word	0xffffc7ff
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	20000004 	.word	0x20000004
 80030d8:	20000008 	.word	0x20000008
 80030dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e0:	4bb1      	ldr	r3, [pc, #708]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80030e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	055b      	lsls	r3, r3, #21
 80030e8:	4013      	ands	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_OscConfig+0x360>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x362>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	4bac      	ldr	r3, [pc, #688]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80030f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fa:	4bab      	ldr	r3, [pc, #684]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0549      	lsls	r1, r1, #21
 8003100:	430a      	orrs	r2, r1
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c
 8003104:	4ba8      	ldr	r3, [pc, #672]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	055b      	lsls	r3, r3, #21
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003112:	231f      	movs	r3, #31
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311a:	4ba4      	ldr	r3, [pc, #656]	; (80033ac <HAL_RCC_OscConfig+0x61c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003126:	4ba1      	ldr	r3, [pc, #644]	; (80033ac <HAL_RCC_OscConfig+0x61c>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4ba0      	ldr	r3, [pc, #640]	; (80033ac <HAL_RCC_OscConfig+0x61c>)
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0049      	lsls	r1, r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003134:	f7fd ffa2 	bl	800107c <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fd ff9d 	bl	800107c <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e127      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003150:	4b96      	ldr	r3, [pc, #600]	; (80033ac <HAL_RCC_OscConfig+0x61c>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4013      	ands	r3, r2
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x3e2>
 8003164:	4b90      	ldr	r3, [pc, #576]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003168:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800316a:	2101      	movs	r1, #1
 800316c:	430a      	orrs	r2, r1
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003170:	e01c      	b.n	80031ac <HAL_RCC_OscConfig+0x41c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b05      	cmp	r3, #5
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x404>
 800317a:	4b8b      	ldr	r3, [pc, #556]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800317c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800317e:	4b8a      	ldr	r3, [pc, #552]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003180:	2104      	movs	r1, #4
 8003182:	430a      	orrs	r2, r1
 8003184:	65da      	str	r2, [r3, #92]	; 0x5c
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800318a:	4b87      	ldr	r3, [pc, #540]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800318c:	2101      	movs	r1, #1
 800318e:	430a      	orrs	r2, r1
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0x41c>
 8003194:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003196:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003198:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800319a:	2101      	movs	r1, #1
 800319c:	438a      	bics	r2, r1
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c
 80031a0:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80031a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031a4:	4b80      	ldr	r3, [pc, #512]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80031a6:	2104      	movs	r1, #4
 80031a8:	438a      	bics	r2, r1
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d014      	beq.n	80031de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fd ff62 	bl	800107c <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031bc:	e009      	b.n	80031d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fd ff5d 	bl	800107c <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	4a79      	ldr	r2, [pc, #484]	; (80033b0 <HAL_RCC_OscConfig+0x620>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0e6      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	4b75      	ldr	r3, [pc, #468]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	2202      	movs	r2, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x42e>
 80031dc:	e013      	b.n	8003206 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd ff4d 	bl	800107c <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e6:	e009      	b.n	80031fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fd ff48 	bl	800107c <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	4a6f      	ldr	r2, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x620>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0d1      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031fc:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2202      	movs	r2, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003206:	231f      	movs	r3, #31
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003216:	4967      	ldr	r1, [pc, #412]	; (80033b4 <HAL_RCC_OscConfig+0x624>)
 8003218:	400a      	ands	r2, r1
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d100      	bne.n	8003226 <HAL_RCC_OscConfig+0x496>
 8003224:	e0bb      	b.n	800339e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003226:	4b60      	ldr	r3, [pc, #384]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2238      	movs	r2, #56	; 0x38
 800322c:	4013      	ands	r3, r2
 800322e:	2b10      	cmp	r3, #16
 8003230:	d100      	bne.n	8003234 <HAL_RCC_OscConfig+0x4a4>
 8003232:	e07b      	b.n	800332c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d156      	bne.n	80032ea <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323c:	4b5a      	ldr	r3, [pc, #360]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003242:	495d      	ldr	r1, [pc, #372]	; (80033b8 <HAL_RCC_OscConfig+0x628>)
 8003244:	400a      	ands	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fd ff18 	bl	800107c <HAL_GetTick>
 800324c:	0003      	movs	r3, r0
 800324e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fd ff13 	bl	800107c <HAL_GetTick>
 8003256:	0002      	movs	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e09d      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	049b      	lsls	r3, r3, #18
 800326c:	4013      	ands	r3, r2
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003270:	4b4d      	ldr	r3, [pc, #308]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a51      	ldr	r2, [pc, #324]	; (80033bc <HAL_RCC_OscConfig+0x62c>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	431a      	orrs	r2, r3
 800329e:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0449      	lsls	r1, r1, #17
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	0549      	lsls	r1, r1, #21
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd fedc 	bl	800107c <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd fed7 	bl	800107c <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e061      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	049b      	lsls	r3, r3, #18
 80032e4:	4013      	ands	r3, r2
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x53a>
 80032e8:	e059      	b.n	800339e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 80032f0:	4931      	ldr	r1, [pc, #196]	; (80033b8 <HAL_RCC_OscConfig+0x628>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd fec1 	bl	800107c <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd febc 	bl	800107c <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e046      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	049b      	lsls	r3, r3, #18
 800331a:	4013      	ands	r3, r2
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 8003324:	4926      	ldr	r1, [pc, #152]	; (80033c0 <HAL_RCC_OscConfig+0x630>)
 8003326:	400a      	ands	r2, r1
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e038      	b.n	800339e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e033      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x618>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2203      	movs	r2, #3
 8003342:	401a      	ands	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	429a      	cmp	r2, r3
 800334a:	d126      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2270      	movs	r2, #112	; 0x70
 8003350:	401a      	ands	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d11f      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	23fe      	movs	r3, #254	; 0xfe
 800335e:	01db      	lsls	r3, r3, #7
 8003360:	401a      	ands	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d116      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	23f8      	movs	r3, #248	; 0xf8
 8003370:	039b      	lsls	r3, r3, #14
 8003372:	401a      	ands	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d10e      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	23e0      	movs	r3, #224	; 0xe0
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	0f5b      	lsrs	r3, r3, #29
 8003390:	075a      	lsls	r2, r3, #29
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b008      	add	sp, #32
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
 80033b0:	00001388 	.word	0x00001388
 80033b4:	efffffff 	.word	0xefffffff
 80033b8:	feffffff 	.word	0xfeffffff
 80033bc:	11c1808c 	.word	0x11c1808c
 80033c0:	eefefffc 	.word	0xeefefffc

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0e9      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2207      	movs	r2, #7
 80033de:	4013      	ands	r3, r2
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d91e      	bls.n	8003424 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2207      	movs	r2, #7
 80033ec:	4393      	bics	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	4b70      	ldr	r3, [pc, #448]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033f8:	f7fd fe40 	bl	800107c <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003400:	e009      	b.n	8003416 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003402:	f7fd fe3b 	bl	800107c <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_RCC_ClockConfig+0x1f4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0ca      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2207      	movs	r2, #7
 800341c:	4013      	ands	r3, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2202      	movs	r2, #2
 800342a:	4013      	ands	r3, r2
 800342c:	d015      	beq.n	800345a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2204      	movs	r2, #4
 8003434:	4013      	ands	r3, r2
 8003436:	d006      	beq.n	8003446 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003438:	4b60      	ldr	r3, [pc, #384]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 800343e:	21e0      	movs	r1, #224	; 0xe0
 8003440:	01c9      	lsls	r1, r1, #7
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003446:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4a5d      	ldr	r2, [pc, #372]	; (80035c0 <HAL_RCC_ClockConfig+0x1fc>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	4013      	ands	r3, r2
 8003462:	d057      	beq.n	8003514 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346c:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	029b      	lsls	r3, r3, #10
 8003474:	4013      	ands	r3, r2
 8003476:	d12b      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e097      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d107      	bne.n	8003494 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	049b      	lsls	r3, r3, #18
 800348c:	4013      	ands	r3, r2
 800348e:	d11f      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e08b      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349c:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4013      	ands	r3, r2
 80034a6:	d113      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e07f      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b4:	4b41      	ldr	r3, [pc, #260]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 80034b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b8:	2202      	movs	r2, #2
 80034ba:	4013      	ands	r3, r2
 80034bc:	d108      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e074      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c2:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e06d      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034d0:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2207      	movs	r2, #7
 80034d6:	4393      	bics	r3, r2
 80034d8:	0019      	movs	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e4:	f7fd fdca 	bl	800107c <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ec:	e009      	b.n	8003502 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ee:	f7fd fdc5 	bl	800107c <HAL_GetTick>
 80034f2:	0002      	movs	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <HAL_RCC_ClockConfig+0x1f4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e054      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2238      	movs	r2, #56	; 0x38
 8003508:	401a      	ands	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	429a      	cmp	r2, r3
 8003512:	d1ec      	bne.n	80034ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2207      	movs	r2, #7
 800351a:	4013      	ands	r3, r2
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d21e      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2207      	movs	r2, #7
 8003528:	4393      	bics	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003534:	f7fd fda2 	bl	800107c <HAL_GetTick>
 8003538:	0003      	movs	r3, r0
 800353a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800353c:	e009      	b.n	8003552 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353e:	f7fd fd9d 	bl	800107c <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_RCC_ClockConfig+0x1f4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e02c      	b.n	80035ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2207      	movs	r2, #7
 8003558:	4013      	ands	r3, r2
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d1ee      	bne.n	800353e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2204      	movs	r2, #4
 8003566:	4013      	ands	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_ClockConfig+0x200>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800357e:	f000 f829 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003582:	0001      	movs	r1, r0
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_ClockConfig+0x1f8>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	220f      	movs	r2, #15
 800358c:	401a      	ands	r2, r3
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_RCC_ClockConfig+0x204>)
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	58d3      	ldr	r3, [r2, r3]
 8003594:	221f      	movs	r2, #31
 8003596:	4013      	ands	r3, r2
 8003598:	000a      	movs	r2, r1
 800359a:	40da      	lsrs	r2, r3
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x208>)
 800359e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x20c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fd0d 	bl	8000fc4 <HAL_InitTick>
 80035aa:	0003      	movs	r3, r0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40022000 	.word	0x40022000
 80035b8:	00001388 	.word	0x00001388
 80035bc:	40021000 	.word	0x40021000
 80035c0:	fffff0ff 	.word	0xfffff0ff
 80035c4:	ffff8fff 	.word	0xffff8fff
 80035c8:	08004efc 	.word	0x08004efc
 80035cc:	20000004 	.word	0x20000004
 80035d0:	20000008 	.word	0x20000008

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035da:	4b3c      	ldr	r3, [pc, #240]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2238      	movs	r2, #56	; 0x38
 80035e0:	4013      	ands	r3, r2
 80035e2:	d10f      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0adb      	lsrs	r3, r3, #11
 80035ea:	2207      	movs	r2, #7
 80035ec:	4013      	ands	r3, r2
 80035ee:	2201      	movs	r2, #1
 80035f0:	409a      	lsls	r2, r3
 80035f2:	0013      	movs	r3, r2
 80035f4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	4835      	ldr	r0, [pc, #212]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035fa:	f7fc fd85 	bl	8000108 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e05d      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003604:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2238      	movs	r2, #56	; 0x38
 800360a:	4013      	ands	r3, r2
 800360c:	2b08      	cmp	r3, #8
 800360e:	d102      	bne.n	8003616 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003610:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e054      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2238      	movs	r2, #56	; 0x38
 800361c:	4013      	ands	r3, r2
 800361e:	2b10      	cmp	r3, #16
 8003620:	d138      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2203      	movs	r2, #3
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	2207      	movs	r2, #7
 8003634:	4013      	ands	r3, r2
 8003636:	3301      	adds	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d10d      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	4824      	ldr	r0, [pc, #144]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003644:	f7fc fd60 	bl	8000108 <__udivsi3>
 8003648:	0003      	movs	r3, r0
 800364a:	0019      	movs	r1, r3
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	227f      	movs	r2, #127	; 0x7f
 8003654:	4013      	ands	r3, r2
 8003656:	434b      	muls	r3, r1
 8003658:	617b      	str	r3, [r7, #20]
        break;
 800365a:	e00d      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	481c      	ldr	r0, [pc, #112]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003660:	f7fc fd52 	bl	8000108 <__udivsi3>
 8003664:	0003      	movs	r3, r0
 8003666:	0019      	movs	r1, r3
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	227f      	movs	r2, #127	; 0x7f
 8003670:	4013      	ands	r3, r2
 8003672:	434b      	muls	r3, r1
 8003674:	617b      	str	r3, [r7, #20]
        break;
 8003676:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	0f5b      	lsrs	r3, r3, #29
 800367e:	2207      	movs	r2, #7
 8003680:	4013      	ands	r3, r2
 8003682:	3301      	adds	r3, #1
 8003684:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	6978      	ldr	r0, [r7, #20]
 800368a:	f7fc fd3d 	bl	8000108 <__udivsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e015      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2238      	movs	r2, #56	; 0x38
 800369a:	4013      	ands	r3, r2
 800369c:	2b20      	cmp	r3, #32
 800369e:	d103      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2238      	movs	r2, #56	; 0x38
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b18      	cmp	r3, #24
 80036b2:	d103      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80036b4:	23fa      	movs	r3, #250	; 0xfa
 80036b6:	01db      	lsls	r3, r3, #7
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e001      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036c0:	693b      	ldr	r3, [r7, #16]
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b006      	add	sp, #24
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	40021000 	.word	0x40021000
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	007a1200 	.word	0x007a1200

080036d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036e0:	2313      	movs	r3, #19
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036e8:	2312      	movs	r3, #18
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	4013      	ands	r3, r2
 80036fa:	d100      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036fc:	e0ad      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2011      	movs	r0, #17
 8003700:	183b      	adds	r3, r7, r0
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	4013      	ands	r3, r2
 8003710:	d110      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	4b44      	ldr	r3, [pc, #272]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0549      	lsls	r1, r1, #21
 800371c:	430a      	orrs	r2, r1
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003720:	4b40      	ldr	r3, [pc, #256]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	055b      	lsls	r3, r3, #21
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	183b      	adds	r3, r7, r0
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003734:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	0049      	lsls	r1, r1, #1
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003742:	f7fd fc9b 	bl	800107c <HAL_GetTick>
 8003746:	0003      	movs	r3, r0
 8003748:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800374a:	e00b      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374c:	f7fd fc96 	bl	800107c <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d904      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800375a:	2313      	movs	r3, #19
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2203      	movs	r2, #3
 8003760:	701a      	strb	r2, [r3, #0]
        break;
 8003762:	e005      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003764:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4013      	ands	r3, r2
 800376e:	d0ed      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003770:	2313      	movs	r3, #19
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d15e      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800377c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800377e:	23c0      	movs	r3, #192	; 0xc0
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4013      	ands	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d019      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	429a      	cmp	r2, r3
 8003794:	d014      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	4a24      	ldr	r2, [pc, #144]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800379c:	4013      	ands	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	0249      	lsls	r1, r1, #9
 80037aa:	430a      	orrs	r2, r1
 80037ac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037b4:	491e      	ldr	r1, [pc, #120]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	d016      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd fc58 	bl	800107c <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d0:	e00c      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd fc53 	bl	800107c <HAL_GetTick>
 80037d6:	0002      	movs	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d904      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037e2:	2313      	movs	r3, #19
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2203      	movs	r2, #3
 80037e8:	701a      	strb	r2, [r3, #0]
            break;
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	2202      	movs	r2, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d0ed      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037f6:	2313      	movs	r3, #19
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003810:	430a      	orrs	r2, r1
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c
 8003814:	e016      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003816:	2312      	movs	r3, #18
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2213      	movs	r2, #19
 800381c:	18ba      	adds	r2, r7, r2
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e00f      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	fffffcff 	.word	0xfffffcff
 8003830:	fffeffff 	.word	0xfffeffff
 8003834:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	2312      	movs	r3, #18
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2213      	movs	r2, #19
 800383e:	18ba      	adds	r2, r7, r2
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003844:	2311      	movs	r3, #17
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d105      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b84      	ldr	r3, [pc, #528]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003852:	4b83      	ldr	r3, [pc, #524]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003854:	4983      	ldr	r1, [pc, #524]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003856:	400a      	ands	r2, r1
 8003858:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2203      	movs	r2, #3
 800386a:	4393      	bics	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003874:	430a      	orrs	r2, r1
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003882:	4b77      	ldr	r3, [pc, #476]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	220c      	movs	r2, #12
 8003888:	4393      	bics	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003892:	430a      	orrs	r2, r1
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	4013      	ands	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a0:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	4a70      	ldr	r2, [pc, #448]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4013      	ands	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c0:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	4b64      	ldr	r3, [pc, #400]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80038d0:	430a      	orrs	r2, r1
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4013      	ands	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038e0:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	4a62      	ldr	r2, [pc, #392]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	4b5c      	ldr	r3, [pc, #368]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80038f0:	430a      	orrs	r2, r1
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2220      	movs	r2, #32
 80038fa:	4013      	ands	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	4b58      	ldr	r3, [pc, #352]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003904:	4013      	ands	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800390e:	430a      	orrs	r2, r1
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	02db      	lsls	r3, r3, #11
 800391a:	4013      	ands	r3, r2
 800391c:	d016      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800391e:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800392e:	430a      	orrs	r2, r1
 8003930:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1a      	ldr	r2, [r3, #32]
 8003936:	23c0      	movs	r3, #192	; 0xc0
 8003938:	051b      	lsls	r3, r3, #20
 800393a:	429a      	cmp	r2, r3
 800393c:	d106      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800393e:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0449      	lsls	r1, r1, #17
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	01db      	lsls	r3, r3, #7
 8003954:	4013      	ands	r3, r2
 8003956:	d015      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003958:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	0899      	lsrs	r1, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003964:	4b3e      	ldr	r3, [pc, #248]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003966:	430a      	orrs	r2, r1
 8003968:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	05db      	lsls	r3, r3, #23
 8003972:	429a      	cmp	r2, r3
 8003974:	d106      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003976:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	0249      	lsls	r1, r1, #9
 8003980:	430a      	orrs	r2, r1
 8003982:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	031b      	lsls	r3, r3, #12
 800398c:	4013      	ands	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003990:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	4393      	bics	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	039b      	lsls	r3, r3, #14
 80039ac:	4013      	ands	r3, r2
 80039ae:	d016      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	4a31      	ldr	r2, [pc, #196]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	03db      	lsls	r3, r3, #15
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d106      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	0449      	lsls	r1, r1, #17
 80039da:	430a      	orrs	r2, r1
 80039dc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	03db      	lsls	r3, r3, #15
 80039e6:	4013      	ands	r3, r2
 80039e8:	d016      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	0019      	movs	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80039fa:	430a      	orrs	r2, r1
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	045b      	lsls	r3, r3, #17
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d106      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	0449      	lsls	r1, r1, #17
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	d016      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d106      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	0249      	lsls	r1, r1, #9
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003a52:	2312      	movs	r3, #18
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b006      	add	sp, #24
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	efffffff 	.word	0xefffffff
 8003a68:	fffff3ff 	.word	0xfffff3ff
 8003a6c:	fff3ffff 	.word	0xfff3ffff
 8003a70:	ffcfffff 	.word	0xffcfffff
 8003a74:	ffffcfff 	.word	0xffffcfff
 8003a78:	f3ffffff 	.word	0xf3ffffff
 8003a7c:	ffbfffff 	.word	0xffbfffff
 8003a80:	feffffff 	.word	0xfeffffff
 8003a84:	ffff3fff 	.word	0xffff3fff

08003a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e04a      	b.n	8003b30 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	223d      	movs	r2, #61	; 0x3d
 8003a9e:	5c9b      	ldrb	r3, [r3, r2]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	223c      	movs	r2, #60	; 0x3c
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7fc fff5 	bl	8000aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	223d      	movs	r2, #61	; 0x3d
 8003aba:	2102      	movs	r1, #2
 8003abc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	0010      	movs	r0, r2
 8003aca:	f000 fcaf 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2248      	movs	r2, #72	; 0x48
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	223e      	movs	r2, #62	; 0x3e
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	5499      	strb	r1, [r3, r2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2240      	movs	r2, #64	; 0x40
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2241      	movs	r2, #65	; 0x41
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2242      	movs	r2, #66	; 0x42
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2243      	movs	r2, #67	; 0x43
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2244      	movs	r2, #68	; 0x44
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2245      	movs	r2, #69	; 0x45
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2246      	movs	r2, #70	; 0x46
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2247      	movs	r2, #71	; 0x47
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	223d      	movs	r2, #61	; 0x3d
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e04a      	b.n	8003be0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223d      	movs	r2, #61	; 0x3d
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	223c      	movs	r2, #60	; 0x3c
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f841 	bl	8003be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	223d      	movs	r2, #61	; 0x3d
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	0019      	movs	r1, r3
 8003b78:	0010      	movs	r0, r2
 8003b7a:	f000 fc57 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2248      	movs	r2, #72	; 0x48
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	223e      	movs	r2, #62	; 0x3e
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2241      	movs	r2, #65	; 0x41
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2242      	movs	r2, #66	; 0x42
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2243      	movs	r2, #67	; 0x43
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2244      	movs	r2, #68	; 0x44
 8003bba:	2101      	movs	r1, #1
 8003bbc:	5499      	strb	r1, [r3, r2]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2245      	movs	r2, #69	; 0x45
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	5499      	strb	r1, [r3, r2]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2246      	movs	r2, #70	; 0x46
 8003bca:	2101      	movs	r1, #1
 8003bcc:	5499      	strb	r1, [r3, r2]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2247      	movs	r2, #71	; 0x47
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	223d      	movs	r2, #61	; 0x3d
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x22>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	223e      	movs	r2, #62	; 0x3e
 8003c0c:	5c9b      	ldrb	r3, [r3, r2]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	1e5a      	subs	r2, r3, #1
 8003c14:	4193      	sbcs	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e037      	b.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d108      	bne.n	8003c32 <HAL_TIM_PWM_Start+0x3a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223f      	movs	r2, #63	; 0x3f
 8003c24:	5c9b      	ldrb	r3, [r3, r2]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	4193      	sbcs	r3, r2
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	e02b      	b.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d108      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x52>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2240      	movs	r2, #64	; 0x40
 8003c3c:	5c9b      	ldrb	r3, [r3, r2]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	4193      	sbcs	r3, r2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e01f      	b.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d108      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2241      	movs	r2, #65	; 0x41
 8003c54:	5c9b      	ldrb	r3, [r3, r2]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	4193      	sbcs	r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d108      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x82>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2242      	movs	r2, #66	; 0x42
 8003c6c:	5c9b      	ldrb	r3, [r3, r2]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	4193      	sbcs	r3, r2
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e007      	b.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2243      	movs	r2, #67	; 0x43
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	4193      	sbcs	r3, r2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e08b      	b.n	8003daa <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	223e      	movs	r2, #62	; 0x3e
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	5499      	strb	r1, [r3, r2]
 8003ca0:	e023      	b.n	8003cea <HAL_TIM_PWM_Start+0xf2>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xba>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	223f      	movs	r2, #63	; 0x3f
 8003cac:	2102      	movs	r1, #2
 8003cae:	5499      	strb	r1, [r3, r2]
 8003cb0:	e01b      	b.n	8003cea <HAL_TIM_PWM_Start+0xf2>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0xca>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	5499      	strb	r1, [r3, r2]
 8003cc0:	e013      	b.n	8003cea <HAL_TIM_PWM_Start+0xf2>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0xda>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2241      	movs	r2, #65	; 0x41
 8003ccc:	2102      	movs	r1, #2
 8003cce:	5499      	strb	r1, [r3, r2]
 8003cd0:	e00b      	b.n	8003cea <HAL_TIM_PWM_Start+0xf2>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xea>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2242      	movs	r2, #66	; 0x42
 8003cdc:	2102      	movs	r1, #2
 8003cde:	5499      	strb	r1, [r3, r2]
 8003ce0:	e003      	b.n	8003cea <HAL_TIM_PWM_Start+0xf2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2243      	movs	r2, #67	; 0x43
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6839      	ldr	r1, [r7, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 ff7a 	bl	8004bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <HAL_TIM_PWM_Start+0x1bc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x128>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2c      	ldr	r2, [pc, #176]	; (8003db8 <HAL_TIM_PWM_Start+0x1c0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x128>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	; (8003dbc <HAL_TIM_PWM_Start+0x1c4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIM_PWM_Start+0x128>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a29      	ldr	r2, [pc, #164]	; (8003dc0 <HAL_TIM_PWM_Start+0x1c8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_PWM_Start+0x12c>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_TIM_PWM_Start+0x12e>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	0209      	lsls	r1, r1, #8
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_TIM_PWM_Start+0x1bc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x16e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	05db      	lsls	r3, r3, #23
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d009      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x16e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_TIM_PWM_Start+0x1cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x16e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <HAL_TIM_PWM_Start+0x1c0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d116      	bne.n	8003d94 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIM_PWM_Start+0x1d0>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d016      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x1ae>
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	025b      	lsls	r3, r3, #9
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d011      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	e008      	b.n	8003da6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e000      	b.n	8003da8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	00010007 	.word	0x00010007

08003dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d124      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2202      	movs	r2, #2
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d11d      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4252      	negs	r2, r2
 8003df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2203      	movs	r2, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 faf4 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003e14:	e007      	b.n	8003e26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 fae7 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 faf3 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2204      	movs	r2, #4
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d125      	bne.n	8003e86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2204      	movs	r2, #4
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d11e      	bne.n	8003e86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	4252      	negs	r2, r2
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	23c0      	movs	r3, #192	; 0xc0
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f000 fac7 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003e6e:	e007      	b.n	8003e80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 faba 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fac6 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d124      	bne.n	8003ede <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d11d      	bne.n	8003ede <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2209      	movs	r2, #9
 8003ea8:	4252      	negs	r2, r2
 8003eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2204      	movs	r2, #4
 8003eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 fa9b 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 fa8e 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fa9a 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d125      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d11e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2211      	movs	r2, #17
 8003f00:	4252      	negs	r2, r2
 8003f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2208      	movs	r2, #8
 8003f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	23c0      	movs	r3, #192	; 0xc0
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4013      	ands	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fa6e 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003f20:	e007      	b.n	8003f32 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 fa61 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 fa6d 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d10f      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d108      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4252      	negs	r2, r2
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 fa3b 	bl	80043dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d10f      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2280      	movs	r2, #128	; 0x80
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	d108      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2281      	movs	r2, #129	; 0x81
 8003f88:	4252      	negs	r2, r2
 8003f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 ff6c 	bl	8004e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d107      	bne.n	8003fc6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIM_IRQHandler+0x260>)
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 ff5b 	bl	8004e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d108      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2241      	movs	r2, #65	; 0x41
 8003fe8:	4252      	negs	r2, r2
 8003fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 fa14 	bl	800441c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d10f      	bne.n	8004022 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	4013      	ands	r3, r2
 800400c:	2b20      	cmp	r3, #32
 800400e:	d108      	bne.n	8004022 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2221      	movs	r2, #33	; 0x21
 8004016:	4252      	negs	r2, r2
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 ff1d 	bl	8004e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	fffffeff 	.word	0xfffffeff

08004030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	2317      	movs	r3, #23
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	223c      	movs	r2, #60	; 0x3c
 8004048:	5c9b      	ldrb	r3, [r3, r2]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x22>
 800404e:	2302      	movs	r3, #2
 8004050:	e0e5      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	223c      	movs	r2, #60	; 0x3c
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b14      	cmp	r3, #20
 800405e:	d900      	bls.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004060:	e0d1      	b.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	0011      	movs	r1, r2
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fa58 	bl	800452c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2108      	movs	r1, #8
 8004088:	430a      	orrs	r2, r1
 800408a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2104      	movs	r1, #4
 8004098:	438a      	bics	r2, r1
 800409a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	619a      	str	r2, [r3, #24]
      break;
 80040ae:	e0af      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	0011      	movs	r1, r2
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 fac1 	bl	8004640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699a      	ldr	r2, [r3, #24]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0109      	lsls	r1, r1, #4
 80040cc:	430a      	orrs	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4954      	ldr	r1, [pc, #336]	; (800422c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040dc:	400a      	ands	r2, r1
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	619a      	str	r2, [r3, #24]
      break;
 80040f4:	e08c      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 fb22 	bl	8004748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2108      	movs	r1, #8
 8004110:	430a      	orrs	r2, r1
 8004112:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2104      	movs	r1, #4
 8004120:	438a      	bics	r2, r1
 8004122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69d9      	ldr	r1, [r3, #28]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	61da      	str	r2, [r3, #28]
      break;
 8004136:	e06b      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	0011      	movs	r1, r2
 8004140:	0018      	movs	r0, r3
 8004142:	f000 fb89 	bl	8004858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	0109      	lsls	r1, r1, #4
 8004154:	430a      	orrs	r2, r1
 8004156:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4932      	ldr	r1, [pc, #200]	; (800422c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004164:	400a      	ands	r2, r1
 8004166:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69d9      	ldr	r1, [r3, #28]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	61da      	str	r2, [r3, #28]
      break;
 800417c:	e048      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	0011      	movs	r1, r2
 8004186:	0018      	movs	r0, r3
 8004188:	f000 fbd0 	bl	800492c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2108      	movs	r1, #8
 8004198:	430a      	orrs	r2, r1
 800419a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2104      	movs	r1, #4
 80041a8:	438a      	bics	r2, r1
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041be:	e027      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	0011      	movs	r1, r2
 80041c8:	0018      	movs	r0, r3
 80041ca:	f000 fc0f 	bl	80049ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	0109      	lsls	r1, r1, #4
 80041dc:	430a      	orrs	r2, r1
 80041de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4910      	ldr	r1, [pc, #64]	; (800422c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041ec:	400a      	ands	r2, r1
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004204:	e004      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004206:	2317      	movs	r3, #23
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
      break;
 800420e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	223c      	movs	r2, #60	; 0x3c
 8004214:	2100      	movs	r1, #0
 8004216:	5499      	strb	r1, [r3, r2]

  return status;
 8004218:	2317      	movs	r3, #23
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	781b      	ldrb	r3, [r3, #0]
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b006      	add	sp, #24
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	08004f3c 	.word	0x08004f3c
 800422c:	fffffbff 	.word	0xfffffbff

08004230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	230f      	movs	r3, #15
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	223c      	movs	r2, #60	; 0x3c
 8004246:	5c9b      	ldrb	r3, [r3, r2]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIM_ConfigClockSource+0x20>
 800424c:	2302      	movs	r3, #2
 800424e:	e0bc      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x19a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	223c      	movs	r2, #60	; 0x3c
 8004254:	2101      	movs	r1, #1
 8004256:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	223d      	movs	r2, #61	; 0x3d
 800425c:	2102      	movs	r1, #2
 800425e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800426c:	4013      	ands	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a59      	ldr	r2, [pc, #356]	; (80043d8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	0192      	lsls	r2, r2, #6
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xde>
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	0192      	lsls	r2, r2, #6
 8004290:	4293      	cmp	r3, r2
 8004292:	d900      	bls.n	8004296 <HAL_TIM_ConfigClockSource+0x66>
 8004294:	e088      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	0152      	lsls	r2, r2, #5
 800429a:	4293      	cmp	r3, r2
 800429c:	d100      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x70>
 800429e:	e088      	b.n	80043b2 <HAL_TIM_ConfigClockSource+0x182>
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	0152      	lsls	r2, r2, #5
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d900      	bls.n	80042aa <HAL_TIM_ConfigClockSource+0x7a>
 80042a8:	e07e      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042aa:	2b70      	cmp	r3, #112	; 0x70
 80042ac:	d018      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xb0>
 80042ae:	d900      	bls.n	80042b2 <HAL_TIM_ConfigClockSource+0x82>
 80042b0:	e07a      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042b2:	2b60      	cmp	r3, #96	; 0x60
 80042b4:	d04f      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x126>
 80042b6:	d900      	bls.n	80042ba <HAL_TIM_ConfigClockSource+0x8a>
 80042b8:	e076      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042ba:	2b50      	cmp	r3, #80	; 0x50
 80042bc:	d03b      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x106>
 80042be:	d900      	bls.n	80042c2 <HAL_TIM_ConfigClockSource+0x92>
 80042c0:	e072      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d057      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x146>
 80042c6:	d900      	bls.n	80042ca <HAL_TIM_ConfigClockSource+0x9a>
 80042c8:	e06e      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042ca:	2b30      	cmp	r3, #48	; 0x30
 80042cc:	d063      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042ce:	d86b      	bhi.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d060      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042d4:	d868      	bhi.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05d      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d05b      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042de:	e063      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042f0:	f000 fc5c 	bl	8004bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2277      	movs	r2, #119	; 0x77
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e052      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	f000 fc45 	bl	8004bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	01c9      	lsls	r1, r1, #7
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
      break;
 8004334:	e03e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004342:	001a      	movs	r2, r3
 8004344:	f000 fbb6 	bl	8004ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2150      	movs	r1, #80	; 0x50
 800434e:	0018      	movs	r0, r3
 8004350:	f000 fc10 	bl	8004b74 <TIM_ITRx_SetConfig>
      break;
 8004354:	e02e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004362:	001a      	movs	r2, r3
 8004364:	f000 fbd4 	bl	8004b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2160      	movs	r1, #96	; 0x60
 800436e:	0018      	movs	r0, r3
 8004370:	f000 fc00 	bl	8004b74 <TIM_ITRx_SetConfig>
      break;
 8004374:	e01e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004382:	001a      	movs	r2, r3
 8004384:	f000 fb96 	bl	8004ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2140      	movs	r1, #64	; 0x40
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fbf0 	bl	8004b74 <TIM_ITRx_SetConfig>
      break;
 8004394:	e00e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	0019      	movs	r1, r3
 80043a0:	0010      	movs	r0, r2
 80043a2:	f000 fbe7 	bl	8004b74 <TIM_ITRx_SetConfig>
      break;
 80043a6:	e005      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
      break;
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80043b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	223d      	movs	r2, #61	; 0x3d
 80043b8:	2101      	movs	r1, #1
 80043ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	223c      	movs	r2, #60	; 0x3c
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

  return status;
 80043c4:	230f      	movs	r3, #15
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	781b      	ldrb	r3, [r3, #0]
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	ffceff88 	.word	0xffceff88
 80043d8:	ffff00ff 	.word	0xffff00ff

080043dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a34      	ldr	r2, [pc, #208]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d008      	beq.n	8004456 <TIM_Base_SetConfig+0x2a>
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	05db      	lsls	r3, r3, #23
 800444a:	429a      	cmp	r2, r3
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0x2a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a30      	ldr	r2, [pc, #192]	; (8004514 <TIM_Base_SetConfig+0xe8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2270      	movs	r2, #112	; 0x70
 800445a:	4393      	bics	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a29      	ldr	r2, [pc, #164]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d018      	beq.n	80044a2 <TIM_Base_SetConfig+0x76>
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	05db      	lsls	r3, r3, #23
 8004476:	429a      	cmp	r2, r3
 8004478:	d013      	beq.n	80044a2 <TIM_Base_SetConfig+0x76>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <TIM_Base_SetConfig+0xe8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00f      	beq.n	80044a2 <TIM_Base_SetConfig+0x76>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <TIM_Base_SetConfig+0xec>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00b      	beq.n	80044a2 <TIM_Base_SetConfig+0x76>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <TIM_Base_SetConfig+0xf0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <TIM_Base_SetConfig+0x76>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a22      	ldr	r2, [pc, #136]	; (8004520 <TIM_Base_SetConfig+0xf4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_Base_SetConfig+0x76>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a21      	ldr	r2, [pc, #132]	; (8004524 <TIM_Base_SetConfig+0xf8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d108      	bne.n	80044b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <TIM_Base_SetConfig+0xfc>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2280      	movs	r2, #128	; 0x80
 80044b8:	4393      	bics	r3, r2
 80044ba:	001a      	movs	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_Base_SetConfig+0xce>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <TIM_Base_SetConfig+0xf0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <TIM_Base_SetConfig+0xce>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <TIM_Base_SetConfig+0xf4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_Base_SetConfig+0xce>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <TIM_Base_SetConfig+0xf8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d103      	bne.n	8004502 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	615a      	str	r2, [r3, #20]
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40002000 	.word	0x40002000
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800
 8004528:	fffffcff 	.word	0xfffffcff

0800452c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	2201      	movs	r2, #1
 800453c:	4393      	bics	r3, r2
 800453e:	001a      	movs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a32      	ldr	r2, [pc, #200]	; (8004624 <TIM_OC1_SetConfig+0xf8>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2203      	movs	r2, #3
 8004562:	4393      	bics	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2202      	movs	r2, #2
 8004574:	4393      	bics	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a28      	ldr	r2, [pc, #160]	; (8004628 <TIM_OC1_SetConfig+0xfc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <TIM_OC1_SetConfig+0x76>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <TIM_OC1_SetConfig+0x100>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_OC1_SetConfig+0x76>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <TIM_OC1_SetConfig+0x104>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_OC1_SetConfig+0x76>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a25      	ldr	r2, [pc, #148]	; (8004634 <TIM_OC1_SetConfig+0x108>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10c      	bne.n	80045bc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2208      	movs	r2, #8
 80045a6:	4393      	bics	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2204      	movs	r2, #4
 80045b8:	4393      	bics	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <TIM_OC1_SetConfig+0xfc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_OC1_SetConfig+0xb0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a19      	ldr	r2, [pc, #100]	; (800462c <TIM_OC1_SetConfig+0x100>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_OC1_SetConfig+0xb0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <TIM_OC1_SetConfig+0x104>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_OC1_SetConfig+0xb0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a17      	ldr	r2, [pc, #92]	; (8004634 <TIM_OC1_SetConfig+0x108>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d111      	bne.n	8004600 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4a16      	ldr	r2, [pc, #88]	; (8004638 <TIM_OC1_SetConfig+0x10c>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <TIM_OC1_SetConfig+0x110>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b006      	add	sp, #24
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	fffeff8f 	.word	0xfffeff8f
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40014000 	.word	0x40014000
 8004630:	40014400 	.word	0x40014400
 8004634:	40014800 	.word	0x40014800
 8004638:	fffffeff 	.word	0xfffffeff
 800463c:	fffffdff 	.word	0xfffffdff

08004640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	2210      	movs	r2, #16
 8004650:	4393      	bics	r3, r2
 8004652:	001a      	movs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a2e      	ldr	r2, [pc, #184]	; (8004728 <TIM_OC2_SetConfig+0xe8>)
 800466e:	4013      	ands	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a2d      	ldr	r2, [pc, #180]	; (800472c <TIM_OC2_SetConfig+0xec>)
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2220      	movs	r2, #32
 800468a:	4393      	bics	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <TIM_OC2_SetConfig+0xf0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10d      	bne.n	80046be <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	4393      	bics	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2240      	movs	r2, #64	; 0x40
 80046ba:	4393      	bics	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <TIM_OC2_SetConfig+0xf0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC2_SetConfig+0x9e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <TIM_OC2_SetConfig+0xf4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC2_SetConfig+0x9e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <TIM_OC2_SetConfig+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC2_SetConfig+0x9e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <TIM_OC2_SetConfig+0xfc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d113      	bne.n	8004706 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4a17      	ldr	r2, [pc, #92]	; (8004740 <TIM_OC2_SetConfig+0x100>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <TIM_OC2_SetConfig+0x104>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b006      	add	sp, #24
 8004726:	bd80      	pop	{r7, pc}
 8004728:	feff8fff 	.word	0xfeff8fff
 800472c:	fffffcff 	.word	0xfffffcff
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800
 8004740:	fffffbff 	.word	0xfffffbff
 8004744:	fffff7ff 	.word	0xfffff7ff

08004748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	4a35      	ldr	r2, [pc, #212]	; (800482c <TIM_OC3_SetConfig+0xe4>)
 8004758:	401a      	ands	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <TIM_OC3_SetConfig+0xe8>)
 8004774:	4013      	ands	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2203      	movs	r2, #3
 800477c:	4393      	bics	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <TIM_OC3_SetConfig+0xec>)
 800478e:	4013      	ands	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a25      	ldr	r2, [pc, #148]	; (8004838 <TIM_OC3_SetConfig+0xf0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10d      	bne.n	80047c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	4a24      	ldr	r2, [pc, #144]	; (800483c <TIM_OC3_SetConfig+0xf4>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <TIM_OC3_SetConfig+0xf8>)
 80047be:	4013      	ands	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <TIM_OC3_SetConfig+0xf0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_OC3_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <TIM_OC3_SetConfig+0xfc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_OC3_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <TIM_OC3_SetConfig+0x100>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_OC3_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <TIM_OC3_SetConfig+0x104>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d113      	bne.n	800480a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <TIM_OC3_SetConfig+0x108>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4a19      	ldr	r2, [pc, #100]	; (8004854 <TIM_OC3_SetConfig+0x10c>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b006      	add	sp, #24
 800482a:	bd80      	pop	{r7, pc}
 800482c:	fffffeff 	.word	0xfffffeff
 8004830:	fffeff8f 	.word	0xfffeff8f
 8004834:	fffffdff 	.word	0xfffffdff
 8004838:	40012c00 	.word	0x40012c00
 800483c:	fffff7ff 	.word	0xfffff7ff
 8004840:	fffffbff 	.word	0xfffffbff
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800
 8004850:	ffffefff 	.word	0xffffefff
 8004854:	ffffdfff 	.word	0xffffdfff

08004858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <TIM_OC4_SetConfig+0xb0>)
 8004868:	401a      	ands	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <TIM_OC4_SetConfig+0xb4>)
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <TIM_OC4_SetConfig+0xb8>)
 800488c:	4013      	ands	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <TIM_OC4_SetConfig+0xbc>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC4_SetConfig+0xc0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_OC4_SetConfig+0x78>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_OC4_SetConfig+0xc4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_OC4_SetConfig+0x78>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <TIM_OC4_SetConfig+0xc8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_OC4_SetConfig+0x78>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <TIM_OC4_SetConfig+0xcc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d109      	bne.n	80048e4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4a15      	ldr	r2, [pc, #84]	; (8004928 <TIM_OC4_SetConfig+0xd0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	019b      	lsls	r3, r3, #6
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b006      	add	sp, #24
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	ffffefff 	.word	0xffffefff
 800490c:	feff8fff 	.word	0xfeff8fff
 8004910:	fffffcff 	.word	0xfffffcff
 8004914:	ffffdfff 	.word	0xffffdfff
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800
 8004928:	ffffbfff 	.word	0xffffbfff

0800492c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_OC5_SetConfig+0xa4>)
 800493c:	401a      	ands	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <TIM_OC5_SetConfig+0xa8>)
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <TIM_OC5_SetConfig+0xac>)
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <TIM_OC5_SetConfig+0xb0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_OC5_SetConfig+0x6e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <TIM_OC5_SetConfig+0xb4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_OC5_SetConfig+0x6e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <TIM_OC5_SetConfig+0xb8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC5_SetConfig+0x6e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <TIM_OC5_SetConfig+0xbc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d109      	bne.n	80049ae <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <TIM_OC5_SetConfig+0xa4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b006      	add	sp, #24
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	fffeffff 	.word	0xfffeffff
 80049d4:	fffeff8f 	.word	0xfffeff8f
 80049d8:	fffdffff 	.word	0xfffdffff
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800

080049ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <TIM_OC6_SetConfig+0xa8>)
 80049fc:	401a      	ands	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_OC6_SetConfig+0xac>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <TIM_OC6_SetConfig+0xb0>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	051b      	lsls	r3, r3, #20
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <TIM_OC6_SetConfig+0xb4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00b      	beq.n	8004a5c <TIM_OC6_SetConfig+0x70>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <TIM_OC6_SetConfig+0xb8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d007      	beq.n	8004a5c <TIM_OC6_SetConfig+0x70>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <TIM_OC6_SetConfig+0xbc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_OC6_SetConfig+0x70>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC6_SetConfig+0xc0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d109      	bne.n	8004a70 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_OC6_SetConfig+0xc4>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	029b      	lsls	r3, r3, #10
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b006      	add	sp, #24
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	ffefffff 	.word	0xffefffff
 8004a98:	feff8fff 	.word	0xfeff8fff
 8004a9c:	ffdfffff 	.word	0xffdfffff
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800
 8004ab0:	fffbffff 	.word	0xfffbffff

08004ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	2201      	movs	r2, #1
 8004acc:	4393      	bics	r3, r2
 8004ace:	001a      	movs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	22f0      	movs	r2, #240	; 0xf0
 8004ade:	4393      	bics	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	220a      	movs	r2, #10
 8004af0:	4393      	bics	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b006      	add	sp, #24
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	2210      	movs	r2, #16
 8004b22:	4393      	bics	r3, r2
 8004b24:	001a      	movs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <TIM_TI2_ConfigInputStage+0x60>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	22a0      	movs	r2, #160	; 0xa0
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b006      	add	sp, #24
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	ffff0fff 	.word	0xffff0fff

08004b74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <TIM_ITRx_SetConfig+0x34>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	2207      	movs	r2, #7
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	609a      	str	r2, [r3, #8]
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b004      	add	sp, #16
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	ffcfff8f 	.word	0xffcfff8f

08004bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <TIM_ETR_SetConfig+0x3c>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b006      	add	sp, #24
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	ffff00ff 	.word	0xffff00ff

08004bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	221f      	movs	r2, #31
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	0013      	movs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	43d2      	mvns	r2, r2
 8004c0e:	401a      	ands	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	211f      	movs	r1, #31
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4099      	lsls	r1, r3
 8004c22:	000b      	movs	r3, r1
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b006      	add	sp, #24
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	223c      	movs	r2, #60	; 0x3c
 8004c42:	5c9b      	ldrb	r3, [r3, r2]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e055      	b.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	223c      	movs	r2, #60	; 0x3c
 8004c50:	2101      	movs	r1, #1
 8004c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	223d      	movs	r2, #61	; 0x3d
 8004c58:	2102      	movs	r1, #2
 8004c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a23      	ldr	r2, [pc, #140]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2270      	movs	r2, #112	; 0x70
 8004c8c:	4393      	bics	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	05db      	lsls	r3, r3, #23
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10c      	bne.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2280      	movs	r2, #128	; 0x80
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	223d      	movs	r2, #61	; 0x3d
 8004cea:	2101      	movs	r1, #1
 8004cec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	223c      	movs	r2, #60	; 0x3c
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	ff0fffff 	.word	0xff0fffff
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40014000 	.word	0x40014000

08004d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	223c      	movs	r2, #60	; 0x3c
 8004d22:	5c9b      	ldrb	r3, [r3, r2]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e079      	b.n	8004e20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	223c      	movs	r2, #60	; 0x3c
 8004d30:	2101      	movs	r1, #1
 8004d32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	22ff      	movs	r2, #255	; 0xff
 8004d38:	4393      	bics	r3, r2
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a38      	ldr	r2, [pc, #224]	; (8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004d48:	401a      	ands	r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a35      	ldr	r2, [pc, #212]	; (8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004d56:	401a      	ands	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a33      	ldr	r2, [pc, #204]	; (8004e30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004d64:	401a      	ands	r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a30      	ldr	r2, [pc, #192]	; (8004e34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004d72:	401a      	ands	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a2e      	ldr	r2, [pc, #184]	; (8004e38 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004d80:	401a      	ands	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004d8e:	401a      	ands	r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004d9c:	401a      	ands	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004db6:	401a      	ands	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d121      	bne.n	8004e0e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004dce:	401a      	ands	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	051b      	lsls	r3, r3, #20
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004dde:	401a      	ands	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004dec:	401a      	ands	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d106      	bne.n	8004e0e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004e04:	401a      	ands	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	223c      	movs	r2, #60	; 0x3c
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	fffffcff 	.word	0xfffffcff
 8004e2c:	fffffbff 	.word	0xfffffbff
 8004e30:	fffff7ff 	.word	0xfffff7ff
 8004e34:	ffffefff 	.word	0xffffefff
 8004e38:	ffffdfff 	.word	0xffffdfff
 8004e3c:	ffffbfff 	.word	0xffffbfff
 8004e40:	fff0ffff 	.word	0xfff0ffff
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	efffffff 	.word	0xefffffff
 8004e4c:	ff0fffff 	.word	0xff0fffff
 8004e50:	feffffff 	.word	0xfeffffff
 8004e54:	fdffffff 	.word	0xfdffffff
 8004e58:	dfffffff 	.word	0xdfffffff

08004e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <memset>:
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	1882      	adds	r2, r0, r2
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d100      	bne.n	8004e96 <memset+0xa>
 8004e94:	4770      	bx	lr
 8004e96:	7019      	strb	r1, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	e7f9      	b.n	8004e90 <memset+0x4>

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	4c0c      	ldr	r4, [pc, #48]	; (8004ed4 <__libc_init_array+0x38>)
 8004ea2:	4d0d      	ldr	r5, [pc, #52]	; (8004ed8 <__libc_init_array+0x3c>)
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	2600      	movs	r6, #0
 8004eae:	f000 f819 	bl	8004ee4 <_init>
 8004eb2:	4c0a      	ldr	r4, [pc, #40]	; (8004edc <__libc_init_array+0x40>)
 8004eb4:	4d0a      	ldr	r5, [pc, #40]	; (8004ee0 <__libc_init_array+0x44>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	00b3      	lsls	r3, r6, #2
 8004ec2:	58eb      	ldr	r3, [r5, r3]
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	00b3      	lsls	r3, r6, #2
 8004ecc:	58eb      	ldr	r3, [r5, r3]
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08004f90 	.word	0x08004f90
 8004ed8:	08004f90 	.word	0x08004f90
 8004edc:	08004f94 	.word	0x08004f94
 8004ee0:	08004f90 	.word	0x08004f90

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr


ic_pwm_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e10  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fac  08003fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003fc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003fc0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008efb  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ad  00000000  00000000  00028f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000758  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e782  00000000  00000000  0002b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4c3  00000000  00000000  00049e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc857  00000000  00000000  0005433d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002934  00000000  00000000  00110b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001134c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003f7c 	.word	0x08003f7c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08003f7c 	.word	0x08003f7c

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	; 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000432:	2afd      	cmp	r2, #253	; 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	; 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_fdiv>:
 8000548:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000550:	bf1e      	ittt	ne
 8000552:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000556:	ea92 0f0c 	teqne	r2, ip
 800055a:	ea93 0f0c 	teqne	r3, ip
 800055e:	d069      	beq.n	8000634 <__aeabi_fdiv+0xec>
 8000560:	eba2 0203 	sub.w	r2, r2, r3
 8000564:	ea80 0c01 	eor.w	ip, r0, r1
 8000568:	0249      	lsls	r1, r1, #9
 800056a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800056e:	d037      	beq.n	80005e0 <__aeabi_fdiv+0x98>
 8000570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000574:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000578:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800057c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000580:	428b      	cmp	r3, r1
 8000582:	bf38      	it	cc
 8000584:	005b      	lslcc	r3, r3, #1
 8000586:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800058a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800058e:	428b      	cmp	r3, r1
 8000590:	bf24      	itt	cs
 8000592:	1a5b      	subcs	r3, r3, r1
 8000594:	ea40 000c 	orrcs.w	r0, r0, ip
 8000598:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800059c:	bf24      	itt	cs
 800059e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005aa:	bf24      	itt	cs
 80005ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	bf18      	it	ne
 80005c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ca:	d1e0      	bne.n	800058e <__aeabi_fdiv+0x46>
 80005cc:	2afd      	cmp	r2, #253	; 0xfd
 80005ce:	f63f af50 	bhi.w	8000472 <__aeabi_fmul+0x92>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005d8:	bf08      	it	eq
 80005da:	f020 0001 	biceq.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005e8:	327f      	adds	r2, #127	; 0x7f
 80005ea:	bfc2      	ittt	gt
 80005ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f4:	4770      	bxgt	lr
 80005f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	3a01      	subs	r2, #1
 8000600:	e737      	b.n	8000472 <__aeabi_fmul+0x92>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800060a:	bf02      	ittt	eq
 800060c:	0040      	lsleq	r0, r0, #1
 800060e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000612:	3a01      	subeq	r2, #1
 8000614:	d0f9      	beq.n	800060a <__aeabi_fdiv+0xc2>
 8000616:	ea40 000c 	orr.w	r0, r0, ip
 800061a:	f093 0f00 	teq	r3, #0
 800061e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0049      	lsleq	r1, r1, #1
 8000626:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800062a:	3b01      	subeq	r3, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xda>
 800062e:	ea41 010c 	orr.w	r1, r1, ip
 8000632:	e795      	b.n	8000560 <__aeabi_fdiv+0x18>
 8000634:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000638:	ea92 0f0c 	teq	r2, ip
 800063c:	d108      	bne.n	8000650 <__aeabi_fdiv+0x108>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	f47f af7d 	bne.w	800053e <__aeabi_fmul+0x15e>
 8000644:	ea93 0f0c 	teq	r3, ip
 8000648:	f47f af70 	bne.w	800052c <__aeabi_fmul+0x14c>
 800064c:	4608      	mov	r0, r1
 800064e:	e776      	b.n	800053e <__aeabi_fmul+0x15e>
 8000650:	ea93 0f0c 	teq	r3, ip
 8000654:	d104      	bne.n	8000660 <__aeabi_fdiv+0x118>
 8000656:	024b      	lsls	r3, r1, #9
 8000658:	f43f af4c 	beq.w	80004f4 <__aeabi_fmul+0x114>
 800065c:	4608      	mov	r0, r1
 800065e:	e76e      	b.n	800053e <__aeabi_fmul+0x15e>
 8000660:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000664:	bf18      	it	ne
 8000666:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800066a:	d1ca      	bne.n	8000602 <__aeabi_fdiv+0xba>
 800066c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000670:	f47f af5c 	bne.w	800052c <__aeabi_fmul+0x14c>
 8000674:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000678:	f47f af3c 	bne.w	80004f4 <__aeabi_fmul+0x114>
 800067c:	e75f      	b.n	800053e <__aeabi_fmul+0x15e>
 800067e:	bf00      	nop

08000680 <__gesf2>:
 8000680:	f04f 3cff 	mov.w	ip, #4294967295
 8000684:	e006      	b.n	8000694 <__cmpsf2+0x4>
 8000686:	bf00      	nop

08000688 <__lesf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	e002      	b.n	8000694 <__cmpsf2+0x4>
 800068e:	bf00      	nop

08000690 <__cmpsf2>:
 8000690:	f04f 0c01 	mov.w	ip, #1
 8000694:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000698:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800069c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a4:	bf18      	it	ne
 80006a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006aa:	d011      	beq.n	80006d0 <__cmpsf2+0x40>
 80006ac:	b001      	add	sp, #4
 80006ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006b2:	bf18      	it	ne
 80006b4:	ea90 0f01 	teqne	r0, r1
 80006b8:	bf58      	it	pl
 80006ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80006be:	bf88      	it	hi
 80006c0:	17c8      	asrhi	r0, r1, #31
 80006c2:	bf38      	it	cc
 80006c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80006c8:	bf18      	it	ne
 80006ca:	f040 0001 	orrne.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d4:	d102      	bne.n	80006dc <__cmpsf2+0x4c>
 80006d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006da:	d105      	bne.n	80006e8 <__cmpsf2+0x58>
 80006dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006e0:	d1e4      	bne.n	80006ac <__cmpsf2+0x1c>
 80006e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006e6:	d0e1      	beq.n	80006ac <__cmpsf2+0x1c>
 80006e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop

080006f0 <__aeabi_cfrcmple>:
 80006f0:	4684      	mov	ip, r0
 80006f2:	4608      	mov	r0, r1
 80006f4:	4661      	mov	r1, ip
 80006f6:	e7ff      	b.n	80006f8 <__aeabi_cfcmpeq>

080006f8 <__aeabi_cfcmpeq>:
 80006f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80006fa:	f7ff ffc9 	bl	8000690 <__cmpsf2>
 80006fe:	2800      	cmp	r0, #0
 8000700:	bf48      	it	mi
 8000702:	f110 0f00 	cmnmi.w	r0, #0
 8000706:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000708 <__aeabi_fcmpeq>:
 8000708:	f84d ed08 	str.w	lr, [sp, #-8]!
 800070c:	f7ff fff4 	bl	80006f8 <__aeabi_cfcmpeq>
 8000710:	bf0c      	ite	eq
 8000712:	2001      	moveq	r0, #1
 8000714:	2000      	movne	r0, #0
 8000716:	f85d fb08 	ldr.w	pc, [sp], #8
 800071a:	bf00      	nop

0800071c <__aeabi_fcmplt>:
 800071c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000720:	f7ff ffea 	bl	80006f8 <__aeabi_cfcmpeq>
 8000724:	bf34      	ite	cc
 8000726:	2001      	movcc	r0, #1
 8000728:	2000      	movcs	r0, #0
 800072a:	f85d fb08 	ldr.w	pc, [sp], #8
 800072e:	bf00      	nop

08000730 <__aeabi_fcmple>:
 8000730:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000734:	f7ff ffe0 	bl	80006f8 <__aeabi_cfcmpeq>
 8000738:	bf94      	ite	ls
 800073a:	2001      	movls	r0, #1
 800073c:	2000      	movhi	r0, #0
 800073e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000742:	bf00      	nop

08000744 <__aeabi_fcmpge>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff ffd2 	bl	80006f0 <__aeabi_cfrcmple>
 800074c:	bf94      	ite	ls
 800074e:	2001      	movls	r0, #1
 8000750:	2000      	movhi	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_fcmpgt>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff ffc8 	bl	80006f0 <__aeabi_cfrcmple>
 8000760:	bf34      	ite	cc
 8000762:	2001      	movcc	r0, #1
 8000764:	2000      	movcs	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_f2iz>:
 800076c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000770:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000774:	d30f      	bcc.n	8000796 <__aeabi_f2iz+0x2a>
 8000776:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800077e:	d90d      	bls.n	800079c <__aeabi_f2iz+0x30>
 8000780:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000788:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	bf18      	it	ne
 8000792:	4240      	negne	r0, r0
 8000794:	4770      	bx	lr
 8000796:	f04f 0000 	mov.w	r0, #0
 800079a:	4770      	bx	lr
 800079c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a0:	d101      	bne.n	80007a6 <__aeabi_f2iz+0x3a>
 80007a2:	0242      	lsls	r2, r0, #9
 80007a4:	d105      	bne.n	80007b2 <__aeabi_f2iz+0x46>
 80007a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80007aa:	bf08      	it	eq
 80007ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_f2uiz>:
 80007b8:	0042      	lsls	r2, r0, #1
 80007ba:	d20e      	bcs.n	80007da <__aeabi_f2uiz+0x22>
 80007bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007c0:	d30b      	bcc.n	80007da <__aeabi_f2uiz+0x22>
 80007c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007ca:	d409      	bmi.n	80007e0 <__aeabi_f2uiz+0x28>
 80007cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d4:	fa23 f002 	lsr.w	r0, r3, r2
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr
 80007e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007e4:	d101      	bne.n	80007ea <__aeabi_f2uiz+0x32>
 80007e6:	0242      	lsls	r2, r0, #9
 80007e8:	d102      	bne.n	80007f0 <__aeabi_f2uiz+0x38>
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295
 80007ee:	4770      	bx	lr
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b972 	b.w	8000af4 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f806 	bl	8000828 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__udivmoddi4>:
 8000828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800082c:	9e08      	ldr	r6, [sp, #32]
 800082e:	460d      	mov	r5, r1
 8000830:	4604      	mov	r4, r0
 8000832:	468e      	mov	lr, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14c      	bne.n	80008d2 <__udivmoddi4+0xaa>
 8000838:	428a      	cmp	r2, r1
 800083a:	4694      	mov	ip, r2
 800083c:	d967      	bls.n	800090e <__udivmoddi4+0xe6>
 800083e:	fab2 f382 	clz	r3, r2
 8000842:	b153      	cbz	r3, 800085a <__udivmoddi4+0x32>
 8000844:	fa02 fc03 	lsl.w	ip, r2, r3
 8000848:	f1c3 0220 	rsb	r2, r3, #32
 800084c:	fa01 fe03 	lsl.w	lr, r1, r3
 8000850:	fa20 f202 	lsr.w	r2, r0, r2
 8000854:	ea42 0e0e 	orr.w	lr, r2, lr
 8000858:	409c      	lsls	r4, r3
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fbbe f1f7 	udiv	r1, lr, r7
 8000862:	fa1f f58c 	uxth.w	r5, ip
 8000866:	fb07 ee11 	mls	lr, r7, r1, lr
 800086a:	fb01 f005 	mul.w	r0, r1, r5
 800086e:	0c22      	lsrs	r2, r4, #16
 8000870:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000874:	4290      	cmp	r0, r2
 8000876:	d90a      	bls.n	800088e <__udivmoddi4+0x66>
 8000878:	eb1c 0202 	adds.w	r2, ip, r2
 800087c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000880:	f080 8119 	bcs.w	8000ab6 <__udivmoddi4+0x28e>
 8000884:	4290      	cmp	r0, r2
 8000886:	f240 8116 	bls.w	8000ab6 <__udivmoddi4+0x28e>
 800088a:	3902      	subs	r1, #2
 800088c:	4462      	add	r2, ip
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	fbb2 f0f7 	udiv	r0, r2, r7
 8000894:	fb07 2210 	mls	r2, r7, r0, r2
 8000898:	fb00 f505 	mul.w	r5, r0, r5
 800089c:	b2a4      	uxth	r4, r4
 800089e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x94>
 80008a6:	eb1c 0404 	adds.w	r4, ip, r4
 80008aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ae:	f080 8104 	bcs.w	8000aba <__udivmoddi4+0x292>
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	f240 8101 	bls.w	8000aba <__udivmoddi4+0x292>
 80008b8:	4464      	add	r4, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008c0:	2100      	movs	r1, #0
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	b11e      	cbz	r6, 80008ce <__udivmoddi4+0xa6>
 80008c6:	40dc      	lsrs	r4, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	e9c6 4300 	strd	r4, r3, [r6]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0xc0>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	f000 80ea 	beq.w	8000ab0 <__udivmoddi4+0x288>
 80008dc:	2100      	movs	r1, #0
 80008de:	e9c6 0500 	strd	r0, r5, [r6]
 80008e2:	4608      	mov	r0, r1
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	fab3 f183 	clz	r1, r3
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d148      	bne.n	8000982 <__udivmoddi4+0x15a>
 80008f0:	42ab      	cmp	r3, r5
 80008f2:	d302      	bcc.n	80008fa <__udivmoddi4+0xd2>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	f200 80f8 	bhi.w	8000aea <__udivmoddi4+0x2c2>
 80008fa:	1a84      	subs	r4, r0, r2
 80008fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000900:	2001      	movs	r0, #1
 8000902:	4696      	mov	lr, r2
 8000904:	2e00      	cmp	r6, #0
 8000906:	d0e2      	beq.n	80008ce <__udivmoddi4+0xa6>
 8000908:	e9c6 4e00 	strd	r4, lr, [r6]
 800090c:	e7df      	b.n	80008ce <__udivmoddi4+0xa6>
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xea>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 808e 	bne.w	8000a38 <__udivmoddi4+0x210>
 800091c:	1a88      	subs	r0, r1, r2
 800091e:	2101      	movs	r1, #1
 8000920:	0c17      	lsrs	r7, r2, #16
 8000922:	fa1f fe82 	uxth.w	lr, r2
 8000926:	fbb0 f5f7 	udiv	r5, r0, r7
 800092a:	fb07 0015 	mls	r0, r7, r5, r0
 800092e:	0c22      	lsrs	r2, r4, #16
 8000930:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000934:	fb0e f005 	mul.w	r0, lr, r5
 8000938:	4290      	cmp	r0, r2
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x126>
 800093c:	eb1c 0202 	adds.w	r2, ip, r2
 8000940:	f105 38ff 	add.w	r8, r5, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x124>
 8000946:	4290      	cmp	r0, r2
 8000948:	f200 80cc 	bhi.w	8000ae4 <__udivmoddi4+0x2bc>
 800094c:	4645      	mov	r5, r8
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	fbb2 f0f7 	udiv	r0, r2, r7
 8000954:	fb07 2210 	mls	r2, r7, r0, r2
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	b2a4      	uxth	r4, r4
 800095e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000962:	45a6      	cmp	lr, r4
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0x150>
 8000966:	eb1c 0404 	adds.w	r4, ip, r4
 800096a:	f100 32ff 	add.w	r2, r0, #4294967295
 800096e:	d202      	bcs.n	8000976 <__udivmoddi4+0x14e>
 8000970:	45a6      	cmp	lr, r4
 8000972:	f200 80b4 	bhi.w	8000ade <__udivmoddi4+0x2b6>
 8000976:	4610      	mov	r0, r2
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000980:	e7a0      	b.n	80008c4 <__udivmoddi4+0x9c>
 8000982:	f1c1 0720 	rsb	r7, r1, #32
 8000986:	408b      	lsls	r3, r1
 8000988:	fa22 fc07 	lsr.w	ip, r2, r7
 800098c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000990:	fa25 fa07 	lsr.w	sl, r5, r7
 8000994:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000998:	fbba f8f9 	udiv	r8, sl, r9
 800099c:	408d      	lsls	r5, r1
 800099e:	fa20 f307 	lsr.w	r3, r0, r7
 80009a2:	fb09 aa18 	mls	sl, r9, r8, sl
 80009a6:	fa1f fe8c 	uxth.w	lr, ip
 80009aa:	432b      	orrs	r3, r5
 80009ac:	fa00 f501 	lsl.w	r5, r0, r1
 80009b0:	fb08 f00e 	mul.w	r0, r8, lr
 80009b4:	0c1c      	lsrs	r4, r3, #16
 80009b6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80009ba:	42a0      	cmp	r0, r4
 80009bc:	fa02 f201 	lsl.w	r2, r2, r1
 80009c0:	d90b      	bls.n	80009da <__udivmoddi4+0x1b2>
 80009c2:	eb1c 0404 	adds.w	r4, ip, r4
 80009c6:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ca:	f080 8086 	bcs.w	8000ada <__udivmoddi4+0x2b2>
 80009ce:	42a0      	cmp	r0, r4
 80009d0:	f240 8083 	bls.w	8000ada <__udivmoddi4+0x2b2>
 80009d4:	f1a8 0802 	sub.w	r8, r8, #2
 80009d8:	4464      	add	r4, ip
 80009da:	1a24      	subs	r4, r4, r0
 80009dc:	b298      	uxth	r0, r3
 80009de:	fbb4 f3f9 	udiv	r3, r4, r9
 80009e2:	fb09 4413 	mls	r4, r9, r3, r4
 80009e6:	fb03 fe0e 	mul.w	lr, r3, lr
 80009ea:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x1dc>
 80009f2:	eb1c 0404 	adds.w	r4, ip, r4
 80009f6:	f103 30ff 	add.w	r0, r3, #4294967295
 80009fa:	d26a      	bcs.n	8000ad2 <__udivmoddi4+0x2aa>
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d968      	bls.n	8000ad2 <__udivmoddi4+0x2aa>
 8000a00:	3b02      	subs	r3, #2
 8000a02:	4464      	add	r4, ip
 8000a04:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000a08:	fba0 9302 	umull	r9, r3, r0, r2
 8000a0c:	eba4 040e 	sub.w	r4, r4, lr
 8000a10:	429c      	cmp	r4, r3
 8000a12:	46c8      	mov	r8, r9
 8000a14:	469e      	mov	lr, r3
 8000a16:	d354      	bcc.n	8000ac2 <__udivmoddi4+0x29a>
 8000a18:	d051      	beq.n	8000abe <__udivmoddi4+0x296>
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d067      	beq.n	8000aee <__udivmoddi4+0x2c6>
 8000a1e:	ebb5 0308 	subs.w	r3, r5, r8
 8000a22:	eb64 040e 	sbc.w	r4, r4, lr
 8000a26:	40cb      	lsrs	r3, r1
 8000a28:	fa04 f707 	lsl.w	r7, r4, r7
 8000a2c:	431f      	orrs	r7, r3
 8000a2e:	40cc      	lsrs	r4, r1
 8000a30:	e9c6 7400 	strd	r7, r4, [r6]
 8000a34:	2100      	movs	r1, #0
 8000a36:	e74a      	b.n	80008ce <__udivmoddi4+0xa6>
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	f1c3 0020 	rsb	r0, r3, #32
 8000a40:	40c1      	lsrs	r1, r0
 8000a42:	409d      	lsls	r5, r3
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	4328      	orrs	r0, r5
 8000a4e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a52:	fb07 1115 	mls	r1, r7, r5, r1
 8000a56:	fa1f fe8c 	uxth.w	lr, ip
 8000a5a:	0c02      	lsrs	r2, r0, #16
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	fa04 f403 	lsl.w	r4, r4, r3
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x256>
 8000a6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a74:	d22f      	bcs.n	8000ad6 <__udivmoddi4+0x2ae>
 8000a76:	4291      	cmp	r1, r2
 8000a78:	d92d      	bls.n	8000ad6 <__udivmoddi4+0x2ae>
 8000a7a:	3d02      	subs	r5, #2
 8000a7c:	4462      	add	r2, ip
 8000a7e:	1a52      	subs	r2, r2, r1
 8000a80:	fbb2 f1f7 	udiv	r1, r2, r7
 8000a84:	fb07 2211 	mls	r2, r7, r1, r2
 8000a88:	b280      	uxth	r0, r0
 8000a8a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000a8e:	fb01 f20e 	mul.w	r2, r1, lr
 8000a92:	4282      	cmp	r2, r0
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x280>
 8000a96:	eb1c 0000 	adds.w	r0, ip, r0
 8000a9a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a9e:	d216      	bcs.n	8000ace <__udivmoddi4+0x2a6>
 8000aa0:	4282      	cmp	r2, r0
 8000aa2:	d914      	bls.n	8000ace <__udivmoddi4+0x2a6>
 8000aa4:	3902      	subs	r1, #2
 8000aa6:	4460      	add	r0, ip
 8000aa8:	1a80      	subs	r0, r0, r2
 8000aaa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aae:	e73a      	b.n	8000926 <__udivmoddi4+0xfe>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e70b      	b.n	80008ce <__udivmoddi4+0xa6>
 8000ab6:	4671      	mov	r1, lr
 8000ab8:	e6e9      	b.n	800088e <__udivmoddi4+0x66>
 8000aba:	4610      	mov	r0, r2
 8000abc:	e6fe      	b.n	80008bc <__udivmoddi4+0x94>
 8000abe:	454d      	cmp	r5, r9
 8000ac0:	d2ab      	bcs.n	8000a1a <__udivmoddi4+0x1f2>
 8000ac2:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac6:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7a5      	b.n	8000a1a <__udivmoddi4+0x1f2>
 8000ace:	4641      	mov	r1, r8
 8000ad0:	e7ea      	b.n	8000aa8 <__udivmoddi4+0x280>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e796      	b.n	8000a04 <__udivmoddi4+0x1dc>
 8000ad6:	4645      	mov	r5, r8
 8000ad8:	e7d1      	b.n	8000a7e <__udivmoddi4+0x256>
 8000ada:	46d0      	mov	r8, sl
 8000adc:	e77d      	b.n	80009da <__udivmoddi4+0x1b2>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e749      	b.n	8000978 <__udivmoddi4+0x150>
 8000ae4:	3d02      	subs	r5, #2
 8000ae6:	4462      	add	r2, ip
 8000ae8:	e731      	b.n	800094e <__udivmoddi4+0x126>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e70a      	b.n	8000904 <__udivmoddi4+0xdc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	e6ed      	b.n	80008ce <__udivmoddi4+0xa6>
 8000af2:	bf00      	nop

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	x = TIM1->ARR;
 8000b00:	4b94      	ldr	r3, [pc, #592]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc13 	bl	8000330 <__aeabi_ui2f>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a92      	ldr	r2, [pc, #584]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000b0e:	6013      	str	r3, [r2, #0]
	prev = TIM1->ARR;
 8000b10:	4b90      	ldr	r3, [pc, #576]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc0b 	bl	8000330 <__aeabi_ui2f>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a8f      	ldr	r2, [pc, #572]	; (8000d5c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000b1e:	6013      	str	r3, [r2, #0]
	y = TIM1->CCR1;
 8000b20:	4b8c      	ldr	r3, [pc, #560]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fc03 	bl	8000330 <__aeabi_ui2f>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a8c      	ldr	r2, [pc, #560]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000b2e:	6013      	str	r3, [r2, #0]
	static int control = 0;
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7f1b      	ldrb	r3, [r3, #28]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	f040 814b 	bne.w	8000dd0 <HAL_TIM_IC_CaptureCallback+0x2d8>
	{
		if (control == 0)
 8000b3a:	4b8a      	ldr	r3, [pc, #552]	; (8000d64 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10a      	bne.n	8000b58 <HAL_TIM_IC_CaptureCallback+0x60>
		{
			rise = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8000b42:	2108      	movs	r1, #8
 8000b44:	4888      	ldr	r0, [pc, #544]	; (8000d68 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b46:	f002 fc7d 	bl	8003444 <HAL_TIM_ReadCapturedValue>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a87      	ldr	r2, [pc, #540]	; (8000d6c <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b4e:	6013      	str	r3, [r2, #0]
			control = 1;
 8000b50:	4b84      	ldr	r3, [pc, #528]	; (8000d64 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e13b      	b.n	8000dd0 <HAL_TIM_IC_CaptureCallback+0x2d8>
		}
		else
		{
			fall = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8000b58:	2108      	movs	r1, #8
 8000b5a:	4883      	ldr	r0, [pc, #524]	; (8000d68 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b5c:	f002 fc72 	bl	8003444 <HAL_TIM_ReadCapturedValue>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a83      	ldr	r2, [pc, #524]	; (8000d70 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b64:	6013      	str	r3, [r2, #0]
			if (fall > rise)
 8000b66:	4b82      	ldr	r3, [pc, #520]	; (8000d70 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d907      	bls.n	8000b82 <HAL_TIM_IC_CaptureCallback+0x8a>
				diff = fall - rise;
 8000b72:	4b7f      	ldr	r3, [pc, #508]	; (8000d70 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b7d      	ldr	r3, [pc, #500]	; (8000d6c <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	4a7d      	ldr	r2, [pc, #500]	; (8000d74 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e009      	b.n	8000b96 <HAL_TIM_IC_CaptureCallback+0x9e>
			else
				diff = 40000 + fall - rise;
 8000b82:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b79      	ldr	r3, [pc, #484]	; (8000d6c <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000b90:	3340      	adds	r3, #64	; 0x40
 8000b92:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b94:	6013      	str	r3, [r2, #0]
			time = ((((float)diff) / 40000) * 4);
 8000b96:	4b77      	ldr	r3, [pc, #476]	; (8000d74 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fbc8 	bl	8000330 <__aeabi_ui2f>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4975      	ldr	r1, [pc, #468]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fccf 	bl	8000548 <__aeabi_fdiv>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fc15 	bl	80003e0 <__aeabi_fmul>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b70      	ldr	r3, [pc, #448]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x284>)
 8000bbc:	601a      	str	r2, [r3, #0]
			if (time > 2.0)
 8000bbe:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x284>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fdc6 	bl	8000758 <__aeabi_fcmpgt>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d06c      	beq.n	8000cac <HAL_TIM_IC_CaptureCallback+0x1b4>
			{
				if (x >= 250)
 8000bd2:	4b61      	ldr	r3, [pc, #388]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	496a      	ldr	r1, [pc, #424]	; (8000d80 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fdb3 	bl	8000744 <__aeabi_fcmpge>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d049      	beq.n	8000c78 <HAL_TIM_IC_CaptureCallback+0x180>
				{
					x = x - 150;
 8000be4:	4b5c      	ldr	r3, [pc, #368]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4966      	ldr	r1, [pc, #408]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff faee 	bl	80001cc <__aeabi_fsub>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b58      	ldr	r3, [pc, #352]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000bf6:	601a      	str	r2, [r3, #0]
					TIM1->ARR = (int)x;
 8000bf8:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fdb5 	bl	800076c <__aeabi_f2iz>
 8000c02:	4602      	mov	r2, r0
 8000c04:	4b53      	ldr	r3, [pc, #332]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM1->CCR1 =((x * y) / prev);
 8000c08:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a54      	ldr	r2, [pc, #336]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fbe4 	bl	80003e0 <__aeabi_fmul>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4610      	mov	r0, r2
 8000c24:	f7ff fc90 	bl	8000548 <__aeabi_fdiv>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4c4a      	ldr	r4, [pc, #296]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fdc3 	bl	80007b8 <__aeabi_f2uiz>
 8000c32:	4603      	mov	r3, r0
 8000c34:	6363      	str	r3, [r4, #52]	; 0x34
					y = TIM1->CCR1;
 8000c36:	4b47      	ldr	r3, [pc, #284]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb78 	bl	8000330 <__aeabi_ui2f>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a47      	ldr	r2, [pc, #284]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000c44:	6013      	str	r3, [r2, #0]
					duty_cycle =(int)((y / x) * 100);
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a43      	ldr	r2, [pc, #268]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fc79 	bl	8000548 <__aeabi_fdiv>
 8000c56:	4603      	mov	r3, r0
 8000c58:	494b      	ldr	r1, [pc, #300]	; (8000d88 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbc0 	bl	80003e0 <__aeabi_fmul>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fd82 	bl	800076c <__aeabi_f2iz>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fb64 	bl	8000338 <__aeabi_i2f>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e0a8      	b.n	8000dca <HAL_TIM_IC_CaptureCallback+0x2d2>
				}
				else
				{
					TIM1->ARR = 500 - 1;
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000c7a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM1->CCR1 = (499 * y) / x;
 8000c80:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4942      	ldr	r1, [pc, #264]	; (8000d90 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fbaa 	bl	80003e0 <__aeabi_fmul>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f7ff fc56 	bl	8000548 <__aeabi_fdiv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4c2d      	ldr	r4, [pc, #180]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd89 	bl	80007b8 <__aeabi_f2uiz>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6363      	str	r3, [r4, #52]	; 0x34
 8000caa:	e08e      	b.n	8000dca <HAL_TIM_IC_CaptureCallback+0x2d2>
				}
			}
			else {
				if (x <= 2000)
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4938      	ldr	r1, [pc, #224]	; (8000d94 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fd3c 	bl	8000730 <__aeabi_fcmple>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d06c      	beq.n	8000d98 <HAL_TIM_IC_CaptureCallback+0x2a0>
				{
					x = x + 150;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4930      	ldr	r1, [pc, #192]	; (8000d84 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fa83 	bl	80001d0 <__addsf3>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000cd0:	601a      	str	r2, [r3, #0]
					TIM1->ARR = (int)x;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd48 	bl	800076c <__aeabi_f2iz>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM1->CCR1 =((x * y) / prev);
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb77 	bl	80003e0 <__aeabi_fmul>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_TIM_IC_CaptureCallback+0x264>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f7ff fc23 	bl	8000548 <__aeabi_fdiv>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4c13      	ldr	r4, [pc, #76]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fd56 	bl	80007b8 <__aeabi_f2uiz>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	6363      	str	r3, [r4, #52]	; 0x34
					y = TIM1->CCR1;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb0b 	bl	8000330 <__aeabi_ui2f>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000d1e:	6013      	str	r3, [r2, #0]
					duty_cycle =(int)((y / x) * 100);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fc0c 	bl	8000548 <__aeabi_fdiv>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4915      	ldr	r1, [pc, #84]	; (8000d88 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb53 	bl	80003e0 <__aeabi_fmul>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fd15 	bl	800076c <__aeabi_f2iz>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff faf7 	bl	8000338 <__aeabi_i2f>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_TIM_IC_CaptureCallback+0x294>)
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e03b      	b.n	8000dca <HAL_TIM_IC_CaptureCallback+0x2d2>
 8000d52:	bf00      	nop
 8000d54:	40010000 	.word	0x40010000
 8000d58:	200000c4 	.word	0x200000c4
 8000d5c:	200000d0 	.word	0x200000d0
 8000d60:	200000cc 	.word	0x200000cc
 8000d64:	200000d8 	.word	0x200000d8
 8000d68:	20000070 	.word	0x20000070
 8000d6c:	200000b8 	.word	0x200000b8
 8000d70:	200000bc 	.word	0x200000bc
 8000d74:	200000c0 	.word	0x200000c0
 8000d78:	471c4000 	.word	0x471c4000
 8000d7c:	200000d4 	.word	0x200000d4
 8000d80:	437a0000 	.word	0x437a0000
 8000d84:	43160000 	.word	0x43160000
 8000d88:	42c80000 	.word	0x42c80000
 8000d8c:	200000c8 	.word	0x200000c8
 8000d90:	43f98000 	.word	0x43f98000
 8000d94:	44fa0000 	.word	0x44fa0000
				}
				else
				{
					TIM1->ARR = 500 - 1;
 8000d98:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000d9a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
					TIM1->CCR1 = (499 * y) / x;
 8000da0:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4988      	ldr	r1, [pc, #544]	; (8000fc8 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb1a 	bl	80003e0 <__aeabi_fmul>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b86      	ldr	r3, [pc, #536]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4610      	mov	r0, r2
 8000db8:	f7ff fbc6 	bl	8000548 <__aeabi_fdiv>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4c80      	ldr	r4, [pc, #512]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fcf9 	bl	80007b8 <__aeabi_f2uiz>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6363      	str	r3, [r4, #52]	; 0x34
				}
			}
			control = 0;
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	f040 80ee 	bne.w	8000fb6 <HAL_TIM_IC_CaptureCallback+0x4be>
		{
			if (control == 0)
 8000dda:	4b7d      	ldr	r3, [pc, #500]	; (8000fd0 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10a      	bne.n	8000df8 <HAL_TIM_IC_CaptureCallback+0x300>
			{
				rise = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8000de2:	210c      	movs	r1, #12
 8000de4:	487b      	ldr	r0, [pc, #492]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x4dc>)
 8000de6:	f002 fb2d 	bl	8003444 <HAL_TIM_ReadCapturedValue>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8000dee:	6013      	str	r3, [r2, #0]
				control = 1;
 8000df0:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

				}
				control = 0;
			}
		}
	}
 8000df6:	e0de      	b.n	8000fb6 <HAL_TIM_IC_CaptureCallback+0x4be>
				fall = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8000df8:	210c      	movs	r1, #12
 8000dfa:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x4dc>)
 8000dfc:	f002 fb22 	bl	8003444 <HAL_TIM_ReadCapturedValue>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a76      	ldr	r2, [pc, #472]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8000e04:	6013      	str	r3, [r2, #0]
				if (fall > rise)
 8000e06:	4b75      	ldr	r3, [pc, #468]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b73      	ldr	r3, [pc, #460]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d907      	bls.n	8000e22 <HAL_TIM_IC_CaptureCallback+0x32a>
					diff = fall - rise;
 8000e12:	4b72      	ldr	r3, [pc, #456]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	4a70      	ldr	r2, [pc, #448]	; (8000fe0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	e009      	b.n	8000e36 <HAL_TIM_IC_CaptureCallback+0x33e>
					diff = 40000 + fall - rise;
 8000e22:	4b6e      	ldr	r3, [pc, #440]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b6c      	ldr	r3, [pc, #432]	; (8000fd8 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000e30:	3340      	adds	r3, #64	; 0x40
 8000e32:	4a6b      	ldr	r2, [pc, #428]	; (8000fe0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8000e34:	6013      	str	r3, [r2, #0]
				time = ((((float)diff) / 40000) * 4);
 8000e36:	4b6a      	ldr	r3, [pc, #424]	; (8000fe0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fa78 	bl	8000330 <__aeabi_ui2f>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4968      	ldr	r1, [pc, #416]	; (8000fe4 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb7f 	bl	8000548 <__aeabi_fdiv>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fac5 	bl	80003e0 <__aeabi_fmul>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8000e5c:	601a      	str	r2, [r3, #0]
				if (time > 1.0)
 8000e5e:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc76 	bl	8000758 <__aeabi_fcmpgt>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d04f      	beq.n	8000f12 <HAL_TIM_IC_CaptureCallback+0x41a>
					if (y + 25 <= x + 1)
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	495d      	ldr	r1, [pc, #372]	; (8000fec <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9a9 	bl	80001d0 <__addsf3>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461c      	mov	r4, r3
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f9a0 	bl	80001d0 <__addsf3>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4619      	mov	r1, r3
 8000e94:	4620      	mov	r0, r4
 8000e96:	f7ff fc4b 	bl	8000730 <__aeabi_fcmple>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d02a      	beq.n	8000ef6 <HAL_TIM_IC_CaptureCallback+0x3fe>
						y += 25;
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4951      	ldr	r1, [pc, #324]	; (8000fec <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff f992 	bl	80001d0 <__addsf3>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000eb2:	601a      	str	r2, [r3, #0]
						TIM1->CCR1 = y;
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4c41      	ldr	r4, [pc, #260]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc7c 	bl	80007b8 <__aeabi_f2uiz>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	6363      	str	r3, [r4, #52]	; 0x34
						duty_cycle =(int)((y / x) * 100);
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a40      	ldr	r2, [pc, #256]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fb3a 	bl	8000548 <__aeabi_fdiv>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4946      	ldr	r1, [pc, #280]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fa81 	bl	80003e0 <__aeabi_fmul>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fc43 	bl	800076c <__aeabi_f2iz>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fa25 	bl	8000338 <__aeabi_i2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a40      	ldr	r2, [pc, #256]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e05c      	b.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x4b8>
						TIM1->CCR1 = x / 10;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	493f      	ldr	r1, [pc, #252]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x500>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb23 	bl	8000548 <__aeabi_fdiv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4c2e      	ldr	r4, [pc, #184]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc56 	bl	80007b8 <__aeabi_f2uiz>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	6363      	str	r3, [r4, #52]	; 0x34
 8000f10:	e04e      	b.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x4b8>
					if (y - 25 <= x + 1)
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f957 	bl	80001cc <__aeabi_fsub>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461c      	mov	r4, r3
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff f950 	bl	80001d0 <__addsf3>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4620      	mov	r0, r4
 8000f36:	f7ff fbfb 	bl	8000730 <__aeabi_fcmple>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d02a      	beq.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x49e>
						y -= 25;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4929      	ldr	r1, [pc, #164]	; (8000fec <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f940 	bl	80001cc <__aeabi_fsub>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000f52:	601a      	str	r2, [r3, #0]
						TIM1->CCR1 = y;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4c19      	ldr	r4, [pc, #100]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fc2c 	bl	80007b8 <__aeabi_f2uiz>
 8000f60:	4603      	mov	r3, r0
 8000f62:	6363      	str	r3, [r4, #52]	; 0x34
						duty_cycle =(int)((y / x) * 100);
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff faea 	bl	8000548 <__aeabi_fdiv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	491e      	ldr	r1, [pc, #120]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa31 	bl	80003e0 <__aeabi_fmul>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbf3 	bl	800076c <__aeabi_f2iz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f9d5 	bl	8000338 <__aeabi_i2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e00c      	b.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x4b8>
						TIM1->CCR1 = x / 10;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x500>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fad3 	bl	8000548 <__aeabi_fdiv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4c06      	ldr	r4, [pc, #24]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fc06 	bl	80007b8 <__aeabi_f2uiz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	6363      	str	r3, [r4, #52]	; 0x34
				control = 0;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
	}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	200000cc 	.word	0x200000cc
 8000fc8:	43f98000 	.word	0x43f98000
 8000fcc:	200000c4 	.word	0x200000c4
 8000fd0:	200000d8 	.word	0x200000d8
 8000fd4:	20000070 	.word	0x20000070
 8000fd8:	200000b8 	.word	0x200000b8
 8000fdc:	200000bc 	.word	0x200000bc
 8000fe0:	200000c0 	.word	0x200000c0
 8000fe4:	471c4000 	.word	0x471c4000
 8000fe8:	200000d4 	.word	0x200000d4
 8000fec:	41c80000 	.word	0x41c80000
 8000ff0:	42c80000 	.word	0x42c80000
 8000ff4:	200000c8 	.word	0x200000c8
 8000ff8:	41200000 	.word	0x41200000

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fb80 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f82c 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 f986 	bl	8001318 <MX_GPIO_Init>
  MX_TIM1_Init();
 800100c:	f000 f864 	bl	80010d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001010:	f000 f904 	bl	800121c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET)
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <main+0x58>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d104      	bne.n	800102c <main+0x30>
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <main+0x58>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f06f 0201 	mvn.w	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <main+0x58>)
 800102e:	f001 faf1 	bl	8002614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001032:	2108      	movs	r1, #8
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <main+0x58>)
 8001036:	f001 fdaf 	bl	8002b98 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_4);
 800103a:	210c      	movs	r1, #12
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <main+0x58>)
 800103e:	f001 fccf 	bl	80029e0 <HAL_TIM_IC_Start>
  TIM1->CCR1 = 125;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <main+0x5c>)
 8001044:	227d      	movs	r2, #125	; 0x7d
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001048:	2100      	movs	r1, #0
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <main+0x60>)
 800104c:	f001 fba8 	bl	80027a0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x54>
 8001052:	bf00      	nop
 8001054:	20000070 	.word	0x20000070
 8001058:	40010000 	.word	0x40010000
 800105c:	20000028 	.word	0x20000028

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b092      	sub	sp, #72	; 0x48
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f002 ff57 	bl	8003f22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001086:	2301      	movs	r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108a:	2310      	movs	r3, #16
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fe66 	bl	8001d68 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010a2:	f000 f999 	bl	80013d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f8a6 	bl	8002210 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f985 	bl	80013d8 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3748      	adds	r7, #72	; 0x48
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b096      	sub	sp, #88	; 0x58
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f002 ff06 	bl	8003f22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001118:	4a3f      	ldr	r2, [pc, #252]	; (8001218 <MX_TIM1_Init+0x140>)
 800111a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600 - 1;
 800111c:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <MX_TIM1_Init+0x13c>)
 800111e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500 - 1;
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <MX_TIM1_Init+0x13c>)
 800112c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <MX_TIM1_Init+0x13c>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001144:	4833      	ldr	r0, [pc, #204]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001146:	f001 fa15 	bl	8002574 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 f942 	bl	80013d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115e:	4619      	mov	r1, r3
 8001160:	482c      	ldr	r0, [pc, #176]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001162:	f002 f8a7 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800116c:	f000 f934 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001172:	f001 fabd 	bl	80026f0 <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800117c:	f000 f92c 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118c:	4619      	mov	r1, r3
 800118e:	4821      	ldr	r0, [pc, #132]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001190:	f002 fdea 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800119a:	f000 f91d 	bl	80013d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	; 0x60
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_TIM1_Init+0x13c>)
 80011c4:	f001 ffb4 	bl	8003130 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011ce:	f000 f903 	bl	80013d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM1_Init+0x13c>)
 80011f6:	f002 fe31 	bl	8003e5c <HAL_TIMEx_ConfigBreakDeadTime>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001200:	f000 f8ea 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM1_Init+0x13c>)
 8001206:	f000 f9b9 	bl	800157c <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3758      	adds	r7, #88	; 0x58
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000028 	.word	0x20000028
 8001218:	40010000 	.word	0x40010000

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001246:	4b32      	ldr	r3, [pc, #200]	; (8001310 <MX_TIM3_Init+0xf4>)
 8001248:	4a32      	ldr	r2, [pc, #200]	; (8001314 <MX_TIM3_Init+0xf8>)
 800124a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600 - 1;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_TIM3_Init+0xf4>)
 800124e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_TIM3_Init+0xf4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000 - 1;
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_TIM3_Init+0xf4>)
 800125c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_TIM3_Init+0xf4>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <MX_TIM3_Init+0xf4>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126e:	4828      	ldr	r0, [pc, #160]	; (8001310 <MX_TIM3_Init+0xf4>)
 8001270:	f001 f980 	bl	8002574 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800127a:	f000 f8ad 	bl	80013d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4619      	mov	r1, r3
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_TIM3_Init+0xf4>)
 800128c:	f002 f812 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001296:	f000 f89f 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800129a:	481d      	ldr	r0, [pc, #116]	; (8001310 <MX_TIM3_Init+0xf4>)
 800129c:	f001 fb48 	bl	8002930 <HAL_TIM_IC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012a6:	f000 f897 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	4815      	ldr	r0, [pc, #84]	; (8001310 <MX_TIM3_Init+0xf4>)
 80012ba:	f002 fd55 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80012c4:	f000 f888 	bl	80013d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012c8:	230a      	movs	r3, #10
 80012ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2208      	movs	r2, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_TIM3_Init+0xf4>)
 80012e0:	f001 fe8a 	bl	8002ff8 <HAL_TIM_IC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80012ea:	f000 f875 	bl	80013d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	220c      	movs	r2, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_TIM3_Init+0xf4>)
 80012fa:	f001 fe7d 	bl	8002ff8 <HAL_TIM_IC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001304:	f000 f868 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000070 	.word	0x20000070
 8001314:	40000400 	.word	0x40000400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_GPIO_Init+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_GPIO_Init+0xb8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_GPIO_Init+0xb8>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_GPIO_Init+0xb8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0xbc>)
 80013a6:	f000 fcc7 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80013aa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0xbc>)
 80013c4:	f000 fb1a 	bl	80019fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <Error_Handler+0x8>
	...

080013e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_MspInit+0x48>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_MspInit+0x48>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_MspInit+0x48>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_MspInit+0x48>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_MspInit+0x48>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_MspInit+0x48>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_TIM_Base_MspInit+0x138>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12e      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a44      	ldr	r2, [pc, #272]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2018      	movs	r0, #24
 8001474:	f000 fa8b 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001478:	2018      	movs	r0, #24
 800147a:	f000 faa4 	bl	80019c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2019      	movs	r0, #25
 8001484:	f000 fa83 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001488:	2019      	movs	r0, #25
 800148a:	f000 fa9c 	bl	80019c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	201a      	movs	r0, #26
 8001494:	f000 fa7b 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001498:	201a      	movs	r0, #26
 800149a:	f000 fa94 	bl	80019c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	201b      	movs	r0, #27
 80014a4:	f000 fa73 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014a8:	201b      	movs	r0, #27
 80014aa:	f000 fa8c 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ae:	e057      	b.n	8001560 <HAL_TIM_Base_MspInit+0x130>
  else if(htim_base->Instance==TIM3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_TIM_Base_MspInit+0x140>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d152      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_TIM_Base_MspInit+0x13c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800150e:	2302      	movs	r3, #2
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151e:	2302      	movs	r3, #2
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <HAL_TIM_Base_MspInit+0x144>)
 800152a:	f000 fa67 	bl	80019fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001538:	2302      	movs	r3, #2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001540:	2302      	movs	r3, #2
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	480b      	ldr	r0, [pc, #44]	; (8001578 <HAL_TIM_Base_MspInit+0x148>)
 800154c:	f000 fa56 	bl	80019fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	201d      	movs	r0, #29
 8001556:	f000 fa1a 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800155a:	201d      	movs	r0, #29
 800155c:	f000 fa33 	bl	80019c6 <HAL_NVIC_EnableIRQ>
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40010000 	.word	0x40010000
 800156c:	40023800 	.word	0x40023800
 8001570:	40000400 	.word	0x40000400
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800

0800157c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_TIM_MspPostInit+0x68>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d11e      	bne.n	80015dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_TIM_MspPostInit+0x70>)
 80015d8:	f000 fa10 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 f8b7 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001646:	f001 fbcf 	bl	8002de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000028 	.word	0x20000028

08001654 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800165a:	f001 fbc5 	bl	8002de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000028 	.word	0x20000028

08001668 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800166e:	f001 fbbb 	bl	8002de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000028 	.word	0x20000028

0800167c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM1_CC_IRQHandler+0x10>)
 8001682:	f001 fbb1 	bl	8002de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000028 	.word	0x20000028

08001690 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM3_IRQHandler+0x10>)
 8001696:	f001 fba7 	bl	8002de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000070 	.word	0x20000070

080016a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80016b4:	f7ff fff6 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	; (80016f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	; (80016fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f002 fc29 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff fc8b 	bl	8000ffc <main>
  bx  lr
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016f4:	08003fb4 	.word	0x08003fb4
  ldr r2, =_sbss
 80016f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016fc:	200000e0 	.word	0x200000e0

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_Init+0x40>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_Init+0x40>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_Init+0x40>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f923 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	200f      	movs	r0, #15
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fe54 	bl	80013e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f93b 	bl	80019e2 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f903 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_IncTick+0x1c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_IncTick+0x20>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <HAL_IncTick+0x20>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000008 	.word	0x20000008
 80017c8:	200000dc 	.word	0x200000dc

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	200000dc 	.word	0x200000dc

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4906      	ldr	r1, [pc, #24]	; (8001878 <__NVIC_EnableIRQ+0x34>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff90 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff2d 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff42 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff35 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e16f      	b.n	8001cec <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8161 	beq.w	8001ce6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d005      	beq.n	8001a3c <HAL_GPIO_Init+0x40>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d130      	bne.n	8001a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a72:	2201      	movs	r2, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 0201 	and.w	r2, r3, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d017      	beq.n	8001ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d123      	bne.n	8001b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0203 	and.w	r2, r3, #3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80bb 	beq.w	8001ce6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <HAL_GPIO_Init+0x30c>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <HAL_GPIO_Init+0x30c>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b80:	4b61      	ldr	r3, [pc, #388]	; (8001d08 <HAL_GPIO_Init+0x30c>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_GPIO_Init+0x310>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_GPIO_Init+0x314>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d031      	beq.n	8001c1c <HAL_GPIO_Init+0x220>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_GPIO_Init+0x318>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d02b      	beq.n	8001c18 <HAL_GPIO_Init+0x21c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a55      	ldr	r2, [pc, #340]	; (8001d18 <HAL_GPIO_Init+0x31c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d025      	beq.n	8001c14 <HAL_GPIO_Init+0x218>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <HAL_GPIO_Init+0x320>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01f      	beq.n	8001c10 <HAL_GPIO_Init+0x214>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a53      	ldr	r2, [pc, #332]	; (8001d20 <HAL_GPIO_Init+0x324>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d019      	beq.n	8001c0c <HAL_GPIO_Init+0x210>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x328>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_GPIO_Init+0x20c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <HAL_GPIO_Init+0x32c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00d      	beq.n	8001c04 <HAL_GPIO_Init+0x208>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_GPIO_Init+0x330>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_GPIO_Init+0x334>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_GPIO_Init+0x200>
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	e010      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	e00e      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c00:	2307      	movs	r3, #7
 8001c02:	e00c      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c04:	2306      	movs	r3, #6
 8001c06:	e00a      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c08:	2305      	movs	r3, #5
 8001c0a:	e008      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e006      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c10:	2303      	movs	r3, #3
 8001c12:	e004      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	f002 0203 	and.w	r2, r2, #3
 8001c24:	0092      	lsls	r2, r2, #2
 8001c26:	4093      	lsls	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c30:	4936      	ldr	r1, [pc, #216]	; (8001d0c <HAL_GPIO_Init+0x310>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c62:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <HAL_GPIO_Init+0x338>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f47f ae88 	bne.w	8001a0c <HAL_GPIO_Init+0x10>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40021400 	.word	0x40021400
 8001d28:	40021800 	.word	0x40021800
 8001d2c:	40021c00 	.word	0x40021c00
 8001d30:	40022000 	.word	0x40022000
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e23b      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d050      	beq.n	8001e28 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d86:	4b9e      	ldr	r3, [pc, #632]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d00c      	beq.n	8001dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d92:	4b9b      	ldr	r3, [pc, #620]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d112      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9e:	4b98      	ldr	r3, [pc, #608]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001daa:	d10b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	4b94      	ldr	r3, [pc, #592]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d036      	beq.n	8001e26 <HAL_RCC_OscConfig+0xbe>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d132      	bne.n	8001e26 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e216      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <HAL_RCC_OscConfig+0x29c>)
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d013      	beq.n	8001dfe <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fcf9 	bl	80017cc <HAL_GetTick>
 8001dda:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dde:	f7ff fcf5 	bl	80017cc <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e200      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df0:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x76>
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fce5 	bl	80017cc <HAL_GetTick>
 8001e02:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e06:	f7ff fce1 	bl	80017cc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1ec      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x9e>
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d077      	beq.n	8001f24 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e34:	4b72      	ldr	r3, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d126      	bne.n	8001e9a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4c:	4b6c      	ldr	r3, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d120      	bne.n	8001e9a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x108>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e1c0      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b63      	ldr	r3, [pc, #396]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	21f8      	movs	r1, #248	; 0xf8
 8001e7e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	fa91 f1a1 	rbit	r1, r1
 8001e86:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	fab1 f181 	clz	r1, r1
 8001e8e:	b2c9      	uxtb	r1, r1
 8001e90:	408b      	lsls	r3, r1
 8001e92:	495b      	ldr	r1, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e98:	e044      	b.n	8001f24 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea2:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_OscConfig+0x2a0>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fc90 	bl	80017cc <HAL_GetTick>
 8001eac:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fc8c 	bl	80017cc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e197      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	21f8      	movs	r1, #248	; 0xf8
 8001edc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6939      	ldr	r1, [r7, #16]
 8001ee0:	fa91 f1a1 	rbit	r1, r1
 8001ee4:	60f9      	str	r1, [r7, #12]
  return result;
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	fab1 f181 	clz	r1, r1
 8001eec:	b2c9      	uxtb	r1, r1
 8001eee:	408b      	lsls	r3, r1
 8001ef0:	4943      	ldr	r1, [pc, #268]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x2a0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fc65 	bl	80017cc <HAL_GetTick>
 8001f02:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fc61 	bl	80017cc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e16c      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d030      	beq.n	8001f92 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d016      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x2a4>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fc45 	bl	80017cc <HAL_GetTick>
 8001f42:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f46:	f7ff fc41 	bl	80017cc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e14c      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1de>
 8001f64:	e015      	b.n	8001f92 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <HAL_RCC_OscConfig+0x2a4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fc2e 	bl	80017cc <HAL_GetTick>
 8001f70:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff fc2a 	bl	80017cc <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e135      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8087 	beq.w	80020ae <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d110      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_RCC_OscConfig+0x2a8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x2a8>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x2a8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d122      	bne.n	8002032 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_OscConfig+0x2a8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_RCC_OscConfig+0x2a8>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fbe8 	bl	80017cc <HAL_GetTick>
 8001ffc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	e012      	b.n	8002026 <HAL_RCC_OscConfig+0x2be>
 8002000:	40023800 	.word	0x40023800
 8002004:	40023802 	.word	0x40023802
 8002008:	42470000 	.word	0x42470000
 800200c:	42470e80 	.word	0x42470e80
 8002010:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7ff fbda 	bl	80017cc <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0e5      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b75      	ldr	r3, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x494>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x498>)
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7ff fbc2 	bl	80017cc <HAL_GetTick>
 8002048:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff fbbe 	bl	80017cc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0c7      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002062:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0ee      	beq.n	800204c <HAL_RCC_OscConfig+0x2e4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fbac 	bl	80017cc <HAL_GetTick>
 8002074:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff fba8 	bl	80017cc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0b1      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ee      	bne.n	8002078 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 809c 	beq.w	80021f0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b8:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d061      	beq.n	8002188 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d146      	bne.n	800215a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_OscConfig+0x4a0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fb7b 	bl	80017cc <HAL_GetTick>
 80020d6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fb77 	bl	80017cc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e082      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ec:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_OscConfig+0x4a4>)
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	69d1      	ldr	r1, [r2, #28]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6a12      	ldr	r2, [r2, #32]
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210e:	0192      	lsls	r2, r2, #6
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002116:	0612      	lsls	r2, r2, #24
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800211e:	0852      	lsrs	r2, r2, #1
 8002120:	3a01      	subs	r2, #1
 8002122:	0412      	lsls	r2, r2, #16
 8002124:	430a      	orrs	r2, r1
 8002126:	4937      	ldr	r1, [pc, #220]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x4a0>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fb4b 	bl	80017cc <HAL_GetTick>
 8002136:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff fb47 	bl	80017cc <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e052      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x3d2>
 8002158:	e04a      	b.n	80021f0 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_OscConfig+0x4a0>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fb34 	bl	80017cc <HAL_GetTick>
 8002164:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fb30 	bl	80017cc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e03b      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x400>
 8002186:	e033      	b.n	80021f0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e02e      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x49c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11a      	bne.n	80021ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c2:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000
 8002200:	40023870 	.word	0x40023870
 8002204:	40023800 	.word	0x40023800
 8002208:	42470060 	.word	0x42470060
 800220c:	f0bc8000 	.word	0xf0bc8000

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0d2      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0be      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a5b      	ldr	r2, [pc, #364]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800227c:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a55      	ldr	r2, [pc, #340]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4950      	ldr	r1, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d040      	beq.n	8002328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e085      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e079      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e071      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4939      	ldr	r1, [pc, #228]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f8:	f7ff fa68 	bl	80017cc <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7ff fa64 	bl	80017cc <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e059      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 020c 	and.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d1eb      	bne.n	8002300 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d20c      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e03c      	b.n	80023ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	491b      	ldr	r1, [pc, #108]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4913      	ldr	r1, [pc, #76]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800238e:	f000 f82b 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8002392:	4601      	mov	r1, r0
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239c:	22f0      	movs	r2, #240	; 0xf0
 800239e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	60fa      	str	r2, [r7, #12]
  return result;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	40d3      	lsrs	r3, r2
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1cc>)
 80023b4:	5cd3      	ldrb	r3, [r2, r3]
 80023b6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1d0>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1d4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9c0 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08003f94 	.word	0x08003f94
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b090      	sub	sp, #64	; 0x40
 80023ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d00d      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x40>
 800240c:	2b08      	cmp	r3, #8
 800240e:	f200 80a2 	bhi.w	8002556 <HAL_RCC_GetSysClockFreq+0x16e>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002416:	2b04      	cmp	r3, #4
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3a>
 800241a:	e09c      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_GetSysClockFreq+0x184>)
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002420:	e09c      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_GetSysClockFreq+0x188>)
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002426:	e099      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d027      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	2200      	movs	r2, #0
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	627a      	str	r2, [r7, #36]	; 0x24
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002450:	2100      	movs	r1, #0
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_GetSysClockFreq+0x188>)
 8002454:	fb03 f201 	mul.w	r2, r3, r1
 8002458:	2300      	movs	r3, #0
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	4413      	add	r3, r2
 8002460:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_RCC_GetSysClockFreq+0x188>)
 8002462:	fba0 2102 	umull	r2, r1, r0, r2
 8002466:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002468:	62ba      	str	r2, [r7, #40]	; 0x28
 800246a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246c:	4413      	add	r3, r2
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	2200      	movs	r2, #0
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	61fa      	str	r2, [r7, #28]
 8002478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002480:	f7fe f9ba 	bl	80007f8 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4613      	mov	r3, r2
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	e055      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	2200      	movs	r2, #0
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	617a      	str	r2, [r7, #20]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024a0:	f04f 0b00 	mov.w	fp, #0
 80024a4:	4652      	mov	r2, sl
 80024a6:	465b      	mov	r3, fp
 80024a8:	f04f 0000 	mov.w	r0, #0
 80024ac:	f04f 0100 	mov.w	r1, #0
 80024b0:	0159      	lsls	r1, r3, #5
 80024b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b6:	0150      	lsls	r0, r2, #5
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	ebb2 080a 	subs.w	r8, r2, sl
 80024c0:	eb63 090b 	sbc.w	r9, r3, fp
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024d0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024d4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024d8:	ebb2 0408 	subs.w	r4, r2, r8
 80024dc:	eb63 0509 	sbc.w	r5, r3, r9
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	00eb      	lsls	r3, r5, #3
 80024ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ee:	00e2      	lsls	r2, r4, #3
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	eb14 030a 	adds.w	r3, r4, sl
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	eb45 030b 	adc.w	r3, r5, fp
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 4500 	ldrd	r4, r5, [r7]
 800250c:	4629      	mov	r1, r5
 800250e:	028b      	lsls	r3, r1, #10
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	4604      	mov	r4, r0
 8002516:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800251a:	4601      	mov	r1, r0
 800251c:	028a      	lsls	r2, r1, #10
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	2200      	movs	r2, #0
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	60fa      	str	r2, [r7, #12]
 800252a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252e:	f7fe f963 	bl	80007f8 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4613      	mov	r3, r2
 8002538:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_GetSysClockFreq+0x180>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0c1b      	lsrs	r3, r3, #16
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	3301      	adds	r3, #1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800254a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002554:	e002      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetSysClockFreq+0x184>)
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800255e:	4618      	mov	r0, r3
 8002560:	3740      	adds	r7, #64	; 0x40
 8002562:	46bd      	mov	sp, r7
 8002564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002568:	40023800 	.word	0x40023800
 800256c:	00f42400 	.word	0x00f42400
 8002570:	017d7840 	.word	0x017d7840

08002574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e041      	b.n	800260a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe ff48 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f000 ffae 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d001      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e04e      	b.n	80026ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d022      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d01d      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d018      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_TIM_Base_Start_IT+0xc8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d013      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x80>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d111      	bne.n	80026b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d010      	beq.n	80026c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	e007      	b.n	80026c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40010400 	.word	0x40010400
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40001800 	.word	0x40001800

080026f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e041      	b.n	8002786 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f839 	bl	800278e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 fef0 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x24>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e022      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d109      	bne.n	80027de <HAL_TIM_PWM_Start+0x3e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e015      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start+0x58>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e008      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07c      	b.n	800290c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0x82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002820:	e013      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0x92>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	e00b      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d104      	bne.n	8002842 <HAL_TIM_PWM_Start+0xa2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	e003      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2201      	movs	r2, #1
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fa63 	bl	8003d1e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <HAL_TIM_PWM_Start+0x174>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_PWM_Start+0xcc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <HAL_TIM_PWM_Start+0x178>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_TIM_PWM_Start+0xd0>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_TIM_PWM_Start+0xd2>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_TIM_PWM_Start+0x174>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d01d      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_TIM_PWM_Start+0x17c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_TIM_PWM_Start+0x180>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_TIM_PWM_Start+0x184>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_TIM_PWM_Start+0x178>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_TIM_PWM_Start+0x188>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIM_PWM_Start+0x136>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_TIM_PWM_Start+0x18c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d111      	bne.n	80028fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d010      	beq.n	800290a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f8:	e007      	b.n	800290a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40010000 	.word	0x40010000
 8002918:	40010400 	.word	0x40010400
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40014000 	.word	0x40014000
 800292c:	40001800 	.word	0x40001800

08002930 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e041      	b.n	80029c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f839 	bl	80029ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fdd0 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_IC_Start+0x1a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	e013      	b.n	8002a22 <HAL_TIM_IC_Start+0x42>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_IC_Start+0x2a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e00b      	b.n	8002a22 <HAL_TIM_IC_Start+0x42>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIM_IC_Start+0x3a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	e003      	b.n	8002a22 <HAL_TIM_IC_Start+0x42>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <HAL_TIM_IC_Start+0x54>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e013      	b.n	8002a5c <HAL_TIM_IC_Start+0x7c>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d104      	bne.n	8002a44 <HAL_TIM_IC_Start+0x64>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e00b      	b.n	8002a5c <HAL_TIM_IC_Start+0x7c>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d104      	bne.n	8002a54 <HAL_TIM_IC_Start+0x74>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e003      	b.n	8002a5c <HAL_TIM_IC_Start+0x7c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d102      	bne.n	8002a6a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e081      	b.n	8002b72 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_IC_Start+0x9e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	e013      	b.n	8002aa6 <HAL_TIM_IC_Start+0xc6>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d104      	bne.n	8002a8e <HAL_TIM_IC_Start+0xae>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a8c:	e00b      	b.n	8002aa6 <HAL_TIM_IC_Start+0xc6>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d104      	bne.n	8002a9e <HAL_TIM_IC_Start+0xbe>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a9c:	e003      	b.n	8002aa6 <HAL_TIM_IC_Start+0xc6>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_IC_Start+0xd6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab4:	e013      	b.n	8002ade <HAL_TIM_IC_Start+0xfe>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_IC_Start+0xe6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac4:	e00b      	b.n	8002ade <HAL_TIM_IC_Start+0xfe>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_IC_Start+0xf6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad4:	e003      	b.n	8002ade <HAL_TIM_IC_Start+0xfe>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 f919 	bl	8003d1e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_TIM_IC_Start+0x19c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afe:	d01d      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_TIM_IC_Start+0x1a0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_TIM_IC_Start+0x1a4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_TIM_IC_Start+0x1a8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <HAL_TIM_IC_Start+0x1ac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_TIM_IC_Start+0x1b0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_TIM_IC_Start+0x15c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_TIM_IC_Start+0x1b4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d010      	beq.n	8002b70 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5e:	e007      	b.n	8002b70 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40000c00 	.word	0x40000c00
 8002b8c:	40010400 	.word	0x40010400
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40001800 	.word	0x40001800

08002b98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_IC_Start_IT+0x1e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e013      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x46>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_IC_Start_IT+0x2e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e00b      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x46>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_IC_Start_IT+0x3e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e003      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x46>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <HAL_TIM_IC_Start_IT+0x58>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e013      	b.n	8002c18 <HAL_TIM_IC_Start_IT+0x80>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d104      	bne.n	8002c00 <HAL_TIM_IC_Start_IT+0x68>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e00b      	b.n	8002c18 <HAL_TIM_IC_Start_IT+0x80>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d104      	bne.n	8002c10 <HAL_TIM_IC_Start_IT+0x78>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_IC_Start_IT+0x80>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c20:	7b7b      	ldrb	r3, [r7, #13]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0cc      	b.n	8002dc4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_IC_Start_IT+0xa2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c38:	e013      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0xca>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d104      	bne.n	8002c4a <HAL_TIM_IC_Start_IT+0xb2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c48:	e00b      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0xca>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d104      	bne.n	8002c5a <HAL_TIM_IC_Start_IT+0xc2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	e003      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0xca>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_IC_Start_IT+0xda>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c70:	e013      	b.n	8002c9a <HAL_TIM_IC_Start_IT+0x102>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_IC_Start_IT+0xea>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c80:	e00b      	b.n	8002c9a <HAL_TIM_IC_Start_IT+0x102>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_IC_Start_IT+0xfa>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	e003      	b.n	8002c9a <HAL_TIM_IC_Start_IT+0x102>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d841      	bhi.n	8002d24 <HAL_TIM_IC_Start_IT+0x18c>
 8002ca0:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_TIM_IC_Start_IT+0x110>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002cdd 	.word	0x08002cdd
 8002cac:	08002d25 	.word	0x08002d25
 8002cb0:	08002d25 	.word	0x08002d25
 8002cb4:	08002d25 	.word	0x08002d25
 8002cb8:	08002cef 	.word	0x08002cef
 8002cbc:	08002d25 	.word	0x08002d25
 8002cc0:	08002d25 	.word	0x08002d25
 8002cc4:	08002d25 	.word	0x08002d25
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002d25 	.word	0x08002d25
 8002cd0:	08002d25 	.word	0x08002d25
 8002cd4:	08002d25 	.word	0x08002d25
 8002cd8:	08002d13 	.word	0x08002d13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0202 	orr.w	r2, r2, #2
 8002cea:	60da      	str	r2, [r3, #12]
      break;
 8002cec:	e01d      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0204 	orr.w	r2, r2, #4
 8002cfc:	60da      	str	r2, [r3, #12]
      break;
 8002cfe:	e014      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	60da      	str	r2, [r3, #12]
      break;
 8002d10:	e00b      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0210 	orr.w	r2, r2, #16
 8002d20:	60da      	str	r2, [r3, #12]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d148      	bne.n	8002dc2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2201      	movs	r2, #1
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fff0 	bl	8003d1e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <HAL_TIM_IC_Start_IT+0x234>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d01d      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_TIM_IC_Start_IT+0x238>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_TIM_IC_Start_IT+0x23c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_TIM_IC_Start_IT+0x240>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_TIM_IC_Start_IT+0x244>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <HAL_TIM_IC_Start_IT+0x248>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_TIM_IC_Start_IT+0x1f6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_TIM_IC_Start_IT+0x24c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d111      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d010      	beq.n	8002dc2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	e007      	b.n	8002dc2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40000800 	.word	0x40000800
 8002dd8:	40000c00 	.word	0x40000c00
 8002ddc:	40010400 	.word	0x40010400
 8002de0:	40014000 	.word	0x40014000
 8002de4:	40001800 	.word	0x40001800

08002de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d122      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d11b      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0202 	mvn.w	r2, #2
 8002e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fe64 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb53 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb59 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d122      	bne.n	8002e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d11b      	bne.n	8002e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0204 	mvn.w	r2, #4
 8002e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fe3a 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8002e84:	e005      	b.n	8002e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fb29 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb2f 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d122      	bne.n	8002eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d11b      	bne.n	8002eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0208 	mvn.w	r2, #8
 8002ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fe10 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8002ed8:	e005      	b.n	8002ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 faff 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb05 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d122      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d11b      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0210 	mvn.w	r2, #16
 8002f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2208      	movs	r2, #8
 8002f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fde6 	bl	8000af8 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fad5 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fadb 	bl	80034f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10e      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d107      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0201 	mvn.w	r2, #1
 8002f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fab0 	bl	80034cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	d10e      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d107      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 ffbc 	bl	8003f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa9f 	bl	8003502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0220 	mvn.w	r2, #32
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 ff87 	bl	8003efe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003012:	2302      	movs	r3, #2
 8003014:	e088      	b.n	8003128 <HAL_TIM_IC_ConfigChannel+0x130>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003034:	f000 fcb8 	bl	80039a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 020c 	bic.w	r2, r2, #12
 8003046:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
 800305a:	e060      	b.n	800311e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d11c      	bne.n	800309c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003072:	f000 fd39 	bl	8003ae8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003084:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6999      	ldr	r1, [r3, #24]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	619a      	str	r2, [r3, #24]
 800309a:	e040      	b.n	800311e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11b      	bne.n	80030da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80030b2:	f000 fd84 	bl	8003bbe <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 020c 	bic.w	r2, r2, #12
 80030c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69d9      	ldr	r1, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	61da      	str	r2, [r3, #28]
 80030d8:	e021      	b.n	800311e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d11c      	bne.n	800311a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80030f0:	f000 fda0 	bl	8003c34 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003102:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69d9      	ldr	r1, [r3, #28]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	021a      	lsls	r2, r3, #8
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	61da      	str	r2, [r3, #28]
 8003118:	e001      	b.n	800311e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800314a:	2302      	movs	r3, #2
 800314c:	e0ae      	b.n	80032ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b0c      	cmp	r3, #12
 800315a:	f200 809f 	bhi.w	800329c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003199 	.word	0x08003199
 8003168:	0800329d 	.word	0x0800329d
 800316c:	0800329d 	.word	0x0800329d
 8003170:	0800329d 	.word	0x0800329d
 8003174:	080031d9 	.word	0x080031d9
 8003178:	0800329d 	.word	0x0800329d
 800317c:	0800329d 	.word	0x0800329d
 8003180:	0800329d 	.word	0x0800329d
 8003184:	0800321b 	.word	0x0800321b
 8003188:	0800329d 	.word	0x0800329d
 800318c:	0800329d 	.word	0x0800329d
 8003190:	0800329d 	.word	0x0800329d
 8003194:	0800325b 	.word	0x0800325b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa56 	bl	8003650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0208 	orr.w	r2, r2, #8
 80031b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	619a      	str	r2, [r3, #24]
      break;
 80031d6:	e064      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 faa6 	bl	8003730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6999      	ldr	r1, [r3, #24]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	021a      	lsls	r2, r3, #8
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	619a      	str	r2, [r3, #24]
      break;
 8003218:	e043      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 faf9 	bl	8003818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0208 	orr.w	r2, r2, #8
 8003234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0204 	bic.w	r2, r2, #4
 8003244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
      break;
 8003258:	e023      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fb4d 	bl	8003900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
      break;
 800329a:	e002      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
      break;
 80032a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_ConfigClockSource+0x1c>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0b4      	b.n	800343a <HAL_TIM_ConfigClockSource+0x186>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003308:	d03e      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0xd4>
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	f200 8087 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	f000 8086 	beq.w	8003426 <HAL_TIM_ConfigClockSource+0x172>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	d87f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d01a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xa6>
 8003324:	2b70      	cmp	r3, #112	; 0x70
 8003326:	d87b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d050      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x11a>
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d877      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d03c      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xfa>
 8003334:	2b50      	cmp	r3, #80	; 0x50
 8003336:	d873      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d058      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x13a>
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d86f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d867      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05a      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	e062      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	f000 fcb9 	bl	8003ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800337c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e04f      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	f000 fca2 	bl	8003ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fb66 	bl	8003a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	; 0x50
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc70 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 fbc0 	bl	8003b60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	; 0x60
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fc60 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 fb46 	bl	8003a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc50 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 800340c:	e00c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fc47 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 800341e:	e003      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e000      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d831      	bhi.n	80034bc <HAL_TIM_ReadCapturedValue+0x78>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <HAL_TIM_ReadCapturedValue+0x1c>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003495 	.word	0x08003495
 8003464:	080034bd 	.word	0x080034bd
 8003468:	080034bd 	.word	0x080034bd
 800346c:	080034bd 	.word	0x080034bd
 8003470:	0800349f 	.word	0x0800349f
 8003474:	080034bd 	.word	0x080034bd
 8003478:	080034bd 	.word	0x080034bd
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034bd 	.word	0x080034bd
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034b3 	.word	0x080034b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	60fb      	str	r3, [r7, #12]

      break;
 800349c:	e00f      	b.n	80034be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	60fb      	str	r3, [r7, #12]

      break;
 80034a6:	e00a      	b.n	80034be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	60fb      	str	r3, [r7, #12]

      break;
 80034b0:	e005      	b.n	80034be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	60fb      	str	r3, [r7, #12]

      break;
 80034ba:	e000      	b.n	80034be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80034bc:	bf00      	nop
  }

  return tmpreg;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop

080034cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <TIM_Base_SetConfig+0x110>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d00f      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <TIM_Base_SetConfig+0x114>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <TIM_Base_SetConfig+0x118>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a39      	ldr	r2, [pc, #228]	; (8003634 <TIM_Base_SetConfig+0x120>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2e      	ldr	r2, [pc, #184]	; (8003624 <TIM_Base_SetConfig+0x110>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d027      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d023      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <TIM_Base_SetConfig+0x118>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <TIM_Base_SetConfig+0x120>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <TIM_Base_SetConfig+0x124>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0x128>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0x12c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <TIM_Base_SetConfig+0x130>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <TIM_Base_SetConfig+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a22      	ldr	r2, [pc, #136]	; (800364c <TIM_Base_SetConfig+0x138>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <TIM_Base_SetConfig+0x110>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <TIM_Base_SetConfig+0x120>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	615a      	str	r2, [r3, #20]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40010000 	.word	0x40010000
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40000c00 	.word	0x40000c00
 8003634:	40010400 	.word	0x40010400
 8003638:	40014000 	.word	0x40014000
 800363c:	40014400 	.word	0x40014400
 8003640:	40014800 	.word	0x40014800
 8003644:	40001800 	.word	0x40001800
 8003648:	40001c00 	.word	0x40001c00
 800364c:	40002000 	.word	0x40002000

08003650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f023 0201 	bic.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 0302 	bic.w	r3, r3, #2
 8003698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a20      	ldr	r2, [pc, #128]	; (8003728 <TIM_OC1_SetConfig+0xd8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_OC1_SetConfig+0x64>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <TIM_OC1_SetConfig+0xdc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10c      	bne.n	80036ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0308 	bic.w	r3, r3, #8
 80036ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a15      	ldr	r2, [pc, #84]	; (8003728 <TIM_OC1_SetConfig+0xd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_OC1_SetConfig+0x8e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <TIM_OC1_SetConfig+0xdc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	621a      	str	r2, [r3, #32]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400

08003730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 0210 	bic.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0320 	bic.w	r3, r3, #32
 800377a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a21      	ldr	r2, [pc, #132]	; (8003810 <TIM_OC2_SetConfig+0xe0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC2_SetConfig+0x68>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_OC2_SetConfig+0xe4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10d      	bne.n	80037b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a16      	ldr	r2, [pc, #88]	; (8003810 <TIM_OC2_SetConfig+0xe0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_OC2_SetConfig+0x94>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC2_SetConfig+0xe4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d113      	bne.n	80037ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40010000 	.word	0x40010000
 8003814:	40010400 	.word	0x40010400

08003818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <TIM_OC3_SetConfig+0xe0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_OC3_SetConfig+0x66>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <TIM_OC3_SetConfig+0xe4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10d      	bne.n	800389a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC3_SetConfig+0xe0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC3_SetConfig+0x92>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC3_SetConfig+0xe4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400

08003900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <TIM_OC4_SetConfig+0xa0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC4_SetConfig+0x68>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <TIM_OC4_SetConfig+0xa4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010400 	.word	0x40010400

080039a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 0201 	bic.w	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <TIM_TI1_SetConfig+0xc8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01b      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d017      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <TIM_TI1_SetConfig+0xcc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <TIM_TI1_SetConfig+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00f      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <TIM_TI1_SetConfig+0xd4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <TIM_TI1_SetConfig+0xd8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <TIM_TI1_SetConfig+0xdc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_TI1_SetConfig+0x66>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <TIM_TI1_SetConfig+0xe0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <TIM_TI1_SetConfig+0x6a>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <TIM_TI1_SetConfig+0x6c>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0303 	bic.w	r3, r3, #3
 8003a1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e003      	b.n	8003a32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f023 030a 	bic.w	r3, r3, #10
 8003a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 030a 	and.w	r3, r3, #10
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40010400 	.word	0x40010400
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40001800 	.word	0x40001800

08003a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f023 030a 	bic.w	r3, r3, #10
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	621a      	str	r2, [r3, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0210 	bic.w	r2, r3, #16
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	031b      	lsls	r3, r3, #12
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0210 	bic.w	r2, r3, #16
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	031b      	lsls	r3, r3, #12
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	621a      	str	r2, [r3, #32]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	031b      	lsls	r3, r3, #12
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003c86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	031b      	lsls	r3, r3, #12
 8003c8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f043 0307 	orr.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	609a      	str	r2, [r3, #8]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	609a      	str	r2, [r3, #8]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2201      	movs	r2, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	401a      	ands	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e05a      	b.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d01d      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10c      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40010400 	.word	0x40010400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40001800 	.word	0x40001800

08003e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e03d      	b.n	8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <memset>:
 8003f22:	4603      	mov	r3, r0
 8003f24:	4402      	add	r2, r0
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d100      	bne.n	8003f2c <memset+0xa>
 8003f2a:	4770      	bx	lr
 8003f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f30:	e7f9      	b.n	8003f26 <memset+0x4>
	...

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	2600      	movs	r6, #0
 8003f38:	4d0c      	ldr	r5, [pc, #48]	; (8003f6c <__libc_init_array+0x38>)
 8003f3a:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3c:	1b64      	subs	r4, r4, r5
 8003f3e:	10a4      	asrs	r4, r4, #2
 8003f40:	42a6      	cmp	r6, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	f000 f81a 	bl	8003f7c <_init>
 8003f48:	2600      	movs	r6, #0
 8003f4a:	4d0a      	ldr	r5, [pc, #40]	; (8003f74 <__libc_init_array+0x40>)
 8003f4c:	4c0a      	ldr	r4, [pc, #40]	; (8003f78 <__libc_init_array+0x44>)
 8003f4e:	1b64      	subs	r4, r4, r5
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	42a6      	cmp	r6, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5c:	4798      	blx	r3
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f66:	4798      	blx	r3
 8003f68:	3601      	adds	r6, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	08003fac 	.word	0x08003fac
 8003f70:	08003fac 	.word	0x08003fac
 8003f74:	08003fac 	.word	0x08003fac
 8003f78:	08003fb0 	.word	0x08003fb0

08003f7c <_init>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr

08003f88 <_fini>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr


backlight_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003474  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c8  080035c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c8  080035c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c8  080035c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080035dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080035dc  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1ae  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b22  00000000  00000000  0002a225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088f  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017873  00000000  00000000  0002d0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6df  00000000  00000000  00044952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099997  00000000  00000000  00051031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000274c  00000000  00000000  000ea9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ed114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800351c 	.word	0x0800351c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800351c 	.word	0x0800351c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fdd0 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f83a 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fb1c 	bl	8000868 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f87e 	bl	8000330 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000234:	f000 f926 	bl	8000484 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000238:	f000 f9bc 	bl	80005b4 <MX_TIM14_Init>
  MX_TIM16_Init();
 800023c:	f000 fa08 	bl	8000650 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000240:	f000 fa8c 	bl	800075c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <main+0x6c>)
 8000246:	2100      	movs	r1, #0
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fff1 	bl	8002230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x70>)
 8000250:	2100      	movs	r1, #0
 8000252:	0018      	movs	r0, r3
 8000254:	f001 ffec 	bl	8002230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <main+0x70>)
 800025a:	2108      	movs	r1, #8
 800025c:	0018      	movs	r0, r3
 800025e:	f001 ffe7 	bl	8002230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <main+0x70>)
 8000264:	210c      	movs	r1, #12
 8000266:	0018      	movs	r0, r3
 8000268:	f001 ffe2 	bl	8002230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <main+0x74>)
 800026e:	2100      	movs	r1, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f001 ffdd 	bl	8002230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <main+0x78>)
 8000278:	2100      	movs	r1, #0
 800027a:	0018      	movs	r0, r3
 800027c:	f001 ffd8 	bl	8002230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <main+0x7c>)
 8000282:	2100      	movs	r1, #0
 8000284:	0018      	movs	r0, r3
 8000286:	f001 ffd3 	bl	8002230 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028a:	e7fe      	b.n	800028a <main+0x6a>
 800028c:	20000028 	.word	0x20000028
 8000290:	20000074 	.word	0x20000074
 8000294:	200000c0 	.word	0x200000c0
 8000298:	2000010c 	.word	0x2000010c
 800029c:	20000158 	.word	0x20000158

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b093      	sub	sp, #76	; 0x4c
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2410      	movs	r4, #16
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2338      	movs	r3, #56	; 0x38
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f003 f907 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	003b      	movs	r3, r7
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f003 f900 	bl	80034c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 f845 	bl	8001358 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2240      	movs	r2, #64	; 0x40
 80002e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 f871 	bl	80013d8 <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002fa:	f000 fad7 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	003b      	movs	r3, r7
 8000300:	2207      	movs	r2, #7
 8000302:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	003b      	movs	r3, r7
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	003b      	movs	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	003b      	movs	r3, r7
 8000318:	2100      	movs	r1, #0
 800031a:	0018      	movs	r0, r3
 800031c:	f001 fb76 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000324:	f000 fac2 	bl	80008ac <Error_Handler>
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b013      	add	sp, #76	; 0x4c
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b098      	sub	sp, #96	; 0x60
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	2354      	movs	r3, #84	; 0x54
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	230c      	movs	r3, #12
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f003 f8bf 	bl	80034c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000346:	2338      	movs	r3, #56	; 0x38
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	231c      	movs	r3, #28
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f003 f8b7 	bl	80034c4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	2334      	movs	r3, #52	; 0x34
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f003 f8b0 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000364:	4b45      	ldr	r3, [pc, #276]	; (800047c <MX_TIM1_Init+0x14c>)
 8000366:	4a46      	ldr	r2, [pc, #280]	; (8000480 <MX_TIM1_Init+0x150>)
 8000368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160 - 1;
 800036a:	4b44      	ldr	r3, [pc, #272]	; (800047c <MX_TIM1_Init+0x14c>)
 800036c:	229f      	movs	r2, #159	; 0x9f
 800036e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b42      	ldr	r3, [pc, #264]	; (800047c <MX_TIM1_Init+0x14c>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10 -1;
 8000376:	4b41      	ldr	r3, [pc, #260]	; (800047c <MX_TIM1_Init+0x14c>)
 8000378:	2209      	movs	r2, #9
 800037a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b3f      	ldr	r3, [pc, #252]	; (800047c <MX_TIM1_Init+0x14c>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000382:	4b3e      	ldr	r3, [pc, #248]	; (800047c <MX_TIM1_Init+0x14c>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000388:	4b3c      	ldr	r3, [pc, #240]	; (800047c <MX_TIM1_Init+0x14c>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800038e:	4b3b      	ldr	r3, [pc, #236]	; (800047c <MX_TIM1_Init+0x14c>)
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fef5 	bl	8002180 <HAL_TIM_PWM_Init>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 fa87 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039e:	2154      	movs	r1, #84	; 0x54
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003b2:	187a      	adds	r2, r7, r1
 80003b4:	4b31      	ldr	r3, [pc, #196]	; (800047c <MX_TIM1_Init+0x14c>)
 80003b6:	0011      	movs	r1, r2
 80003b8:	0018      	movs	r0, r3
 80003ba:	f002 ff57 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003c2:	f000 fa73 	bl	80008ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c6:	2138      	movs	r1, #56	; 0x38
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2260      	movs	r2, #96	; 0x60
 80003cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2206      	movs	r2, #6
 80003d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f2:	1879      	adds	r1, r7, r1
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <MX_TIM1_Init+0x14c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f935 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000402:	f000 fa53 	bl	80008ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	0192      	lsls	r2, r2, #6
 800042a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0492      	lsls	r2, r2, #18
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000458:	1d3a      	adds	r2, r7, #4
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_TIM1_Init+0x14c>)
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f002 ff72 	bl	8003348 <HAL_TIMEx_ConfigBreakDeadTime>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000468:	f000 fa20 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <MX_TIM1_Init+0x14c>)
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fb0c 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b018      	add	sp, #96	; 0x60
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000028 	.word	0x20000028
 8000480:	40012c00 	.word	0x40012c00

08000484 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08e      	sub	sp, #56	; 0x38
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	2328      	movs	r3, #40	; 0x28
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	0018      	movs	r0, r3
 8000490:	2310      	movs	r3, #16
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 f815 	bl	80034c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800049a:	231c      	movs	r3, #28
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	0018      	movs	r0, r3
 80004a0:	230c      	movs	r3, #12
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f003 f80d 	bl	80034c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004aa:	003b      	movs	r3, r7
 80004ac:	0018      	movs	r0, r3
 80004ae:	231c      	movs	r3, #28
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 f806 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004b8:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <MX_TIM3_Init+0x128>)
 80004ba:	4a3d      	ldr	r2, [pc, #244]	; (80005b0 <MX_TIM3_Init+0x12c>)
 80004bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160 - 1;
 80004be:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <MX_TIM3_Init+0x128>)
 80004c0:	229f      	movs	r2, #159	; 0x9f
 80004c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c4:	4b39      	ldr	r3, [pc, #228]	; (80005ac <MX_TIM3_Init+0x128>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10 - 1;
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <MX_TIM3_Init+0x128>)
 80004cc:	2209      	movs	r2, #9
 80004ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b36      	ldr	r3, [pc, #216]	; (80005ac <MX_TIM3_Init+0x128>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <MX_TIM3_Init+0x128>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004dc:	4b33      	ldr	r3, [pc, #204]	; (80005ac <MX_TIM3_Init+0x128>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fdf6 	bl	80020d0 <HAL_TIM_Base_Init>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004e8:	f000 f9e0 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	2128      	movs	r1, #40	; 0x28
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0152      	lsls	r2, r2, #5
 80004f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_TIM3_Init+0x128>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 f9b3 	bl	8002868 <HAL_TIM_ConfigClockSource>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000506:	f000 f9d1 	bl	80008ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_TIM3_Init+0x128>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fe37 	bl	8002180 <HAL_TIM_PWM_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000516:	f000 f9c9 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051a:	211c      	movs	r1, #28
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000528:	187a      	adds	r2, r7, r1
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_TIM3_Init+0x128>)
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f002 fe9c 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000538:	f000 f9b8 	bl	80008ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053c:	003b      	movs	r3, r7
 800053e:	2260      	movs	r2, #96	; 0x60
 8000540:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 8000542:	003b      	movs	r3, r7
 8000544:	2202      	movs	r2, #2
 8000546:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000548:	003b      	movs	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054e:	003b      	movs	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000554:	0039      	movs	r1, r7
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_TIM3_Init+0x128>)
 8000558:	2200      	movs	r2, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f002 f884 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000564:	f000 f9a2 	bl	80008ac <Error_Handler>
  }
  sConfigOC.Pulse = 8;
 8000568:	003b      	movs	r3, r7
 800056a:	2208      	movs	r2, #8
 800056c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800056e:	0039      	movs	r1, r7
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_TIM3_Init+0x128>)
 8000572:	2208      	movs	r2, #8
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f877 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 800057e:	f000 f995 	bl	80008ac <Error_Handler>
  }
  sConfigOC.Pulse = 9;
 8000582:	003b      	movs	r3, r7
 8000584:	2209      	movs	r2, #9
 8000586:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000588:	0039      	movs	r1, r7
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_TIM3_Init+0x128>)
 800058c:	220c      	movs	r2, #12
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f86a 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000598:	f000 f988 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <MX_TIM3_Init+0x128>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fa74 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b00e      	add	sp, #56	; 0x38
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000074 	.word	0x20000074
 80005b0:	40000400 	.word	0x40000400

080005b4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	0018      	movs	r0, r3
 80005be:	231c      	movs	r3, #28
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 ff7e 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_TIM14_Init+0x94>)
 80005ca:	4a20      	ldr	r2, [pc, #128]	; (800064c <MX_TIM14_Init+0x98>)
 80005cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 160 - 1;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_TIM14_Init+0x94>)
 80005d0:	229f      	movs	r2, #159	; 0x9f
 80005d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_TIM14_Init+0x94>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10 - 1;
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_TIM14_Init+0x94>)
 80005dc:	2209      	movs	r2, #9
 80005de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_TIM14_Init+0x94>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_TIM14_Init+0x94>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_TIM14_Init+0x94>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fd6e 	bl	80020d0 <HAL_TIM_Base_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80005f8:	f000 f958 	bl	80008ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_TIM14_Init+0x94>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fdbe 	bl	8002180 <HAL_TIM_PWM_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000608:	f000 f950 	bl	80008ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2260      	movs	r2, #96	; 0x60
 8000610:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2205      	movs	r2, #5
 8000616:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_TIM14_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f002 f81c 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000634:	f000 f93a 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <MX_TIM14_Init+0x94>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fa26 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b008      	add	sp, #32
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000c0 	.word	0x200000c0
 800064c:	40002000 	.word	0x40002000

08000650 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000656:	2334      	movs	r3, #52	; 0x34
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	231c      	movs	r3, #28
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 ff2f 	bl	80034c4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000666:	003b      	movs	r3, r7
 8000668:	0018      	movs	r0, r3
 800066a:	2334      	movs	r3, #52	; 0x34
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 ff28 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000674:	4b37      	ldr	r3, [pc, #220]	; (8000754 <MX_TIM16_Init+0x104>)
 8000676:	4a38      	ldr	r2, [pc, #224]	; (8000758 <MX_TIM16_Init+0x108>)
 8000678:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160 - 1;
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <MX_TIM16_Init+0x104>)
 800067c:	229f      	movs	r2, #159	; 0x9f
 800067e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b34      	ldr	r3, [pc, #208]	; (8000754 <MX_TIM16_Init+0x104>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10 - 1;
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <MX_TIM16_Init+0x104>)
 8000688:	2209      	movs	r2, #9
 800068a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <MX_TIM16_Init+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <MX_TIM16_Init+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <MX_TIM16_Init+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_TIM16_Init+0x104>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fd15 	bl	80020d0 <HAL_TIM_Base_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80006aa:	f000 f8ff 	bl	80008ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_TIM16_Init+0x104>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fd65 	bl	8002180 <HAL_TIM_PWM_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f8f7 	bl	80008ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006be:	2134      	movs	r1, #52	; 0x34
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2260      	movs	r2, #96	; 0x60
 80006c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 4;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2204      	movs	r2, #4
 80006ca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ea:	1879      	adds	r1, r7, r1
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_TIM16_Init+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 ffb9 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80006fa:	f000 f8d7 	bl	80008ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800071c:	003b      	movs	r3, r7
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0192      	lsls	r2, r2, #6
 8000722:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800072a:	003b      	movs	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000730:	003a      	movs	r2, r7
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_TIM16_Init+0x104>)
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f002 fe06 	bl	8003348 <HAL_TIMEx_ConfigBreakDeadTime>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000740:	f000 f8b4 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <MX_TIM16_Init+0x104>)
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f9a0 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b014      	add	sp, #80	; 0x50
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000010c 	.word	0x2000010c
 8000758:	40014400 	.word	0x40014400

0800075c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000762:	2334      	movs	r3, #52	; 0x34
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	0018      	movs	r0, r3
 8000768:	231c      	movs	r3, #28
 800076a:	001a      	movs	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	f002 fea9 	bl	80034c4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000772:	003b      	movs	r3, r7
 8000774:	0018      	movs	r0, r3
 8000776:	2334      	movs	r3, #52	; 0x34
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f002 fea2 	bl	80034c4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_TIM17_Init+0x104>)
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <MX_TIM17_Init+0x108>)
 8000784:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 160 - 1;
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <MX_TIM17_Init+0x104>)
 8000788:	229f      	movs	r2, #159	; 0x9f
 800078a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_TIM17_Init+0x104>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10 - 1;
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_TIM17_Init+0x104>)
 8000794:	2209      	movs	r2, #9
 8000796:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_TIM17_Init+0x104>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_TIM17_Init+0x104>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_TIM17_Init+0x104>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_TIM17_Init+0x104>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 fc8f 	bl	80020d0 <HAL_TIM_Base_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f879 	bl	80008ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_TIM17_Init+0x104>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fcdf 	bl	8002180 <HAL_TIM_PWM_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f871 	bl	80008ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2134      	movs	r1, #52	; 0x34
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2260      	movs	r2, #96	; 0x60
 80007d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2203      	movs	r2, #3
 80007d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	1879      	adds	r1, r7, r1
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_TIM17_Init+0x104>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 ff33 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000806:	f000 f851 	bl	80008ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	003b      	movs	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000822:	003b      	movs	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000828:	003b      	movs	r3, r7
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000830:	003b      	movs	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000836:	003b      	movs	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800083c:	003a      	movs	r2, r7
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_TIM17_Init+0x104>)
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fd80 	bl	8003348 <HAL_TIMEx_ConfigBreakDeadTime>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800084c:	f000 f82e 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <MX_TIM17_Init+0x104>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 f91a 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b014      	add	sp, #80	; 0x50
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000158 	.word	0x20000158
 8000864:	40014800 	.word	0x40014800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_GPIO_Init+0x40>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_GPIO_Init+0x40>)
 800088c:	2102      	movs	r1, #2
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_GPIO_Init+0x40>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000896:	2202      	movs	r2, #2
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0549      	lsls	r1, r1, #21
 80008e0:	430a      	orrs	r2, r1
 80008e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_MspInit+0x44>)
 80008e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	055b      	lsls	r3, r3, #21
 80008ec:	4013      	ands	r3, r2
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b093      	sub	sp, #76	; 0x4c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	2410      	movs	r4, #16
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2338      	movs	r3, #56	; 0x38
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f002 fdd6 	bl	80034c4 <memset>
  if(htim_pwm->Instance==TIM1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_TIM_PWM_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12c      	bne.n	800097c <HAL_TIM_PWM_MspInit+0x7c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0392      	lsls	r2, r2, #14
 8000928:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f9f4 	bl	8001d20 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 800093c:	f7ff ffb6 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_TIM_PWM_MspInit+0x88>)
 8000942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_TIM_PWM_MspInit+0x88>)
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	0109      	lsls	r1, r1, #4
 800094a:	430a      	orrs	r2, r1
 800094c:	641a      	str	r2, [r3, #64]	; 0x40
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_TIM_PWM_MspInit+0x88>)
 8000950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	200d      	movs	r0, #13
 8000962:	f000 fb63 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000966:	200d      	movs	r0, #13
 8000968:	f000 fb75 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	200e      	movs	r0, #14
 8000972:	f000 fb5b 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000976:	200e      	movs	r0, #14
 8000978:	f000 fb6d 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b013      	add	sp, #76	; 0x4c
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a37      	ldr	r2, [pc, #220]	; (8000a78 <HAL_TIM_Base_MspInit+0xec>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d114      	bne.n	80009c8 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 80009a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a2:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 80009a4:	2102      	movs	r1, #2
 80009a6:	430a      	orrs	r2, r1
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 80009ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ae:	2202      	movs	r2, #2
 80009b0:	4013      	ands	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2010      	movs	r0, #16
 80009bc:	f000 fb36 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009c0:	2010      	movs	r0, #16
 80009c2:	f000 fb48 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80009c6:	e052      	b.n	8000a6e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM14)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <HAL_TIM_Base_MspInit+0xf4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d116      	bne.n	8000a00 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0209      	lsls	r1, r1, #8
 80009dc:	430a      	orrs	r2, r1
 80009de:	641a      	str	r2, [r3, #64]	; 0x40
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 80009e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2013      	movs	r0, #19
 80009f4:	f000 fb1a 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80009f8:	2013      	movs	r0, #19
 80009fa:	f000 fb2c 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 80009fe:	e036      	b.n	8000a6e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM16)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <HAL_TIM_Base_MspInit+0xf8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d116      	bne.n	8000a38 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 8000a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	641a      	str	r2, [r3, #64]	; 0x40
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 8000a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2015      	movs	r0, #21
 8000a2c:	f000 fafe 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000a30:	2015      	movs	r0, #21
 8000a32:	f000 fb10 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 8000a36:	e01a      	b.n	8000a6e <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM17)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_TIM_Base_MspInit+0xfc>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d115      	bne.n	8000a6e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 8000a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	02c9      	lsls	r1, r1, #11
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_TIM_Base_MspInit+0xf0>)
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	02db      	lsls	r3, r3, #11
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2016      	movs	r0, #22
 8000a64:	f000 fae2 	bl	800102c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000a68:	2016      	movs	r0, #22
 8000a6a:	f000 faf4 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b006      	add	sp, #24
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40002000 	.word	0x40002000
 8000a84:	40014400 	.word	0x40014400
 8000a88:	40014800 	.word	0x40014800

08000a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08f      	sub	sp, #60	; 0x3c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2424      	movs	r4, #36	; 0x24
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f002 fd10 	bl	80034c4 <memset>
  if(htim->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a78      	ldr	r2, [pc, #480]	; (8000c8c <HAL_TIM_MspPostInit+0x200>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d124      	bne.n	8000af8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b78      	ldr	r3, [pc, #480]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab2:	4b77      	ldr	r3, [pc, #476]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aba:	4b75      	ldr	r3, [pc, #468]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	623b      	str	r3, [r7, #32]
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0052      	lsls	r2, r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	0021      	movs	r1, r4
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	187a      	adds	r2, r7, r1
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 facd 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000af6:	e0c4      	b.n	8000c82 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a65      	ldr	r2, [pc, #404]	; (8000c94 <HAL_TIM_MspPostInit+0x208>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d145      	bne.n	8000b8e <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b06:	4b62      	ldr	r3, [pc, #392]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b0e:	4b60      	ldr	r3, [pc, #384]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1e:	4b5c      	ldr	r3, [pc, #368]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b20:	2102      	movs	r1, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
 8000b26:	4b5a      	ldr	r3, [pc, #360]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b32:	2424      	movs	r4, #36	; 0x24
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2240      	movs	r2, #64	; 0x40
 8000b38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2201      	movs	r2, #1
 8000b50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	193a      	adds	r2, r7, r4
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fa98 	bl	8001090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b60:	0021      	movs	r1, r4
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2203      	movs	r2, #3
 8000b66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	4a45      	ldr	r2, [pc, #276]	; (8000c98 <HAL_TIM_MspPostInit+0x20c>)
 8000b84:	0019      	movs	r1, r3
 8000b86:	0010      	movs	r0, r2
 8000b88:	f000 fa82 	bl	8001090 <HAL_GPIO_Init>
}
 8000b8c:	e079      	b.n	8000c82 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM14)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <HAL_TIM_MspPostInit+0x210>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d123      	bne.n	8000be0 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9c:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bb0:	2124      	movs	r1, #36	; 0x24
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2202      	movs	r2, #2
 8000bbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2204      	movs	r2, #4
 8000bce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fa59 	bl	8001090 <HAL_GPIO_Init>
}
 8000bde:	e050      	b.n	8000c82 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM16)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <HAL_TIM_MspPostInit+0x214>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d123      	bne.n	8000c32 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c02:	2124      	movs	r1, #36	; 0x24
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2202      	movs	r2, #2
 8000c10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2202      	movs	r2, #2
 8000c22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_TIM_MspPostInit+0x20c>)
 8000c28:	0019      	movs	r1, r3
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	f000 fa30 	bl	8001090 <HAL_GPIO_Init>
}
 8000c30:	e027      	b.n	8000c82 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM17)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <HAL_TIM_MspPostInit+0x218>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d122      	bne.n	8000c82 <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_MspPostInit+0x204>)
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c54:	2124      	movs	r1, #36	; 0x24
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2202      	movs	r2, #2
 8000c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2205      	movs	r2, #5
 8000c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	187a      	adds	r2, r7, r1
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fa07 	bl	8001090 <HAL_GPIO_Init>
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b00f      	add	sp, #60	; 0x3c
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40012c00 	.word	0x40012c00
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40000400 	.word	0x40000400
 8000c98:	50000400 	.word	0x50000400
 8000c9c:	40002000 	.word	0x40002000
 8000ca0:	40014400 	.word	0x40014400
 8000ca4:	40014800 	.word	0x40014800

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8e6 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fb90 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000028 	.word	0x20000028

08000cf0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <TIM1_CC_IRQHandler+0x14>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 fb84 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000028 	.word	0x20000028

08000d08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <TIM3_IRQHandler+0x14>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fb78 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000074 	.word	0x20000074

08000d20 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <TIM14_IRQHandler+0x14>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fb6c 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200000c0 	.word	0x200000c0

08000d38 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <TIM16_IRQHandler+0x14>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fb60 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	2000010c 	.word	0x2000010c

08000d50 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <TIM17_IRQHandler+0x14>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f001 fb54 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000158 	.word	0x20000158

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff fff6 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	; (8000db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <LoopForever+0xe>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	; (8000dc0 <LoopForever+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da2:	f002 fb97 	bl	80034d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000da6:	f7ff fa3b 	bl	8000220 <main>

08000daa <LoopForever>:

LoopForever:
  b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
  ldr   r0, =_estack
 8000dac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db8:	080035d0 	.word	0x080035d0
  ldr r2, =_sbss
 8000dbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc0:	200001a8 	.word	0x200001a8

08000dc4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_COMP_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x3c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Init+0x3c>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0049      	lsls	r1, r1, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f810 	bl	8000e08 <HAL_InitTick>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e001      	b.n	8000df8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fd60 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	230f      	movs	r3, #15
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_InitTick+0x88>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02b      	beq.n	8000e78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0x8c>)
 8000e22:	681c      	ldr	r4, [r3, #0]
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_InitTick+0x88>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	0019      	movs	r1, r3
 8000e2a:	23fa      	movs	r3, #250	; 0xfa
 8000e2c:	0098      	lsls	r0, r3, #2
 8000e2e:	f7ff f96b 	bl	8000108 <__udivsi3>
 8000e32:	0003      	movs	r3, r0
 8000e34:	0019      	movs	r1, r3
 8000e36:	0020      	movs	r0, r4
 8000e38:	f7ff f966 	bl	8000108 <__udivsi3>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 f919 	bl	8001076 <HAL_SYSTICK_Config>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d112      	bne.n	8000e6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d80a      	bhi.n	8000e64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f8e8 	bl	800102c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_InitTick+0x90>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e00d      	b.n	8000e80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e008      	b.n	8000e80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e003      	b.n	8000e80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	18d2      	adds	r2, r2, r3
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_IncTick+0x20>)
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200001a4 	.word	0x200001a4

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	200001a4 	.word	0x200001a4

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	0002      	movs	r2, r0
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee6:	d809      	bhi.n	8000efc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	001a      	movs	r2, r3
 8000eee:	231f      	movs	r3, #31
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_EnableIRQ+0x30>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1c:	d828      	bhi.n	8000f70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <__NVIC_SetPriority+0xd4>)
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	33c0      	adds	r3, #192	; 0xc0
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	589b      	ldr	r3, [r3, r2]
 8000f2e:	1dfa      	adds	r2, r7, #7
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	0011      	movs	r1, r2
 8000f34:	2203      	movs	r2, #3
 8000f36:	400a      	ands	r2, r1
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	21ff      	movs	r1, #255	; 0xff
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	000a      	movs	r2, r1
 8000f40:	43d2      	mvns	r2, r2
 8000f42:	401a      	ands	r2, r3
 8000f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	019b      	lsls	r3, r3, #6
 8000f4a:	22ff      	movs	r2, #255	; 0xff
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	0018      	movs	r0, r3
 8000f54:	2303      	movs	r3, #3
 8000f56:	4003      	ands	r3, r0
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <__NVIC_SetPriority+0xd4>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	430a      	orrs	r2, r1
 8000f68:	33c0      	adds	r3, #192	; 0xc0
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6e:	e031      	b.n	8000fd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <__NVIC_SetPriority+0xd8>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0019      	movs	r1, r3
 8000f78:	230f      	movs	r3, #15
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	3b08      	subs	r3, #8
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3306      	adds	r3, #6
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	0011      	movs	r1, r2
 8000f90:	2203      	movs	r2, #3
 8000f92:	400a      	ands	r2, r1
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	21ff      	movs	r1, #255	; 0xff
 8000f98:	4091      	lsls	r1, r2
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	22ff      	movs	r2, #255	; 0xff
 8000fa8:	401a      	ands	r2, r3
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	4003      	ands	r3, r0
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	001c      	movs	r4, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	4023      	ands	r3, r4
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	3306      	adds	r3, #6
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	18c3      	adds	r3, r0, r3
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	045b      	lsls	r3, r3, #17
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d301      	bcc.n	8000ffc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e010      	b.n	800101e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <SysTick_Config+0x44>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	3a01      	subs	r2, #1
 8001002:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001004:	2301      	movs	r3, #1
 8001006:	425b      	negs	r3, r3
 8001008:	2103      	movs	r1, #3
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff7c 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x44>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	210f      	movs	r1, #15
 8001038:	187b      	adds	r3, r7, r1
 800103a:	1c02      	adds	r2, r0, #0
 800103c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	187b      	adds	r3, r7, r1
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	0002      	movs	r2, r0
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff33 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ffaf 	bl	8000fe4 <SysTick_Config>
 8001086:	0003      	movs	r3, r0
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e147      	b.n	8001330 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4091      	lsls	r1, r2
 80010aa:	000a      	movs	r2, r1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <HAL_GPIO_Init+0x28>
 80010b6:	e138      	b.n	800132a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	2201      	movs	r2, #1
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	4013      	ands	r3, r2
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2207      	movs	r2, #7
 800118c:	4013      	ands	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2107      	movs	r1, #7
 80011a6:	400b      	ands	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	6939      	ldr	r1, [r7, #16]
 80011c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	401a      	ands	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_GPIO_Init+0x174>
 8001202:	e092      	b.n	800132a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3318      	adds	r3, #24
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	589b      	ldr	r3, [r3, r2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	220f      	movs	r2, #15
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	23a0      	movs	r3, #160	; 0xa0
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	429a      	cmp	r2, r3
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1ca>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2bc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1c6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_GPIO_Init+0x2c0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1c2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_GPIO_Init+0x2c4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1be>
 800124a:	2303      	movs	r3, #3
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 800124e:	2305      	movs	r3, #5
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1cc>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800126c:	4936      	ldr	r1, [pc, #216]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3318      	adds	r3, #24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127a:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	035b      	lsls	r3, r3, #13
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	039b      	lsls	r3, r3, #14
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012d0:	2384      	movs	r3, #132	; 0x84
 80012d2:	58d3      	ldr	r3, [r2, r3]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	029b      	lsls	r3, r3, #10
 80012e8:	4013      	ands	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f4:	4914      	ldr	r1, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012f6:	2284      	movs	r2, #132	; 0x84
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	58d3      	ldr	r3, [r2, r3]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001322:	4909      	ldr	r1, [pc, #36]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	40da      	lsrs	r2, r3
 8001338:	1e13      	subs	r3, r2, #0
 800133a:	d000      	beq.n	800133e <HAL_GPIO_Init+0x2ae>
 800133c:	e6b0      	b.n	80010a0 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b006      	add	sp, #24
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021800 	.word	0x40021800
 800134c:	50000400 	.word	0x50000400
 8001350:	50000800 	.word	0x50000800
 8001354:	50000c00 	.word	0x50000c00

08001358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001366:	4013      	ands	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d11f      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	0013      	movs	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	189b      	adds	r3, r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4912      	ldr	r1, [pc, #72]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe febc 	bl	8000108 <__udivsi3>
 8001390:	0003      	movs	r3, r0
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001396:	e008      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e001      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e009      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	401a      	ands	r2, r3
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d0ed      	beq.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40007000 	.word	0x40007000
 80013cc:	fffff9ff 	.word	0xfffff9ff
 80013d0:	20000000 	.word	0x20000000
 80013d4:	000f4240 	.word	0x000f4240

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e2fe      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1e>
 80013f4:	e07c      	b.n	80014f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f6:	4bc3      	ldr	r3, [pc, #780]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2238      	movs	r2, #56	; 0x38
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001400:	4bc0      	ldr	r3, [pc, #768]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2203      	movs	r2, #3
 8001406:	4013      	ands	r3, r2
 8001408:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d102      	bne.n	8001416 <HAL_RCC_OscConfig+0x3e>
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d002      	beq.n	800141c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b08      	cmp	r3, #8
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4bb9      	ldr	r3, [pc, #740]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d062      	beq.n	80014ee <HAL_RCC_OscConfig+0x116>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d15e      	bne.n	80014ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e2d9      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x78>
 8001440:	4bb0      	ldr	r3, [pc, #704]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4baf      	ldr	r3, [pc, #700]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0249      	lsls	r1, r1, #9
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e020      	b.n	8001492 <HAL_RCC_OscConfig+0xba>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	02db      	lsls	r3, r3, #11
 8001458:	429a      	cmp	r2, r3
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0xa2>
 800145c:	4ba9      	ldr	r3, [pc, #676]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4ba8      	ldr	r3, [pc, #672]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	02c9      	lsls	r1, r1, #11
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4ba6      	ldr	r3, [pc, #664]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4ba5      	ldr	r3, [pc, #660]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0249      	lsls	r1, r1, #9
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0xba>
 800147a:	4ba2      	ldr	r3, [pc, #648]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4ba1      	ldr	r3, [pc, #644]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001480:	49a1      	ldr	r1, [pc, #644]	; (8001708 <HAL_RCC_OscConfig+0x330>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b9f      	ldr	r3, [pc, #636]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b9e      	ldr	r3, [pc, #632]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800148c:	499f      	ldr	r1, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x334>)
 800148e:	400a      	ands	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d014      	beq.n	80014c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff fd11 	bl	8000ec0 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fd0c 	bl	8000ec0 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e298      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	4b93      	ldr	r3, [pc, #588]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xcc>
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fcfc 	bl	8000ec0 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ce:	f7ff fcf7 	bl	8000ec0 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e283      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e0:	4b88      	ldr	r3, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0xf6>
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2202      	movs	r2, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	d100      	bne.n	80014fc <HAL_RCC_OscConfig+0x124>
 80014fa:	e099      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fc:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2238      	movs	r2, #56	; 0x38
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2203      	movs	r2, #3
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d102      	bne.n	800151c <HAL_RCC_OscConfig+0x144>
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d002      	beq.n	8001522 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d135      	bne.n	800158e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001522:	4b78      	ldr	r3, [pc, #480]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4013      	ands	r3, r2
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x162>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e256      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b72      	ldr	r3, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a74      	ldr	r2, [pc, #464]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001540:	4013      	ands	r3, r2
 8001542:	0019      	movs	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	021a      	lsls	r2, r3, #8
 800154a:	4b6e      	ldr	r3, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800154c:	430a      	orrs	r2, r1
 800154e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d112      	bne.n	800157c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001556:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800156a:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0adb      	lsrs	r3, r3, #11
 8001570:	2207      	movs	r2, #7
 8001572:	4013      	ands	r3, r2
 8001574:	4a68      	ldr	r2, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 8001576:	40da      	lsrs	r2, r3
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x344>)
 800157a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x348>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff fc41 	bl	8000e08 <HAL_InitTick>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d051      	beq.n	800162e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e22c      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d030      	beq.n	80015f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001596:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 800159c:	4013      	ands	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b55      	ldr	r3, [pc, #340]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	0049      	lsls	r1, r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc82 	bl	8000ec0 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc7d 	bl	8000ec0 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e209      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	021a      	lsls	r2, r3, #8
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	4949      	ldr	r1, [pc, #292]	; (8001724 <HAL_RCC_OscConfig+0x34c>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fc5c 	bl	8000ec0 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fc57 	bl	8000ec0 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1e3      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4013      	ands	r3, r2
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x236>
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2208      	movs	r2, #8
 8001636:	4013      	ands	r3, r2
 8001638:	d047      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2238      	movs	r2, #56	; 0x38
 8001640:	4013      	ands	r3, r2
 8001642:	2b18      	cmp	r3, #24
 8001644:	d10a      	bne.n	800165c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d03c      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f2>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d138      	bne.n	80016ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e1c5      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d019      	beq.n	8001698 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 8001666:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc26 	bl	8000ec0 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fc21 	bl	8000ec0 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1ad      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800168e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d0f1      	beq.n	800167a <HAL_RCC_OscConfig+0x2a2>
 8001696:	e018      	b.n	80016ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800169a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc0c 	bl	8000ec0 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fc07 	bl	8000ec0 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e193      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2204      	movs	r2, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2fe>
 80016d4:	e0c6      	b.n	8001864 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	231f      	movs	r3, #31
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2238      	movs	r2, #56	; 0x38
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d11e      	bne.n	8001728 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x31e>
 80016f4:	e0b6      	b.n	8001864 <HAL_RCC_OscConfig+0x48c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d000      	beq.n	8001700 <HAL_RCC_OscConfig+0x328>
 80016fe:	e0b1      	b.n	8001864 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e171      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
 8001704:	40021000 	.word	0x40021000
 8001708:	fffeffff 	.word	0xfffeffff
 800170c:	fffbffff 	.word	0xfffbffff
 8001710:	ffff80ff 	.word	0xffff80ff
 8001714:	ffffc7ff 	.word	0xffffc7ff
 8001718:	00f42400 	.word	0x00f42400
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004
 8001724:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001728:	4bb1      	ldr	r3, [pc, #708]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800172a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	055b      	lsls	r3, r3, #21
 8001730:	4013      	ands	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x360>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x362>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d011      	beq.n	8001762 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4bac      	ldr	r3, [pc, #688]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001742:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0549      	lsls	r1, r1, #21
 8001748:	430a      	orrs	r2, r1
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
 800174c:	4ba8      	ldr	r3, [pc, #672]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	055b      	lsls	r3, r3, #21
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001762:	4ba4      	ldr	r3, [pc, #656]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4013      	ands	r3, r2
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800176e:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4ba0      	ldr	r3, [pc, #640]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0049      	lsls	r1, r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800177c:	f7ff fba0 	bl	8000ec0 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fb9b 	bl	8000ec0 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e127      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	4b96      	ldr	r3, [pc, #600]	; (80019f4 <HAL_RCC_OscConfig+0x61c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x3e2>
 80017ac:	4b90      	ldr	r3, [pc, #576]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b0:	4b8f      	ldr	r3, [pc, #572]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b8:	e01c      	b.n	80017f4 <HAL_RCC_OscConfig+0x41c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x404>
 80017c2:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c6:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017c8:	2104      	movs	r1, #4
 80017ca:	430a      	orrs	r2, r1
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d2:	4b87      	ldr	r3, [pc, #540]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0x41c>
 80017dc:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e0:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017e8:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ec:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80017ee:	2104      	movs	r1, #4
 80017f0:	438a      	bics	r2, r1
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d014      	beq.n	8001826 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb60 	bl	8000ec0 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001804:	e009      	b.n	800181a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fb5b 	bl	8000ec0 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x620>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181a:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x42e>
 8001824:	e013      	b.n	800184e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fb4b 	bl	8000ec0 <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182e:	e009      	b.n	8001844 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fb46 	bl	8000ec0 <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	4a6f      	ldr	r2, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x620>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0d1      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800184e:	231f      	movs	r3, #31
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800185a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800185c:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800185e:	4967      	ldr	r1, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x624>)
 8001860:	400a      	ands	r2, r1
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d100      	bne.n	800186e <HAL_RCC_OscConfig+0x496>
 800186c:	e0bb      	b.n	80019e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2238      	movs	r2, #56	; 0x38
 8001874:	4013      	ands	r3, r2
 8001876:	2b10      	cmp	r3, #16
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x4a4>
 800187a:	e07b      	b.n	8001974 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d156      	bne.n	8001932 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800188a:	495d      	ldr	r1, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fb16 	bl	8000ec0 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fb11 	bl	8000ec0 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e09d      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	049b      	lsls	r3, r3, #18
 80018b4:	4013      	ands	r3, r2
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b8:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_RCC_OscConfig+0x62c>)
 80018be:	4013      	ands	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0449      	lsls	r1, r1, #17
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0549      	lsls	r1, r1, #21
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fada 	bl	8000ec0 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fad5 	bl	8000ec0 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e061      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x53a>
 8001930:	e059      	b.n	80019e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001938:	4931      	ldr	r1, [pc, #196]	; (8001a00 <HAL_RCC_OscConfig+0x628>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fabf 	bl	8000ec0 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff faba 	bl	8000ec0 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e046      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	049b      	lsls	r3, r3, #18
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 800196c:	4926      	ldr	r1, [pc, #152]	; (8001a08 <HAL_RCC_OscConfig+0x630>)
 800196e:	400a      	ands	r2, r1
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e038      	b.n	80019e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e033      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x618>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2203      	movs	r2, #3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	429a      	cmp	r2, r3
 8001992:	d126      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2270      	movs	r2, #112	; 0x70
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	23fe      	movs	r3, #254	; 0xfe
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d116      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	23f8      	movs	r3, #248	; 0xf8
 80019b8:	039b      	lsls	r3, r3, #14
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	23e0      	movs	r3, #224	; 0xe0
 80019c8:	051b      	lsls	r3, r3, #20
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	0f5b      	lsrs	r3, r3, #29
 80019d8:	075a      	lsls	r2, r3, #29
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b008      	add	sp, #32
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	00001388 	.word	0x00001388
 80019fc:	efffffff 	.word	0xefffffff
 8001a00:	feffffff 	.word	0xfeffffff
 8001a04:	11c1808c 	.word	0x11c1808c
 8001a08:	eefefffc 	.word	0xeefefffc

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e9      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d91e      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fa3e 	bl	8000ec0 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7ff fa39 	bl	8000ec0 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0ca      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d006      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	21e0      	movs	r1, #224	; 0xe0
 8001a88:	01c9      	lsls	r1, r1, #7
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_ClockConfig+0x1fc>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d057      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d12b      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e097      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	049b      	lsls	r3, r3, #18
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d11f      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e08b      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	d113      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e07f      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e074      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e06d      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f9c8 	bl	8000ec0 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff f9c3 	bl	8000ec0 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a2f      	ldr	r2, [pc, #188]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e054      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	; 0x38
 8001b50:	401a      	ands	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2207      	movs	r2, #7
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d21e      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f9a0 	bl	8000ec0 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f99b 	bl	8000ec0 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e02c      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <HAL_RCC_ClockConfig+0x200>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc6:	f000 f829 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bca:	0001      	movs	r1, r0
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x204>)
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	58d3      	ldr	r3, [r2, r3]
 8001bdc:	221f      	movs	r2, #31
 8001bde:	4013      	ands	r3, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff f90b 	bl	8000e08 <HAL_InitTick>
 8001bf2:	0003      	movs	r3, r0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	40021000 	.word	0x40021000
 8001c08:	fffff0ff 	.word	0xfffff0ff
 8001c0c:	ffff8fff 	.word	0xffff8fff
 8001c10:	08003534 	.word	0x08003534
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2238      	movs	r2, #56	; 0x38
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d10f      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0adb      	lsrs	r3, r3, #11
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	2201      	movs	r2, #1
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	4835      	ldr	r0, [pc, #212]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c42:	f7fe fa61 	bl	8000108 <__udivsi3>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e05d      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2238      	movs	r2, #56	; 0x38
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	; 0x38
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d138      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	4824      	ldr	r0, [pc, #144]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c8c:	f7fe fa3c 	bl	8000108 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	227f      	movs	r2, #127	; 0x7f
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	434b      	muls	r3, r1
 8001ca0:	617b      	str	r3, [r7, #20]
        break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca8:	f7fe fa2e 	bl	8000108 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	227f      	movs	r2, #127	; 0x7f
 8001cb8:	4013      	ands	r3, r2
 8001cba:	434b      	muls	r3, r1
 8001cbc:	617b      	str	r3, [r7, #20]
        break;
 8001cbe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0f5b      	lsrs	r3, r3, #29
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4013      	ands	r3, r2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7fe fa19 	bl	8000108 <__udivsi3>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e015      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2238      	movs	r2, #56	; 0x38
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d103      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b18      	cmp	r3, #24
 8001cfa:	d103      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cfc:	23fa      	movs	r3, #250	; 0xfa
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e001      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b006      	add	sp, #24
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d28:	2313      	movs	r3, #19
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d30:	2312      	movs	r3, #18
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	4013      	ands	r3, r2
 8001d42:	d100      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d44:	e0ad      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2011      	movs	r0, #17
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	055b      	lsls	r3, r3, #21
 8001d56:	4013      	ands	r3, r2
 8001d58:	d110      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0549      	lsls	r1, r1, #21
 8001d64:	430a      	orrs	r2, r1
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0049      	lsls	r1, r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d8a:	f7ff f899 	bl	8000ec0 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d92:	e00b      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7ff f894 	bl	8000ec0 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d904      	bls.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001da2:	2313      	movs	r3, #19
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2203      	movs	r2, #3
 8001da8:	701a      	strb	r2, [r3, #0]
        break;
 8001daa:	e005      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0ed      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001db8:	2313      	movs	r3, #19
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d15e      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d019      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d014      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	0249      	lsls	r1, r1, #9
 8001df2:	430a      	orrs	r2, r1
 8001df4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfc:	491e      	ldr	r1, [pc, #120]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d016      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f856 	bl	8000ec0 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e18:	e00c      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f851 	bl	8000ec0 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d904      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e2a:	2313      	movs	r3, #19
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
            break;
 8001e32:	e004      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d0ed      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e3e:	2313      	movs	r3, #19
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e5c:	e016      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2213      	movs	r2, #19
 8001e64:	18ba      	adds	r2, r7, r2
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	fffffcff 	.word	0xfffffcff
 8001e78:	fffeffff 	.word	0xfffeffff
 8001e7c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e80:	2312      	movs	r3, #18
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2213      	movs	r2, #19
 8001e86:	18ba      	adds	r2, r7, r2
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e8c:	2311      	movs	r3, #17
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e9a:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001e9c:	4983      	ldr	r1, [pc, #524]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d009      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eca:	4b77      	ldr	r3, [pc, #476]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	220c      	movs	r2, #12
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	4a70      	ldr	r2, [pc, #448]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f08:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	4a62      	ldr	r2, [pc, #392]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2220      	movs	r2, #32
 8001f42:	4013      	ands	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f46:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	4b54      	ldr	r3, [pc, #336]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	02db      	lsls	r3, r3, #11
 8001f62:	4013      	ands	r3, r2
 8001f64:	d016      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f66:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	4a55      	ldr	r2, [pc, #340]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	051b      	lsls	r3, r3, #20
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d106      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0449      	lsls	r1, r1, #17
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	01db      	lsls	r3, r3, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	0899      	lsrs	r1, r3, #2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d106      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0249      	lsls	r1, r1, #9
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	031b      	lsls	r3, r3, #12
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fd8:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	4393      	bics	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	039b      	lsls	r3, r3, #14
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d016      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	4a31      	ldr	r2, [pc, #196]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8002008:	430a      	orrs	r2, r1
 800200a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	03db      	lsls	r3, r3, #15
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0449      	lsls	r1, r1, #17
 8002022:	430a      	orrs	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	03db      	lsls	r3, r3, #15
 800202e:	4013      	ands	r3, r2
 8002030:	d016      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8002042:	430a      	orrs	r2, r1
 8002044:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	045b      	lsls	r3, r3, #17
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0449      	lsls	r1, r1, #17
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4013      	ands	r3, r2
 800206a:	d016      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800207c:	430a      	orrs	r2, r1
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	01db      	lsls	r3, r3, #7
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0249      	lsls	r1, r1, #9
 8002096:	430a      	orrs	r2, r1
 8002098:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800209a:	2312      	movs	r3, #18
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b006      	add	sp, #24
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	efffffff 	.word	0xefffffff
 80020b0:	fffff3ff 	.word	0xfffff3ff
 80020b4:	fff3ffff 	.word	0xfff3ffff
 80020b8:	ffcfffff 	.word	0xffcfffff
 80020bc:	ffffcfff 	.word	0xffffcfff
 80020c0:	f3ffffff 	.word	0xf3ffffff
 80020c4:	ffbfffff 	.word	0xffbfffff
 80020c8:	feffffff 	.word	0xfeffffff
 80020cc:	ffff3fff 	.word	0xffff3fff

080020d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e04a      	b.n	8002178 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	223d      	movs	r2, #61	; 0x3d
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223c      	movs	r2, #60	; 0x3c
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe fc47 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223d      	movs	r2, #61	; 0x3d
 8002102:	2102      	movs	r1, #2
 8002104:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	0019      	movs	r1, r3
 8002110:	0010      	movs	r0, r2
 8002112:	f000 fca7 	bl	8002a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2248      	movs	r2, #72	; 0x48
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223e      	movs	r2, #62	; 0x3e
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	223f      	movs	r2, #63	; 0x3f
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2242      	movs	r2, #66	; 0x42
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2243      	movs	r2, #67	; 0x43
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2244      	movs	r2, #68	; 0x44
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2245      	movs	r2, #69	; 0x45
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2246      	movs	r2, #70	; 0x46
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2247      	movs	r2, #71	; 0x47
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	223d      	movs	r2, #61	; 0x3d
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e04a      	b.n	8002228 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	223d      	movs	r2, #61	; 0x3d
 8002196:	5c9b      	ldrb	r3, [r3, r2]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d107      	bne.n	80021ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	223c      	movs	r2, #60	; 0x3c
 80021a2:	2100      	movs	r1, #0
 80021a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe fba9 	bl	8000900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223d      	movs	r2, #61	; 0x3d
 80021b2:	2102      	movs	r1, #2
 80021b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	0019      	movs	r1, r3
 80021c0:	0010      	movs	r0, r2
 80021c2:	f000 fc4f 	bl	8002a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2248      	movs	r2, #72	; 0x48
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	223e      	movs	r2, #62	; 0x3e
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223f      	movs	r2, #63	; 0x3f
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2240      	movs	r2, #64	; 0x40
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2241      	movs	r2, #65	; 0x41
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2242      	movs	r2, #66	; 0x42
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2243      	movs	r2, #67	; 0x43
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2244      	movs	r2, #68	; 0x44
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2245      	movs	r2, #69	; 0x45
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2246      	movs	r2, #70	; 0x46
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2247      	movs	r2, #71	; 0x47
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	223d      	movs	r2, #61	; 0x3d
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <HAL_TIM_PWM_Start+0x22>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	223e      	movs	r2, #62	; 0x3e
 8002244:	5c9b      	ldrb	r3, [r3, r2]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	4193      	sbcs	r3, r2
 800224e:	b2db      	uxtb	r3, r3
 8002250:	e037      	b.n	80022c2 <HAL_TIM_PWM_Start+0x92>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d108      	bne.n	800226a <HAL_TIM_PWM_Start+0x3a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	223f      	movs	r2, #63	; 0x3f
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	1e5a      	subs	r2, r3, #1
 8002264:	4193      	sbcs	r3, r2
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e02b      	b.n	80022c2 <HAL_TIM_PWM_Start+0x92>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d108      	bne.n	8002282 <HAL_TIM_PWM_Start+0x52>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	4193      	sbcs	r3, r2
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e01f      	b.n	80022c2 <HAL_TIM_PWM_Start+0x92>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d108      	bne.n	800229a <HAL_TIM_PWM_Start+0x6a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2241      	movs	r2, #65	; 0x41
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	4193      	sbcs	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e013      	b.n	80022c2 <HAL_TIM_PWM_Start+0x92>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d108      	bne.n	80022b2 <HAL_TIM_PWM_Start+0x82>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2242      	movs	r2, #66	; 0x42
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	4193      	sbcs	r3, r2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e007      	b.n	80022c2 <HAL_TIM_PWM_Start+0x92>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2243      	movs	r2, #67	; 0x43
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	4193      	sbcs	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e08b      	b.n	80023e2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <HAL_TIM_PWM_Start+0xaa>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	223e      	movs	r2, #62	; 0x3e
 80022d4:	2102      	movs	r1, #2
 80022d6:	5499      	strb	r1, [r3, r2]
 80022d8:	e023      	b.n	8002322 <HAL_TIM_PWM_Start+0xf2>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d104      	bne.n	80022ea <HAL_TIM_PWM_Start+0xba>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	223f      	movs	r2, #63	; 0x3f
 80022e4:	2102      	movs	r1, #2
 80022e6:	5499      	strb	r1, [r3, r2]
 80022e8:	e01b      	b.n	8002322 <HAL_TIM_PWM_Start+0xf2>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0xca>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	2102      	movs	r1, #2
 80022f6:	5499      	strb	r1, [r3, r2]
 80022f8:	e013      	b.n	8002322 <HAL_TIM_PWM_Start+0xf2>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PWM_Start+0xda>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2241      	movs	r2, #65	; 0x41
 8002304:	2102      	movs	r1, #2
 8002306:	5499      	strb	r1, [r3, r2]
 8002308:	e00b      	b.n	8002322 <HAL_TIM_PWM_Start+0xf2>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b10      	cmp	r3, #16
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0xea>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2242      	movs	r2, #66	; 0x42
 8002314:	2102      	movs	r1, #2
 8002316:	5499      	strb	r1, [r3, r2]
 8002318:	e003      	b.n	8002322 <HAL_TIM_PWM_Start+0xf2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2243      	movs	r2, #67	; 0x43
 800231e:	2102      	movs	r1, #2
 8002320:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6839      	ldr	r1, [r7, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	0018      	movs	r0, r3
 800232c:	f000 ff7a 	bl	8003224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <HAL_TIM_PWM_Start+0x1bc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_TIM_PWM_Start+0x128>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <HAL_TIM_PWM_Start+0x1c0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_TIM_PWM_Start+0x128>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_TIM_PWM_Start+0x1c4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_TIM_PWM_Start+0x128>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <HAL_TIM_PWM_Start+0x1c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_TIM_PWM_Start+0x12c>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_TIM_PWM_Start+0x12e>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	0209      	lsls	r1, r1, #8
 8002370:	430a      	orrs	r2, r1
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_TIM_PWM_Start+0x1bc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00f      	beq.n	800239e <HAL_TIM_PWM_Start+0x16e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	05db      	lsls	r3, r3, #23
 8002386:	429a      	cmp	r2, r3
 8002388:	d009      	beq.n	800239e <HAL_TIM_PWM_Start+0x16e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_TIM_PWM_Start+0x1cc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_TIM_PWM_Start+0x16e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <HAL_TIM_PWM_Start+0x1c0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d116      	bne.n	80023cc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_PWM_Start+0x1d0>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d016      	beq.n	80023de <HAL_TIM_PWM_Start+0x1ae>
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	025b      	lsls	r3, r3, #9
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d011      	beq.n	80023de <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	e008      	b.n	80023de <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2101      	movs	r1, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e000      	b.n	80023e0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40014000 	.word	0x40014000
 80023f4:	40014400 	.word	0x40014400
 80023f8:	40014800 	.word	0x40014800
 80023fc:	40000400 	.word	0x40000400
 8002400:	00010007 	.word	0x00010007

08002404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d124      	bne.n	8002464 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	2b02      	cmp	r3, #2
 8002426:	d11d      	bne.n	8002464 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2203      	movs	r2, #3
 800242e:	4252      	negs	r2, r2
 8002430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2203      	movs	r2, #3
 8002440:	4013      	ands	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 faf4 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 800244c:	e007      	b.n	800245e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 fae7 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 faf3 	bl	8002a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2204      	movs	r2, #4
 800246c:	4013      	ands	r3, r2
 800246e:	2b04      	cmp	r3, #4
 8002470:	d125      	bne.n	80024be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11e      	bne.n	80024be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2205      	movs	r2, #5
 8002486:	4252      	negs	r2, r2
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	23c0      	movs	r3, #192	; 0xc0
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fac7 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 80024a6:	e007      	b.n	80024b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 faba 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 fac6 	bl	8002a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d124      	bne.n	8002516 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2208      	movs	r2, #8
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11d      	bne.n	8002516 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2209      	movs	r2, #9
 80024e0:	4252      	negs	r2, r2
 80024e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2203      	movs	r2, #3
 80024f2:	4013      	ands	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fa9b 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 80024fe:	e007      	b.n	8002510 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 fa8e 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fa9a 	bl	8002a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2210      	movs	r2, #16
 800251e:	4013      	ands	r3, r2
 8002520:	2b10      	cmp	r3, #16
 8002522:	d125      	bne.n	8002570 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2210      	movs	r2, #16
 800252c:	4013      	ands	r3, r2
 800252e:	2b10      	cmp	r3, #16
 8002530:	d11e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2211      	movs	r2, #17
 8002538:	4252      	negs	r2, r2
 800253a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2208      	movs	r2, #8
 8002540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	23c0      	movs	r3, #192	; 0xc0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fa6e 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 8002558:	e007      	b.n	800256a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fa61 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fa6d 	bl	8002a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10f      	bne.n	800259e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	4013      	ands	r3, r2
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	4252      	negs	r2, r2
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fa3b 	bl	8002a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b80      	cmp	r3, #128	; 0x80
 80025aa:	d10f      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b80      	cmp	r3, #128	; 0x80
 80025b8:	d108      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2281      	movs	r2, #129	; 0x81
 80025c0:	4252      	negs	r2, r2
 80025c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 ff6c 	bl	80034a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	401a      	ands	r2, r3
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10e      	bne.n	80025fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_TIM_IRQHandler+0x260>)
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 ff5b 	bl	80034b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	4013      	ands	r3, r2
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d10f      	bne.n	800262c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	4013      	ands	r3, r2
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d108      	bne.n	800262c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2241      	movs	r2, #65	; 0x41
 8002620:	4252      	negs	r2, r2
 8002622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fa14 	bl	8002a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2220      	movs	r2, #32
 8002634:	4013      	ands	r3, r2
 8002636:	2b20      	cmp	r3, #32
 8002638:	d10f      	bne.n	800265a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	4013      	ands	r3, r2
 8002644:	2b20      	cmp	r3, #32
 8002646:	d108      	bne.n	800265a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	4252      	negs	r2, r2
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 ff1d 	bl	8003494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	fffffeff 	.word	0xfffffeff

08002668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2317      	movs	r3, #23
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	223c      	movs	r2, #60	; 0x3c
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002686:	2302      	movs	r3, #2
 8002688:	e0e5      	b.n	8002856 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	223c      	movs	r2, #60	; 0x3c
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b14      	cmp	r3, #20
 8002696:	d900      	bls.n	800269a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002698:	e0d1      	b.n	800283e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	009a      	lsls	r2, r3, #2
 800269e:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80026a0:	18d3      	adds	r3, r2, r3
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	0011      	movs	r1, r2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 fa58 	bl	8002b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2108      	movs	r1, #8
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2104      	movs	r1, #4
 80026d0:	438a      	bics	r2, r1
 80026d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6999      	ldr	r1, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	619a      	str	r2, [r3, #24]
      break;
 80026e6:	e0af      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	0011      	movs	r1, r2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fac1 	bl	8002c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0109      	lsls	r1, r1, #4
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4954      	ldr	r1, [pc, #336]	; (8002864 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002714:	400a      	ands	r2, r1
 8002716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6999      	ldr	r1, [r3, #24]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	021a      	lsls	r2, r3, #8
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]
      break;
 800272c:	e08c      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fb22 	bl	8002d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2108      	movs	r1, #8
 8002748:	430a      	orrs	r2, r1
 800274a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2104      	movs	r1, #4
 8002758:	438a      	bics	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69d9      	ldr	r1, [r3, #28]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
      break;
 800276e:	e06b      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f000 fb89 	bl	8002e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0109      	lsls	r1, r1, #4
 800278c:	430a      	orrs	r2, r1
 800278e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4932      	ldr	r1, [pc, #200]	; (8002864 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800279c:	400a      	ands	r2, r1
 800279e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69d9      	ldr	r1, [r3, #28]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	021a      	lsls	r2, r3, #8
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]
      break;
 80027b4:	e048      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fbd0 	bl	8002f64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2108      	movs	r1, #8
 80027d0:	430a      	orrs	r2, r1
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2104      	movs	r1, #4
 80027e0:	438a      	bics	r2, r1
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027f6:	e027      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f000 fc0f 	bl	8003024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	0109      	lsls	r1, r1, #4
 8002814:	430a      	orrs	r2, r1
 8002816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4910      	ldr	r1, [pc, #64]	; (8002864 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002824:	400a      	ands	r2, r1
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	021a      	lsls	r2, r3, #8
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800283c:	e004      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800283e:	2317      	movs	r3, #23
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	223c      	movs	r2, #60	; 0x3c
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]

  return status;
 8002850:	2317      	movs	r3, #23
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b006      	add	sp, #24
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	08003574 	.word	0x08003574
 8002864:	fffffbff 	.word	0xfffffbff

08002868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	230f      	movs	r3, #15
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223c      	movs	r2, #60	; 0x3c
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_TIM_ConfigClockSource+0x20>
 8002884:	2302      	movs	r3, #2
 8002886:	e0bc      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0x19a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223c      	movs	r2, #60	; 0x3c
 800288c:	2101      	movs	r1, #1
 800288e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	223d      	movs	r2, #61	; 0x3d
 8002894:	2102      	movs	r1, #2
 8002896:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4a5a      	ldr	r2, [pc, #360]	; (8002a0c <HAL_TIM_ConfigClockSource+0x1a4>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4a59      	ldr	r2, [pc, #356]	; (8002a10 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	0192      	lsls	r2, r2, #6
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d040      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0xde>
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	0192      	lsls	r2, r2, #6
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d900      	bls.n	80028ce <HAL_TIM_ConfigClockSource+0x66>
 80028cc:	e088      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	0152      	lsls	r2, r2, #5
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d100      	bne.n	80028d8 <HAL_TIM_ConfigClockSource+0x70>
 80028d6:	e088      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x182>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0152      	lsls	r2, r2, #5
 80028dc:	4293      	cmp	r3, r2
 80028de:	d900      	bls.n	80028e2 <HAL_TIM_ConfigClockSource+0x7a>
 80028e0:	e07e      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 80028e2:	2b70      	cmp	r3, #112	; 0x70
 80028e4:	d018      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0xb0>
 80028e6:	d900      	bls.n	80028ea <HAL_TIM_ConfigClockSource+0x82>
 80028e8:	e07a      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 80028ea:	2b60      	cmp	r3, #96	; 0x60
 80028ec:	d04f      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x126>
 80028ee:	d900      	bls.n	80028f2 <HAL_TIM_ConfigClockSource+0x8a>
 80028f0:	e076      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 80028f2:	2b50      	cmp	r3, #80	; 0x50
 80028f4:	d03b      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x106>
 80028f6:	d900      	bls.n	80028fa <HAL_TIM_ConfigClockSource+0x92>
 80028f8:	e072      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d057      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0x146>
 80028fe:	d900      	bls.n	8002902 <HAL_TIM_ConfigClockSource+0x9a>
 8002900:	e06e      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 8002902:	2b30      	cmp	r3, #48	; 0x30
 8002904:	d063      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x166>
 8002906:	d86b      	bhi.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 8002908:	2b20      	cmp	r3, #32
 800290a:	d060      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x166>
 800290c:	d868      	bhi.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d05d      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x166>
 8002912:	2b10      	cmp	r3, #16
 8002914:	d05b      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x166>
 8002916:	e063      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002928:	f000 fc5c 	bl	80031e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2277      	movs	r2, #119	; 0x77
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]
      break;
 8002944:	e052      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002956:	f000 fc45 	bl	80031e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	01c9      	lsls	r1, r1, #7
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
      break;
 800296c:	e03e      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297a:	001a      	movs	r2, r3
 800297c:	f000 fbb6 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2150      	movs	r1, #80	; 0x50
 8002986:	0018      	movs	r0, r3
 8002988:	f000 fc10 	bl	80031ac <TIM_ITRx_SetConfig>
      break;
 800298c:	e02e      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800299a:	001a      	movs	r2, r3
 800299c:	f000 fbd4 	bl	8003148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2160      	movs	r1, #96	; 0x60
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 fc00 	bl	80031ac <TIM_ITRx_SetConfig>
      break;
 80029ac:	e01e      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ba:	001a      	movs	r2, r3
 80029bc:	f000 fb96 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fbf0 	bl	80031ac <TIM_ITRx_SetConfig>
      break;
 80029cc:	e00e      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0019      	movs	r1, r3
 80029d8:	0010      	movs	r0, r2
 80029da:	f000 fbe7 	bl	80031ac <TIM_ITRx_SetConfig>
      break;
 80029de:	e005      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80029e0:	230f      	movs	r3, #15
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e000      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80029ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	223d      	movs	r2, #61	; 0x3d
 80029f0:	2101      	movs	r1, #1
 80029f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	223c      	movs	r2, #60	; 0x3c
 80029f8:	2100      	movs	r1, #0
 80029fa:	5499      	strb	r1, [r3, r2]

  return status;
 80029fc:	230f      	movs	r3, #15
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	781b      	ldrb	r3, [r3, #0]
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b004      	add	sp, #16
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	ffceff88 	.word	0xffceff88
 8002a10:	ffff00ff 	.word	0xffff00ff

08002a14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <TIM_Base_SetConfig+0xe4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d008      	beq.n	8002a8e <TIM_Base_SetConfig+0x2a>
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x2a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a30      	ldr	r2, [pc, #192]	; (8002b4c <TIM_Base_SetConfig+0xe8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2270      	movs	r2, #112	; 0x70
 8002a92:	4393      	bics	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a29      	ldr	r2, [pc, #164]	; (8002b48 <TIM_Base_SetConfig+0xe4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d018      	beq.n	8002ada <TIM_Base_SetConfig+0x76>
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	05db      	lsls	r3, r3, #23
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d013      	beq.n	8002ada <TIM_Base_SetConfig+0x76>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <TIM_Base_SetConfig+0xe8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_Base_SetConfig+0x76>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <TIM_Base_SetConfig+0xec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x76>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <TIM_Base_SetConfig+0xf0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x76>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <TIM_Base_SetConfig+0xf4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x76>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <TIM_Base_SetConfig+0xf8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <TIM_Base_SetConfig+0xfc>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	4393      	bics	r3, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <TIM_Base_SetConfig+0xe4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0xce>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <TIM_Base_SetConfig+0xf0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0xce>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <TIM_Base_SetConfig+0xf4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0xce>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <TIM_Base_SetConfig+0xf8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d103      	bne.n	8002b3a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	615a      	str	r2, [r3, #20]
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40002000 	.word	0x40002000
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	fffffcff 	.word	0xfffffcff

08002b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	2201      	movs	r2, #1
 8002b74:	4393      	bics	r3, r2
 8002b76:	001a      	movs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <TIM_OC1_SetConfig+0xf8>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4393      	bics	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <TIM_OC1_SetConfig+0xfc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00b      	beq.n	8002bda <TIM_OC1_SetConfig+0x76>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <TIM_OC1_SetConfig+0x100>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <TIM_OC1_SetConfig+0x76>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <TIM_OC1_SetConfig+0x104>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d003      	beq.n	8002bda <TIM_OC1_SetConfig+0x76>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <TIM_OC1_SetConfig+0x108>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10c      	bne.n	8002bf4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2208      	movs	r2, #8
 8002bde:	4393      	bics	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <TIM_OC1_SetConfig+0xfc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <TIM_OC1_SetConfig+0xb0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <TIM_OC1_SetConfig+0x100>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <TIM_OC1_SetConfig+0xb0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <TIM_OC1_SetConfig+0x104>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_OC1_SetConfig+0xb0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <TIM_OC1_SetConfig+0x108>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <TIM_OC1_SetConfig+0x10c>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <TIM_OC1_SetConfig+0x110>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffeff8f 	.word	0xfffeff8f
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	fffffeff 	.word	0xfffffeff
 8002c74:	fffffdff 	.word	0xfffffdff

08002c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	2210      	movs	r2, #16
 8002c88:	4393      	bics	r3, r2
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	; (8002d60 <TIM_OC2_SetConfig+0xe8>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a2d      	ldr	r2, [pc, #180]	; (8002d64 <TIM_OC2_SetConfig+0xec>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <TIM_OC2_SetConfig+0xf0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10d      	bne.n	8002cf6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	4393      	bics	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2240      	movs	r2, #64	; 0x40
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <TIM_OC2_SetConfig+0xf0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <TIM_OC2_SetConfig+0x9e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <TIM_OC2_SetConfig+0xf4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_OC2_SetConfig+0x9e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <TIM_OC2_SetConfig+0xf8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_OC2_SetConfig+0x9e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <TIM_OC2_SetConfig+0xfc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d113      	bne.n	8002d3e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <TIM_OC2_SetConfig+0x100>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <TIM_OC2_SetConfig+0x104>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b006      	add	sp, #24
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	feff8fff 	.word	0xfeff8fff
 8002d64:	fffffcff 	.word	0xfffffcff
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800
 8002d78:	fffffbff 	.word	0xfffffbff
 8002d7c:	fffff7ff 	.word	0xfffff7ff

08002d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a35      	ldr	r2, [pc, #212]	; (8002e64 <TIM_OC3_SetConfig+0xe4>)
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <TIM_OC3_SetConfig+0xe8>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2203      	movs	r2, #3
 8002db4:	4393      	bics	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <TIM_OC3_SetConfig+0xec>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <TIM_OC3_SetConfig+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10d      	bne.n	8002dfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <TIM_OC3_SetConfig+0xf4>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <TIM_OC3_SetConfig+0xf8>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <TIM_OC3_SetConfig+0xf0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <TIM_OC3_SetConfig+0x9a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <TIM_OC3_SetConfig+0xfc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_OC3_SetConfig+0x9a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <TIM_OC3_SetConfig+0x100>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_OC3_SetConfig+0x9a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <TIM_OC3_SetConfig+0x104>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d113      	bne.n	8002e42 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <TIM_OC3_SetConfig+0x108>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <TIM_OC3_SetConfig+0x10c>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	fffffeff 	.word	0xfffffeff
 8002e68:	fffeff8f 	.word	0xfffeff8f
 8002e6c:	fffffdff 	.word	0xfffffdff
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	fffff7ff 	.word	0xfffff7ff
 8002e78:	fffffbff 	.word	0xfffffbff
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	ffffefff 	.word	0xffffefff
 8002e8c:	ffffdfff 	.word	0xffffdfff

08002e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <TIM_OC4_SetConfig+0xb0>)
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <TIM_OC4_SetConfig+0xb4>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <TIM_OC4_SetConfig+0xb8>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <TIM_OC4_SetConfig+0xbc>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	031b      	lsls	r3, r3, #12
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <TIM_OC4_SetConfig+0xc0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <TIM_OC4_SetConfig+0x78>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <TIM_OC4_SetConfig+0xc4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <TIM_OC4_SetConfig+0x78>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <TIM_OC4_SetConfig+0xc8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_OC4_SetConfig+0x78>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <TIM_OC4_SetConfig+0xcc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d109      	bne.n	8002f1c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <TIM_OC4_SetConfig+0xd0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	ffffefff 	.word	0xffffefff
 8002f44:	feff8fff 	.word	0xfeff8fff
 8002f48:	fffffcff 	.word	0xfffffcff
 8002f4c:	ffffdfff 	.word	0xffffdfff
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40014400 	.word	0x40014400
 8002f5c:	40014800 	.word	0x40014800
 8002f60:	ffffbfff 	.word	0xffffbfff

08002f64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_OC5_SetConfig+0xa4>)
 8002f74:	401a      	ands	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <TIM_OC5_SetConfig+0xa8>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <TIM_OC5_SetConfig+0xac>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a17      	ldr	r2, [pc, #92]	; (8003014 <TIM_OC5_SetConfig+0xb0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_OC5_SetConfig+0x6e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a16      	ldr	r2, [pc, #88]	; (8003018 <TIM_OC5_SetConfig+0xb4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_OC5_SetConfig+0x6e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a15      	ldr	r2, [pc, #84]	; (800301c <TIM_OC5_SetConfig+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_OC5_SetConfig+0x6e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <TIM_OC5_SetConfig+0xbc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d109      	bne.n	8002fe6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <TIM_OC5_SetConfig+0xa4>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	621a      	str	r2, [r3, #32]
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bd80      	pop	{r7, pc}
 8003008:	fffeffff 	.word	0xfffeffff
 800300c:	fffeff8f 	.word	0xfffeff8f
 8003010:	fffdffff 	.word	0xfffdffff
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800

08003024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a26      	ldr	r2, [pc, #152]	; (80030cc <TIM_OC6_SetConfig+0xa8>)
 8003034:	401a      	ands	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <TIM_OC6_SetConfig+0xac>)
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <TIM_OC6_SetConfig+0xb0>)
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	051b      	lsls	r3, r3, #20
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <TIM_OC6_SetConfig+0xb4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00b      	beq.n	8003094 <TIM_OC6_SetConfig+0x70>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <TIM_OC6_SetConfig+0xb8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <TIM_OC6_SetConfig+0x70>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <TIM_OC6_SetConfig+0xbc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_OC6_SetConfig+0x70>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <TIM_OC6_SetConfig+0xc0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <TIM_OC6_SetConfig+0xc4>)
 8003098:	4013      	ands	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	029b      	lsls	r3, r3, #10
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b006      	add	sp, #24
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	ffefffff 	.word	0xffefffff
 80030d0:	feff8fff 	.word	0xfeff8fff
 80030d4:	ffdfffff 	.word	0xffdfffff
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40014400 	.word	0x40014400
 80030e4:	40014800 	.word	0x40014800
 80030e8:	fffbffff 	.word	0xfffbffff

080030ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	2201      	movs	r2, #1
 8003104:	4393      	bics	r3, r2
 8003106:	001a      	movs	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	22f0      	movs	r2, #240	; 0xf0
 8003116:	4393      	bics	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	220a      	movs	r2, #10
 8003128:	4393      	bics	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}

08003148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	2210      	movs	r2, #16
 800315a:	4393      	bics	r3, r2
 800315c:	001a      	movs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <TIM_TI2_ConfigInputStage+0x60>)
 8003172:	4013      	ands	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	031b      	lsls	r3, r3, #12
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	22a0      	movs	r2, #160	; 0xa0
 8003184:	4393      	bics	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	621a      	str	r2, [r3, #32]
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	ffff0fff 	.word	0xffff0fff

080031ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <TIM_ITRx_SetConfig+0x34>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	2207      	movs	r2, #7
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	ffcfff8f 	.word	0xffcfff8f

080031e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <TIM_ETR_SetConfig+0x3c>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	431a      	orrs	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b006      	add	sp, #24
 800321e:	bd80      	pop	{r7, pc}
 8003220:	ffff00ff 	.word	0xffff00ff

08003224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	221f      	movs	r2, #31
 8003234:	4013      	ands	r3, r2
 8003236:	2201      	movs	r2, #1
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	43d2      	mvns	r2, r2
 8003246:	401a      	ands	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	211f      	movs	r1, #31
 8003254:	400b      	ands	r3, r1
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4099      	lsls	r1, r3
 800325a:	000b      	movs	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	5c9b      	ldrb	r3, [r3, r2]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003280:	2302      	movs	r3, #2
 8003282:	e055      	b.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223c      	movs	r2, #60	; 0x3c
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	223d      	movs	r2, #61	; 0x3d
 8003290:	2102      	movs	r1, #2
 8003292:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a23      	ldr	r2, [pc, #140]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d108      	bne.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2270      	movs	r2, #112	; 0x70
 80032c4:	4393      	bics	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a16      	ldr	r2, [pc, #88]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00f      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	05db      	lsls	r3, r3, #23
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d009      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10c      	bne.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	4393      	bics	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4313      	orrs	r3, r2
 8003314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223d      	movs	r2, #61	; 0x3d
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	223c      	movs	r2, #60	; 0x3c
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40012c00 	.word	0x40012c00
 800333c:	ff0fffff 	.word	0xff0fffff
 8003340:	40000400 	.word	0x40000400
 8003344:	40014000 	.word	0x40014000

08003348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223c      	movs	r2, #60	; 0x3c
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003360:	2302      	movs	r3, #2
 8003362:	e079      	b.n	8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	; 0x3c
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	4393      	bics	r3, r2
 8003372:	001a      	movs	r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003380:	401a      	ands	r2, r3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a35      	ldr	r2, [pc, #212]	; (8003464 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800338e:	401a      	ands	r2, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800339c:	401a      	ands	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a30      	ldr	r2, [pc, #192]	; (800346c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80033aa:	401a      	ands	r2, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80033b8:	401a      	ands	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80033c6:	401a      	ands	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a29      	ldr	r2, [pc, #164]	; (8003478 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80033d4:	401a      	ands	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d106      	bne.n	80033f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80033ee:	401a      	ands	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d121      	bne.n	8003446 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003406:	401a      	ands	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003416:	401a      	ands	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003424:	401a      	ands	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d106      	bne.n	8003446 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a15      	ldr	r2, [pc, #84]	; (8003490 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800343c:	401a      	ands	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223c      	movs	r2, #60	; 0x3c
 8003452:	2100      	movs	r1, #0
 8003454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b004      	add	sp, #16
 800345e:	bd80      	pop	{r7, pc}
 8003460:	fffffcff 	.word	0xfffffcff
 8003464:	fffffbff 	.word	0xfffffbff
 8003468:	fffff7ff 	.word	0xfffff7ff
 800346c:	ffffefff 	.word	0xffffefff
 8003470:	ffffdfff 	.word	0xffffdfff
 8003474:	ffffbfff 	.word	0xffffbfff
 8003478:	fff0ffff 	.word	0xfff0ffff
 800347c:	40012c00 	.word	0x40012c00
 8003480:	efffffff 	.word	0xefffffff
 8003484:	ff0fffff 	.word	0xff0fffff
 8003488:	feffffff 	.word	0xfeffffff
 800348c:	fdffffff 	.word	0xfdffffff
 8003490:	dfffffff 	.word	0xdfffffff

08003494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <memset>:
 80034c4:	0003      	movs	r3, r0
 80034c6:	1882      	adds	r2, r0, r2
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	7019      	strb	r1, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2600      	movs	r6, #0
 80034d8:	4c0c      	ldr	r4, [pc, #48]	; (800350c <__libc_init_array+0x38>)
 80034da:	4d0d      	ldr	r5, [pc, #52]	; (8003510 <__libc_init_array+0x3c>)
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	42a6      	cmp	r6, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	2600      	movs	r6, #0
 80034e6:	f000 f819 	bl	800351c <_init>
 80034ea:	4c0a      	ldr	r4, [pc, #40]	; (8003514 <__libc_init_array+0x40>)
 80034ec:	4d0a      	ldr	r5, [pc, #40]	; (8003518 <__libc_init_array+0x44>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	42a6      	cmp	r6, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	00b3      	lsls	r3, r6, #2
 80034fa:	58eb      	ldr	r3, [r5, r3]
 80034fc:	4798      	blx	r3
 80034fe:	3601      	adds	r6, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	00b3      	lsls	r3, r6, #2
 8003504:	58eb      	ldr	r3, [r5, r3]
 8003506:	4798      	blx	r3
 8003508:	3601      	adds	r6, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	080035c8 	.word	0x080035c8
 8003510:	080035c8 	.word	0x080035c8
 8003514:	080035cc 	.word	0x080035cc
 8003518:	080035c8 	.word	0x080035c8

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr

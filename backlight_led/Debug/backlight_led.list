
backlight_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004f18  08004f18  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f18  08004f18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000010  08004f30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08004f30  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e131  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222b  00000000  00000000  0002e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  000303d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7c  00000000  00000000  00031280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018373  00000000  00000000  00031dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e6  00000000  00000000  0004a16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cc7f  00000000  00000000  0005ba55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003508  00000000  00000000  000f86d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000fbbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e6c 	.word	0x08004e6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004e6c 	.word	0x08004e6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ltr_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ltr_read()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af04      	add	r7, sp, #16
	//Configuring operation modes
	HAL_I2C_Mem_Write(&hi2c2, ADDRESS << 1, reg, 1, &command1, 1, HAL_MAX_DELAY);
 8000226:	4b3d      	ldr	r3, [pc, #244]	; (800031c <ltr_read+0xfc>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b29a      	uxth	r2, r3
 800022c:	483c      	ldr	r0, [pc, #240]	; (8000320 <ltr_read+0x100>)
 800022e:	2301      	movs	r3, #1
 8000230:	425b      	negs	r3, r3
 8000232:	9302      	str	r3, [sp, #8]
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	4b3a      	ldr	r3, [pc, #232]	; (8000324 <ltr_read+0x104>)
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2301      	movs	r3, #1
 800023e:	2152      	movs	r1, #82	; 0x52
 8000240:	f001 fab0 	bl	80017a4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, ADDRESS << 1, reg2, 1, &command2, 1, HAL_MAX_DELAY);
 8000244:	4b38      	ldr	r3, [pc, #224]	; (8000328 <ltr_read+0x108>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b29a      	uxth	r2, r3
 800024a:	4835      	ldr	r0, [pc, #212]	; (8000320 <ltr_read+0x100>)
 800024c:	2301      	movs	r3, #1
 800024e:	425b      	negs	r3, r3
 8000250:	9302      	str	r3, [sp, #8]
 8000252:	2301      	movs	r3, #1
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	4b35      	ldr	r3, [pc, #212]	; (800032c <ltr_read+0x10c>)
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2301      	movs	r3, #1
 800025c:	2152      	movs	r1, #82	; 0x52
 800025e:	f001 faa1 	bl	80017a4 <HAL_I2C_Mem_Write>

	//CH1
	HAL_I2C_Mem_Read(&hi2c2, ADDRESS << 1, 0x88, 1, &lower, 1, HAL_MAX_DELAY);
 8000262:	482f      	ldr	r0, [pc, #188]	; (8000320 <ltr_read+0x100>)
 8000264:	2301      	movs	r3, #1
 8000266:	425b      	negs	r3, r3
 8000268:	9302      	str	r3, [sp, #8]
 800026a:	2301      	movs	r3, #1
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	4b30      	ldr	r3, [pc, #192]	; (8000330 <ltr_read+0x110>)
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2301      	movs	r3, #1
 8000274:	2288      	movs	r2, #136	; 0x88
 8000276:	2152      	movs	r1, #82	; 0x52
 8000278:	f001 fbc2 	bl	8001a00 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, ADDRESS << 1, 0x89, 1, &upper, 1, HAL_MAX_DELAY);
 800027c:	4828      	ldr	r0, [pc, #160]	; (8000320 <ltr_read+0x100>)
 800027e:	2301      	movs	r3, #1
 8000280:	425b      	negs	r3, r3
 8000282:	9302      	str	r3, [sp, #8]
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <ltr_read+0x114>)
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2301      	movs	r3, #1
 800028e:	2289      	movs	r2, #137	; 0x89
 8000290:	2152      	movs	r1, #82	; 0x52
 8000292:	f001 fbb5 	bl	8001a00 <HAL_I2C_Mem_Read>

	data_1 = (upper << 8) | lower;
 8000296:	4b27      	ldr	r3, [pc, #156]	; (8000334 <ltr_read+0x114>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	021b      	lsls	r3, r3, #8
 800029c:	b21a      	sxth	r2, r3
 800029e:	4b24      	ldr	r3, [pc, #144]	; (8000330 <ltr_read+0x110>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	4313      	orrs	r3, r2
 80002a6:	b21b      	sxth	r3, r3
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <ltr_read+0x118>)
 80002ac:	801a      	strh	r2, [r3, #0]

	//CH0
	HAL_I2C_Mem_Read(&hi2c2, ADDRESS << 1, 0x8A, 1, &lower_0, 1, HAL_MAX_DELAY);
 80002ae:	481c      	ldr	r0, [pc, #112]	; (8000320 <ltr_read+0x100>)
 80002b0:	2301      	movs	r3, #1
 80002b2:	425b      	negs	r3, r3
 80002b4:	9302      	str	r3, [sp, #8]
 80002b6:	2301      	movs	r3, #1
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	4b20      	ldr	r3, [pc, #128]	; (800033c <ltr_read+0x11c>)
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2301      	movs	r3, #1
 80002c0:	228a      	movs	r2, #138	; 0x8a
 80002c2:	2152      	movs	r1, #82	; 0x52
 80002c4:	f001 fb9c 	bl	8001a00 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, ADDRESS << 1, 0x8B, 1, &upper_0, 1, HAL_MAX_DELAY);
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <ltr_read+0x100>)
 80002ca:	2301      	movs	r3, #1
 80002cc:	425b      	negs	r3, r3
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	2301      	movs	r3, #1
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <ltr_read+0x120>)
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2301      	movs	r3, #1
 80002da:	228b      	movs	r2, #139	; 0x8b
 80002dc:	2152      	movs	r1, #82	; 0x52
 80002de:	f001 fb8f 	bl	8001a00 <HAL_I2C_Mem_Read>

	data_0 = (upper_0 << 8) | lower_0;
 80002e2:	4b17      	ldr	r3, [pc, #92]	; (8000340 <ltr_read+0x120>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	b21a      	sxth	r2, r3
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <ltr_read+0x11c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	b21b      	sxth	r3, r3
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b21b      	sxth	r3, r3
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <ltr_read+0x124>)
 80002f8:	801a      	strh	r2, [r3, #0]

	// Reading status
	HAL_I2C_Mem_Read(&hi2c2, ADDRESS << 1, 0x8C, 1, &status_reg, 1, HAL_MAX_DELAY);
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <ltr_read+0x100>)
 80002fc:	2301      	movs	r3, #1
 80002fe:	425b      	negs	r3, r3
 8000300:	9302      	str	r3, [sp, #8]
 8000302:	2301      	movs	r3, #1
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <ltr_read+0x128>)
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	228c      	movs	r2, #140	; 0x8c
 800030e:	2152      	movs	r1, #82	; 0x52
 8000310:	f001 fb76 	bl	8001a00 <HAL_I2C_Mem_Read>

}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	20000000 	.word	0x20000000
 8000320:	2000002c 	.word	0x2000002c
 8000324:	20000002 	.word	0x20000002
 8000328:	20000001 	.word	0x20000001
 800032c:	20000003 	.word	0x20000003
 8000330:	200001fc 	.word	0x200001fc
 8000334:	200001fd 	.word	0x200001fd
 8000338:	20000204 	.word	0x20000204
 800033c:	200001fe 	.word	0x200001fe
 8000340:	200001ff 	.word	0x200001ff
 8000344:	20000202 	.word	0x20000202
 8000348:	20000200 	.word	0x20000200

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000350:	f000 fe54 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000354:	f000 f811 	bl	800037a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000358:	f000 fb34 	bl	80009c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800035c:	f000 f896 	bl	800048c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000360:	f000 f93e 	bl	80005e0 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000364:	f000 f9d4 	bl	8000710 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000368:	f000 fa20 	bl	80007ac <MX_TIM16_Init>
  MX_TIM17_Init();
 800036c:	f000 faa4 	bl	80008b8 <MX_TIM17_Init>
  MX_I2C2_Init();
 8000370:	f000 f84c 	bl	800040c <MX_I2C2_Init>
  {
	  	  // LTR Reading Register
		//  HAL_I2C_Master_Transmit(&hi2c2, ADDRESS << 1, &ID4, 1, HAL_MAX_DELAY);
		 // HAL_I2C_Master_Receive(&hi2c2, ADDRESS << 1, &rxData, 1, HAL_MAX_DELAY);

		  ltr_read();
 8000374:	f7ff ff54 	bl	8000220 <ltr_read>
 8000378:	e7fc      	b.n	8000374 <main+0x28>

0800037a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037a:	b590      	push	{r4, r7, lr}
 800037c:	b093      	sub	sp, #76	; 0x4c
 800037e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000380:	2410      	movs	r4, #16
 8000382:	193b      	adds	r3, r7, r4
 8000384:	0018      	movs	r0, r3
 8000386:	2338      	movs	r3, #56	; 0x38
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f004 fd42 	bl	8004e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	003b      	movs	r3, r7
 8000392:	0018      	movs	r0, r3
 8000394:	2310      	movs	r3, #16
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f004 fd3b 	bl	8004e14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f002 fd8e 	bl	8002ec4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2202      	movs	r2, #2
 80003ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	2240      	movs	r2, #64	; 0x40
 80003c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	f002 fdba 	bl	8002f44 <HAL_RCC_OscConfig>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003d4:	f000 fb18 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d8:	003b      	movs	r3, r7
 80003da:	2207      	movs	r2, #7
 80003dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003de:	003b      	movs	r3, r7
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f0:	003b      	movs	r3, r7
 80003f2:	2100      	movs	r1, #0
 80003f4:	0018      	movs	r0, r3
 80003f6:	f003 f8bf 	bl	8003578 <HAL_RCC_ClockConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003fe:	f000 fb03 	bl	8000a08 <Error_Handler>
  }
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b013      	add	sp, #76	; 0x4c
 8000408:	bd90      	pop	{r4, r7, pc}
	...

0800040c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_I2C2_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_I2C2_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_I2C2_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <MX_I2C2_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_I2C2_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_I2C2_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_I2C2_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_I2C2_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C2_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C2_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C2_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_I2C2_Init+0x74>)
 8000448:	0018      	movs	r0, r3
 800044a:	f001 f915 	bl	8001678 <HAL_I2C_Init>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 fad9 	bl	8000a08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_I2C2_Init+0x74>)
 8000458:	2100      	movs	r1, #0
 800045a:	0018      	movs	r0, r3
 800045c:	f002 fc9a 	bl	8002d94 <HAL_I2CEx_ConfigAnalogFilter>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 fad0 	bl	8000a08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_I2C2_Init+0x74>)
 800046a:	2100      	movs	r1, #0
 800046c:	0018      	movs	r0, r3
 800046e:	f002 fcdd 	bl	8002e2c <HAL_I2CEx_ConfigDigitalFilter>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 fac7 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000002c 	.word	0x2000002c
 8000484:	40005800 	.word	0x40005800
 8000488:	00303d5b 	.word	0x00303d5b

0800048c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b098      	sub	sp, #96	; 0x60
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000492:	2354      	movs	r3, #84	; 0x54
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	0018      	movs	r0, r3
 8000498:	230c      	movs	r3, #12
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f004 fcb9 	bl	8004e14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a2:	2338      	movs	r3, #56	; 0x38
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	0018      	movs	r0, r3
 80004a8:	231c      	movs	r3, #28
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f004 fcb1 	bl	8004e14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	2334      	movs	r3, #52	; 0x34
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f004 fcaa 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c0:	4b45      	ldr	r3, [pc, #276]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004c2:	4a46      	ldr	r2, [pc, #280]	; (80005dc <MX_TIM1_Init+0x150>)
 80004c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160 - 1;
 80004c6:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004c8:	229f      	movs	r2, #159	; 0x9f
 80004ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004cc:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10 -1;
 80004d2:	4b41      	ldr	r3, [pc, #260]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004d4:	2209      	movs	r2, #9
 80004d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004de:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004ea:	4b3b      	ldr	r3, [pc, #236]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f003 fbfd 	bl	8003cec <HAL_TIM_PWM_Init>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 fa87 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fa:	2154      	movs	r1, #84	; 0x54
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800050e:	187a      	adds	r2, r7, r1
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <MX_TIM1_Init+0x14c>)
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f004 fb51 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800051e:	f000 fa73 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000522:	2138      	movs	r1, #56	; 0x38
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2260      	movs	r2, #96	; 0x60
 8000528:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 6;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2206      	movs	r2, #6
 800052e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800054e:	1879      	adds	r1, r7, r1
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <MX_TIM1_Init+0x14c>)
 8000552:	2200      	movs	r2, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f003 fd53 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800055e:	f000 fa53 	bl	8000a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0192      	lsls	r2, r2, #6
 8000586:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	0492      	lsls	r2, r2, #18
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f004 fb6c 	bl	8004c98 <HAL_TIMEx_ConfigBreakDeadTime>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80005c4:	f000 fa20 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <MX_TIM1_Init+0x14c>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fb60 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b018      	add	sp, #96	; 0x60
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000080 	.word	0x20000080
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	2328      	movs	r3, #40	; 0x28
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2310      	movs	r3, #16
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f004 fc0f 	bl	8004e14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f6:	231c      	movs	r3, #28
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	0018      	movs	r0, r3
 80005fc:	230c      	movs	r3, #12
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f004 fc07 	bl	8004e14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000606:	003b      	movs	r3, r7
 8000608:	0018      	movs	r0, r3
 800060a:	231c      	movs	r3, #28
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f004 fc00 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <MX_TIM3_Init+0x128>)
 8000616:	4a3d      	ldr	r2, [pc, #244]	; (800070c <MX_TIM3_Init+0x12c>)
 8000618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160 - 1;
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MX_TIM3_Init+0x128>)
 800061c:	229f      	movs	r2, #159	; 0x9f
 800061e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b39      	ldr	r3, [pc, #228]	; (8000708 <MX_TIM3_Init+0x128>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10 - 1;
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <MX_TIM3_Init+0x128>)
 8000628:	2209      	movs	r2, #9
 800062a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <MX_TIM3_Init+0x128>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <MX_TIM3_Init+0x128>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <MX_TIM3_Init+0x128>)
 800063a:	0018      	movs	r0, r3
 800063c:	f003 fafe 	bl	8003c3c <HAL_TIM_Base_Init>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000644:	f000 f9e0 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000648:	2128      	movs	r1, #40	; 0x28
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0152      	lsls	r2, r2, #5
 8000650:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000652:	187a      	adds	r2, r7, r1
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <MX_TIM3_Init+0x128>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f003 fdd1 	bl	8004200 <HAL_TIM_ConfigClockSource>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000662:	f000 f9d1 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <MX_TIM3_Init+0x128>)
 8000668:	0018      	movs	r0, r3
 800066a:	f003 fb3f 	bl	8003cec <HAL_TIM_PWM_Init>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000672:	f000 f9c9 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000676:	211c      	movs	r1, #28
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000684:	187a      	adds	r2, r7, r1
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_TIM3_Init+0x128>)
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f004 fa96 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000694:	f000 f9b8 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000698:	003b      	movs	r3, r7
 800069a:	2260      	movs	r2, #96	; 0x60
 800069c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 800069e:	003b      	movs	r3, r7
 80006a0:	2202      	movs	r2, #2
 80006a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b0:	0039      	movs	r1, r7
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM3_Init+0x128>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f003 fca2 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80006c0:	f000 f9a2 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.Pulse = 8;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2208      	movs	r2, #8
 80006c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ca:	0039      	movs	r1, r7
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_TIM3_Init+0x128>)
 80006ce:	2208      	movs	r2, #8
 80006d0:	0018      	movs	r0, r3
 80006d2:	f003 fc95 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 f995 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.Pulse = 9;
 80006de:	003b      	movs	r3, r7
 80006e0:	2209      	movs	r2, #9
 80006e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e4:	0039      	movs	r1, r7
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_TIM3_Init+0x128>)
 80006e8:	220c      	movs	r2, #12
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 fc88 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80006f4:	f000 f988 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <MX_TIM3_Init+0x128>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fac8 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b00e      	add	sp, #56	; 0x38
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000cc 	.word	0x200000cc
 800070c:	40000400 	.word	0x40000400

08000710 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	231c      	movs	r3, #28
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f004 fb78 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_TIM14_Init+0x94>)
 8000726:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <MX_TIM14_Init+0x98>)
 8000728:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 160 - 1;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TIM14_Init+0x94>)
 800072c:	229f      	movs	r2, #159	; 0x9f
 800072e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM14_Init+0x94>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10 - 1;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_TIM14_Init+0x94>)
 8000738:	2209      	movs	r2, #9
 800073a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_TIM14_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_TIM14_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_TIM14_Init+0x94>)
 800074a:	0018      	movs	r0, r3
 800074c:	f003 fa76 	bl	8003c3c <HAL_TIM_Base_Init>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000754:	f000 f958 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_TIM14_Init+0x94>)
 800075a:	0018      	movs	r0, r3
 800075c:	f003 fac6 	bl	8003cec <HAL_TIM_PWM_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f950 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2260      	movs	r2, #96	; 0x60
 800076c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2205      	movs	r2, #5
 8000772:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	1d39      	adds	r1, r7, #4
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_TIM14_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f003 fc3a 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000790:	f000 f93a 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <MX_TIM14_Init+0x94>)
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fa7a 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b008      	add	sp, #32
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000118 	.word	0x20000118
 80007a8:	40002000 	.word	0x40002000

080007ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	2334      	movs	r3, #52	; 0x34
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	0018      	movs	r0, r3
 80007b8:	231c      	movs	r3, #28
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f004 fb29 	bl	8004e14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c2:	003b      	movs	r3, r7
 80007c4:	0018      	movs	r0, r3
 80007c6:	2334      	movs	r3, #52	; 0x34
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f004 fb22 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007d0:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007d2:	4a38      	ldr	r2, [pc, #224]	; (80008b4 <MX_TIM16_Init+0x108>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160 - 1;
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007d8:	229f      	movs	r2, #159	; 0x9f
 80007da:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10 - 1;
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007e4:	2209      	movs	r2, #9
 80007e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_TIM16_Init+0x104>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f003 fa1d 	bl	8003c3c <HAL_TIM_Base_Init>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 f8ff 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_TIM16_Init+0x104>)
 800080c:	0018      	movs	r0, r3
 800080e:	f003 fa6d 	bl	8003cec <HAL_TIM_PWM_Init>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f8f7 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081a:	2134      	movs	r1, #52	; 0x34
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2260      	movs	r2, #96	; 0x60
 8000820:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 4;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2204      	movs	r2, #4
 8000826:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000846:	1879      	adds	r1, r7, r1
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM16_Init+0x104>)
 800084a:	2200      	movs	r2, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f003 fbd7 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000856:	f000 f8d7 	bl	8000a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085a:	003b      	movs	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000860:	003b      	movs	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000866:	003b      	movs	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086c:	003b      	movs	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000872:	003b      	movs	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000878:	003b      	movs	r3, r7
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	0192      	lsls	r2, r2, #6
 800087e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000886:	003b      	movs	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800088c:	003a      	movs	r2, r7
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_TIM16_Init+0x104>)
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f004 fa00 	bl	8004c98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 800089c:	f000 f8b4 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <MX_TIM16_Init+0x104>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f9f4 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b014      	add	sp, #80	; 0x50
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000164 	.word	0x20000164
 80008b4:	40014400 	.word	0x40014400

080008b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	2334      	movs	r3, #52	; 0x34
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	231c      	movs	r3, #28
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f004 faa3 	bl	8004e14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2334      	movs	r3, #52	; 0x34
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f004 fa9c 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_TIM17_Init+0x104>)
 80008de:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <MX_TIM17_Init+0x108>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 160 - 1;
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <MX_TIM17_Init+0x104>)
 80008e4:	229f      	movs	r2, #159	; 0x9f
 80008e6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_TIM17_Init+0x104>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10 - 1;
 80008ee:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_TIM17_Init+0x104>)
 80008f0:	2209      	movs	r2, #9
 80008f2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <MX_TIM17_Init+0x104>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_TIM17_Init+0x104>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MX_TIM17_Init+0x104>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_TIM17_Init+0x104>)
 8000908:	0018      	movs	r0, r3
 800090a:	f003 f997 	bl	8003c3c <HAL_TIM_Base_Init>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 f879 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_TIM17_Init+0x104>)
 8000918:	0018      	movs	r0, r3
 800091a:	f003 f9e7 	bl	8003cec <HAL_TIM_PWM_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 f871 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000926:	2134      	movs	r1, #52	; 0x34
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2260      	movs	r2, #96	; 0x60
 800092c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2203      	movs	r2, #3
 8000932:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000952:	1879      	adds	r1, r7, r1
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_TIM17_Init+0x104>)
 8000956:	2200      	movs	r2, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f003 fb51 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000962:	f000 f851 	bl	8000a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000966:	003b      	movs	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096c:	003b      	movs	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000972:	003b      	movs	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000978:	003b      	movs	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800097e:	003b      	movs	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000984:	003b      	movs	r3, r7
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0192      	lsls	r2, r2, #6
 800098a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000992:	003b      	movs	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000998:	003a      	movs	r2, r7
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_TIM17_Init+0x104>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f004 f97a 	bl	8004c98 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80009a8:	f000 f82e 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <MX_TIM17_Init+0x104>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f96e 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b014      	add	sp, #80	; 0x50
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200001b0 	.word	0x200001b0
 80009c0:	40014800 	.word	0x40014800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_GPIO_Init+0x40>)
 80009cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_GPIO_Init+0x40>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_GPIO_Init+0x40>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009da:	2201      	movs	r2, #1
 80009dc:	4013      	ands	r3, r2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_GPIO_Init+0x40>)
 80009e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_GPIO_Init+0x40>)
 80009e8:	2102      	movs	r1, #2
 80009ea:	430a      	orrs	r2, r1
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_GPIO_Init+0x40>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	2202      	movs	r2, #2
 80009f4:	4013      	ands	r3, r2
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x44>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x44>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	0549      	lsls	r1, r1, #21
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_MspInit+0x44>)
 8000a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	055b      	lsls	r3, r3, #21
 8000a48:	4013      	ands	r3, r2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f004 f9d0 	bl	8004e14 <memset>
  if(hi2c->Instance==I2C2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <HAL_I2C_MspInit+0xa0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d139      	bne.n	8000af2 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	22c0      	movs	r2, #192	; 0xc0
 8000a9a:	0152      	lsls	r2, r2, #5
 8000a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2212      	movs	r2, #18
 8000aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2206      	movs	r2, #6
 8000ab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	187a      	adds	r2, r7, r1
 8000aba:	23a0      	movs	r3, #160	; 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fc75 	bl	80013b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	03c9      	lsls	r1, r1, #15
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	03db      	lsls	r3, r3, #15
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2018      	movs	r0, #24
 8000ae8:	f000 fbba 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000aec:	2018      	movs	r0, #24
 8000aee:	f000 fbcc 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b00b      	add	sp, #44	; 0x2c
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40005800 	.word	0x40005800
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b093      	sub	sp, #76	; 0x4c
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	2410      	movs	r4, #16
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	2338      	movs	r3, #56	; 0x38
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f004 f97c 	bl	8004e14 <memset>
  if(htim_pwm->Instance==TIM1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_TIM_PWM_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12c      	bne.n	8000b80 <HAL_TIM_PWM_MspInit+0x7c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	0392      	lsls	r2, r2, #14
 8000b2c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2200      	movs	r2, #0
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 fea8 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000b40:	f7ff ff62 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_TIM_PWM_MspInit+0x88>)
 8000b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_TIM_PWM_MspInit+0x88>)
 8000b4a:	2180      	movs	r1, #128	; 0x80
 8000b4c:	0109      	lsls	r1, r1, #4
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_TIM_PWM_MspInit+0x88>)
 8000b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	200d      	movs	r0, #13
 8000b66:	f000 fb7b 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b6a:	200d      	movs	r0, #13
 8000b6c:	f000 fb8d 	bl	800128a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	200e      	movs	r0, #14
 8000b76:	f000 fb73 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b7a:	200e      	movs	r0, #14
 8000b7c:	f000 fb85 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b013      	add	sp, #76	; 0x4c
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	40012c00 	.word	0x40012c00
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a37      	ldr	r2, [pc, #220]	; (8000c7c <HAL_TIM_Base_MspInit+0xec>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d114      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba2:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000ba8:	2102      	movs	r1, #2
 8000baa:	430a      	orrs	r2, r1
 8000bac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bae:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 fb4e 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bc4:	2010      	movs	r0, #16
 8000bc6:	f000 fb60 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bca:	e052      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM14)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <HAL_TIM_Base_MspInit+0xf4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d116      	bne.n	8000c04 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	0209      	lsls	r1, r1, #8
 8000be0:	430a      	orrs	r2, r1
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2013      	movs	r0, #19
 8000bf8:	f000 fb32 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000bfc:	2013      	movs	r0, #19
 8000bfe:	f000 fb44 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000c02:	e036      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM16)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <HAL_TIM_Base_MspInit+0xf8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d116      	bne.n	8000c3c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	0289      	lsls	r1, r1, #10
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	029b      	lsls	r3, r3, #10
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2015      	movs	r0, #21
 8000c30:	f000 fb16 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c34:	2015      	movs	r0, #21
 8000c36:	f000 fb28 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000c3a:	e01a      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM17)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_TIM_Base_MspInit+0xfc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d115      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	02c9      	lsls	r1, r1, #11
 8000c50:	430a      	orrs	r2, r1
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_TIM_Base_MspInit+0xf0>)
 8000c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	02db      	lsls	r3, r3, #11
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2016      	movs	r0, #22
 8000c68:	f000 fafa 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c6c:	2016      	movs	r0, #22
 8000c6e:	f000 fb0c 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b006      	add	sp, #24
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40000400 	.word	0x40000400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40002000 	.word	0x40002000
 8000c88:	40014400 	.word	0x40014400
 8000c8c:	40014800 	.word	0x40014800

08000c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b08f      	sub	sp, #60	; 0x3c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2424      	movs	r4, #36	; 0x24
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f004 f8b6 	bl	8004e14 <memset>
  if(htim->Instance==TIM1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a78      	ldr	r2, [pc, #480]	; (8000e90 <HAL_TIM_MspPostInit+0x200>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d124      	bne.n	8000cfc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b78      	ldr	r3, [pc, #480]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb6:	4b77      	ldr	r3, [pc, #476]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cbe:	4b75      	ldr	r3, [pc, #468]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2202      	movs	r2, #2
 8000cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	187a      	adds	r2, r7, r1
 8000cee:	23a0      	movs	r3, #160	; 0xa0
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 fb5b 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000cfa:	e0c4      	b.n	8000e86 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a65      	ldr	r2, [pc, #404]	; (8000e98 <HAL_TIM_MspPostInit+0x208>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d145      	bne.n	8000d92 <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0a:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
 8000d12:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d16:	2201      	movs	r2, #1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d22:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d24:	2102      	movs	r1, #2
 8000d26:	430a      	orrs	r2, r1
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
 8000d2a:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d36:	2424      	movs	r4, #36	; 0x24
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2240      	movs	r2, #64	; 0x40
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2202      	movs	r2, #2
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2201      	movs	r2, #1
 8000d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	193a      	adds	r2, r7, r4
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fb26 	bl	80013b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d64:	0021      	movs	r1, r4
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2202      	movs	r2, #2
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2201      	movs	r2, #1
 8000d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <HAL_TIM_MspPostInit+0x20c>)
 8000d88:	0019      	movs	r1, r3
 8000d8a:	0010      	movs	r0, r2
 8000d8c:	f000 fb10 	bl	80013b0 <HAL_GPIO_Init>
}
 8000d90:	e079      	b.n	8000e86 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM14)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <HAL_TIM_MspPostInit+0x210>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d123      	bne.n	8000de4 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dac:	2201      	movs	r2, #1
 8000dae:	4013      	ands	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db4:	2124      	movs	r1, #36	; 0x24
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2210      	movs	r2, #16
 8000dba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	23a0      	movs	r3, #160	; 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fae7 	bl	80013b0 <HAL_GPIO_Init>
}
 8000de2:	e050      	b.n	8000e86 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM16)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <HAL_TIM_MspPostInit+0x214>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d123      	bne.n	8000e36 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000df4:	2102      	movs	r1, #2
 8000df6:	430a      	orrs	r2, r1
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e06:	2124      	movs	r1, #36	; 0x24
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	0052      	lsls	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2202      	movs	r2, #2
 8000e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2202      	movs	r2, #2
 8000e26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <HAL_TIM_MspPostInit+0x20c>)
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f000 fabe 	bl	80013b0 <HAL_GPIO_Init>
}
 8000e34:	e027      	b.n	8000e86 <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM17)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_TIM_MspPostInit+0x218>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d122      	bne.n	8000e86 <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_TIM_MspPostInit+0x204>)
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e58:	2124      	movs	r1, #36	; 0x24
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2205      	movs	r2, #5
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fa95 	bl	80013b0 <HAL_GPIO_Init>
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b00f      	add	sp, #60	; 0x3c
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40012c00 	.word	0x40012c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	50000400 	.word	0x50000400
 8000ea0:	40002000 	.word	0x40002000
 8000ea4:	40014400 	.word	0x40014400
 8000ea8:	40014800 	.word	0x40014800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f8fe 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f002 ff5a 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000080 	.word	0x20000080

08000ef4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <TIM1_CC_IRQHandler+0x14>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 ff4e 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000080 	.word	0x20000080

08000f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <TIM3_IRQHandler+0x14>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f002 ff42 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	200000cc 	.word	0x200000cc

08000f24 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <TIM14_IRQHandler+0x14>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f002 ff36 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	20000118 	.word	0x20000118

08000f3c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <TIM16_IRQHandler+0x14>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 ff2a 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000164 	.word	0x20000164

08000f54 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <TIM17_IRQHandler+0x14>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 ff1e 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	200001b0 	.word	0x200001b0

08000f6c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <I2C2_IRQHandler+0x2c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	23e0      	movs	r3, #224	; 0xe0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d004      	beq.n	8000f88 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <I2C2_IRQHandler+0x2c>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 fe8b 	bl	8001c9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8000f86:	e003      	b.n	8000f90 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <I2C2_IRQHandler+0x2c>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fe6c 	bl	8001c68 <HAL_I2C_EV_IRQHandler>
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	2000002c 	.word	0x2000002c

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f7ff fff6 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd6:	f003 ff25 	bl	8004e24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fda:	f7ff f9b7 	bl	800034c <main>

08000fde <LoopForever>:

LoopForever:
  b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fec:	08004f20 	.word	0x08004f20
  ldr r2, =_sbss
 8000ff0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ff4:	2000020c 	.word	0x2000020c

08000ff8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_COMP_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_Init+0x3c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Init+0x3c>)
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	0049      	lsls	r1, r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f810 	bl	800103c <HAL_InitTick>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d003      	beq.n	8001028 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e001      	b.n	800102c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fcf4 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	781b      	ldrb	r3, [r3, #0]
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_InitTick+0x88>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d02b      	beq.n	80010ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_InitTick+0x8c>)
 8001056:	681c      	ldr	r4, [r3, #0]
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_InitTick+0x88>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	0019      	movs	r1, r3
 800105e:	23fa      	movs	r3, #250	; 0xfa
 8001060:	0098      	lsls	r0, r3, #2
 8001062:	f7ff f851 	bl	8000108 <__udivsi3>
 8001066:	0003      	movs	r3, r0
 8001068:	0019      	movs	r1, r3
 800106a:	0020      	movs	r0, r4
 800106c:	f7ff f84c 	bl	8000108 <__udivsi3>
 8001070:	0003      	movs	r3, r0
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f919 	bl	80012aa <HAL_SYSTICK_Config>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d112      	bne.n	80010a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d80a      	bhi.n	8001098 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	2301      	movs	r3, #1
 8001086:	425b      	negs	r3, r3
 8001088:	2200      	movs	r2, #0
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f8e8 	bl	8001260 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_InitTick+0x90>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00d      	b.n	80010b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e008      	b.n	80010b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a2:	230f      	movs	r3, #15
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e003      	b.n	80010b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ac:	230f      	movs	r3, #15
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	781b      	ldrb	r3, [r3, #0]
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b005      	add	sp, #20
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	001a      	movs	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	18d2      	adds	r2, r2, r3
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	20000208 	.word	0x20000208

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000208 	.word	0x20000208

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b7f      	cmp	r3, #127	; 0x7f
 800111a:	d809      	bhi.n	8001130 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	231f      	movs	r3, #31
 8001124:	401a      	ands	r2, r3
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_EnableIRQ+0x30>)
 8001128:	2101      	movs	r1, #1
 800112a:	4091      	lsls	r1, r2
 800112c:	000a      	movs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	0002      	movs	r2, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b7f      	cmp	r3, #127	; 0x7f
 8001150:	d828      	bhi.n	80011a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <__NVIC_SetPriority+0xd4>)
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	33c0      	adds	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	589b      	ldr	r3, [r3, r2]
 8001162:	1dfa      	adds	r2, r7, #7
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	0011      	movs	r1, r2
 8001168:	2203      	movs	r2, #3
 800116a:	400a      	ands	r2, r1
 800116c:	00d2      	lsls	r2, r2, #3
 800116e:	21ff      	movs	r1, #255	; 0xff
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	43d2      	mvns	r2, r2
 8001176:	401a      	ands	r2, r3
 8001178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	019b      	lsls	r3, r3, #6
 800117e:	22ff      	movs	r2, #255	; 0xff
 8001180:	401a      	ands	r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	0018      	movs	r0, r3
 8001188:	2303      	movs	r3, #3
 800118a:	4003      	ands	r3, r0
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001190:	481f      	ldr	r0, [pc, #124]	; (8001210 <__NVIC_SetPriority+0xd4>)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	430a      	orrs	r2, r1
 800119c:	33c0      	adds	r3, #192	; 0xc0
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011a2:	e031      	b.n	8001208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <__NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0019      	movs	r1, r3
 80011ac:	230f      	movs	r3, #15
 80011ae:	400b      	ands	r3, r1
 80011b0:	3b08      	subs	r3, #8
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3306      	adds	r3, #6
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1dfa      	adds	r2, r7, #7
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	0011      	movs	r1, r2
 80011c4:	2203      	movs	r2, #3
 80011c6:	400a      	ands	r2, r1
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	21ff      	movs	r1, #255	; 0xff
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	019b      	lsls	r3, r3, #6
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	401a      	ands	r2, r3
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	2303      	movs	r3, #3
 80011e6:	4003      	ands	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <__NVIC_SetPriority+0xd8>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	001c      	movs	r4, r3
 80011f4:	230f      	movs	r3, #15
 80011f6:	4023      	ands	r3, r4
 80011f8:	3b08      	subs	r3, #8
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	430a      	orrs	r2, r1
 80011fe:	3306      	adds	r3, #6
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	18c3      	adds	r3, r0, r3
 8001204:	3304      	adds	r3, #4
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b003      	add	sp, #12
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	045b      	lsls	r3, r3, #17
 8001228:	429a      	cmp	r2, r3
 800122a:	d301      	bcc.n	8001230 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122c:	2301      	movs	r3, #1
 800122e:	e010      	b.n	8001252 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SysTick_Config+0x44>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	3a01      	subs	r2, #1
 8001236:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001238:	2301      	movs	r3, #1
 800123a:	425b      	negs	r3, r3
 800123c:	2103      	movs	r1, #3
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff ff7c 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x44>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x44>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	210f      	movs	r1, #15
 800126c:	187b      	adds	r3, r7, r1
 800126e:	1c02      	adds	r2, r0, #0
 8001270:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	187b      	adds	r3, r7, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b25b      	sxtb	r3, r3
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b004      	add	sp, #16
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	0002      	movs	r2, r0
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ff33 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ffaf 	bl	8001218 <SysTick_Config>
 80012ba:	0003      	movs	r3, r0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	210f      	movs	r1, #15
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2225      	movs	r2, #37	; 0x25
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d006      	beq.n	80012ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e049      	b.n	8001382 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	210e      	movs	r1, #14
 80012fa:	438a      	bics	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	438a      	bics	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	491d      	ldr	r1, [pc, #116]	; (8001390 <HAL_DMA_Abort_IT+0xcc>)
 800131a:	400a      	ands	r2, r1
 800131c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_DMA_Abort_IT+0xd0>)
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	221c      	movs	r2, #28
 8001328:	4013      	ands	r3, r2
 800132a:	2201      	movs	r2, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_DMA_Abort_IT+0xd0>)
 8001330:	430a      	orrs	r2, r1
 8001332:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800133c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00c      	beq.n	8001360 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001350:	490f      	ldr	r1, [pc, #60]	; (8001390 <HAL_DMA_Abort_IT+0xcc>)
 8001352:	400a      	ands	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800135e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2225      	movs	r2, #37	; 0x25
 8001364:	2101      	movs	r1, #1
 8001366:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	0010      	movs	r0, r2
 8001380:	4798      	blx	r3
    }
  }
  return status;
 8001382:	230f      	movs	r3, #15
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bd80      	pop	{r7, pc}
 8001390:	fffffeff 	.word	0xfffffeff
 8001394:	40020000 	.word	0x40020000

08001398 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2225      	movs	r2, #37	; 0x25
 80013a4:	5c9b      	ldrb	r3, [r3, r2]
 80013a6:	b2db      	uxtb	r3, r3
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e147      	b.n	8001650 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x28>
 80013d6:	e138      	b.n	800164a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d005      	beq.n	80013f0 <HAL_GPIO_Init+0x40>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2203      	movs	r2, #3
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d130      	bne.n	8001452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001426:	2201      	movs	r2, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	2201      	movs	r2, #1
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	4013      	ands	r3, r2
 800145a:	2b03      	cmp	r3, #3
 800145c:	d017      	beq.n	800148e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2203      	movs	r2, #3
 8001494:	4013      	ands	r3, r2
 8001496:	2b02      	cmp	r3, #2
 8001498:	d123      	bne.n	80014e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	58d3      	ldr	r3, [r2, r3]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2207      	movs	r2, #7
 80014ac:	4013      	ands	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	43da      	mvns	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2107      	movs	r1, #7
 80014c6:	400b      	ands	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2203      	movs	r2, #3
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	409a      	lsls	r2, r3
 8001508:	0013      	movs	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d100      	bne.n	8001524 <HAL_GPIO_Init+0x174>
 8001522:	e092      	b.n	800164a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001524:	4a50      	ldr	r2, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3318      	adds	r3, #24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	589b      	ldr	r3, [r3, r2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2203      	movs	r2, #3
 8001536:	4013      	ands	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	220f      	movs	r2, #15
 800153c:	409a      	lsls	r2, r3
 800153e:	0013      	movs	r3, r2
 8001540:	43da      	mvns	r2, r3
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	23a0      	movs	r3, #160	; 0xa0
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	429a      	cmp	r2, r3
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x1ca>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a45      	ldr	r2, [pc, #276]	; (800166c <HAL_GPIO_Init+0x2bc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x1c6>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a44      	ldr	r2, [pc, #272]	; (8001670 <HAL_GPIO_Init+0x2c0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x1c2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a43      	ldr	r2, [pc, #268]	; (8001674 <HAL_GPIO_Init+0x2c4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x1be>
 800156a:	2303      	movs	r3, #3
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x1cc>
 800156e:	2305      	movs	r3, #5
 8001570:	e004      	b.n	800157c <HAL_GPIO_Init+0x1cc>
 8001572:	2302      	movs	r3, #2
 8001574:	e002      	b.n	800157c <HAL_GPIO_Init+0x1cc>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x1cc>
 800157a:	2300      	movs	r3, #0
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	2103      	movs	r1, #3
 8001580:	400a      	ands	r2, r1
 8001582:	00d2      	lsls	r2, r2, #3
 8001584:	4093      	lsls	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800158c:	4936      	ldr	r1, [pc, #216]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3318      	adds	r3, #24
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	035b      	lsls	r3, r3, #13
 80015b2:	4013      	ands	r3, r2
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	039b      	lsls	r3, r3, #14
 80015dc:	4013      	ands	r3, r2
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 80015f0:	2384      	movs	r3, #132	; 0x84
 80015f2:	58d3      	ldr	r3, [r2, r3]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43da      	mvns	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	4013      	ands	r3, r2
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001614:	4914      	ldr	r1, [pc, #80]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001616:	2284      	movs	r2, #132	; 0x84
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	58d3      	ldr	r3, [r2, r3]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43da      	mvns	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4013      	ands	r3, r2
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001642:	4909      	ldr	r1, [pc, #36]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	40da      	lsrs	r2, r3
 8001658:	1e13      	subs	r3, r2, #0
 800165a:	d000      	beq.n	800165e <HAL_GPIO_Init+0x2ae>
 800165c:	e6b0      	b.n	80013c0 <HAL_GPIO_Init+0x10>
  }
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b006      	add	sp, #24
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021800 	.word	0x40021800
 800166c:	50000400 	.word	0x50000400
 8001670:	50000800 	.word	0x50000800
 8001674:	50000c00 	.word	0x50000c00

08001678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e082      	b.n	8001790 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2241      	movs	r2, #65	; 0x41
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	2100      	movs	r1, #0
 800169c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff f9db 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2241      	movs	r2, #65	; 0x41
 80016aa:	2124      	movs	r1, #36	; 0x24
 80016ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	438a      	bics	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4934      	ldr	r1, [pc, #208]	; (8001798 <HAL_I2C_Init+0x120>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4931      	ldr	r1, [pc, #196]	; (800179c <HAL_I2C_Init+0x124>)
 80016d8:	400a      	ands	r2, r1
 80016da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0209      	lsls	r1, r1, #8
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e007      	b.n	8001706 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2184      	movs	r1, #132	; 0x84
 8001700:	0209      	lsls	r1, r1, #8
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d104      	bne.n	8001718 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	491f      	ldr	r1, [pc, #124]	; (80017a0 <HAL_I2C_Init+0x128>)
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	491a      	ldr	r1, [pc, #104]	; (800179c <HAL_I2C_Init+0x124>)
 8001734:	400a      	ands	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	431a      	orrs	r2, r3
 8001742:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69d9      	ldr	r1, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2241      	movs	r2, #65	; 0x41
 800177c:	2120      	movs	r1, #32
 800177e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2242      	movs	r2, #66	; 0x42
 800178a:	2100      	movs	r1, #0
 800178c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}
 8001798:	f0ffffff 	.word	0xf0ffffff
 800179c:	ffff7fff 	.word	0xffff7fff
 80017a0:	02008000 	.word	0x02008000

080017a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	000c      	movs	r4, r1
 80017ae:	0010      	movs	r0, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	230a      	movs	r3, #10
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	1c22      	adds	r2, r4, #0
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	2308      	movs	r3, #8
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	1c02      	adds	r2, r0, #0
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	1dbb      	adds	r3, r7, #6
 80017c4:	1c0a      	adds	r2, r1, #0
 80017c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2241      	movs	r2, #65	; 0x41
 80017cc:	5c9b      	ldrb	r3, [r3, r2]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d000      	beq.n	80017d6 <HAL_I2C_Mem_Write+0x32>
 80017d4:	e10c      	b.n	80019f0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <HAL_I2C_Mem_Write+0x42>
 80017dc:	232c      	movs	r3, #44	; 0x2c
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0ff      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2240      	movs	r2, #64	; 0x40
 80017f6:	5c9b      	ldrb	r3, [r3, r2]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_I2C_Mem_Write+0x5c>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0f8      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	2101      	movs	r1, #1
 8001806:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001808:	f7ff fc74 	bl	80010f4 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	0219      	lsls	r1, r3, #8
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2319      	movs	r3, #25
 800181c:	2201      	movs	r2, #1
 800181e:	f001 f861 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0e3      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2241      	movs	r2, #65	; 0x41
 800182e:	2121      	movs	r1, #33	; 0x21
 8001830:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2242      	movs	r2, #66	; 0x42
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	222c      	movs	r2, #44	; 0x2c
 800184a:	18ba      	adds	r2, r7, r2
 800184c:	8812      	ldrh	r2, [r2, #0]
 800184e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001856:	1dbb      	adds	r3, r7, #6
 8001858:	881c      	ldrh	r4, [r3, #0]
 800185a:	2308      	movs	r3, #8
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	230a      	movs	r3, #10
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	8819      	ldrh	r1, [r3, #0]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	0023      	movs	r3, r4
 8001872:	f000 fba5 	bl	8001fc0 <I2C_RequestMemoryWrite>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d005      	beq.n	8001886 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0b5      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	2bff      	cmp	r3, #255	; 0xff
 800188e:	d911      	bls.n	80018b4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	22ff      	movs	r2, #255	; 0xff
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	b2da      	uxtb	r2, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	045c      	lsls	r4, r3, #17
 80018a0:	230a      	movs	r3, #10
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	8819      	ldrh	r1, [r3, #0]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	0023      	movs	r3, r4
 80018ae:	f001 f9d3 	bl	8002c58 <I2C_TransferConfig>
 80018b2:	e012      	b.n	80018da <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	049c      	lsls	r4, r3, #18
 80018c8:	230a      	movs	r3, #10
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	8819      	ldrh	r1, [r3, #0]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	2300      	movs	r3, #0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	0023      	movs	r3, r4
 80018d6:	f001 f9bf 	bl	8002c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 f83e 	bl	8002962 <I2C_WaitOnTXISFlagUntilTimeout>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e081      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d03a      	beq.n	800199e <HAL_I2C_Mem_Write+0x1fa>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	2b00      	cmp	r3, #0
 800192e:	d136      	bne.n	800199e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	0013      	movs	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	f000 ffd1 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e053      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	2bff      	cmp	r3, #255	; 0xff
 8001952:	d911      	bls.n	8001978 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	22ff      	movs	r2, #255	; 0xff
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	b2da      	uxtb	r2, r3
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	045c      	lsls	r4, r3, #17
 8001964:	230a      	movs	r3, #10
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	0023      	movs	r3, r4
 8001972:	f001 f971 	bl	8002c58 <I2C_TransferConfig>
 8001976:	e012      	b.n	800199e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	b2da      	uxtb	r2, r3
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	049c      	lsls	r4, r3, #18
 800198c:	230a      	movs	r3, #10
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	8819      	ldrh	r1, [r3, #0]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	2300      	movs	r3, #0
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	0023      	movs	r3, r4
 800199a:	f001 f95d 	bl	8002c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d198      	bne.n	80018da <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f001 f816 	bl	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b4:	1e03      	subs	r3, r0, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e01a      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2220      	movs	r2, #32
 80019c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	490b      	ldr	r1, [pc, #44]	; (80019fc <HAL_I2C_Mem_Write+0x258>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2241      	movs	r2, #65	; 0x41
 80019d8:	2120      	movs	r1, #32
 80019da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2242      	movs	r2, #66	; 0x42
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b007      	add	sp, #28
 80019f8:	bd90      	pop	{r4, r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	fe00e800 	.word	0xfe00e800

08001a00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	000c      	movs	r4, r1
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	230a      	movs	r3, #10
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	1c22      	adds	r2, r4, #0
 8001a14:	801a      	strh	r2, [r3, #0]
 8001a16:	2308      	movs	r3, #8
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	1c02      	adds	r2, r0, #0
 8001a1c:	801a      	strh	r2, [r3, #0]
 8001a1e:	1dbb      	adds	r3, r7, #6
 8001a20:	1c0a      	adds	r2, r1, #0
 8001a22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2241      	movs	r2, #65	; 0x41
 8001a28:	5c9b      	ldrb	r3, [r3, r2]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d000      	beq.n	8001a32 <HAL_I2C_Mem_Read+0x32>
 8001a30:	e110      	b.n	8001c54 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_I2C_Mem_Read+0x42>
 8001a38:	232c      	movs	r3, #44	; 0x2c
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e103      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	5c9b      	ldrb	r3, [r3, r2]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_I2C_Mem_Read+0x5c>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0fc      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	2101      	movs	r1, #1
 8001a62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a64:	f7ff fb46 	bl	80010f4 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	0219      	lsls	r1, r3, #8
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2319      	movs	r3, #25
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f000 ff33 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0e7      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2241      	movs	r2, #65	; 0x41
 8001a8a:	2122      	movs	r1, #34	; 0x22
 8001a8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2242      	movs	r2, #66	; 0x42
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	222c      	movs	r2, #44	; 0x2c
 8001aa6:	18ba      	adds	r2, r7, r2
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab2:	1dbb      	adds	r3, r7, #6
 8001ab4:	881c      	ldrh	r4, [r3, #0]
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	230a      	movs	r3, #10
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	8819      	ldrh	r1, [r3, #0]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	0023      	movs	r3, r4
 8001ace:	f000 fadb 	bl	8002088 <I2C_RequestMemoryRead>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2240      	movs	r2, #64	; 0x40
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0b9      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d911      	bls.n	8001b10 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	22ff      	movs	r2, #255	; 0xff
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	045c      	lsls	r4, r3, #17
 8001afc:	230a      	movs	r3, #10
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	8819      	ldrh	r1, [r3, #0]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_I2C_Mem_Read+0x260>)
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	0023      	movs	r3, r4
 8001b0a:	f001 f8a5 	bl	8002c58 <I2C_TransferConfig>
 8001b0e:	e012      	b.n	8001b36 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	049c      	lsls	r4, r3, #18
 8001b24:	230a      	movs	r3, #10
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	8819      	ldrh	r1, [r3, #0]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_I2C_Mem_Read+0x260>)
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	0023      	movs	r3, r4
 8001b32:	f001 f891 	bl	8002c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	0013      	movs	r3, r2
 8001b40:	2200      	movs	r2, #0
 8001b42:	2104      	movs	r1, #4
 8001b44:	f000 fece 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e082      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d03a      	beq.n	8001c02 <HAL_I2C_Mem_Read+0x202>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d136      	bne.n	8001c02 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	f000 fe9f 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e053      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2bff      	cmp	r3, #255	; 0xff
 8001bb6:	d911      	bls.n	8001bdc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	22ff      	movs	r2, #255	; 0xff
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	045c      	lsls	r4, r3, #17
 8001bc8:	230a      	movs	r3, #10
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	8819      	ldrh	r1, [r3, #0]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	0023      	movs	r3, r4
 8001bd6:	f001 f83f 	bl	8002c58 <I2C_TransferConfig>
 8001bda:	e012      	b.n	8001c02 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	049c      	lsls	r4, r3, #18
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	8819      	ldrh	r1, [r3, #0]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	0023      	movs	r3, r4
 8001bfe:	f001 f82b 	bl	8002c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d194      	bne.n	8001b36 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fee4 	bl	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e01a      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2220      	movs	r2, #32
 8001c26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	490c      	ldr	r1, [pc, #48]	; (8001c64 <HAL_I2C_Mem_Read+0x264>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2241      	movs	r2, #65	; 0x41
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2242      	movs	r2, #66	; 0x42
 8001c44:	2100      	movs	r1, #0
 8001c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b007      	add	sp, #28
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	80002400 	.word	0x80002400
 8001c64:	fe00e800 	.word	0xfe00e800

08001c68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	68f9      	ldr	r1, [r7, #12]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
  }
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b004      	add	sp, #16
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d00e      	beq.n	8001cdc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001cc4:	d00a      	beq.n	8001cdc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	2201      	movs	r2, #1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	0052      	lsls	r2, r2, #1
 8001cda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d00e      	beq.n	8001d04 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001cec:	d00a      	beq.n	8001d04 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	00d2      	lsls	r2, r2, #3
 8001d02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d14:	d00a      	beq.n	8001d2c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	220b      	movs	r2, #11
 8001d36:	4013      	ands	r3, r2
 8001d38:	d005      	beq.n	8001d46 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0011      	movs	r1, r2
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 fc83 	bl	800264c <I2C_ITError>
  }
}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b002      	add	sp, #8
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	0008      	movs	r0, r1
 8001d78:	0011      	movs	r1, r2
 8001d7a:	1cfb      	adds	r3, r7, #3
 8001d7c:	1c02      	adds	r2, r0, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	003b      	movs	r3, r7
 8001d82:	1c0a      	adds	r2, r1, #0
 8001d84:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b002      	add	sp, #8
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b002      	add	sp, #8
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	5c9b      	ldrb	r3, [r3, r2]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <I2C_Slave_ISR_IT+0x24>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0e6      	b.n	8001fb2 <I2C_Slave_ISR_IT+0x1f2>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	2101      	movs	r1, #1
 8001dea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2220      	movs	r2, #32
 8001df0:	4013      	ands	r3, r2
 8001df2:	d009      	beq.n	8001e08 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dfa:	d005      	beq.n	8001e08 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 faaa 	bl	800235c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d052      	beq.n	8001eb6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2210      	movs	r2, #16
 8001e14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e16:	d04e      	beq.n	8001eb6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12d      	bne.n	8001e7e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2241      	movs	r2, #65	; 0x41
 8001e26:	5c9b      	ldrb	r3, [r3, r2]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b28      	cmp	r3, #40	; 0x28
 8001e2c:	d10b      	bne.n	8001e46 <I2C_Slave_ISR_IT+0x86>
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	049b      	lsls	r3, r3, #18
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0011      	movs	r1, r2
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 fbac 	bl	800259c <I2C_ITListenCplt>
 8001e44:	e036      	b.n	8001eb4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2241      	movs	r2, #65	; 0x41
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b29      	cmp	r3, #41	; 0x29
 8001e50:	d110      	bne.n	8001e74 <I2C_Slave_ISR_IT+0xb4>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <I2C_Slave_ISR_IT+0x1fc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00c      	beq.n	8001e74 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2210      	movs	r2, #16
 8001e60:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 fcfc 	bl	8002862 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 fa11 	bl	8002294 <I2C_ITSlaveSeqCplt>
 8001e72:	e01f      	b.n	8001eb4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e7c:	e091      	b.n	8001fa2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2210      	movs	r2, #16
 8001e84:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <I2C_Slave_ISR_IT+0xe4>
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	045b      	lsls	r3, r3, #17
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d000      	beq.n	8001ea4 <I2C_Slave_ISR_IT+0xe4>
 8001ea2:	e07e      	b.n	8001fa2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	0011      	movs	r1, r2
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 fbcd 	bl	800264c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001eb2:	e076      	b.n	8001fa2 <I2C_Slave_ISR_IT+0x1e2>
 8001eb4:	e075      	b.n	8001fa2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d02f      	beq.n	8001f1e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ec4:	d02b      	beq.n	8001f1e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d018      	beq.n	8001f02 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d14c      	bne.n	8001fa6 <I2C_Slave_ISR_IT+0x1e6>
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <I2C_Slave_ISR_IT+0x1fc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d048      	beq.n	8001fa6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f9bc 	bl	8002294 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f1c:	e043      	b.n	8001fa6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2208      	movs	r2, #8
 8001f22:	4013      	ands	r3, r2
 8001f24:	d00a      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2208      	movs	r2, #8
 8001f2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f2c:	d006      	beq.n	8001f3c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0011      	movs	r1, r2
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 f909 	bl	800214c <I2C_ITAddrCplt>
 8001f3a:	e035      	b.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d031      	beq.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f4a:	d02d      	beq.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d018      	beq.n	8001f88 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f86:	e00f      	b.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	045b      	lsls	r3, r3, #17
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d002      	beq.n	8001f98 <I2C_Slave_ISR_IT+0x1d8>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 f97a 	bl	8002294 <I2C_ITSlaveSeqCplt>
 8001fa0:	e002      	b.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	e000      	b.n	8001fa8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001fa6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	2100      	movs	r1, #0
 8001fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b006      	add	sp, #24
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	ffff0000 	.word	0xffff0000

08001fc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	000c      	movs	r4, r1
 8001fca:	0010      	movs	r0, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	250a      	movs	r5, #10
 8001fd0:	197b      	adds	r3, r7, r5
 8001fd2:	1c22      	adds	r2, r4, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	1c02      	adds	r2, r0, #0
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	1dbb      	adds	r3, r7, #6
 8001fe0:	1c0a      	adds	r2, r1, #0
 8001fe2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fe4:	1dbb      	adds	r3, r7, #6
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	045c      	lsls	r4, r3, #17
 8001fee:	197b      	adds	r3, r7, r5
 8001ff0:	8819      	ldrh	r1, [r3, #0]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <I2C_RequestMemoryWrite+0xc4>)
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	0023      	movs	r3, r4
 8001ffa:	f000 fe2d 	bl	8002c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	6a39      	ldr	r1, [r7, #32]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0018      	movs	r0, r3
 8002006:	f000 fcac 	bl	8002962 <I2C_WaitOnTXISFlagUntilTimeout>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d001      	beq.n	8002012 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e033      	b.n	800207a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002012:	1dbb      	adds	r3, r7, #6
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800201a:	2308      	movs	r3, #8
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
 8002028:	e019      	b.n	800205e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800202a:	2308      	movs	r3, #8
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	6a39      	ldr	r1, [r7, #32]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fc8d 	bl	8002962 <I2C_WaitOnTXISFlagUntilTimeout>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d001      	beq.n	8002050 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e014      	b.n	800207a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002050:	2308      	movs	r3, #8
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800205e:	6a3a      	ldr	r2, [r7, #32]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	0013      	movs	r3, r2
 8002068:	2200      	movs	r2, #0
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	f000 fc3a 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d001      	beq.n	8002078 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bdb0      	pop	{r4, r5, r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	80002000 	.word	0x80002000

08002088 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	000c      	movs	r4, r1
 8002092:	0010      	movs	r0, r2
 8002094:	0019      	movs	r1, r3
 8002096:	250a      	movs	r5, #10
 8002098:	197b      	adds	r3, r7, r5
 800209a:	1c22      	adds	r2, r4, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	2308      	movs	r3, #8
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	1c02      	adds	r2, r0, #0
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	1dbb      	adds	r3, r7, #6
 80020a8:	1c0a      	adds	r2, r1, #0
 80020aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020ac:	1dbb      	adds	r3, r7, #6
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	197b      	adds	r3, r7, r5
 80020b4:	8819      	ldrh	r1, [r3, #0]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <I2C_RequestMemoryRead+0xc0>)
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	f000 fdcb 	bl	8002c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fc4a 	bl	8002962 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e033      	b.n	800213e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020d6:	1dbb      	adds	r3, r7, #6
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020de:	2308      	movs	r3, #8
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
 80020ec:	e019      	b.n	8002122 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ee:	2308      	movs	r3, #8
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0018      	movs	r0, r3
 8002108:	f000 fc2b 	bl	8002962 <I2C_WaitOnTXISFlagUntilTimeout>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e014      	b.n	800213e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002114:	2308      	movs	r3, #8
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	0013      	movs	r3, r2
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	f000 fbd8 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	80002000 	.word	0x80002000

0800214c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2241      	movs	r2, #65	; 0x41
 800215a:	5c9b      	ldrb	r3, [r3, r2]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	001a      	movs	r2, r3
 8002160:	2328      	movs	r3, #40	; 0x28
 8002162:	4013      	ands	r3, r2
 8002164:	2b28      	cmp	r3, #40	; 0x28
 8002166:	d000      	beq.n	800216a <I2C_ITAddrCplt+0x1e>
 8002168:	e088      	b.n	800227c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	b2da      	uxtb	r2, r3
 8002174:	250f      	movs	r5, #15
 8002176:	197b      	adds	r3, r7, r5
 8002178:	2101      	movs	r1, #1
 800217a:	400a      	ands	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	b29a      	uxth	r2, r3
 8002188:	200c      	movs	r0, #12
 800218a:	183b      	adds	r3, r7, r0
 800218c:	21fe      	movs	r1, #254	; 0xfe
 800218e:	400a      	ands	r2, r1
 8002190:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	b29a      	uxth	r2, r3
 800219a:	240a      	movs	r4, #10
 800219c:	193b      	adds	r3, r7, r4
 800219e:	0592      	lsls	r2, r2, #22
 80021a0:	0d92      	lsrs	r2, r2, #22
 80021a2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	2308      	movs	r3, #8
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	21fe      	movs	r1, #254	; 0xfe
 80021b2:	400a      	ands	r2, r1
 80021b4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d148      	bne.n	8002250 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80021be:	0021      	movs	r1, r4
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	09db      	lsrs	r3, r3, #7
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	4053      	eors	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	001a      	movs	r2, r3
 80021d2:	2306      	movs	r3, #6
 80021d4:	4013      	ands	r3, r2
 80021d6:	d120      	bne.n	800221a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	187a      	adds	r2, r7, r1
 80021dc:	8812      	ldrh	r2, [r2, #0]
 80021de:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d14c      	bne.n	800228c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2208      	movs	r2, #8
 80021fe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002208:	183b      	adds	r3, r7, r0
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	197b      	adds	r3, r7, r5
 800220e:	7819      	ldrb	r1, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff fdab 	bl	8001d6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002218:	e038      	b.n	800228c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800221a:	240c      	movs	r4, #12
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2208      	movs	r2, #8
 8002220:	18ba      	adds	r2, r7, r2
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fd4c 	bl	8002ccc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2240      	movs	r2, #64	; 0x40
 8002238:	2100      	movs	r1, #0
 800223a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800223c:	193b      	adds	r3, r7, r4
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	230f      	movs	r3, #15
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	7819      	ldrb	r1, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff fd90 	bl	8001d6e <HAL_I2C_AddrCallback>
}
 800224e:	e01d      	b.n	800228c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	0011      	movs	r1, r2
 8002258:	0018      	movs	r0, r3
 800225a:	f000 fd37 	bl	8002ccc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002266:	230c      	movs	r3, #12
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	230f      	movs	r3, #15
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	7819      	ldrb	r1, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff fd7a 	bl	8001d6e <HAL_I2C_AddrCallback>
}
 800227a:	e007      	b.n	800228c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2208      	movs	r2, #8
 8002282:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bdb0      	pop	{r4, r5, r7, pc}

08002294 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2242      	movs	r2, #66	; 0x42
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	01db      	lsls	r3, r3, #7
 80022b2:	4013      	ands	r3, r2
 80022b4:	d008      	beq.n	80022c8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4924      	ldr	r1, [pc, #144]	; (8002354 <I2C_ITSlaveSeqCplt+0xc0>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00c      	b.n	80022e2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	4013      	ands	r3, r2
 80022d0:	d007      	beq.n	80022e2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	491e      	ldr	r1, [pc, #120]	; (8002358 <I2C_ITSlaveSeqCplt+0xc4>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2241      	movs	r2, #65	; 0x41
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b29      	cmp	r3, #41	; 0x29
 80022ec:	d114      	bne.n	8002318 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2241      	movs	r2, #65	; 0x41
 80022f2:	2128      	movs	r1, #40	; 0x28
 80022f4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2221      	movs	r2, #33	; 0x21
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2101      	movs	r1, #1
 8002300:	0018      	movs	r0, r3
 8002302:	f000 fce3 	bl	8002ccc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2240      	movs	r2, #64	; 0x40
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff fd1c 	bl	8001d4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002316:	e019      	b.n	800234c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2241      	movs	r2, #65	; 0x41
 800231c:	5c9b      	ldrb	r3, [r3, r2]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b2a      	cmp	r3, #42	; 0x2a
 8002322:	d113      	bne.n	800234c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2241      	movs	r2, #65	; 0x41
 8002328:	2128      	movs	r1, #40	; 0x28
 800232a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2222      	movs	r2, #34	; 0x22
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2102      	movs	r1, #2
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fcc8 	bl	8002ccc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	; 0x40
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff fd09 	bl	8001d5e <HAL_I2C_SlaveRxCpltCallback>
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b004      	add	sp, #16
 8002352:	bd80      	pop	{r7, pc}
 8002354:	ffffbfff 	.word	0xffffbfff
 8002358:	ffff7fff 	.word	0xffff7fff

0800235c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002372:	200f      	movs	r0, #15
 8002374:	183b      	adds	r3, r7, r0
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	2141      	movs	r1, #65	; 0x41
 800237a:	5c52      	ldrb	r2, [r2, r1]
 800237c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2220      	movs	r2, #32
 8002384:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002386:	183b      	adds	r3, r7, r0
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b21      	cmp	r3, #33	; 0x21
 800238c:	d003      	beq.n	8002396 <I2C_ITSlaveCplt+0x3a>
 800238e:	183b      	adds	r3, r7, r0
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b29      	cmp	r3, #41	; 0x29
 8002394:	d109      	bne.n	80023aa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002396:	4a7b      	ldr	r2, [pc, #492]	; (8002584 <I2C_ITSlaveCplt+0x228>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fc95 	bl	8002ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2221      	movs	r2, #33	; 0x21
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
 80023a8:	e011      	b.n	80023ce <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023aa:	220f      	movs	r2, #15
 80023ac:	18bb      	adds	r3, r7, r2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b22      	cmp	r3, #34	; 0x22
 80023b2:	d003      	beq.n	80023bc <I2C_ITSlaveCplt+0x60>
 80023b4:	18bb      	adds	r3, r7, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b2a      	cmp	r3, #42	; 0x2a
 80023ba:	d108      	bne.n	80023ce <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023bc:	4a72      	ldr	r2, [pc, #456]	; (8002588 <I2C_ITSlaveCplt+0x22c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0011      	movs	r1, r2
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 fc82 	bl	8002ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2222      	movs	r2, #34	; 0x22
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0209      	lsls	r1, r1, #8
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4968      	ldr	r1, [pc, #416]	; (800258c <I2C_ITSlaveCplt+0x230>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa35 	bl	8002862 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	01db      	lsls	r3, r3, #7
 80023fe:	4013      	ands	r3, r2
 8002400:	d013      	beq.n	800242a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4960      	ldr	r1, [pc, #384]	; (8002590 <I2C_ITSlaveCplt+0x234>)
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01f      	beq.n	800245a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002428:	e017      	b.n	800245a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	4013      	ands	r3, r2
 8002432:	d012      	beq.n	800245a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4955      	ldr	r1, [pc, #340]	; (8002594 <I2C_ITSlaveCplt+0x238>)
 8002440:	400a      	ands	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2204      	movs	r2, #4
 800245e:	4013      	ands	r3, r2
 8002460:	d020      	beq.n	80024a4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2204      	movs	r2, #4
 8002466:	4393      	bics	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	2204      	movs	r2, #4
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2242      	movs	r2, #66	; 0x42
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0011      	movs	r1, r2
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f8b7 	bl	800264c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2241      	movs	r2, #65	; 0x41
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b28      	cmp	r3, #40	; 0x28
 80024e8:	d147      	bne.n	800257a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 f853 	bl	800259c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024f6:	e040      	b.n	800257a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <I2C_ITSlaveCplt+0x23c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d016      	beq.n	8002530 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff fec5 	bl	8002294 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a22      	ldr	r2, [pc, #136]	; (8002598 <I2C_ITSlaveCplt+0x23c>)
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	2120      	movs	r1, #32
 8002516:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff fc30 	bl	8001d8e <HAL_I2C_ListenCpltCallback>
}
 800252e:	e024      	b.n	800257a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2241      	movs	r2, #65	; 0x41
 8002534:	5c9b      	ldrb	r3, [r3, r2]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b22      	cmp	r3, #34	; 0x22
 800253a:	d10f      	bne.n	800255c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2241      	movs	r2, #65	; 0x41
 8002540:	2120      	movs	r1, #32
 8002542:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fc02 	bl	8001d5e <HAL_I2C_SlaveRxCpltCallback>
}
 800255a:	e00e      	b.n	800257a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2241      	movs	r2, #65	; 0x41
 8002560:	2120      	movs	r1, #32
 8002562:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0018      	movs	r0, r3
 8002576:	f7ff fbea 	bl	8001d4e <HAL_I2C_SlaveTxCpltCallback>
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	00008001 	.word	0x00008001
 8002588:	00008002 	.word	0x00008002
 800258c:	fe00e800 	.word	0xfe00e800
 8002590:	ffffbfff 	.word	0xffffbfff
 8002594:	ffff7fff 	.word	0xffff7fff
 8002598:	ffff0000 	.word	0xffff0000

0800259c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <I2C_ITListenCplt+0xa8>)
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2241      	movs	r2, #65	; 0x41
 80025b6:	2120      	movs	r1, #32
 80025b8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2242      	movs	r2, #66	; 0x42
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2204      	movs	r2, #4
 80025cc:	4013      	ands	r3, r2
 80025ce:	d022      	beq.n	8002616 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	2204      	movs	r2, #4
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <I2C_ITListenCplt+0xac>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f000 fb55 	bl	8002ccc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2210      	movs	r2, #16
 8002628:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff fbaa 	bl	8001d8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b002      	add	sp, #8
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	ffff0000 	.word	0xffff0000
 8002648:	00008003 	.word	0x00008003

0800264c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002656:	200f      	movs	r0, #15
 8002658:	183b      	adds	r3, r7, r0
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	2141      	movs	r1, #65	; 0x41
 800265e:	5c52      	ldrb	r2, [r2, r1]
 8002660:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2242      	movs	r2, #66	; 0x42
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a62      	ldr	r2, [pc, #392]	; (80027f8 <I2C_ITError+0x1ac>)
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002682:	183b      	adds	r3, r7, r0
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b28      	cmp	r3, #40	; 0x28
 8002688:	d007      	beq.n	800269a <I2C_ITError+0x4e>
 800268a:	183b      	adds	r3, r7, r0
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b29      	cmp	r3, #41	; 0x29
 8002690:	d003      	beq.n	800269a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002692:	183b      	adds	r3, r7, r0
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b2a      	cmp	r3, #42	; 0x2a
 8002698:	d10c      	bne.n	80026b4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2103      	movs	r1, #3
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 fb14 	bl	8002ccc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2241      	movs	r2, #65	; 0x41
 80026a8:	2128      	movs	r1, #40	; 0x28
 80026aa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a53      	ldr	r2, [pc, #332]	; (80027fc <I2C_ITError+0x1b0>)
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
 80026b2:	e012      	b.n	80026da <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <I2C_ITError+0x1b4>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0011      	movs	r1, r2
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fb06 	bl	8002ccc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2241      	movs	r2, #65	; 0x41
 80026c4:	5c9b      	ldrb	r3, [r3, r2]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b60      	cmp	r3, #96	; 0x60
 80026ca:	d003      	beq.n	80026d4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2241      	movs	r2, #65	; 0x41
 80026d0:	2120      	movs	r1, #32
 80026d2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d03b      	beq.n	8002760 <I2C_ITError+0x114>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b11      	cmp	r3, #17
 80026ec:	d002      	beq.n	80026f4 <I2C_ITError+0xa8>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b21      	cmp	r3, #33	; 0x21
 80026f2:	d135      	bne.n	8002760 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	01db      	lsls	r3, r3, #7
 80026fe:	401a      	ands	r2, r3
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	01db      	lsls	r3, r3, #7
 8002704:	429a      	cmp	r2, r3
 8002706:	d107      	bne.n	8002718 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	493c      	ldr	r1, [pc, #240]	; (8002804 <I2C_ITError+0x1b8>)
 8002714:	400a      	ands	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	0018      	movs	r0, r3
 800271e:	f7fe fe3b 	bl	8001398 <HAL_DMA_GetState>
 8002722:	0003      	movs	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	d016      	beq.n	8002756 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	4a36      	ldr	r2, [pc, #216]	; (8002808 <I2C_ITError+0x1bc>)
 800272e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	0018      	movs	r0, r3
 800273e:	f7fe fdc1 	bl	80012c4 <HAL_DMA_Abort_IT>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d051      	beq.n	80027ea <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	0018      	movs	r0, r3
 8002752:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002754:	e049      	b.n	80027ea <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f859 	bl	8002810 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800275e:	e044      	b.n	80027ea <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d03b      	beq.n	80027e0 <I2C_ITError+0x194>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b12      	cmp	r3, #18
 800276c:	d002      	beq.n	8002774 <I2C_ITError+0x128>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b22      	cmp	r3, #34	; 0x22
 8002772:	d135      	bne.n	80027e0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	401a      	ands	r2, r3
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	491e      	ldr	r1, [pc, #120]	; (800280c <I2C_ITError+0x1c0>)
 8002794:	400a      	ands	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	0018      	movs	r0, r3
 800279e:	f7fe fdfb 	bl	8001398 <HAL_DMA_GetState>
 80027a2:	0003      	movs	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d016      	beq.n	80027d6 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	4a16      	ldr	r2, [pc, #88]	; (8002808 <I2C_ITError+0x1bc>)
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2240      	movs	r2, #64	; 0x40
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fe fd81 	bl	80012c4 <HAL_DMA_Abort_IT>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d013      	beq.n	80027ee <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	0018      	movs	r0, r3
 80027d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d4:	e00b      	b.n	80027ee <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 f819 	bl	8002810 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027de:	e006      	b.n	80027ee <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f814 	bl	8002810 <I2C_TreatErrorCallback>
  }
}
 80027e8:	e002      	b.n	80027f0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	e000      	b.n	80027f0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027ee:	46c0      	nop			; (mov r8, r8)
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	ffff0000 	.word	0xffff0000
 80027fc:	08001dc1 	.word	0x08001dc1
 8002800:	00008003 	.word	0x00008003
 8002804:	ffffbfff 	.word	0xffffbfff
 8002808:	080028a7 	.word	0x080028a7
 800280c:	ffff7fff 	.word	0xffff7fff

08002810 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2241      	movs	r2, #65	; 0x41
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d10f      	bne.n	8002844 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2241      	movs	r2, #65	; 0x41
 8002828:	2120      	movs	r1, #32
 800282a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff fab6 	bl	8001dae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002842:	e00a      	b.n	800285a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2240      	movs	r2, #64	; 0x40
 800284e:	2100      	movs	r1, #0
 8002850:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff faa2 	bl	8001d9e <HAL_I2C_ErrorCallback>
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}

08002862 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2202      	movs	r2, #2
 8002872:	4013      	ands	r3, r2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d103      	bne.n	8002880 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2201      	movs	r2, #1
 8002888:	4013      	ands	r3, r2
 800288a:	2b01      	cmp	r3, #1
 800288c:	d007      	beq.n	800289e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	619a      	str	r2, [r3, #24]
  }
}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	2200      	movs	r2, #0
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	2200      	movs	r2, #0
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff ff9a 	bl	8002810 <I2C_TreatErrorCallback>
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e021      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	d01e      	beq.n	800293a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7fe fbfa 	bl	80010f4 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d302      	bcc.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d113      	bne.n	800293a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	2220      	movs	r2, #32
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2241      	movs	r2, #65	; 0x41
 8002922:	2120      	movs	r1, #32
 8002924:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2242      	movs	r2, #66	; 0x42
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2240      	movs	r2, #64	; 0x40
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	425a      	negs	r2, r3
 800294a:	4153      	adcs	r3, r2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	001a      	movs	r2, r3
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d0ce      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bd80      	pop	{r7, pc}

08002962 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800296e:	e02b      	b.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f86e 	bl	8002a58 <I2C_IsErrorOccurred>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e029      	b.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	d01e      	beq.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fbb3 	bl	80010f4 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d113      	bne.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	2220      	movs	r2, #32
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2241      	movs	r2, #65	; 0x41
 80029b0:	2120      	movs	r1, #32
 80029b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2242      	movs	r2, #66	; 0x42
 80029b8:	2100      	movs	r1, #0
 80029ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d1cc      	bne.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ec:	e028      	b.n	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f82f 	bl	8002a58 <I2C_IsErrorOccurred>
 80029fa:	1e03      	subs	r3, r0, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e026      	b.n	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fb77 	bl	80010f4 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d113      	bne.n	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2241      	movs	r2, #65	; 0x41
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2242      	movs	r2, #66	; 0x42
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2220      	movs	r2, #32
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d1cf      	bne.n	80029ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b08b      	sub	sp, #44	; 0x2c
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2327      	movs	r3, #39	; 0x27
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	4013      	ands	r3, r2
 8002a82:	d100      	bne.n	8002a86 <I2C_IsErrorOccurred+0x2e>
 8002a84:	e082      	b.n	8002b8c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a8e:	e060      	b.n	8002b52 <I2C_IsErrorOccurred+0xfa>
 8002a90:	2427      	movs	r4, #39	; 0x27
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	193a      	adds	r2, r7, r4
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	d058      	beq.n	8002b52 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fb28 	bl	80010f4 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d306      	bcc.n	8002abe <I2C_IsErrorOccurred+0x66>
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	193a      	adds	r2, r7, r4
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d149      	bne.n	8002b52 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	01db      	lsls	r3, r3, #7
 8002ac8:	4013      	ands	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002acc:	2013      	movs	r0, #19
 8002ace:	183b      	adds	r3, r7, r0
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	2142      	movs	r1, #66	; 0x42
 8002ad4:	5c52      	ldrb	r2, [r2, r1]
 8002ad6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d126      	bne.n	8002b3a <I2C_IsErrorOccurred+0xe2>
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	01db      	lsls	r3, r3, #7
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d021      	beq.n	8002b3a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002af6:	183b      	adds	r3, r7, r0
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d01d      	beq.n	8002b3a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	01c9      	lsls	r1, r1, #7
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b10:	f7fe faf0 	bl	80010f4 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b18:	e00f      	b.n	8002b3a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b1a:	f7fe faeb 	bl	80010f4 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b19      	cmp	r3, #25
 8002b26:	d908      	bls.n	8002b3a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b30:	2327      	movs	r3, #39	; 0x27
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]

              break;
 8002b38:	e00b      	b.n	8002b52 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2220      	movs	r2, #32
 8002b42:	4013      	ands	r3, r2
 8002b44:	2127      	movs	r1, #39	; 0x27
 8002b46:	187a      	adds	r2, r7, r1
 8002b48:	1879      	adds	r1, r7, r1
 8002b4a:	7809      	ldrb	r1, [r1, #0]
 8002b4c:	7011      	strb	r1, [r2, #0]
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d1e3      	bne.n	8002b1a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d004      	beq.n	8002b6a <I2C_IsErrorOccurred+0x112>
 8002b60:	2327      	movs	r3, #39	; 0x27
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d092      	beq.n	8002a90 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b6a:	2327      	movs	r3, #39	; 0x27
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4313      	orrs	r3, r2
 8002b82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b84:	2327      	movs	r3, #39	; 0x27
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d00c      	beq.n	8002bb8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	0052      	lsls	r2, r2, #1
 8002bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bb0:	2327      	movs	r3, #39	; 0x27
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d00c      	beq.n	8002bdc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bd4:	2327      	movs	r3, #39	; 0x27
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d00c      	beq.n	8002c00 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2202      	movs	r2, #2
 8002bea:	4313      	orrs	r3, r2
 8002bec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bf8:	2327      	movs	r3, #39	; 0x27
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c00:	2327      	movs	r3, #39	; 0x27
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01d      	beq.n	8002c46 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7ff fe28 	bl	8002862 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	490d      	ldr	r1, [pc, #52]	; (8002c54 <I2C_IsErrorOccurred+0x1fc>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2241      	movs	r2, #65	; 0x41
 8002c32:	2120      	movs	r1, #32
 8002c34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2242      	movs	r2, #66	; 0x42
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c46:	2327      	movs	r3, #39	; 0x27
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b00b      	add	sp, #44	; 0x2c
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	fe00e800 	.word	0xfe00e800

08002c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	0008      	movs	r0, r1
 8002c62:	0011      	movs	r1, r2
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	240a      	movs	r4, #10
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	1c02      	adds	r2, r0, #0
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	2009      	movs	r0, #9
 8002c70:	183b      	adds	r3, r7, r0
 8002c72:	1c0a      	adds	r2, r1, #0
 8002c74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	059b      	lsls	r3, r3, #22
 8002c7c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	0419      	lsls	r1, r3, #16
 8002c84:	23ff      	movs	r3, #255	; 0xff
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c8a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	4313      	orrs	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca2:	0d51      	lsrs	r1, r2, #21
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	00d2      	lsls	r2, r2, #3
 8002ca8:	400a      	ands	r2, r1
 8002caa:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <I2C_TransferConfig+0x70>)
 8002cac:	430a      	orrs	r2, r1
 8002cae:	43d2      	mvns	r2, r2
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b007      	add	sp, #28
 8002cc4:	bd90      	pop	{r4, r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	03ff63ff 	.word	0x03ff63ff

08002ccc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	1cbb      	adds	r3, r7, #2
 8002cd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002cde:	1cbb      	adds	r3, r7, #2
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d010      	beq.n	8002d0a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2242      	movs	r2, #66	; 0x42
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2241      	movs	r2, #65	; 0x41
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	2328      	movs	r3, #40	; 0x28
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b28      	cmp	r3, #40	; 0x28
 8002d00:	d003      	beq.n	8002d0a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22b0      	movs	r2, #176	; 0xb0
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d0a:	1cbb      	adds	r3, r7, #2
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4013      	ands	r3, r2
 8002d12:	d010      	beq.n	8002d36 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2244      	movs	r2, #68	; 0x44
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2241      	movs	r2, #65	; 0x41
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	001a      	movs	r2, r3
 8002d26:	2328      	movs	r3, #40	; 0x28
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b28      	cmp	r3, #40	; 0x28
 8002d2c:	d003      	beq.n	8002d36 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	22b0      	movs	r2, #176	; 0xb0
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d36:	1cbb      	adds	r3, r7, #2
 8002d38:	2200      	movs	r2, #0
 8002d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da03      	bge.n	8002d48 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	22b8      	movs	r2, #184	; 0xb8
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d48:	1cbb      	adds	r3, r7, #2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d103      	bne.n	8002d58 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2290      	movs	r2, #144	; 0x90
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d103      	bne.n	8002d68 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d68:	1cbb      	adds	r3, r7, #2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d103      	bne.n	8002d78 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2240      	movs	r2, #64	; 0x40
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43d9      	mvns	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	400a      	ands	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b004      	add	sp, #16
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2241      	movs	r2, #65	; 0x41
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d138      	bne.n	8002e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e032      	b.n	8002e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2241      	movs	r2, #65	; 0x41
 8002dc4:	2124      	movs	r1, #36	; 0x24
 8002dc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4911      	ldr	r1, [pc, #68]	; (8002e28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2241      	movs	r2, #65	; 0x41
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2240      	movs	r2, #64	; 0x40
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	ffffefff 	.word	0xffffefff

08002e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2241      	movs	r2, #65	; 0x41
 8002e3a:	5c9b      	ldrb	r3, [r3, r2]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d139      	bne.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2240      	movs	r2, #64	; 0x40
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e033      	b.n	8002eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	2101      	movs	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2241      	movs	r2, #65	; 0x41
 8002e5c:	2124      	movs	r1, #36	; 0x24
 8002e5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2241      	movs	r2, #65	; 0x41
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2240      	movs	r2, #64	; 0x40
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fffff0ff 	.word	0xfffff0ff

08002ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d11f      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	0013      	movs	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7fd f906 	bl	8000108 <__udivsi3>
 8002efc:	0003      	movs	r3, r0
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f02:	e008      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e001      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e009      	b.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	401a      	ands	r2, r3
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d0ed      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	40007000 	.word	0x40007000
 8002f38:	fffff9ff 	.word	0xfffff9ff
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	000f4240 	.word	0x000f4240

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e2fe      	b.n	8003554 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d100      	bne.n	8002f62 <HAL_RCC_OscConfig+0x1e>
 8002f60:	e07c      	b.n	800305c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4bc3      	ldr	r3, [pc, #780]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2238      	movs	r2, #56	; 0x38
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6c:	4bc0      	ldr	r3, [pc, #768]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2203      	movs	r2, #3
 8002f72:	4013      	ands	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3e>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4bb9      	ldr	r3, [pc, #740]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	4013      	ands	r3, r2
 8002f92:	d062      	beq.n	800305a <HAL_RCC_OscConfig+0x116>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d15e      	bne.n	800305a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e2d9      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x78>
 8002fac:	4bb0      	ldr	r3, [pc, #704]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4baf      	ldr	r3, [pc, #700]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	0249      	lsls	r1, r1, #9
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e020      	b.n	8002ffe <HAL_RCC_OscConfig+0xba>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	23a0      	movs	r3, #160	; 0xa0
 8002fc2:	02db      	lsls	r3, r3, #11
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10e      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xa2>
 8002fc8:	4ba9      	ldr	r3, [pc, #676]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4ba8      	ldr	r3, [pc, #672]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	02c9      	lsls	r1, r1, #11
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	4ba6      	ldr	r3, [pc, #664]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4ba5      	ldr	r3, [pc, #660]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	0249      	lsls	r1, r1, #9
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCC_OscConfig+0xba>
 8002fe6:	4ba2      	ldr	r3, [pc, #648]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4ba1      	ldr	r3, [pc, #644]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	49a1      	ldr	r1, [pc, #644]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	4b9f      	ldr	r3, [pc, #636]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	499f      	ldr	r1, [pc, #636]	; (8003278 <HAL_RCC_OscConfig+0x334>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d014      	beq.n	8003030 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fe f875 	bl	80010f4 <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe f870 	bl	80010f4 <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e298      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	4b93      	ldr	r3, [pc, #588]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	029b      	lsls	r3, r3, #10
 800302a:	4013      	ands	r3, r2
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xcc>
 800302e:	e015      	b.n	800305c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f860 	bl	80010f4 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303a:	f7fe f85b 	bl	80010f4 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	; 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e283      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304c:	4b88      	ldr	r3, [pc, #544]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	4013      	ands	r3, r2
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0xf6>
 8003058:	e000      	b.n	800305c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2202      	movs	r2, #2
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <HAL_RCC_OscConfig+0x124>
 8003066:	e099      	b.n	800319c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003068:	4b81      	ldr	r3, [pc, #516]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2238      	movs	r2, #56	; 0x38
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003072:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b10      	cmp	r3, #16
 8003080:	d102      	bne.n	8003088 <HAL_RCC_OscConfig+0x144>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d002      	beq.n	800308e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d135      	bne.n	80030fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308e:	4b78      	ldr	r3, [pc, #480]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4013      	ands	r3, r2
 8003098:	d005      	beq.n	80030a6 <HAL_RCC_OscConfig+0x162>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e256      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a74      	ldr	r2, [pc, #464]	; (800327c <HAL_RCC_OscConfig+0x338>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	021a      	lsls	r2, r3, #8
 80030b6:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d112      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030c2:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_RCC_OscConfig+0x33c>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0adb      	lsrs	r3, r3, #11
 80030dc:	2207      	movs	r2, #7
 80030de:	4013      	ands	r3, r2
 80030e0:	4a68      	ldr	r2, [pc, #416]	; (8003284 <HAL_RCC_OscConfig+0x340>)
 80030e2:	40da      	lsrs	r2, r3
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <HAL_RCC_OscConfig+0x344>)
 80030e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030e8:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x348>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd ffa5 	bl	800103c <HAL_InitTick>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d051      	beq.n	800319a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e22c      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x33c>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003116:	4b56      	ldr	r3, [pc, #344]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b55      	ldr	r3, [pc, #340]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	0049      	lsls	r1, r1, #1
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd ffe6 	bl	80010f4 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312e:	f7fd ffe1 	bl	80010f4 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e209      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003140:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4013      	ands	r3, r2
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b48      	ldr	r3, [pc, #288]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x338>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	021a      	lsls	r2, r3, #8
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e01b      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800316a:	4949      	ldr	r1, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x34c>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fd ffc0 	bl	80010f4 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317a:	f7fd ffbb 	bl	80010f4 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e1e3      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800318c:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4013      	ands	r3, r2
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x236>
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800319a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2208      	movs	r2, #8
 80031a2:	4013      	ands	r3, r2
 80031a4:	d047      	beq.n	8003236 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2238      	movs	r2, #56	; 0x38
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	d10a      	bne.n	80031c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80031b2:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d03c      	beq.n	8003236 <HAL_RCC_OscConfig+0x2f2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d138      	bne.n	8003236 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e1c5      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d019      	beq.n	8003204 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd ff8a 	bl	80010f4 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e6:	f7fd ff85 	bl	80010f4 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1ad      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	2202      	movs	r2, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d0f1      	beq.n	80031e6 <HAL_RCC_OscConfig+0x2a2>
 8003202:	e018      	b.n	8003236 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800320a:	2101      	movs	r1, #1
 800320c:	438a      	bics	r2, r1
 800320e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd ff70 	bl	80010f4 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321a:	f7fd ff6b 	bl	80010f4 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e193      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d1f1      	bne.n	800321a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2204      	movs	r2, #4
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x2fe>
 8003240:	e0c6      	b.n	80033d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	231f      	movs	r3, #31
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2238      	movs	r2, #56	; 0x38
 8003250:	4013      	ands	r3, r2
 8003252:	2b20      	cmp	r3, #32
 8003254:	d11e      	bne.n	8003294 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x32c>)
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d100      	bne.n	8003262 <HAL_RCC_OscConfig+0x31e>
 8003260:	e0b6      	b.n	80033d0 <HAL_RCC_OscConfig+0x48c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d000      	beq.n	800326c <HAL_RCC_OscConfig+0x328>
 800326a:	e0b1      	b.n	80033d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e171      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
 8003270:	40021000 	.word	0x40021000
 8003274:	fffeffff 	.word	0xfffeffff
 8003278:	fffbffff 	.word	0xfffbffff
 800327c:	ffff80ff 	.word	0xffff80ff
 8003280:	ffffc7ff 	.word	0xffffc7ff
 8003284:	00f42400 	.word	0x00f42400
 8003288:	20000004 	.word	0x20000004
 800328c:	20000008 	.word	0x20000008
 8003290:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003294:	4bb1      	ldr	r3, [pc, #708]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	4013      	ands	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x360>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x362>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d011      	beq.n	80032ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	4bac      	ldr	r3, [pc, #688]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80032ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ae:	4bab      	ldr	r3, [pc, #684]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0549      	lsls	r1, r1, #21
 80032b4:	430a      	orrs	r2, r1
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b8:	4ba8      	ldr	r3, [pc, #672]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80032ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	055b      	lsls	r3, r3, #21
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80032c6:	231f      	movs	r3, #31
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ce:	4ba4      	ldr	r3, [pc, #656]	; (8003560 <HAL_RCC_OscConfig+0x61c>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032da:	4ba1      	ldr	r3, [pc, #644]	; (8003560 <HAL_RCC_OscConfig+0x61c>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4ba0      	ldr	r3, [pc, #640]	; (8003560 <HAL_RCC_OscConfig+0x61c>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0049      	lsls	r1, r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80032e8:	f7fd ff04 	bl	80010f4 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fd feff 	bl	80010f4 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e127      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003304:	4b96      	ldr	r3, [pc, #600]	; (8003560 <HAL_RCC_OscConfig+0x61c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x3e2>
 8003318:	4b90      	ldr	r3, [pc, #576]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800331a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800331c:	4b8f      	ldr	r3, [pc, #572]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800331e:	2101      	movs	r1, #1
 8003320:	430a      	orrs	r2, r1
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x41c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b05      	cmp	r3, #5
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x404>
 800332e:	4b8b      	ldr	r3, [pc, #556]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003332:	4b8a      	ldr	r3, [pc, #552]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003334:	2104      	movs	r1, #4
 8003336:	430a      	orrs	r2, r1
 8003338:	65da      	str	r2, [r3, #92]	; 0x5c
 800333a:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800333c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800333e:	4b87      	ldr	r3, [pc, #540]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003340:	2101      	movs	r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	65da      	str	r2, [r3, #92]	; 0x5c
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0x41c>
 8003348:	4b84      	ldr	r3, [pc, #528]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800334a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800334c:	4b83      	ldr	r3, [pc, #524]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800334e:	2101      	movs	r1, #1
 8003350:	438a      	bics	r2, r1
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003358:	4b80      	ldr	r3, [pc, #512]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800335a:	2104      	movs	r1, #4
 800335c:	438a      	bics	r2, r1
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d014      	beq.n	8003392 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fec4 	bl	80010f4 <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003370:	e009      	b.n	8003386 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd febf 	bl	80010f4 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	4a79      	ldr	r2, [pc, #484]	; (8003564 <HAL_RCC_OscConfig+0x620>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0e6      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003386:	4b75      	ldr	r3, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x42e>
 8003390:	e013      	b.n	80033ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fd feaf 	bl	80010f4 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800339a:	e009      	b.n	80033b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fd feaa 	bl	80010f4 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	4a6f      	ldr	r2, [pc, #444]	; (8003564 <HAL_RCC_OscConfig+0x620>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0d1      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2202      	movs	r2, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033ba:	231f      	movs	r3, #31
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80033c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80033ca:	4967      	ldr	r1, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x624>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <HAL_RCC_OscConfig+0x496>
 80033d8:	e0bb      	b.n	8003552 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2238      	movs	r2, #56	; 0x38
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d100      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4a4>
 80033e6:	e07b      	b.n	80034e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d156      	bne.n	800349e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80033f6:	495d      	ldr	r1, [pc, #372]	; (800356c <HAL_RCC_OscConfig+0x628>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd fe7a 	bl	80010f4 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd fe75 	bl	80010f4 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e09d      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	049b      	lsls	r3, r3, #18
 8003420:	4013      	ands	r3, r2
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_RCC_OscConfig+0x62c>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	431a      	orrs	r2, r3
 8003452:	4b42      	ldr	r3, [pc, #264]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	0449      	lsls	r1, r1, #17
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	4b3c      	ldr	r3, [pc, #240]	; (800355c <HAL_RCC_OscConfig+0x618>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0549      	lsls	r1, r1, #21
 8003470:	430a      	orrs	r2, r1
 8003472:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd fe3e 	bl	80010f4 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd fe39 	bl	80010f4 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e061      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_RCC_OscConfig+0x618>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	049b      	lsls	r3, r3, #18
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x53a>
 800349c:	e059      	b.n	8003552 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80034a4:	4931      	ldr	r1, [pc, #196]	; (800356c <HAL_RCC_OscConfig+0x628>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fe23 	bl	80010f4 <HAL_GetTick>
 80034ae:	0003      	movs	r3, r0
 80034b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fd fe1e 	bl	80010f4 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e046      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c6:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	049b      	lsls	r3, r3, #18
 80034ce:	4013      	ands	r3, r2
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80034d8:	4926      	ldr	r1, [pc, #152]	; (8003574 <HAL_RCC_OscConfig+0x630>)
 80034da:	400a      	ands	r2, r1
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	e038      	b.n	8003552 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e033      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x618>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2203      	movs	r2, #3
 80034f6:	401a      	ands	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d126      	bne.n	800354e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2270      	movs	r2, #112	; 0x70
 8003504:	401a      	ands	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11f      	bne.n	800354e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	23fe      	movs	r3, #254	; 0xfe
 8003512:	01db      	lsls	r3, r3, #7
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d116      	bne.n	800354e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	23f8      	movs	r3, #248	; 0xf8
 8003524:	039b      	lsls	r3, r3, #14
 8003526:	401a      	ands	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d10e      	bne.n	800354e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	23e0      	movs	r3, #224	; 0xe0
 8003534:	051b      	lsls	r3, r3, #20
 8003536:	401a      	ands	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	0f5b      	lsrs	r3, r3, #29
 8003544:	075a      	lsls	r2, r3, #29
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b008      	add	sp, #32
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	40007000 	.word	0x40007000
 8003564:	00001388 	.word	0x00001388
 8003568:	efffffff 	.word	0xefffffff
 800356c:	feffffff 	.word	0xfeffffff
 8003570:	11c1808c 	.word	0x11c1808c
 8003574:	eefefffc 	.word	0xeefefffc

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0e9      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2207      	movs	r2, #7
 8003592:	4013      	ands	r3, r2
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d91e      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b73      	ldr	r3, [pc, #460]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2207      	movs	r2, #7
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	4b70      	ldr	r3, [pc, #448]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035ac:	f7fd fda2 	bl	80010f4 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035b4:	e009      	b.n	80035ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b6:	f7fd fd9d 	bl	80010f4 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	4a6a      	ldr	r2, [pc, #424]	; (800376c <HAL_RCC_ClockConfig+0x1f4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0ca      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035ca:	4b67      	ldr	r3, [pc, #412]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2207      	movs	r2, #7
 80035d0:	4013      	ands	r3, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1ee      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2202      	movs	r2, #2
 80035de:	4013      	ands	r3, r2
 80035e0:	d015      	beq.n	800360e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2204      	movs	r2, #4
 80035e8:	4013      	ands	r3, r2
 80035ea:	d006      	beq.n	80035fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035ec:	4b60      	ldr	r3, [pc, #384]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 80035f2:	21e0      	movs	r1, #224	; 0xe0
 80035f4:	01c9      	lsls	r1, r1, #7
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fa:	4b5d      	ldr	r3, [pc, #372]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_ClockConfig+0x1fc>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	d057      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	4013      	ands	r3, r2
 800362a:	d12b      	bne.n	8003684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e097      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d107      	bne.n	8003648 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b4d      	ldr	r3, [pc, #308]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	049b      	lsls	r3, r3, #18
 8003640:	4013      	ands	r3, r2
 8003642:	d11f      	bne.n	8003684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e08b      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003650:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4013      	ands	r3, r2
 800365a:	d113      	bne.n	8003684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e07f      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d106      	bne.n	8003676 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	2202      	movs	r2, #2
 800366e:	4013      	ands	r3, r2
 8003670:	d108      	bne.n	8003684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e074      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	2202      	movs	r2, #2
 800367c:	4013      	ands	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e06d      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2207      	movs	r2, #7
 800368a:	4393      	bics	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003698:	f7fd fd2c 	bl	80010f4 <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a2:	f7fd fd27 	bl	80010f4 <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4a2f      	ldr	r2, [pc, #188]	; (800376c <HAL_RCC_ClockConfig+0x1f4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e054      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2238      	movs	r2, #56	; 0x38
 80036bc:	401a      	ands	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1ec      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2207      	movs	r2, #7
 80036ce:	4013      	ands	r3, r2
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d21e      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2207      	movs	r2, #7
 80036dc:	4393      	bics	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036e8:	f7fd fd04 	bl	80010f4 <HAL_GetTick>
 80036ec:	0003      	movs	r3, r0
 80036ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036f0:	e009      	b.n	8003706 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f2:	f7fd fcff 	bl	80010f4 <HAL_GetTick>
 80036f6:	0002      	movs	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_RCC_ClockConfig+0x1f4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e02c      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2207      	movs	r2, #7
 800370c:	4013      	ands	r3, r2
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d1ee      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <HAL_RCC_ClockConfig+0x200>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003732:	f000 f829 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003736:	0001      	movs	r1, r0
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	220f      	movs	r2, #15
 8003740:	401a      	ands	r2, r3
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x204>)
 8003744:	0092      	lsls	r2, r2, #2
 8003746:	58d3      	ldr	r3, [r2, r3]
 8003748:	221f      	movs	r2, #31
 800374a:	4013      	ands	r3, r2
 800374c:	000a      	movs	r2, r1
 800374e:	40da      	lsrs	r2, r3
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_ClockConfig+0x208>)
 8003752:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_ClockConfig+0x20c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0018      	movs	r0, r3
 800375a:	f7fd fc6f 	bl	800103c <HAL_InitTick>
 800375e:	0003      	movs	r3, r0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b004      	add	sp, #16
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40022000 	.word	0x40022000
 800376c:	00001388 	.word	0x00001388
 8003770:	40021000 	.word	0x40021000
 8003774:	fffff0ff 	.word	0xfffff0ff
 8003778:	ffff8fff 	.word	0xffff8fff
 800377c:	08004e84 	.word	0x08004e84
 8003780:	20000004 	.word	0x20000004
 8003784:	20000008 	.word	0x20000008

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800378e:	4b3c      	ldr	r3, [pc, #240]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2238      	movs	r2, #56	; 0x38
 8003794:	4013      	ands	r3, r2
 8003796:	d10f      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003798:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0adb      	lsrs	r3, r3, #11
 800379e:	2207      	movs	r2, #7
 80037a0:	4013      	ands	r3, r2
 80037a2:	2201      	movs	r2, #1
 80037a4:	409a      	lsls	r2, r3
 80037a6:	0013      	movs	r3, r2
 80037a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	4835      	ldr	r0, [pc, #212]	; (8003884 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037ae:	f7fc fcab 	bl	8000108 <__udivsi3>
 80037b2:	0003      	movs	r3, r0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	e05d      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b8:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2238      	movs	r2, #56	; 0x38
 80037be:	4013      	ands	r3, r2
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c4:	4b30      	ldr	r3, [pc, #192]	; (8003888 <HAL_RCC_GetSysClockFreq+0x100>)
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e054      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ca:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2238      	movs	r2, #56	; 0x38
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d138      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2203      	movs	r2, #3
 80037dc:	4013      	ands	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	2207      	movs	r2, #7
 80037e8:	4013      	ands	r3, r2
 80037ea:	3301      	adds	r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d10d      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4824      	ldr	r0, [pc, #144]	; (8003888 <HAL_RCC_GetSysClockFreq+0x100>)
 80037f8:	f7fc fc86 	bl	8000108 <__udivsi3>
 80037fc:	0003      	movs	r3, r0
 80037fe:	0019      	movs	r1, r3
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	227f      	movs	r2, #127	; 0x7f
 8003808:	4013      	ands	r3, r2
 800380a:	434b      	muls	r3, r1
 800380c:	617b      	str	r3, [r7, #20]
        break;
 800380e:	e00d      	b.n	800382c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	481c      	ldr	r0, [pc, #112]	; (8003884 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003814:	f7fc fc78 	bl	8000108 <__udivsi3>
 8003818:	0003      	movs	r3, r0
 800381a:	0019      	movs	r1, r3
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	227f      	movs	r2, #127	; 0x7f
 8003824:	4013      	ands	r3, r2
 8003826:	434b      	muls	r3, r1
 8003828:	617b      	str	r3, [r7, #20]
        break;
 800382a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0f5b      	lsrs	r3, r3, #29
 8003832:	2207      	movs	r2, #7
 8003834:	4013      	ands	r3, r2
 8003836:	3301      	adds	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	f7fc fc63 	bl	8000108 <__udivsi3>
 8003842:	0003      	movs	r3, r0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e015      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2238      	movs	r2, #56	; 0x38
 800384e:	4013      	ands	r3, r2
 8003850:	2b20      	cmp	r3, #32
 8003852:	d103      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2238      	movs	r2, #56	; 0x38
 8003862:	4013      	ands	r3, r2
 8003864:	2b18      	cmp	r3, #24
 8003866:	d103      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003868:	23fa      	movs	r3, #250	; 0xfa
 800386a:	01db      	lsls	r3, r3, #7
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e001      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003874:	693b      	ldr	r3, [r7, #16]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b006      	add	sp, #24
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	40021000 	.word	0x40021000
 8003884:	00f42400 	.word	0x00f42400
 8003888:	007a1200 	.word	0x007a1200

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003894:	2313      	movs	r3, #19
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800389c:	2312      	movs	r3, #18
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	4013      	ands	r3, r2
 80038ae:	d100      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038b0:	e0ad      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2011      	movs	r0, #17
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	055b      	lsls	r3, r3, #21
 80038c2:	4013      	ands	r3, r2
 80038c4:	d110      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b44      	ldr	r3, [pc, #272]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	0549      	lsls	r1, r1, #21
 80038d0:	430a      	orrs	r2, r1
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80038d4:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	055b      	lsls	r3, r3, #21
 80038dc:	4013      	ands	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	0049      	lsls	r1, r1, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f6:	f7fd fbfd 	bl	80010f4 <HAL_GetTick>
 80038fa:	0003      	movs	r3, r0
 80038fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fe:	e00b      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7fd fbf8 	bl	80010f4 <HAL_GetTick>
 8003904:	0002      	movs	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d904      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800390e:	2313      	movs	r3, #19
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2203      	movs	r2, #3
 8003914:	701a      	strb	r2, [r3, #0]
        break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003918:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d0ed      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003924:	2313      	movs	r3, #19
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d15e      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003930:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003932:	23c0      	movs	r3, #192	; 0xc0
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4013      	ands	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d019      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	429a      	cmp	r2, r3
 8003948:	d014      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003950:	4013      	ands	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003956:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0249      	lsls	r1, r1, #9
 800395e:	430a      	orrs	r2, r1
 8003960:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003968:	491e      	ldr	r1, [pc, #120]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800396a:	400a      	ands	r2, r1
 800396c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	d016      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd fbba 	bl	80010f4 <HAL_GetTick>
 8003980:	0003      	movs	r3, r0
 8003982:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003984:	e00c      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fd fbb5 	bl	80010f4 <HAL_GetTick>
 800398a:	0002      	movs	r2, r0
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d904      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003996:	2313      	movs	r3, #19
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2203      	movs	r2, #3
 800399c:	701a      	strb	r2, [r3, #0]
            break;
 800399e:	e004      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	2202      	movs	r2, #2
 80039a6:	4013      	ands	r3, r2
 80039a8:	d0ed      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80039aa:	2313      	movs	r3, #19
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80039c8:	e016      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ca:	2312      	movs	r3, #18
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2213      	movs	r2, #19
 80039d0:	18ba      	adds	r2, r7, r2
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e00f      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	fffffcff 	.word	0xfffffcff
 80039e4:	fffeffff 	.word	0xfffeffff
 80039e8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	2312      	movs	r3, #18
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2213      	movs	r2, #19
 80039f2:	18ba      	adds	r2, r7, r2
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f8:	2311      	movs	r3, #17
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b84      	ldr	r3, [pc, #528]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a06:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a08:	4983      	ldr	r1, [pc, #524]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a18:	4b7e      	ldr	r3, [pc, #504]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	4393      	bics	r3, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a36:	4b77      	ldr	r3, [pc, #476]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	4393      	bics	r3, r2
 8003a3e:	0019      	movs	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a46:	430a      	orrs	r2, r1
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	4013      	ands	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	4a70      	ldr	r2, [pc, #448]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4013      	ands	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a74:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	4a69      	ldr	r2, [pc, #420]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a84:	430a      	orrs	r2, r1
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4013      	ands	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a94:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	4a62      	ldr	r2, [pc, #392]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2220      	movs	r2, #32
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ab2:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	4a5c      	ldr	r2, [pc, #368]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	02db      	lsls	r3, r3, #11
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d016      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	4a55      	ldr	r2, [pc, #340]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	23c0      	movs	r3, #192	; 0xc0
 8003aec:	051b      	lsls	r3, r3, #20
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d106      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003af2:	4b48      	ldr	r3, [pc, #288]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0449      	lsls	r1, r1, #17
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	01db      	lsls	r3, r3, #7
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b0c:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	0899      	lsrs	r1, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b18:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	05db      	lsls	r3, r3, #23
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	0249      	lsls	r1, r1, #9
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	031b      	lsls	r3, r3, #12
 8003b40:	4013      	ands	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b44:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	039b      	lsls	r3, r3, #14
 8003b60:	4013      	ands	r3, r2
 8003b62:	d016      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	4a31      	ldr	r2, [pc, #196]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b74:	430a      	orrs	r2, r1
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	03db      	lsls	r3, r3, #15
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d106      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	0449      	lsls	r1, r1, #17
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	03db      	lsls	r3, r3, #15
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d016      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	045b      	lsls	r3, r3, #17
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0449      	lsls	r1, r1, #17
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d016      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003be8:	430a      	orrs	r2, r1
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	01db      	lsls	r3, r3, #7
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	0249      	lsls	r1, r1, #9
 8003c02:	430a      	orrs	r2, r1
 8003c04:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c06:	2312      	movs	r3, #18
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b006      	add	sp, #24
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	efffffff 	.word	0xefffffff
 8003c1c:	fffff3ff 	.word	0xfffff3ff
 8003c20:	fff3ffff 	.word	0xfff3ffff
 8003c24:	ffcfffff 	.word	0xffcfffff
 8003c28:	ffffcfff 	.word	0xffffcfff
 8003c2c:	f3ffffff 	.word	0xf3ffffff
 8003c30:	ffbfffff 	.word	0xffbfffff
 8003c34:	feffffff 	.word	0xfeffffff
 8003c38:	ffff3fff 	.word	0xffff3fff

08003c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e04a      	b.n	8003ce4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	223d      	movs	r2, #61	; 0x3d
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223c      	movs	r2, #60	; 0x3c
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fc ff93 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223d      	movs	r2, #61	; 0x3d
 8003c6e:	2102      	movs	r1, #2
 8003c70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	f000 fbbd 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2248      	movs	r2, #72	; 0x48
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	223e      	movs	r2, #62	; 0x3e
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	223f      	movs	r2, #63	; 0x3f
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2240      	movs	r2, #64	; 0x40
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5499      	strb	r1, [r3, r2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2241      	movs	r2, #65	; 0x41
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2242      	movs	r2, #66	; 0x42
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2243      	movs	r2, #67	; 0x43
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2244      	movs	r2, #68	; 0x44
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	5499      	strb	r1, [r3, r2]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2245      	movs	r2, #69	; 0x45
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	5499      	strb	r1, [r3, r2]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2246      	movs	r2, #70	; 0x46
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2247      	movs	r2, #71	; 0x47
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	; 0x3d
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e04a      	b.n	8003d94 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	223d      	movs	r2, #61	; 0x3d
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	223c      	movs	r2, #60	; 0x3c
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc fef5 	bl	8000b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	223d      	movs	r2, #61	; 0x3d
 8003d1e:	2102      	movs	r1, #2
 8003d20:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	0010      	movs	r0, r2
 8003d2e:	f000 fb65 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2248      	movs	r2, #72	; 0x48
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223e      	movs	r2, #62	; 0x3e
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2240      	movs	r2, #64	; 0x40
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2242      	movs	r2, #66	; 0x42
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2243      	movs	r2, #67	; 0x43
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2244      	movs	r2, #68	; 0x44
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2245      	movs	r2, #69	; 0x45
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2246      	movs	r2, #70	; 0x46
 8003d7e:	2101      	movs	r1, #1
 8003d80:	5499      	strb	r1, [r3, r2]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2247      	movs	r2, #71	; 0x47
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	223d      	movs	r2, #61	; 0x3d
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2202      	movs	r2, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d124      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2202      	movs	r2, #2
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d11d      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	4252      	negs	r2, r2
 8003dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 faf4 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8003de4:	e007      	b.n	8003df6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 fae7 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f000 faf3 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2204      	movs	r2, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d125      	bne.n	8003e56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2204      	movs	r2, #4
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d11e      	bne.n	8003e56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	4252      	negs	r2, r2
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	23c0      	movs	r3, #192	; 0xc0
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4013      	ands	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 fac7 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8003e3e:	e007      	b.n	8003e50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 faba 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 fac6 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d124      	bne.n	8003eae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11d      	bne.n	8003eae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2209      	movs	r2, #9
 8003e78:	4252      	negs	r2, r2
 8003e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 fa9b 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8003e96:	e007      	b.n	8003ea8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fa8e 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fa9a 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d125      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d11e      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2211      	movs	r2, #17
 8003ed0:	4252      	negs	r2, r2
 8003ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	23c0      	movs	r3, #192	; 0xc0
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 fa6e 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e007      	b.n	8003f02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 fa61 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 fa6d 	bl	80043dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d10f      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d108      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4252      	negs	r2, r2
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fa3b 	bl	80043ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d10f      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2280      	movs	r2, #128	; 0x80
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d108      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2281      	movs	r2, #129	; 0x81
 8003f58:	4252      	negs	r2, r2
 8003f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 ff48 	bl	8004df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	401a      	ands	r2, r3
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d10e      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_TIM_IRQHandler+0x260>)
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 ff37 	bl	8004e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2240      	movs	r2, #64	; 0x40
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2240      	movs	r2, #64	; 0x40
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d108      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2241      	movs	r2, #65	; 0x41
 8003fb8:	4252      	negs	r2, r2
 8003fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 fa14 	bl	80043ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d108      	bne.n	8003ff2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2221      	movs	r2, #33	; 0x21
 8003fe6:	4252      	negs	r2, r2
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 fef9 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	fffffeff 	.word	0xfffffeff

08004000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2317      	movs	r3, #23
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	223c      	movs	r2, #60	; 0x3c
 8004018:	5c9b      	ldrb	r3, [r3, r2]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x22>
 800401e:	2302      	movs	r3, #2
 8004020:	e0e5      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	223c      	movs	r2, #60	; 0x3c
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b14      	cmp	r3, #20
 800402e:	d900      	bls.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004030:	e0d1      	b.n	80041d6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	009a      	lsls	r2, r3, #2
 8004036:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	0011      	movs	r1, r2
 8004046:	0018      	movs	r0, r3
 8004048:	f000 fa58 	bl	80044fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2108      	movs	r1, #8
 8004058:	430a      	orrs	r2, r1
 800405a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2104      	movs	r1, #4
 8004068:	438a      	bics	r2, r1
 800406a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6999      	ldr	r1, [r3, #24]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
      break;
 800407e:	e0af      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	0011      	movs	r1, r2
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fac1 	bl	8004610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0109      	lsls	r1, r1, #4
 800409c:	430a      	orrs	r2, r1
 800409e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4954      	ldr	r1, [pc, #336]	; (80041fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
      break;
 80040c4:	e08c      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	0011      	movs	r1, r2
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 fb22 	bl	8004718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2108      	movs	r1, #8
 80040e0:	430a      	orrs	r2, r1
 80040e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2104      	movs	r1, #4
 80040f0:	438a      	bics	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69d9      	ldr	r1, [r3, #28]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	61da      	str	r2, [r3, #28]
      break;
 8004106:	e06b      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	0011      	movs	r1, r2
 8004110:	0018      	movs	r0, r3
 8004112:	f000 fb89 	bl	8004828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	0109      	lsls	r1, r1, #4
 8004124:	430a      	orrs	r2, r1
 8004126:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4932      	ldr	r1, [pc, #200]	; (80041fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004134:	400a      	ands	r2, r1
 8004136:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69d9      	ldr	r1, [r3, #28]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	021a      	lsls	r2, r3, #8
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	61da      	str	r2, [r3, #28]
      break;
 800414c:	e048      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	0011      	movs	r1, r2
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fbd0 	bl	80048fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2108      	movs	r1, #8
 8004168:	430a      	orrs	r2, r1
 800416a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2104      	movs	r1, #4
 8004178:	438a      	bics	r2, r1
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800418e:	e027      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	0011      	movs	r1, r2
 8004198:	0018      	movs	r0, r3
 800419a:	f000 fc0f 	bl	80049bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	0109      	lsls	r1, r1, #4
 80041ac:	430a      	orrs	r2, r1
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4910      	ldr	r1, [pc, #64]	; (80041fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041bc:	400a      	ands	r2, r1
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041d4:	e004      	b.n	80041e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80041d6:	2317      	movs	r3, #23
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
      break;
 80041de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	223c      	movs	r2, #60	; 0x3c
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]

  return status;
 80041e8:	2317      	movs	r3, #23
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b006      	add	sp, #24
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	08004ec4 	.word	0x08004ec4
 80041fc:	fffffbff 	.word	0xfffffbff

08004200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	230f      	movs	r3, #15
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	223c      	movs	r2, #60	; 0x3c
 8004216:	5c9b      	ldrb	r3, [r3, r2]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_TIM_ConfigClockSource+0x20>
 800421c:	2302      	movs	r3, #2
 800421e:	e0bc      	b.n	800439a <HAL_TIM_ConfigClockSource+0x19a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	223c      	movs	r2, #60	; 0x3c
 8004224:	2101      	movs	r1, #1
 8004226:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	223d      	movs	r2, #61	; 0x3d
 800422c:	2102      	movs	r1, #2
 800422e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a5a      	ldr	r2, [pc, #360]	; (80043a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a59      	ldr	r2, [pc, #356]	; (80043a8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	0192      	lsls	r2, r2, #6
 8004258:	4293      	cmp	r3, r2
 800425a:	d040      	beq.n	80042de <HAL_TIM_ConfigClockSource+0xde>
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	0192      	lsls	r2, r2, #6
 8004260:	4293      	cmp	r3, r2
 8004262:	d900      	bls.n	8004266 <HAL_TIM_ConfigClockSource+0x66>
 8004264:	e088      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	0152      	lsls	r2, r2, #5
 800426a:	4293      	cmp	r3, r2
 800426c:	d100      	bne.n	8004270 <HAL_TIM_ConfigClockSource+0x70>
 800426e:	e088      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x182>
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0152      	lsls	r2, r2, #5
 8004274:	4293      	cmp	r3, r2
 8004276:	d900      	bls.n	800427a <HAL_TIM_ConfigClockSource+0x7a>
 8004278:	e07e      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 800427a:	2b70      	cmp	r3, #112	; 0x70
 800427c:	d018      	beq.n	80042b0 <HAL_TIM_ConfigClockSource+0xb0>
 800427e:	d900      	bls.n	8004282 <HAL_TIM_ConfigClockSource+0x82>
 8004280:	e07a      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 8004282:	2b60      	cmp	r3, #96	; 0x60
 8004284:	d04f      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x126>
 8004286:	d900      	bls.n	800428a <HAL_TIM_ConfigClockSource+0x8a>
 8004288:	e076      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 800428a:	2b50      	cmp	r3, #80	; 0x50
 800428c:	d03b      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x106>
 800428e:	d900      	bls.n	8004292 <HAL_TIM_ConfigClockSource+0x92>
 8004290:	e072      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d057      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x146>
 8004296:	d900      	bls.n	800429a <HAL_TIM_ConfigClockSource+0x9a>
 8004298:	e06e      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 800429a:	2b30      	cmp	r3, #48	; 0x30
 800429c:	d063      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x166>
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x166>
 80042a4:	d868      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d05d      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x166>
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d05b      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x166>
 80042ae:	e063      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	f000 fc5c 	bl	8004b7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2277      	movs	r2, #119	; 0x77
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]
      break;
 80042dc:	e052      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ee:	f000 fc45 	bl	8004b7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	01c9      	lsls	r1, r1, #7
 8004300:	430a      	orrs	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03e      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004312:	001a      	movs	r2, r3
 8004314:	f000 fbb6 	bl	8004a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	0018      	movs	r0, r3
 8004320:	f000 fc10 	bl	8004b44 <TIM_ITRx_SetConfig>
      break;
 8004324:	e02e      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004332:	001a      	movs	r2, r3
 8004334:	f000 fbd4 	bl	8004ae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	0018      	movs	r0, r3
 8004340:	f000 fc00 	bl	8004b44 <TIM_ITRx_SetConfig>
      break;
 8004344:	e01e      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004352:	001a      	movs	r2, r3
 8004354:	f000 fb96 	bl	8004a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	0018      	movs	r0, r3
 8004360:	f000 fbf0 	bl	8004b44 <TIM_ITRx_SetConfig>
      break;
 8004364:	e00e      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0019      	movs	r1, r3
 8004370:	0010      	movs	r0, r2
 8004372:	f000 fbe7 	bl	8004b44 <TIM_ITRx_SetConfig>
      break;
 8004376:	e005      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004378:	230f      	movs	r3, #15
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
      break;
 8004380:	e000      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004382:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	223d      	movs	r2, #61	; 0x3d
 8004388:	2101      	movs	r1, #1
 800438a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	223c      	movs	r2, #60	; 0x3c
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

  return status;
 8004394:	230f      	movs	r3, #15
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	ffceff88 	.word	0xffceff88
 80043a8:	ffff00ff 	.word	0xffff00ff

080043ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b002      	add	sp, #8
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a34      	ldr	r2, [pc, #208]	; (80044e0 <TIM_Base_SetConfig+0xe4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d008      	beq.n	8004426 <TIM_Base_SetConfig+0x2a>
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	05db      	lsls	r3, r3, #23
 800441a:	429a      	cmp	r2, r3
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0x2a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a30      	ldr	r2, [pc, #192]	; (80044e4 <TIM_Base_SetConfig+0xe8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2270      	movs	r2, #112	; 0x70
 800442a:	4393      	bics	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <TIM_Base_SetConfig+0xe4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	05db      	lsls	r3, r3, #23
 8004446:	429a      	cmp	r2, r3
 8004448:	d013      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <TIM_Base_SetConfig+0xe8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00f      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <TIM_Base_SetConfig+0xec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <TIM_Base_SetConfig+0xf0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <TIM_Base_SetConfig+0xf4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_Base_SetConfig+0x76>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <TIM_Base_SetConfig+0xf8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <TIM_Base_SetConfig+0xfc>)
 8004476:	4013      	ands	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	4393      	bics	r3, r2
 800448a:	001a      	movs	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <TIM_Base_SetConfig+0xe4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0xce>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <TIM_Base_SetConfig+0xf0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0xce>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <TIM_Base_SetConfig+0xf4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0xce>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <TIM_Base_SetConfig+0xf8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d103      	bne.n	80044d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	615a      	str	r2, [r3, #20]
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40002000 	.word	0x40002000
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800
 80044f8:	fffffcff 	.word	0xfffffcff

080044fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	2201      	movs	r2, #1
 800450c:	4393      	bics	r3, r2
 800450e:	001a      	movs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a32      	ldr	r2, [pc, #200]	; (80045f4 <TIM_OC1_SetConfig+0xf8>)
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2202      	movs	r2, #2
 8004544:	4393      	bics	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <TIM_OC1_SetConfig+0xfc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_OC1_SetConfig+0x76>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <TIM_OC1_SetConfig+0x100>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_OC1_SetConfig+0x76>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a26      	ldr	r2, [pc, #152]	; (8004600 <TIM_OC1_SetConfig+0x104>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC1_SetConfig+0x76>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a25      	ldr	r2, [pc, #148]	; (8004604 <TIM_OC1_SetConfig+0x108>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10c      	bne.n	800458c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2208      	movs	r2, #8
 8004576:	4393      	bics	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2204      	movs	r2, #4
 8004588:	4393      	bics	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <TIM_OC1_SetConfig+0xfc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00b      	beq.n	80045ac <TIM_OC1_SetConfig+0xb0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a19      	ldr	r2, [pc, #100]	; (80045fc <TIM_OC1_SetConfig+0x100>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_OC1_SetConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <TIM_OC1_SetConfig+0x104>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC1_SetConfig+0xb0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	; (8004604 <TIM_OC1_SetConfig+0x108>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d111      	bne.n	80045d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4a16      	ldr	r2, [pc, #88]	; (8004608 <TIM_OC1_SetConfig+0x10c>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <TIM_OC1_SetConfig+0x110>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b006      	add	sp, #24
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	fffeff8f 	.word	0xfffeff8f
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800
 8004608:	fffffeff 	.word	0xfffffeff
 800460c:	fffffdff 	.word	0xfffffdff

08004610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	2210      	movs	r2, #16
 8004620:	4393      	bics	r3, r2
 8004622:	001a      	movs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <TIM_OC2_SetConfig+0xe8>)
 800463e:	4013      	ands	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <TIM_OC2_SetConfig+0xec>)
 8004646:	4013      	ands	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2220      	movs	r2, #32
 800465a:	4393      	bics	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a24      	ldr	r2, [pc, #144]	; (8004700 <TIM_OC2_SetConfig+0xf0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10d      	bne.n	800468e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	4393      	bics	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	4393      	bics	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <TIM_OC2_SetConfig+0xf0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_OC2_SetConfig+0x9e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <TIM_OC2_SetConfig+0xf4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_OC2_SetConfig+0x9e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <TIM_OC2_SetConfig+0xf8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC2_SetConfig+0x9e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <TIM_OC2_SetConfig+0xfc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d113      	bne.n	80046d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <TIM_OC2_SetConfig+0x100>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4a16      	ldr	r2, [pc, #88]	; (8004714 <TIM_OC2_SetConfig+0x104>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b006      	add	sp, #24
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	feff8fff 	.word	0xfeff8fff
 80046fc:	fffffcff 	.word	0xfffffcff
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40014000 	.word	0x40014000
 8004708:	40014400 	.word	0x40014400
 800470c:	40014800 	.word	0x40014800
 8004710:	fffffbff 	.word	0xfffffbff
 8004714:	fffff7ff 	.word	0xfffff7ff

08004718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a35      	ldr	r2, [pc, #212]	; (80047fc <TIM_OC3_SetConfig+0xe4>)
 8004728:	401a      	ands	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <TIM_OC3_SetConfig+0xe8>)
 8004744:	4013      	ands	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2203      	movs	r2, #3
 800474c:	4393      	bics	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4a29      	ldr	r2, [pc, #164]	; (8004804 <TIM_OC3_SetConfig+0xec>)
 800475e:	4013      	ands	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a25      	ldr	r2, [pc, #148]	; (8004808 <TIM_OC3_SetConfig+0xf0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10d      	bne.n	8004792 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	4a24      	ldr	r2, [pc, #144]	; (800480c <TIM_OC3_SetConfig+0xf4>)
 800477a:	4013      	ands	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <TIM_OC3_SetConfig+0xf8>)
 800478e:	4013      	ands	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <TIM_OC3_SetConfig+0xf0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_OC3_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <TIM_OC3_SetConfig+0xfc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_OC3_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <TIM_OC3_SetConfig+0x100>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC3_SetConfig+0x9a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <TIM_OC3_SetConfig+0x104>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d113      	bne.n	80047da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <TIM_OC3_SetConfig+0x108>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <TIM_OC3_SetConfig+0x10c>)
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b006      	add	sp, #24
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	fffffeff 	.word	0xfffffeff
 8004800:	fffeff8f 	.word	0xfffeff8f
 8004804:	fffffdff 	.word	0xfffffdff
 8004808:	40012c00 	.word	0x40012c00
 800480c:	fffff7ff 	.word	0xfffff7ff
 8004810:	fffffbff 	.word	0xfffffbff
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800
 8004820:	ffffefff 	.word	0xffffefff
 8004824:	ffffdfff 	.word	0xffffdfff

08004828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <TIM_OC4_SetConfig+0xb0>)
 8004838:	401a      	ands	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a22      	ldr	r2, [pc, #136]	; (80048dc <TIM_OC4_SetConfig+0xb4>)
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <TIM_OC4_SetConfig+0xb8>)
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <TIM_OC4_SetConfig+0xbc>)
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_OC4_SetConfig+0xc0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00b      	beq.n	80048a0 <TIM_OC4_SetConfig+0x78>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a18      	ldr	r2, [pc, #96]	; (80048ec <TIM_OC4_SetConfig+0xc4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_OC4_SetConfig+0x78>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <TIM_OC4_SetConfig+0xc8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC4_SetConfig+0x78>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <TIM_OC4_SetConfig+0xcc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d109      	bne.n	80048b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <TIM_OC4_SetConfig+0xd0>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b006      	add	sp, #24
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	ffffefff 	.word	0xffffefff
 80048dc:	feff8fff 	.word	0xfeff8fff
 80048e0:	fffffcff 	.word	0xfffffcff
 80048e4:	ffffdfff 	.word	0xffffdfff
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	ffffbfff 	.word	0xffffbfff

080048fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <TIM_OC5_SetConfig+0xa4>)
 800490c:	401a      	ands	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <TIM_OC5_SetConfig+0xa8>)
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <TIM_OC5_SetConfig+0xac>)
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <TIM_OC5_SetConfig+0xb0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_OC5_SetConfig+0x6e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <TIM_OC5_SetConfig+0xb4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_OC5_SetConfig+0x6e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <TIM_OC5_SetConfig+0xb8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC5_SetConfig+0x6e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <TIM_OC5_SetConfig+0xbc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d109      	bne.n	800497e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <TIM_OC5_SetConfig+0xa4>)
 800496e:	4013      	ands	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b006      	add	sp, #24
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	fffeffff 	.word	0xfffeffff
 80049a4:	fffeff8f 	.word	0xfffeff8f
 80049a8:	fffdffff 	.word	0xfffdffff
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800

080049bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <TIM_OC6_SetConfig+0xa8>)
 80049cc:	401a      	ands	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <TIM_OC6_SetConfig+0xac>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <TIM_OC6_SetConfig+0xb0>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	051b      	lsls	r3, r3, #20
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <TIM_OC6_SetConfig+0xb4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <TIM_OC6_SetConfig+0x70>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <TIM_OC6_SetConfig+0xb8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <TIM_OC6_SetConfig+0x70>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <TIM_OC6_SetConfig+0xbc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC6_SetConfig+0x70>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <TIM_OC6_SetConfig+0xc0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d109      	bne.n	8004a40 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <TIM_OC6_SetConfig+0xc4>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b006      	add	sp, #24
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	ffefffff 	.word	0xffefffff
 8004a68:	feff8fff 	.word	0xfeff8fff
 8004a6c:	ffdfffff 	.word	0xffdfffff
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800
 8004a80:	fffbffff 	.word	0xfffbffff

08004a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	22f0      	movs	r2, #240	; 0xf0
 8004aae:	4393      	bics	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	220a      	movs	r2, #10
 8004ac0:	4393      	bics	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b006      	add	sp, #24
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2210      	movs	r2, #16
 8004af2:	4393      	bics	r3, r2
 8004af4:	001a      	movs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <TIM_TI2_ConfigInputStage+0x60>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	031b      	lsls	r3, r3, #12
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	22a0      	movs	r2, #160	; 0xa0
 8004b1c:	4393      	bics	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b006      	add	sp, #24
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	ffff0fff 	.word	0xffff0fff

08004b44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <TIM_ITRx_SetConfig+0x34>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	2207      	movs	r2, #7
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	ffcfff8f 	.word	0xffcfff8f

08004b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <TIM_ETR_SetConfig+0x3c>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	46c0      	nop			; (mov r8, r8)
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b006      	add	sp, #24
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	ffff00ff 	.word	0xffff00ff

08004bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	223c      	movs	r2, #60	; 0x3c
 8004bca:	5c9b      	ldrb	r3, [r3, r2]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e055      	b.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	223c      	movs	r2, #60	; 0x3c
 8004bd8:	2101      	movs	r1, #1
 8004bda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	223d      	movs	r2, #61	; 0x3d
 8004be0:	2102      	movs	r1, #2
 8004be2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2270      	movs	r2, #112	; 0x70
 8004c14:	4393      	bics	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00f      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	05db      	lsls	r3, r3, #23
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d009      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10c      	bne.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	4393      	bics	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	223d      	movs	r2, #61	; 0x3d
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	223c      	movs	r2, #60	; 0x3c
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	ff0fffff 	.word	0xff0fffff
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40014000 	.word	0x40014000

08004c98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	223c      	movs	r2, #60	; 0x3c
 8004caa:	5c9b      	ldrb	r3, [r3, r2]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e079      	b.n	8004da8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	223c      	movs	r2, #60	; 0x3c
 8004cb8:	2101      	movs	r1, #1
 8004cba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	22ff      	movs	r2, #255	; 0xff
 8004cc0:	4393      	bics	r3, r2
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	; (8004db4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004cde:	401a      	ands	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a33      	ldr	r2, [pc, #204]	; (8004db8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004cec:	401a      	ands	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a30      	ldr	r2, [pc, #192]	; (8004dbc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a2e      	ldr	r2, [pc, #184]	; (8004dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004d08:	401a      	ands	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004d16:	401a      	ands	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a29      	ldr	r2, [pc, #164]	; (8004dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004d24:	401a      	ands	r2, r3
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a25      	ldr	r2, [pc, #148]	; (8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d106      	bne.n	8004d48 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004d3e:	401a      	ands	r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d121      	bne.n	8004d96 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004d56:	401a      	ands	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004d66:	401a      	ands	r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004d74:	401a      	ands	r2, r3
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d106      	bne.n	8004d96 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	223c      	movs	r2, #60	; 0x3c
 8004da2:	2100      	movs	r1, #0
 8004da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	fffffcff 	.word	0xfffffcff
 8004db4:	fffffbff 	.word	0xfffffbff
 8004db8:	fffff7ff 	.word	0xfffff7ff
 8004dbc:	ffffefff 	.word	0xffffefff
 8004dc0:	ffffdfff 	.word	0xffffdfff
 8004dc4:	ffffbfff 	.word	0xffffbfff
 8004dc8:	fff0ffff 	.word	0xfff0ffff
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	efffffff 	.word	0xefffffff
 8004dd4:	ff0fffff 	.word	0xff0fffff
 8004dd8:	feffffff 	.word	0xfeffffff
 8004ddc:	fdffffff 	.word	0xfdffffff
 8004de0:	dfffffff 	.word	0xdfffffff

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <memset>:
 8004e14:	0003      	movs	r3, r0
 8004e16:	1882      	adds	r2, r0, r2
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <memset+0xa>
 8004e1c:	4770      	bx	lr
 8004e1e:	7019      	strb	r1, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	e7f9      	b.n	8004e18 <memset+0x4>

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	2600      	movs	r6, #0
 8004e28:	4c0c      	ldr	r4, [pc, #48]	; (8004e5c <__libc_init_array+0x38>)
 8004e2a:	4d0d      	ldr	r5, [pc, #52]	; (8004e60 <__libc_init_array+0x3c>)
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	2600      	movs	r6, #0
 8004e36:	f000 f819 	bl	8004e6c <_init>
 8004e3a:	4c0a      	ldr	r4, [pc, #40]	; (8004e64 <__libc_init_array+0x40>)
 8004e3c:	4d0a      	ldr	r5, [pc, #40]	; (8004e68 <__libc_init_array+0x44>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	00b3      	lsls	r3, r6, #2
 8004e4a:	58eb      	ldr	r3, [r5, r3]
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	00b3      	lsls	r3, r6, #2
 8004e54:	58eb      	ldr	r3, [r5, r3]
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	08004f18 	.word	0x08004f18
 8004e60:	08004f18 	.word	0x08004f18
 8004e64:	08004f1c 	.word	0x08004f1c
 8004e68:	08004f18 	.word	0x08004f18

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

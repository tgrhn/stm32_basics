
bb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b0c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c44  08004c44  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c44  08004c44  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c44  08004c44  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000001c  08004c68  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08004c68  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008081  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001956  00000000  00000000  00028108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  00029a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000619  00000000  00000000  0002a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001373a  00000000  00000000  0002a879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a904  00000000  00000000  0003dfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078f6e  00000000  00000000  000488b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d78  00000000  00000000  000c1828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c35a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004bac 	.word	0x08004bac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	08004bac 	.word	0x08004bac

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f001 f9e3 	bl	80017c0 <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f001 f943 	bl	800168c <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fdba 	bl	8000f88 <__aeabi_dsub>
 8000414:	f001 f93a 	bl	800168c <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_ddiv>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	4657      	mov	r7, sl
 800042c:	464e      	mov	r6, r9
 800042e:	4645      	mov	r5, r8
 8000430:	46de      	mov	lr, fp
 8000432:	b5e0      	push	{r5, r6, r7, lr}
 8000434:	030c      	lsls	r4, r1, #12
 8000436:	001f      	movs	r7, r3
 8000438:	004b      	lsls	r3, r1, #1
 800043a:	4681      	mov	r9, r0
 800043c:	4692      	mov	sl, r2
 800043e:	0005      	movs	r5, r0
 8000440:	b085      	sub	sp, #20
 8000442:	0b24      	lsrs	r4, r4, #12
 8000444:	0d5b      	lsrs	r3, r3, #21
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	2b00      	cmp	r3, #0
 800044a:	d100      	bne.n	800044e <__aeabi_ddiv+0x26>
 800044c:	e152      	b.n	80006f4 <__aeabi_ddiv+0x2cc>
 800044e:	4ad2      	ldr	r2, [pc, #840]	; (8000798 <__aeabi_ddiv+0x370>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x2e>
 8000454:	e16e      	b.n	8000734 <__aeabi_ddiv+0x30c>
 8000456:	0f42      	lsrs	r2, r0, #29
 8000458:	00e4      	lsls	r4, r4, #3
 800045a:	4314      	orrs	r4, r2
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	0412      	lsls	r2, r2, #16
 8000460:	4322      	orrs	r2, r4
 8000462:	4690      	mov	r8, r2
 8000464:	4acd      	ldr	r2, [pc, #820]	; (800079c <__aeabi_ddiv+0x374>)
 8000466:	00c5      	lsls	r5, r0, #3
 8000468:	4693      	mov	fp, r2
 800046a:	449b      	add	fp, r3
 800046c:	2300      	movs	r3, #0
 800046e:	4699      	mov	r9, r3
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	033c      	lsls	r4, r7, #12
 8000474:	007b      	lsls	r3, r7, #1
 8000476:	4650      	mov	r0, sl
 8000478:	0b24      	lsrs	r4, r4, #12
 800047a:	0d5b      	lsrs	r3, r3, #21
 800047c:	0fff      	lsrs	r7, r7, #31
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x5c>
 8000482:	e11a      	b.n	80006ba <__aeabi_ddiv+0x292>
 8000484:	4ac4      	ldr	r2, [pc, #784]	; (8000798 <__aeabi_ddiv+0x370>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x64>
 800048a:	e15e      	b.n	800074a <__aeabi_ddiv+0x322>
 800048c:	0f42      	lsrs	r2, r0, #29
 800048e:	00e4      	lsls	r4, r4, #3
 8000490:	4322      	orrs	r2, r4
 8000492:	2480      	movs	r4, #128	; 0x80
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	4314      	orrs	r4, r2
 8000498:	4ac0      	ldr	r2, [pc, #768]	; (800079c <__aeabi_ddiv+0x374>)
 800049a:	00c1      	lsls	r1, r0, #3
 800049c:	4694      	mov	ip, r2
 800049e:	465a      	mov	r2, fp
 80004a0:	4463      	add	r3, ip
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	469b      	mov	fp, r3
 80004a6:	2000      	movs	r0, #0
 80004a8:	0033      	movs	r3, r6
 80004aa:	407b      	eors	r3, r7
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d827      	bhi.n	8000504 <__aeabi_ddiv+0xdc>
 80004b4:	4aba      	ldr	r2, [pc, #744]	; (80007a0 <__aeabi_ddiv+0x378>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58d3      	ldr	r3, [r2, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	46b2      	mov	sl, r6
 80004be:	9b00      	ldr	r3, [sp, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d016      	beq.n	80004f2 <__aeabi_ddiv+0xca>
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xa2>
 80004c8:	e287      	b.n	80009da <__aeabi_ddiv+0x5b2>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d000      	beq.n	80004d0 <__aeabi_ddiv+0xa8>
 80004ce:	e0d5      	b.n	800067c <__aeabi_ddiv+0x254>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2200      	movs	r2, #0
 80004d4:	2500      	movs	r5, #0
 80004d6:	051b      	lsls	r3, r3, #20
 80004d8:	4313      	orrs	r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b005      	add	sp, #20
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2200      	movs	r2, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	4ba8      	ldr	r3, [pc, #672]	; (8000798 <__aeabi_ddiv+0x370>)
 80004f8:	e7ed      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80004fa:	46ba      	mov	sl, r7
 80004fc:	46a0      	mov	r8, r4
 80004fe:	000d      	movs	r5, r1
 8000500:	9000      	str	r0, [sp, #0]
 8000502:	e7dc      	b.n	80004be <__aeabi_ddiv+0x96>
 8000504:	4544      	cmp	r4, r8
 8000506:	d200      	bcs.n	800050a <__aeabi_ddiv+0xe2>
 8000508:	e1c4      	b.n	8000894 <__aeabi_ddiv+0x46c>
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe6>
 800050c:	e1bf      	b.n	800088e <__aeabi_ddiv+0x466>
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	469c      	mov	ip, r3
 8000514:	002e      	movs	r6, r5
 8000516:	4640      	mov	r0, r8
 8000518:	2500      	movs	r5, #0
 800051a:	44e3      	add	fp, ip
 800051c:	0223      	lsls	r3, r4, #8
 800051e:	0e0c      	lsrs	r4, r1, #24
 8000520:	431c      	orrs	r4, r3
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4699      	mov	r9, r3
 8000526:	0423      	lsls	r3, r4, #16
 8000528:	020a      	lsls	r2, r1, #8
 800052a:	0c1f      	lsrs	r7, r3, #16
 800052c:	4649      	mov	r1, r9
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9701      	str	r7, [sp, #4]
 8000532:	f7ff fe6b 	bl	800020c <__aeabi_uidivmod>
 8000536:	0002      	movs	r2, r0
 8000538:	437a      	muls	r2, r7
 800053a:	040b      	lsls	r3, r1, #16
 800053c:	0c31      	lsrs	r1, r6, #16
 800053e:	4680      	mov	r8, r0
 8000540:	4319      	orrs	r1, r3
 8000542:	428a      	cmp	r2, r1
 8000544:	d907      	bls.n	8000556 <__aeabi_ddiv+0x12e>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	1909      	adds	r1, r1, r4
 800054e:	44e0      	add	r8, ip
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x12e>
 8000554:	e201      	b.n	800095a <__aeabi_ddiv+0x532>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4649      	mov	r1, r9
 800055a:	f7ff fe57 	bl	800020c <__aeabi_uidivmod>
 800055e:	9a01      	ldr	r2, [sp, #4]
 8000560:	0436      	lsls	r6, r6, #16
 8000562:	4342      	muls	r2, r0
 8000564:	0409      	lsls	r1, r1, #16
 8000566:	0c36      	lsrs	r6, r6, #16
 8000568:	0003      	movs	r3, r0
 800056a:	430e      	orrs	r6, r1
 800056c:	42b2      	cmp	r2, r6
 800056e:	d904      	bls.n	800057a <__aeabi_ddiv+0x152>
 8000570:	1936      	adds	r6, r6, r4
 8000572:	3b01      	subs	r3, #1
 8000574:	42b4      	cmp	r4, r6
 8000576:	d800      	bhi.n	800057a <__aeabi_ddiv+0x152>
 8000578:	e1e9      	b.n	800094e <__aeabi_ddiv+0x526>
 800057a:	1ab0      	subs	r0, r6, r2
 800057c:	4642      	mov	r2, r8
 800057e:	9e00      	ldr	r6, [sp, #0]
 8000580:	0412      	lsls	r2, r2, #16
 8000582:	431a      	orrs	r2, r3
 8000584:	0c33      	lsrs	r3, r6, #16
 8000586:	001f      	movs	r7, r3
 8000588:	0c11      	lsrs	r1, r2, #16
 800058a:	4690      	mov	r8, r2
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	0413      	lsls	r3, r2, #16
 8000590:	0432      	lsls	r2, r6, #16
 8000592:	0c16      	lsrs	r6, r2, #16
 8000594:	0032      	movs	r2, r6
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	435a      	muls	r2, r3
 800059a:	9603      	str	r6, [sp, #12]
 800059c:	437b      	muls	r3, r7
 800059e:	434e      	muls	r6, r1
 80005a0:	4379      	muls	r1, r7
 80005a2:	0c17      	lsrs	r7, r2, #16
 80005a4:	46bc      	mov	ip, r7
 80005a6:	199b      	adds	r3, r3, r6
 80005a8:	4463      	add	r3, ip
 80005aa:	429e      	cmp	r6, r3
 80005ac:	d903      	bls.n	80005b6 <__aeabi_ddiv+0x18e>
 80005ae:	2680      	movs	r6, #128	; 0x80
 80005b0:	0276      	lsls	r6, r6, #9
 80005b2:	46b4      	mov	ip, r6
 80005b4:	4461      	add	r1, ip
 80005b6:	0c1e      	lsrs	r6, r3, #16
 80005b8:	1871      	adds	r1, r6, r1
 80005ba:	0416      	lsls	r6, r2, #16
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c36      	lsrs	r6, r6, #16
 80005c0:	199e      	adds	r6, r3, r6
 80005c2:	4288      	cmp	r0, r1
 80005c4:	d302      	bcc.n	80005cc <__aeabi_ddiv+0x1a4>
 80005c6:	d112      	bne.n	80005ee <__aeabi_ddiv+0x1c6>
 80005c8:	42b5      	cmp	r5, r6
 80005ca:	d210      	bcs.n	80005ee <__aeabi_ddiv+0x1c6>
 80005cc:	4643      	mov	r3, r8
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	469c      	mov	ip, r3
 80005d4:	4465      	add	r5, ip
 80005d6:	001f      	movs	r7, r3
 80005d8:	429d      	cmp	r5, r3
 80005da:	419b      	sbcs	r3, r3
 80005dc:	425b      	negs	r3, r3
 80005de:	191b      	adds	r3, r3, r4
 80005e0:	18c0      	adds	r0, r0, r3
 80005e2:	4284      	cmp	r4, r0
 80005e4:	d200      	bcs.n	80005e8 <__aeabi_ddiv+0x1c0>
 80005e6:	e19e      	b.n	8000926 <__aeabi_ddiv+0x4fe>
 80005e8:	d100      	bne.n	80005ec <__aeabi_ddiv+0x1c4>
 80005ea:	e199      	b.n	8000920 <__aeabi_ddiv+0x4f8>
 80005ec:	4690      	mov	r8, r2
 80005ee:	1bae      	subs	r6, r5, r6
 80005f0:	42b5      	cmp	r5, r6
 80005f2:	41ad      	sbcs	r5, r5
 80005f4:	1a40      	subs	r0, r0, r1
 80005f6:	426d      	negs	r5, r5
 80005f8:	1b40      	subs	r0, r0, r5
 80005fa:	4284      	cmp	r4, r0
 80005fc:	d100      	bne.n	8000600 <__aeabi_ddiv+0x1d8>
 80005fe:	e1d2      	b.n	80009a6 <__aeabi_ddiv+0x57e>
 8000600:	4649      	mov	r1, r9
 8000602:	f7ff fe03 	bl	800020c <__aeabi_uidivmod>
 8000606:	9a01      	ldr	r2, [sp, #4]
 8000608:	040b      	lsls	r3, r1, #16
 800060a:	4342      	muls	r2, r0
 800060c:	0c31      	lsrs	r1, r6, #16
 800060e:	0005      	movs	r5, r0
 8000610:	4319      	orrs	r1, r3
 8000612:	428a      	cmp	r2, r1
 8000614:	d900      	bls.n	8000618 <__aeabi_ddiv+0x1f0>
 8000616:	e16c      	b.n	80008f2 <__aeabi_ddiv+0x4ca>
 8000618:	1a88      	subs	r0, r1, r2
 800061a:	4649      	mov	r1, r9
 800061c:	f7ff fdf6 	bl	800020c <__aeabi_uidivmod>
 8000620:	9a01      	ldr	r2, [sp, #4]
 8000622:	0436      	lsls	r6, r6, #16
 8000624:	4342      	muls	r2, r0
 8000626:	0409      	lsls	r1, r1, #16
 8000628:	0c36      	lsrs	r6, r6, #16
 800062a:	0003      	movs	r3, r0
 800062c:	430e      	orrs	r6, r1
 800062e:	42b2      	cmp	r2, r6
 8000630:	d900      	bls.n	8000634 <__aeabi_ddiv+0x20c>
 8000632:	e153      	b.n	80008dc <__aeabi_ddiv+0x4b4>
 8000634:	9803      	ldr	r0, [sp, #12]
 8000636:	1ab6      	subs	r6, r6, r2
 8000638:	0002      	movs	r2, r0
 800063a:	042d      	lsls	r5, r5, #16
 800063c:	431d      	orrs	r5, r3
 800063e:	9f02      	ldr	r7, [sp, #8]
 8000640:	042b      	lsls	r3, r5, #16
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	435a      	muls	r2, r3
 8000646:	437b      	muls	r3, r7
 8000648:	469c      	mov	ip, r3
 800064a:	0c29      	lsrs	r1, r5, #16
 800064c:	4348      	muls	r0, r1
 800064e:	0c13      	lsrs	r3, r2, #16
 8000650:	4484      	add	ip, r0
 8000652:	4463      	add	r3, ip
 8000654:	4379      	muls	r1, r7
 8000656:	4298      	cmp	r0, r3
 8000658:	d903      	bls.n	8000662 <__aeabi_ddiv+0x23a>
 800065a:	2080      	movs	r0, #128	; 0x80
 800065c:	0240      	lsls	r0, r0, #9
 800065e:	4684      	mov	ip, r0
 8000660:	4461      	add	r1, ip
 8000662:	0c18      	lsrs	r0, r3, #16
 8000664:	0412      	lsls	r2, r2, #16
 8000666:	041b      	lsls	r3, r3, #16
 8000668:	0c12      	lsrs	r2, r2, #16
 800066a:	1840      	adds	r0, r0, r1
 800066c:	189b      	adds	r3, r3, r2
 800066e:	4286      	cmp	r6, r0
 8000670:	d200      	bcs.n	8000674 <__aeabi_ddiv+0x24c>
 8000672:	e100      	b.n	8000876 <__aeabi_ddiv+0x44e>
 8000674:	d100      	bne.n	8000678 <__aeabi_ddiv+0x250>
 8000676:	e0fb      	b.n	8000870 <__aeabi_ddiv+0x448>
 8000678:	2301      	movs	r3, #1
 800067a:	431d      	orrs	r5, r3
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <__aeabi_ddiv+0x37c>)
 800067e:	445b      	add	r3, fp
 8000680:	2b00      	cmp	r3, #0
 8000682:	dc00      	bgt.n	8000686 <__aeabi_ddiv+0x25e>
 8000684:	e0aa      	b.n	80007dc <__aeabi_ddiv+0x3b4>
 8000686:	076a      	lsls	r2, r5, #29
 8000688:	d000      	beq.n	800068c <__aeabi_ddiv+0x264>
 800068a:	e13d      	b.n	8000908 <__aeabi_ddiv+0x4e0>
 800068c:	08e9      	lsrs	r1, r5, #3
 800068e:	4642      	mov	r2, r8
 8000690:	01d2      	lsls	r2, r2, #7
 8000692:	d506      	bpl.n	80006a2 <__aeabi_ddiv+0x27a>
 8000694:	4642      	mov	r2, r8
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <__aeabi_ddiv+0x380>)
 8000698:	401a      	ands	r2, r3
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	4690      	mov	r8, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	445b      	add	r3, fp
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <__aeabi_ddiv+0x384>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	dd00      	ble.n	80006aa <__aeabi_ddiv+0x282>
 80006a8:	e723      	b.n	80004f2 <__aeabi_ddiv+0xca>
 80006aa:	4642      	mov	r2, r8
 80006ac:	055b      	lsls	r3, r3, #21
 80006ae:	0755      	lsls	r5, r2, #29
 80006b0:	0252      	lsls	r2, r2, #9
 80006b2:	430d      	orrs	r5, r1
 80006b4:	0b12      	lsrs	r2, r2, #12
 80006b6:	0d5b      	lsrs	r3, r3, #21
 80006b8:	e70d      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80006ba:	4651      	mov	r1, sl
 80006bc:	4321      	orrs	r1, r4
 80006be:	d100      	bne.n	80006c2 <__aeabi_ddiv+0x29a>
 80006c0:	e07c      	b.n	80007bc <__aeabi_ddiv+0x394>
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_ddiv+0x2a0>
 80006c6:	e0fb      	b.n	80008c0 <__aeabi_ddiv+0x498>
 80006c8:	0020      	movs	r0, r4
 80006ca:	f001 f883 	bl	80017d4 <__clzsi2>
 80006ce:	0002      	movs	r2, r0
 80006d0:	3a0b      	subs	r2, #11
 80006d2:	231d      	movs	r3, #29
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	4652      	mov	r2, sl
 80006d8:	0001      	movs	r1, r0
 80006da:	40da      	lsrs	r2, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	3908      	subs	r1, #8
 80006e0:	408b      	lsls	r3, r1
 80006e2:	408c      	lsls	r4, r1
 80006e4:	0019      	movs	r1, r3
 80006e6:	4314      	orrs	r4, r2
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <__aeabi_ddiv+0x388>)
 80006ea:	4458      	add	r0, fp
 80006ec:	469b      	mov	fp, r3
 80006ee:	4483      	add	fp, r0
 80006f0:	2000      	movs	r0, #0
 80006f2:	e6d9      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80006f4:	0003      	movs	r3, r0
 80006f6:	4323      	orrs	r3, r4
 80006f8:	4698      	mov	r8, r3
 80006fa:	d044      	beq.n	8000786 <__aeabi_ddiv+0x35e>
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_ddiv+0x2da>
 8000700:	e0cf      	b.n	80008a2 <__aeabi_ddiv+0x47a>
 8000702:	0020      	movs	r0, r4
 8000704:	f001 f866 	bl	80017d4 <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0002      	movs	r2, r0
 800070c:	390b      	subs	r1, #11
 800070e:	231d      	movs	r3, #29
 8000710:	1a5b      	subs	r3, r3, r1
 8000712:	4649      	mov	r1, r9
 8000714:	0010      	movs	r0, r2
 8000716:	40d9      	lsrs	r1, r3
 8000718:	3808      	subs	r0, #8
 800071a:	4084      	lsls	r4, r0
 800071c:	000b      	movs	r3, r1
 800071e:	464d      	mov	r5, r9
 8000720:	4323      	orrs	r3, r4
 8000722:	4698      	mov	r8, r3
 8000724:	4085      	lsls	r5, r0
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <__aeabi_ddiv+0x38c>)
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	469b      	mov	fp, r3
 800072c:	2300      	movs	r3, #0
 800072e:	4699      	mov	r9, r3
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	e69e      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000734:	0002      	movs	r2, r0
 8000736:	4322      	orrs	r2, r4
 8000738:	4690      	mov	r8, r2
 800073a:	d11d      	bne.n	8000778 <__aeabi_ddiv+0x350>
 800073c:	2208      	movs	r2, #8
 800073e:	469b      	mov	fp, r3
 8000740:	2302      	movs	r3, #2
 8000742:	2500      	movs	r5, #0
 8000744:	4691      	mov	r9, r2
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	e693      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800074a:	4651      	mov	r1, sl
 800074c:	4321      	orrs	r1, r4
 800074e:	d109      	bne.n	8000764 <__aeabi_ddiv+0x33c>
 8000750:	2302      	movs	r3, #2
 8000752:	464a      	mov	r2, r9
 8000754:	431a      	orrs	r2, r3
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <__aeabi_ddiv+0x390>)
 8000758:	4691      	mov	r9, r2
 800075a:	469c      	mov	ip, r3
 800075c:	2400      	movs	r4, #0
 800075e:	2002      	movs	r0, #2
 8000760:	44e3      	add	fp, ip
 8000762:	e6a1      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000764:	2303      	movs	r3, #3
 8000766:	464a      	mov	r2, r9
 8000768:	431a      	orrs	r2, r3
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <__aeabi_ddiv+0x390>)
 800076c:	4691      	mov	r9, r2
 800076e:	469c      	mov	ip, r3
 8000770:	4651      	mov	r1, sl
 8000772:	2003      	movs	r0, #3
 8000774:	44e3      	add	fp, ip
 8000776:	e697      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000778:	220c      	movs	r2, #12
 800077a:	469b      	mov	fp, r3
 800077c:	2303      	movs	r3, #3
 800077e:	46a0      	mov	r8, r4
 8000780:	4691      	mov	r9, r2
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	e675      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000786:	2304      	movs	r3, #4
 8000788:	4699      	mov	r9, r3
 800078a:	2300      	movs	r3, #0
 800078c:	469b      	mov	fp, r3
 800078e:	3301      	adds	r3, #1
 8000790:	2500      	movs	r5, #0
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	e66d      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	000007ff 	.word	0x000007ff
 800079c:	fffffc01 	.word	0xfffffc01
 80007a0:	08004bc4 	.word	0x08004bc4
 80007a4:	000003ff 	.word	0x000003ff
 80007a8:	feffffff 	.word	0xfeffffff
 80007ac:	000007fe 	.word	0x000007fe
 80007b0:	000003f3 	.word	0x000003f3
 80007b4:	fffffc0d 	.word	0xfffffc0d
 80007b8:	fffff801 	.word	0xfffff801
 80007bc:	464a      	mov	r2, r9
 80007be:	2301      	movs	r3, #1
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4691      	mov	r9, r2
 80007c4:	2400      	movs	r4, #0
 80007c6:	2001      	movs	r0, #1
 80007c8:	e66e      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	469a      	mov	sl, r3
 80007d0:	2500      	movs	r5, #0
 80007d2:	4b88      	ldr	r3, [pc, #544]	; (80009f4 <__aeabi_ddiv+0x5cc>)
 80007d4:	0312      	lsls	r2, r2, #12
 80007d6:	e67e      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80007d8:	2501      	movs	r5, #1
 80007da:	426d      	negs	r5, r5
 80007dc:	2201      	movs	r2, #1
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	2a38      	cmp	r2, #56	; 0x38
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_ddiv+0x3be>
 80007e4:	e674      	b.n	80004d0 <__aeabi_ddiv+0xa8>
 80007e6:	2a1f      	cmp	r2, #31
 80007e8:	dc00      	bgt.n	80007ec <__aeabi_ddiv+0x3c4>
 80007ea:	e0bd      	b.n	8000968 <__aeabi_ddiv+0x540>
 80007ec:	211f      	movs	r1, #31
 80007ee:	4249      	negs	r1, r1
 80007f0:	1acb      	subs	r3, r1, r3
 80007f2:	4641      	mov	r1, r8
 80007f4:	40d9      	lsrs	r1, r3
 80007f6:	000b      	movs	r3, r1
 80007f8:	2a20      	cmp	r2, #32
 80007fa:	d004      	beq.n	8000806 <__aeabi_ddiv+0x3de>
 80007fc:	4641      	mov	r1, r8
 80007fe:	4a7e      	ldr	r2, [pc, #504]	; (80009f8 <__aeabi_ddiv+0x5d0>)
 8000800:	445a      	add	r2, fp
 8000802:	4091      	lsls	r1, r2
 8000804:	430d      	orrs	r5, r1
 8000806:	0029      	movs	r1, r5
 8000808:	1e4a      	subs	r2, r1, #1
 800080a:	4191      	sbcs	r1, r2
 800080c:	4319      	orrs	r1, r3
 800080e:	2307      	movs	r3, #7
 8000810:	001d      	movs	r5, r3
 8000812:	2200      	movs	r2, #0
 8000814:	400d      	ands	r5, r1
 8000816:	420b      	tst	r3, r1
 8000818:	d100      	bne.n	800081c <__aeabi_ddiv+0x3f4>
 800081a:	e0d0      	b.n	80009be <__aeabi_ddiv+0x596>
 800081c:	220f      	movs	r2, #15
 800081e:	2300      	movs	r3, #0
 8000820:	400a      	ands	r2, r1
 8000822:	2a04      	cmp	r2, #4
 8000824:	d100      	bne.n	8000828 <__aeabi_ddiv+0x400>
 8000826:	e0c7      	b.n	80009b8 <__aeabi_ddiv+0x590>
 8000828:	1d0a      	adds	r2, r1, #4
 800082a:	428a      	cmp	r2, r1
 800082c:	4189      	sbcs	r1, r1
 800082e:	4249      	negs	r1, r1
 8000830:	185b      	adds	r3, r3, r1
 8000832:	0011      	movs	r1, r2
 8000834:	021a      	lsls	r2, r3, #8
 8000836:	d400      	bmi.n	800083a <__aeabi_ddiv+0x412>
 8000838:	e0be      	b.n	80009b8 <__aeabi_ddiv+0x590>
 800083a:	2301      	movs	r3, #1
 800083c:	2200      	movs	r2, #0
 800083e:	2500      	movs	r5, #0
 8000840:	e649      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	4643      	mov	r3, r8
 8000846:	0312      	lsls	r2, r2, #12
 8000848:	4213      	tst	r3, r2
 800084a:	d008      	beq.n	800085e <__aeabi_ddiv+0x436>
 800084c:	4214      	tst	r4, r2
 800084e:	d106      	bne.n	800085e <__aeabi_ddiv+0x436>
 8000850:	4322      	orrs	r2, r4
 8000852:	0312      	lsls	r2, r2, #12
 8000854:	46ba      	mov	sl, r7
 8000856:	000d      	movs	r5, r1
 8000858:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <__aeabi_ddiv+0x5cc>)
 800085a:	0b12      	lsrs	r2, r2, #12
 800085c:	e63b      	b.n	80004d6 <__aeabi_ddiv+0xae>
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	4643      	mov	r3, r8
 8000862:	0312      	lsls	r2, r2, #12
 8000864:	431a      	orrs	r2, r3
 8000866:	0312      	lsls	r2, r2, #12
 8000868:	46b2      	mov	sl, r6
 800086a:	4b62      	ldr	r3, [pc, #392]	; (80009f4 <__aeabi_ddiv+0x5cc>)
 800086c:	0b12      	lsrs	r2, r2, #12
 800086e:	e632      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_ddiv+0x44e>
 8000874:	e702      	b.n	800067c <__aeabi_ddiv+0x254>
 8000876:	19a6      	adds	r6, r4, r6
 8000878:	1e6a      	subs	r2, r5, #1
 800087a:	42a6      	cmp	r6, r4
 800087c:	d200      	bcs.n	8000880 <__aeabi_ddiv+0x458>
 800087e:	e089      	b.n	8000994 <__aeabi_ddiv+0x56c>
 8000880:	4286      	cmp	r6, r0
 8000882:	d200      	bcs.n	8000886 <__aeabi_ddiv+0x45e>
 8000884:	e09f      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 8000886:	d100      	bne.n	800088a <__aeabi_ddiv+0x462>
 8000888:	e0af      	b.n	80009ea <__aeabi_ddiv+0x5c2>
 800088a:	0015      	movs	r5, r2
 800088c:	e6f4      	b.n	8000678 <__aeabi_ddiv+0x250>
 800088e:	42a9      	cmp	r1, r5
 8000890:	d900      	bls.n	8000894 <__aeabi_ddiv+0x46c>
 8000892:	e63c      	b.n	800050e <__aeabi_ddiv+0xe6>
 8000894:	4643      	mov	r3, r8
 8000896:	07de      	lsls	r6, r3, #31
 8000898:	0858      	lsrs	r0, r3, #1
 800089a:	086b      	lsrs	r3, r5, #1
 800089c:	431e      	orrs	r6, r3
 800089e:	07ed      	lsls	r5, r5, #31
 80008a0:	e63c      	b.n	800051c <__aeabi_ddiv+0xf4>
 80008a2:	f000 ff97 	bl	80017d4 <__clzsi2>
 80008a6:	0001      	movs	r1, r0
 80008a8:	0002      	movs	r2, r0
 80008aa:	3115      	adds	r1, #21
 80008ac:	3220      	adds	r2, #32
 80008ae:	291c      	cmp	r1, #28
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_ddiv+0x48c>
 80008b2:	e72c      	b.n	800070e <__aeabi_ddiv+0x2e6>
 80008b4:	464b      	mov	r3, r9
 80008b6:	3808      	subs	r0, #8
 80008b8:	4083      	lsls	r3, r0
 80008ba:	2500      	movs	r5, #0
 80008bc:	4698      	mov	r8, r3
 80008be:	e732      	b.n	8000726 <__aeabi_ddiv+0x2fe>
 80008c0:	f000 ff88 	bl	80017d4 <__clzsi2>
 80008c4:	0003      	movs	r3, r0
 80008c6:	001a      	movs	r2, r3
 80008c8:	3215      	adds	r2, #21
 80008ca:	3020      	adds	r0, #32
 80008cc:	2a1c      	cmp	r2, #28
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_ddiv+0x4aa>
 80008d0:	e6ff      	b.n	80006d2 <__aeabi_ddiv+0x2aa>
 80008d2:	4654      	mov	r4, sl
 80008d4:	3b08      	subs	r3, #8
 80008d6:	2100      	movs	r1, #0
 80008d8:	409c      	lsls	r4, r3
 80008da:	e705      	b.n	80006e8 <__aeabi_ddiv+0x2c0>
 80008dc:	1936      	adds	r6, r6, r4
 80008de:	3b01      	subs	r3, #1
 80008e0:	42b4      	cmp	r4, r6
 80008e2:	d900      	bls.n	80008e6 <__aeabi_ddiv+0x4be>
 80008e4:	e6a6      	b.n	8000634 <__aeabi_ddiv+0x20c>
 80008e6:	42b2      	cmp	r2, r6
 80008e8:	d800      	bhi.n	80008ec <__aeabi_ddiv+0x4c4>
 80008ea:	e6a3      	b.n	8000634 <__aeabi_ddiv+0x20c>
 80008ec:	1e83      	subs	r3, r0, #2
 80008ee:	1936      	adds	r6, r6, r4
 80008f0:	e6a0      	b.n	8000634 <__aeabi_ddiv+0x20c>
 80008f2:	1909      	adds	r1, r1, r4
 80008f4:	3d01      	subs	r5, #1
 80008f6:	428c      	cmp	r4, r1
 80008f8:	d900      	bls.n	80008fc <__aeabi_ddiv+0x4d4>
 80008fa:	e68d      	b.n	8000618 <__aeabi_ddiv+0x1f0>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	d800      	bhi.n	8000902 <__aeabi_ddiv+0x4da>
 8000900:	e68a      	b.n	8000618 <__aeabi_ddiv+0x1f0>
 8000902:	1e85      	subs	r5, r0, #2
 8000904:	1909      	adds	r1, r1, r4
 8000906:	e687      	b.n	8000618 <__aeabi_ddiv+0x1f0>
 8000908:	220f      	movs	r2, #15
 800090a:	402a      	ands	r2, r5
 800090c:	2a04      	cmp	r2, #4
 800090e:	d100      	bne.n	8000912 <__aeabi_ddiv+0x4ea>
 8000910:	e6bc      	b.n	800068c <__aeabi_ddiv+0x264>
 8000912:	1d29      	adds	r1, r5, #4
 8000914:	42a9      	cmp	r1, r5
 8000916:	41ad      	sbcs	r5, r5
 8000918:	426d      	negs	r5, r5
 800091a:	08c9      	lsrs	r1, r1, #3
 800091c:	44a8      	add	r8, r5
 800091e:	e6b6      	b.n	800068e <__aeabi_ddiv+0x266>
 8000920:	42af      	cmp	r7, r5
 8000922:	d900      	bls.n	8000926 <__aeabi_ddiv+0x4fe>
 8000924:	e662      	b.n	80005ec <__aeabi_ddiv+0x1c4>
 8000926:	4281      	cmp	r1, r0
 8000928:	d804      	bhi.n	8000934 <__aeabi_ddiv+0x50c>
 800092a:	d000      	beq.n	800092e <__aeabi_ddiv+0x506>
 800092c:	e65e      	b.n	80005ec <__aeabi_ddiv+0x1c4>
 800092e:	42ae      	cmp	r6, r5
 8000930:	d800      	bhi.n	8000934 <__aeabi_ddiv+0x50c>
 8000932:	e65b      	b.n	80005ec <__aeabi_ddiv+0x1c4>
 8000934:	2302      	movs	r3, #2
 8000936:	425b      	negs	r3, r3
 8000938:	469c      	mov	ip, r3
 800093a:	9b00      	ldr	r3, [sp, #0]
 800093c:	44e0      	add	r8, ip
 800093e:	469c      	mov	ip, r3
 8000940:	4465      	add	r5, ip
 8000942:	429d      	cmp	r5, r3
 8000944:	419b      	sbcs	r3, r3
 8000946:	425b      	negs	r3, r3
 8000948:	191b      	adds	r3, r3, r4
 800094a:	18c0      	adds	r0, r0, r3
 800094c:	e64f      	b.n	80005ee <__aeabi_ddiv+0x1c6>
 800094e:	42b2      	cmp	r2, r6
 8000950:	d800      	bhi.n	8000954 <__aeabi_ddiv+0x52c>
 8000952:	e612      	b.n	800057a <__aeabi_ddiv+0x152>
 8000954:	1e83      	subs	r3, r0, #2
 8000956:	1936      	adds	r6, r6, r4
 8000958:	e60f      	b.n	800057a <__aeabi_ddiv+0x152>
 800095a:	428a      	cmp	r2, r1
 800095c:	d800      	bhi.n	8000960 <__aeabi_ddiv+0x538>
 800095e:	e5fa      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000960:	1e83      	subs	r3, r0, #2
 8000962:	4698      	mov	r8, r3
 8000964:	1909      	adds	r1, r1, r4
 8000966:	e5f6      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <__aeabi_ddiv+0x5d4>)
 800096a:	0028      	movs	r0, r5
 800096c:	445b      	add	r3, fp
 800096e:	4641      	mov	r1, r8
 8000970:	409d      	lsls	r5, r3
 8000972:	4099      	lsls	r1, r3
 8000974:	40d0      	lsrs	r0, r2
 8000976:	1e6b      	subs	r3, r5, #1
 8000978:	419d      	sbcs	r5, r3
 800097a:	4643      	mov	r3, r8
 800097c:	4301      	orrs	r1, r0
 800097e:	4329      	orrs	r1, r5
 8000980:	40d3      	lsrs	r3, r2
 8000982:	074a      	lsls	r2, r1, #29
 8000984:	d100      	bne.n	8000988 <__aeabi_ddiv+0x560>
 8000986:	e755      	b.n	8000834 <__aeabi_ddiv+0x40c>
 8000988:	220f      	movs	r2, #15
 800098a:	400a      	ands	r2, r1
 800098c:	2a04      	cmp	r2, #4
 800098e:	d000      	beq.n	8000992 <__aeabi_ddiv+0x56a>
 8000990:	e74a      	b.n	8000828 <__aeabi_ddiv+0x400>
 8000992:	e74f      	b.n	8000834 <__aeabi_ddiv+0x40c>
 8000994:	0015      	movs	r5, r2
 8000996:	4286      	cmp	r6, r0
 8000998:	d000      	beq.n	800099c <__aeabi_ddiv+0x574>
 800099a:	e66d      	b.n	8000678 <__aeabi_ddiv+0x250>
 800099c:	9a00      	ldr	r2, [sp, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d000      	beq.n	80009a4 <__aeabi_ddiv+0x57c>
 80009a2:	e669      	b.n	8000678 <__aeabi_ddiv+0x250>
 80009a4:	e66a      	b.n	800067c <__aeabi_ddiv+0x254>
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <__aeabi_ddiv+0x5d8>)
 80009a8:	445b      	add	r3, fp
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dc00      	bgt.n	80009b0 <__aeabi_ddiv+0x588>
 80009ae:	e713      	b.n	80007d8 <__aeabi_ddiv+0x3b0>
 80009b0:	2501      	movs	r5, #1
 80009b2:	2100      	movs	r1, #0
 80009b4:	44a8      	add	r8, r5
 80009b6:	e66a      	b.n	800068e <__aeabi_ddiv+0x266>
 80009b8:	075d      	lsls	r5, r3, #29
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	0b1a      	lsrs	r2, r3, #12
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	2300      	movs	r3, #0
 80009c2:	430d      	orrs	r5, r1
 80009c4:	e587      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009c6:	9900      	ldr	r1, [sp, #0]
 80009c8:	3d02      	subs	r5, #2
 80009ca:	004a      	lsls	r2, r1, #1
 80009cc:	428a      	cmp	r2, r1
 80009ce:	41bf      	sbcs	r7, r7
 80009d0:	427f      	negs	r7, r7
 80009d2:	193f      	adds	r7, r7, r4
 80009d4:	19f6      	adds	r6, r6, r7
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	e7dd      	b.n	8000996 <__aeabi_ddiv+0x56e>
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	4643      	mov	r3, r8
 80009de:	0312      	lsls	r2, r2, #12
 80009e0:	431a      	orrs	r2, r3
 80009e2:	0312      	lsls	r2, r2, #12
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <__aeabi_ddiv+0x5cc>)
 80009e6:	0b12      	lsrs	r2, r2, #12
 80009e8:	e575      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009ea:	9900      	ldr	r1, [sp, #0]
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d3ea      	bcc.n	80009c6 <__aeabi_ddiv+0x59e>
 80009f0:	0015      	movs	r5, r2
 80009f2:	e7d3      	b.n	800099c <__aeabi_ddiv+0x574>
 80009f4:	000007ff 	.word	0x000007ff
 80009f8:	0000043e 	.word	0x0000043e
 80009fc:	0000041e 	.word	0x0000041e
 8000a00:	000003ff 	.word	0x000003ff

08000a04 <__aeabi_dmul>:
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	4645      	mov	r5, r8
 8000a08:	46de      	mov	lr, fp
 8000a0a:	4657      	mov	r7, sl
 8000a0c:	464e      	mov	r6, r9
 8000a0e:	b5e0      	push	{r5, r6, r7, lr}
 8000a10:	001f      	movs	r7, r3
 8000a12:	030b      	lsls	r3, r1, #12
 8000a14:	0b1b      	lsrs	r3, r3, #12
 8000a16:	469b      	mov	fp, r3
 8000a18:	004d      	lsls	r5, r1, #1
 8000a1a:	0fcb      	lsrs	r3, r1, #31
 8000a1c:	0004      	movs	r4, r0
 8000a1e:	4691      	mov	r9, r2
 8000a20:	4698      	mov	r8, r3
 8000a22:	b087      	sub	sp, #28
 8000a24:	0d6d      	lsrs	r5, r5, #21
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dmul+0x26>
 8000a28:	e1cd      	b.n	8000dc6 <__aeabi_dmul+0x3c2>
 8000a2a:	4bce      	ldr	r3, [pc, #824]	; (8000d64 <__aeabi_dmul+0x360>)
 8000a2c:	429d      	cmp	r5, r3
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dmul+0x2e>
 8000a30:	e1e9      	b.n	8000e06 <__aeabi_dmul+0x402>
 8000a32:	465a      	mov	r2, fp
 8000a34:	0f43      	lsrs	r3, r0, #29
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	0412      	lsls	r2, r2, #16
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	00c3      	lsls	r3, r0, #3
 8000a42:	469a      	mov	sl, r3
 8000a44:	4bc8      	ldr	r3, [pc, #800]	; (8000d68 <__aeabi_dmul+0x364>)
 8000a46:	4693      	mov	fp, r2
 8000a48:	469c      	mov	ip, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	4465      	add	r5, ip
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	033c      	lsls	r4, r7, #12
 8000a54:	007b      	lsls	r3, r7, #1
 8000a56:	4648      	mov	r0, r9
 8000a58:	0b24      	lsrs	r4, r4, #12
 8000a5a:	0d5b      	lsrs	r3, r3, #21
 8000a5c:	0fff      	lsrs	r7, r7, #31
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dmul+0x60>
 8000a62:	e189      	b.n	8000d78 <__aeabi_dmul+0x374>
 8000a64:	4abf      	ldr	r2, [pc, #764]	; (8000d64 <__aeabi_dmul+0x360>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <__aeabi_dmul+0x9a>
 8000a6a:	0f42      	lsrs	r2, r0, #29
 8000a6c:	00e4      	lsls	r4, r4, #3
 8000a6e:	4322      	orrs	r2, r4
 8000a70:	2480      	movs	r4, #128	; 0x80
 8000a72:	0424      	lsls	r4, r4, #16
 8000a74:	4314      	orrs	r4, r2
 8000a76:	4abc      	ldr	r2, [pc, #752]	; (8000d68 <__aeabi_dmul+0x364>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4694      	mov	ip, r2
 8000a7c:	4642      	mov	r2, r8
 8000a7e:	4463      	add	r3, ip
 8000a80:	195b      	adds	r3, r3, r5
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	9b01      	ldr	r3, [sp, #4]
 8000a86:	407a      	eors	r2, r7
 8000a88:	3301      	adds	r3, #1
 8000a8a:	00c0      	lsls	r0, r0, #3
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2e0a      	cmp	r6, #10
 8000a92:	dd1c      	ble.n	8000ace <__aeabi_dmul+0xca>
 8000a94:	003a      	movs	r2, r7
 8000a96:	2e0b      	cmp	r6, #11
 8000a98:	d05e      	beq.n	8000b58 <__aeabi_dmul+0x154>
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	e056      	b.n	8000b4c <__aeabi_dmul+0x148>
 8000a9e:	4649      	mov	r1, r9
 8000aa0:	4bb0      	ldr	r3, [pc, #704]	; (8000d64 <__aeabi_dmul+0x360>)
 8000aa2:	4321      	orrs	r1, r4
 8000aa4:	18eb      	adds	r3, r5, r3
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d12a      	bne.n	8000b02 <__aeabi_dmul+0xfe>
 8000aac:	2080      	movs	r0, #128	; 0x80
 8000aae:	2202      	movs	r2, #2
 8000ab0:	0100      	lsls	r0, r0, #4
 8000ab2:	002b      	movs	r3, r5
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	4316      	orrs	r6, r2
 8000ab8:	4642      	mov	r2, r8
 8000aba:	4463      	add	r3, ip
 8000abc:	407a      	eors	r2, r7
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2e0a      	cmp	r6, #10
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_dmul+0xc4>
 8000ac6:	e231      	b.n	8000f2c <__aeabi_dmul+0x528>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	2400      	movs	r4, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	2e02      	cmp	r6, #2
 8000ad0:	dc26      	bgt.n	8000b20 <__aeabi_dmul+0x11c>
 8000ad2:	3e01      	subs	r6, #1
 8000ad4:	2e01      	cmp	r6, #1
 8000ad6:	d852      	bhi.n	8000b7e <__aeabi_dmul+0x17a>
 8000ad8:	2902      	cmp	r1, #2
 8000ada:	d04c      	beq.n	8000b76 <__aeabi_dmul+0x172>
 8000adc:	2901      	cmp	r1, #1
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_dmul+0xde>
 8000ae0:	e118      	b.n	8000d14 <__aeabi_dmul+0x310>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	2500      	movs	r5, #0
 8000ae8:	051b      	lsls	r3, r3, #20
 8000aea:	4323      	orrs	r3, r4
 8000aec:	07d2      	lsls	r2, r2, #31
 8000aee:	4313      	orrs	r3, r2
 8000af0:	0028      	movs	r0, r5
 8000af2:	0019      	movs	r1, r3
 8000af4:	b007      	add	sp, #28
 8000af6:	bcf0      	pop	{r4, r5, r6, r7}
 8000af8:	46bb      	mov	fp, r7
 8000afa:	46b2      	mov	sl, r6
 8000afc:	46a9      	mov	r9, r5
 8000afe:	46a0      	mov	r8, r4
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	2203      	movs	r2, #3
 8000b06:	0109      	lsls	r1, r1, #4
 8000b08:	002b      	movs	r3, r5
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4316      	orrs	r6, r2
 8000b0e:	4642      	mov	r2, r8
 8000b10:	4463      	add	r3, ip
 8000b12:	407a      	eors	r2, r7
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	2e0a      	cmp	r6, #10
 8000b1a:	dd00      	ble.n	8000b1e <__aeabi_dmul+0x11a>
 8000b1c:	e228      	b.n	8000f70 <__aeabi_dmul+0x56c>
 8000b1e:	2103      	movs	r1, #3
 8000b20:	2501      	movs	r5, #1
 8000b22:	40b5      	lsls	r5, r6
 8000b24:	46ac      	mov	ip, r5
 8000b26:	26a6      	movs	r6, #166	; 0xa6
 8000b28:	4663      	mov	r3, ip
 8000b2a:	00f6      	lsls	r6, r6, #3
 8000b2c:	4035      	ands	r5, r6
 8000b2e:	4233      	tst	r3, r6
 8000b30:	d10b      	bne.n	8000b4a <__aeabi_dmul+0x146>
 8000b32:	2690      	movs	r6, #144	; 0x90
 8000b34:	00b6      	lsls	r6, r6, #2
 8000b36:	4233      	tst	r3, r6
 8000b38:	d118      	bne.n	8000b6c <__aeabi_dmul+0x168>
 8000b3a:	3eb9      	subs	r6, #185	; 0xb9
 8000b3c:	3eff      	subs	r6, #255	; 0xff
 8000b3e:	421e      	tst	r6, r3
 8000b40:	d01d      	beq.n	8000b7e <__aeabi_dmul+0x17a>
 8000b42:	46a3      	mov	fp, r4
 8000b44:	4682      	mov	sl, r0
 8000b46:	9100      	str	r1, [sp, #0]
 8000b48:	e000      	b.n	8000b4c <__aeabi_dmul+0x148>
 8000b4a:	0017      	movs	r7, r2
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	003a      	movs	r2, r7
 8000b50:	2902      	cmp	r1, #2
 8000b52:	d010      	beq.n	8000b76 <__aeabi_dmul+0x172>
 8000b54:	465c      	mov	r4, fp
 8000b56:	4650      	mov	r0, sl
 8000b58:	2903      	cmp	r1, #3
 8000b5a:	d1bf      	bne.n	8000adc <__aeabi_dmul+0xd8>
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	031b      	lsls	r3, r3, #12
 8000b60:	431c      	orrs	r4, r3
 8000b62:	0324      	lsls	r4, r4, #12
 8000b64:	0005      	movs	r5, r0
 8000b66:	4b7f      	ldr	r3, [pc, #508]	; (8000d64 <__aeabi_dmul+0x360>)
 8000b68:	0b24      	lsrs	r4, r4, #12
 8000b6a:	e7bd      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000b6c:	2480      	movs	r4, #128	; 0x80
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4b7c      	ldr	r3, [pc, #496]	; (8000d64 <__aeabi_dmul+0x360>)
 8000b72:	0324      	lsls	r4, r4, #12
 8000b74:	e7b8      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000b76:	2400      	movs	r4, #0
 8000b78:	2500      	movs	r5, #0
 8000b7a:	4b7a      	ldr	r3, [pc, #488]	; (8000d64 <__aeabi_dmul+0x360>)
 8000b7c:	e7b4      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000b7e:	4653      	mov	r3, sl
 8000b80:	041e      	lsls	r6, r3, #16
 8000b82:	0c36      	lsrs	r6, r6, #16
 8000b84:	0c1f      	lsrs	r7, r3, #16
 8000b86:	0033      	movs	r3, r6
 8000b88:	0c01      	lsrs	r1, r0, #16
 8000b8a:	0400      	lsls	r0, r0, #16
 8000b8c:	0c00      	lsrs	r0, r0, #16
 8000b8e:	4343      	muls	r3, r0
 8000b90:	4698      	mov	r8, r3
 8000b92:	0003      	movs	r3, r0
 8000b94:	437b      	muls	r3, r7
 8000b96:	4699      	mov	r9, r3
 8000b98:	0033      	movs	r3, r6
 8000b9a:	434b      	muls	r3, r1
 8000b9c:	469c      	mov	ip, r3
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	000d      	movs	r5, r1
 8000ba2:	0c1b      	lsrs	r3, r3, #16
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	437d      	muls	r5, r7
 8000ba8:	44cc      	add	ip, r9
 8000baa:	44d4      	add	ip, sl
 8000bac:	9500      	str	r5, [sp, #0]
 8000bae:	45e1      	cmp	r9, ip
 8000bb0:	d904      	bls.n	8000bbc <__aeabi_dmul+0x1b8>
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	444d      	add	r5, r9
 8000bba:	9500      	str	r5, [sp, #0]
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	0c1b      	lsrs	r3, r3, #16
 8000bc0:	001d      	movs	r5, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	041b      	lsls	r3, r3, #16
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	4643      	mov	r3, r8
 8000bca:	041b      	lsls	r3, r3, #16
 8000bcc:	0c1b      	lsrs	r3, r3, #16
 8000bce:	4698      	mov	r8, r3
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	4443      	add	r3, r8
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	4698      	mov	r8, r3
 8000bda:	0033      	movs	r3, r6
 8000bdc:	0424      	lsls	r4, r4, #16
 8000bde:	0c24      	lsrs	r4, r4, #16
 8000be0:	4363      	muls	r3, r4
 8000be2:	469c      	mov	ip, r3
 8000be4:	0023      	movs	r3, r4
 8000be6:	437b      	muls	r3, r7
 8000be8:	4699      	mov	r9, r3
 8000bea:	4643      	mov	r3, r8
 8000bec:	435e      	muls	r6, r3
 8000bee:	435f      	muls	r7, r3
 8000bf0:	444e      	add	r6, r9
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	46b2      	mov	sl, r6
 8000bf6:	0c1e      	lsrs	r6, r3, #16
 8000bf8:	4456      	add	r6, sl
 8000bfa:	45b1      	cmp	r9, r6
 8000bfc:	d903      	bls.n	8000c06 <__aeabi_dmul+0x202>
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	025b      	lsls	r3, r3, #9
 8000c02:	4699      	mov	r9, r3
 8000c04:	444f      	add	r7, r9
 8000c06:	0c33      	lsrs	r3, r6, #16
 8000c08:	4699      	mov	r9, r3
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	444b      	add	r3, r9
 8000c0e:	9305      	str	r3, [sp, #20]
 8000c10:	4663      	mov	r3, ip
 8000c12:	46ac      	mov	ip, r5
 8000c14:	041f      	lsls	r7, r3, #16
 8000c16:	0c3f      	lsrs	r7, r7, #16
 8000c18:	0436      	lsls	r6, r6, #16
 8000c1a:	19f6      	adds	r6, r6, r7
 8000c1c:	44b4      	add	ip, r6
 8000c1e:	4663      	mov	r3, ip
 8000c20:	9304      	str	r3, [sp, #16]
 8000c22:	465b      	mov	r3, fp
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	469c      	mov	ip, r3
 8000c28:	465b      	mov	r3, fp
 8000c2a:	041f      	lsls	r7, r3, #16
 8000c2c:	0c3f      	lsrs	r7, r7, #16
 8000c2e:	003b      	movs	r3, r7
 8000c30:	4343      	muls	r3, r0
 8000c32:	4699      	mov	r9, r3
 8000c34:	4663      	mov	r3, ip
 8000c36:	4343      	muls	r3, r0
 8000c38:	469a      	mov	sl, r3
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4660      	mov	r0, ip
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	469b      	mov	fp, r3
 8000c42:	4348      	muls	r0, r1
 8000c44:	4379      	muls	r1, r7
 8000c46:	4451      	add	r1, sl
 8000c48:	4459      	add	r1, fp
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d903      	bls.n	8000c56 <__aeabi_dmul+0x252>
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	469a      	mov	sl, r3
 8000c54:	4450      	add	r0, sl
 8000c56:	0c0b      	lsrs	r3, r1, #16
 8000c58:	469a      	mov	sl, r3
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	041b      	lsls	r3, r3, #16
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	4699      	mov	r9, r3
 8000c62:	003b      	movs	r3, r7
 8000c64:	4363      	muls	r3, r4
 8000c66:	0409      	lsls	r1, r1, #16
 8000c68:	4645      	mov	r5, r8
 8000c6a:	4449      	add	r1, r9
 8000c6c:	4699      	mov	r9, r3
 8000c6e:	4663      	mov	r3, ip
 8000c70:	435c      	muls	r4, r3
 8000c72:	436b      	muls	r3, r5
 8000c74:	469c      	mov	ip, r3
 8000c76:	464b      	mov	r3, r9
 8000c78:	0c1b      	lsrs	r3, r3, #16
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	436f      	muls	r7, r5
 8000c7e:	193f      	adds	r7, r7, r4
 8000c80:	4447      	add	r7, r8
 8000c82:	4450      	add	r0, sl
 8000c84:	42bc      	cmp	r4, r7
 8000c86:	d903      	bls.n	8000c90 <__aeabi_dmul+0x28c>
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	4698      	mov	r8, r3
 8000c8e:	44c4      	add	ip, r8
 8000c90:	9b04      	ldr	r3, [sp, #16]
 8000c92:	9d00      	ldr	r5, [sp, #0]
 8000c94:	4698      	mov	r8, r3
 8000c96:	4445      	add	r5, r8
 8000c98:	42b5      	cmp	r5, r6
 8000c9a:	41b6      	sbcs	r6, r6
 8000c9c:	4273      	negs	r3, r6
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	041e      	lsls	r6, r3, #16
 8000ca4:	9b05      	ldr	r3, [sp, #20]
 8000ca6:	043c      	lsls	r4, r7, #16
 8000ca8:	4699      	mov	r9, r3
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	19a4      	adds	r4, r4, r6
 8000cae:	444c      	add	r4, r9
 8000cb0:	46a1      	mov	r9, r4
 8000cb2:	4683      	mov	fp, r0
 8000cb4:	186e      	adds	r6, r5, r1
 8000cb6:	44c1      	add	r9, r8
 8000cb8:	428e      	cmp	r6, r1
 8000cba:	4189      	sbcs	r1, r1
 8000cbc:	44cb      	add	fp, r9
 8000cbe:	465d      	mov	r5, fp
 8000cc0:	4249      	negs	r1, r1
 8000cc2:	186d      	adds	r5, r5, r1
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	41a4      	sbcs	r4, r4
 8000cc8:	45c1      	cmp	r9, r8
 8000cca:	419b      	sbcs	r3, r3
 8000ccc:	4583      	cmp	fp, r0
 8000cce:	4180      	sbcs	r0, r0
 8000cd0:	428d      	cmp	r5, r1
 8000cd2:	4189      	sbcs	r1, r1
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	4264      	negs	r4, r4
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	4240      	negs	r0, r0
 8000cdc:	9b03      	ldr	r3, [sp, #12]
 8000cde:	4249      	negs	r1, r1
 8000ce0:	4301      	orrs	r1, r0
 8000ce2:	0270      	lsls	r0, r6, #9
 8000ce4:	0c3f      	lsrs	r7, r7, #16
 8000ce6:	4318      	orrs	r0, r3
 8000ce8:	19e4      	adds	r4, r4, r7
 8000cea:	1e47      	subs	r7, r0, #1
 8000cec:	41b8      	sbcs	r0, r7
 8000cee:	1864      	adds	r4, r4, r1
 8000cf0:	4464      	add	r4, ip
 8000cf2:	0df6      	lsrs	r6, r6, #23
 8000cf4:	0261      	lsls	r1, r4, #9
 8000cf6:	4330      	orrs	r0, r6
 8000cf8:	0dec      	lsrs	r4, r5, #23
 8000cfa:	026e      	lsls	r6, r5, #9
 8000cfc:	430c      	orrs	r4, r1
 8000cfe:	4330      	orrs	r0, r6
 8000d00:	01c9      	lsls	r1, r1, #7
 8000d02:	d400      	bmi.n	8000d06 <__aeabi_dmul+0x302>
 8000d04:	e0f1      	b.n	8000eea <__aeabi_dmul+0x4e6>
 8000d06:	2101      	movs	r1, #1
 8000d08:	0843      	lsrs	r3, r0, #1
 8000d0a:	4001      	ands	r1, r0
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	07e0      	lsls	r0, r4, #31
 8000d10:	4318      	orrs	r0, r3
 8000d12:	0864      	lsrs	r4, r4, #1
 8000d14:	4915      	ldr	r1, [pc, #84]	; (8000d6c <__aeabi_dmul+0x368>)
 8000d16:	9b02      	ldr	r3, [sp, #8]
 8000d18:	468c      	mov	ip, r1
 8000d1a:	4463      	add	r3, ip
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dc00      	bgt.n	8000d22 <__aeabi_dmul+0x31e>
 8000d20:	e097      	b.n	8000e52 <__aeabi_dmul+0x44e>
 8000d22:	0741      	lsls	r1, r0, #29
 8000d24:	d009      	beq.n	8000d3a <__aeabi_dmul+0x336>
 8000d26:	210f      	movs	r1, #15
 8000d28:	4001      	ands	r1, r0
 8000d2a:	2904      	cmp	r1, #4
 8000d2c:	d005      	beq.n	8000d3a <__aeabi_dmul+0x336>
 8000d2e:	1d01      	adds	r1, r0, #4
 8000d30:	4281      	cmp	r1, r0
 8000d32:	4180      	sbcs	r0, r0
 8000d34:	4240      	negs	r0, r0
 8000d36:	1824      	adds	r4, r4, r0
 8000d38:	0008      	movs	r0, r1
 8000d3a:	01e1      	lsls	r1, r4, #7
 8000d3c:	d506      	bpl.n	8000d4c <__aeabi_dmul+0x348>
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	00c9      	lsls	r1, r1, #3
 8000d42:	468c      	mov	ip, r1
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <__aeabi_dmul+0x36c>)
 8000d46:	401c      	ands	r4, r3
 8000d48:	9b02      	ldr	r3, [sp, #8]
 8000d4a:	4463      	add	r3, ip
 8000d4c:	4909      	ldr	r1, [pc, #36]	; (8000d74 <__aeabi_dmul+0x370>)
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	dd00      	ble.n	8000d54 <__aeabi_dmul+0x350>
 8000d52:	e710      	b.n	8000b76 <__aeabi_dmul+0x172>
 8000d54:	0761      	lsls	r1, r4, #29
 8000d56:	08c5      	lsrs	r5, r0, #3
 8000d58:	0264      	lsls	r4, r4, #9
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	430d      	orrs	r5, r1
 8000d5e:	0b24      	lsrs	r4, r4, #12
 8000d60:	0d5b      	lsrs	r3, r3, #21
 8000d62:	e6c1      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000d64:	000007ff 	.word	0x000007ff
 8000d68:	fffffc01 	.word	0xfffffc01
 8000d6c:	000003ff 	.word	0x000003ff
 8000d70:	feffffff 	.word	0xfeffffff
 8000d74:	000007fe 	.word	0x000007fe
 8000d78:	464b      	mov	r3, r9
 8000d7a:	4323      	orrs	r3, r4
 8000d7c:	d059      	beq.n	8000e32 <__aeabi_dmul+0x42e>
 8000d7e:	2c00      	cmp	r4, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dmul+0x380>
 8000d82:	e0a3      	b.n	8000ecc <__aeabi_dmul+0x4c8>
 8000d84:	0020      	movs	r0, r4
 8000d86:	f000 fd25 	bl	80017d4 <__clzsi2>
 8000d8a:	0001      	movs	r1, r0
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	390b      	subs	r1, #11
 8000d90:	221d      	movs	r2, #29
 8000d92:	1a52      	subs	r2, r2, r1
 8000d94:	4649      	mov	r1, r9
 8000d96:	0018      	movs	r0, r3
 8000d98:	40d1      	lsrs	r1, r2
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	3808      	subs	r0, #8
 8000d9e:	4082      	lsls	r2, r0
 8000da0:	4084      	lsls	r4, r0
 8000da2:	0010      	movs	r0, r2
 8000da4:	430c      	orrs	r4, r1
 8000da6:	4a74      	ldr	r2, [pc, #464]	; (8000f78 <__aeabi_dmul+0x574>)
 8000da8:	1aeb      	subs	r3, r5, r3
 8000daa:	4694      	mov	ip, r2
 8000dac:	4642      	mov	r2, r8
 8000dae:	4463      	add	r3, ip
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	9b01      	ldr	r3, [sp, #4]
 8000db4:	407a      	eors	r2, r7
 8000db6:	3301      	adds	r3, #1
 8000db8:	2100      	movs	r1, #0
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	2e0a      	cmp	r6, #10
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_dmul+0x3c0>
 8000dc2:	e667      	b.n	8000a94 <__aeabi_dmul+0x90>
 8000dc4:	e683      	b.n	8000ace <__aeabi_dmul+0xca>
 8000dc6:	465b      	mov	r3, fp
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	469a      	mov	sl, r3
 8000dcc:	d02a      	beq.n	8000e24 <__aeabi_dmul+0x420>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d06d      	beq.n	8000eb0 <__aeabi_dmul+0x4ac>
 8000dd4:	4658      	mov	r0, fp
 8000dd6:	f000 fcfd 	bl	80017d4 <__clzsi2>
 8000dda:	0001      	movs	r1, r0
 8000ddc:	0003      	movs	r3, r0
 8000dde:	390b      	subs	r1, #11
 8000de0:	221d      	movs	r2, #29
 8000de2:	1a52      	subs	r2, r2, r1
 8000de4:	0021      	movs	r1, r4
 8000de6:	0018      	movs	r0, r3
 8000de8:	465d      	mov	r5, fp
 8000dea:	40d1      	lsrs	r1, r2
 8000dec:	3808      	subs	r0, #8
 8000dee:	4085      	lsls	r5, r0
 8000df0:	000a      	movs	r2, r1
 8000df2:	4084      	lsls	r4, r0
 8000df4:	432a      	orrs	r2, r5
 8000df6:	4693      	mov	fp, r2
 8000df8:	46a2      	mov	sl, r4
 8000dfa:	4d5f      	ldr	r5, [pc, #380]	; (8000f78 <__aeabi_dmul+0x574>)
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	1aed      	subs	r5, r5, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	e625      	b.n	8000a52 <__aeabi_dmul+0x4e>
 8000e06:	465b      	mov	r3, fp
 8000e08:	4303      	orrs	r3, r0
 8000e0a:	469a      	mov	sl, r3
 8000e0c:	d105      	bne.n	8000e1a <__aeabi_dmul+0x416>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	469b      	mov	fp, r3
 8000e12:	3302      	adds	r3, #2
 8000e14:	2608      	movs	r6, #8
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	e61b      	b.n	8000a52 <__aeabi_dmul+0x4e>
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	4682      	mov	sl, r0
 8000e1e:	260c      	movs	r6, #12
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	e616      	b.n	8000a52 <__aeabi_dmul+0x4e>
 8000e24:	2300      	movs	r3, #0
 8000e26:	469b      	mov	fp, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	2604      	movs	r6, #4
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	e60f      	b.n	8000a52 <__aeabi_dmul+0x4e>
 8000e32:	4642      	mov	r2, r8
 8000e34:	3301      	adds	r3, #1
 8000e36:	9501      	str	r5, [sp, #4]
 8000e38:	431e      	orrs	r6, r3
 8000e3a:	9b01      	ldr	r3, [sp, #4]
 8000e3c:	407a      	eors	r2, r7
 8000e3e:	3301      	adds	r3, #1
 8000e40:	2400      	movs	r4, #0
 8000e42:	2000      	movs	r0, #0
 8000e44:	2101      	movs	r1, #1
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2e0a      	cmp	r6, #10
 8000e4c:	dd00      	ble.n	8000e50 <__aeabi_dmul+0x44c>
 8000e4e:	e621      	b.n	8000a94 <__aeabi_dmul+0x90>
 8000e50:	e63d      	b.n	8000ace <__aeabi_dmul+0xca>
 8000e52:	2101      	movs	r1, #1
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	2938      	cmp	r1, #56	; 0x38
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dmul+0x458>
 8000e5a:	e642      	b.n	8000ae2 <__aeabi_dmul+0xde>
 8000e5c:	291f      	cmp	r1, #31
 8000e5e:	dd47      	ble.n	8000ef0 <__aeabi_dmul+0x4ec>
 8000e60:	261f      	movs	r6, #31
 8000e62:	0025      	movs	r5, r4
 8000e64:	4276      	negs	r6, r6
 8000e66:	1af3      	subs	r3, r6, r3
 8000e68:	40dd      	lsrs	r5, r3
 8000e6a:	002b      	movs	r3, r5
 8000e6c:	2920      	cmp	r1, #32
 8000e6e:	d005      	beq.n	8000e7c <__aeabi_dmul+0x478>
 8000e70:	4942      	ldr	r1, [pc, #264]	; (8000f7c <__aeabi_dmul+0x578>)
 8000e72:	9d02      	ldr	r5, [sp, #8]
 8000e74:	468c      	mov	ip, r1
 8000e76:	4465      	add	r5, ip
 8000e78:	40ac      	lsls	r4, r5
 8000e7a:	4320      	orrs	r0, r4
 8000e7c:	1e41      	subs	r1, r0, #1
 8000e7e:	4188      	sbcs	r0, r1
 8000e80:	4318      	orrs	r0, r3
 8000e82:	2307      	movs	r3, #7
 8000e84:	001d      	movs	r5, r3
 8000e86:	2400      	movs	r4, #0
 8000e88:	4005      	ands	r5, r0
 8000e8a:	4203      	tst	r3, r0
 8000e8c:	d04a      	beq.n	8000f24 <__aeabi_dmul+0x520>
 8000e8e:	230f      	movs	r3, #15
 8000e90:	2400      	movs	r4, #0
 8000e92:	4003      	ands	r3, r0
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d042      	beq.n	8000f1e <__aeabi_dmul+0x51a>
 8000e98:	1d03      	adds	r3, r0, #4
 8000e9a:	4283      	cmp	r3, r0
 8000e9c:	4180      	sbcs	r0, r0
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	1824      	adds	r4, r4, r0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	0223      	lsls	r3, r4, #8
 8000ea6:	d53a      	bpl.n	8000f1e <__aeabi_dmul+0x51a>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2400      	movs	r4, #0
 8000eac:	2500      	movs	r5, #0
 8000eae:	e61b      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000eb0:	f000 fc90 	bl	80017d4 <__clzsi2>
 8000eb4:	0001      	movs	r1, r0
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	3115      	adds	r1, #21
 8000eba:	3320      	adds	r3, #32
 8000ebc:	291c      	cmp	r1, #28
 8000ebe:	dd8f      	ble.n	8000de0 <__aeabi_dmul+0x3dc>
 8000ec0:	3808      	subs	r0, #8
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4084      	lsls	r4, r0
 8000ec6:	4692      	mov	sl, r2
 8000ec8:	46a3      	mov	fp, r4
 8000eca:	e796      	b.n	8000dfa <__aeabi_dmul+0x3f6>
 8000ecc:	f000 fc82 	bl	80017d4 <__clzsi2>
 8000ed0:	0001      	movs	r1, r0
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	3115      	adds	r1, #21
 8000ed6:	3320      	adds	r3, #32
 8000ed8:	291c      	cmp	r1, #28
 8000eda:	dc00      	bgt.n	8000ede <__aeabi_dmul+0x4da>
 8000edc:	e758      	b.n	8000d90 <__aeabi_dmul+0x38c>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	464c      	mov	r4, r9
 8000ee2:	3a08      	subs	r2, #8
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	4094      	lsls	r4, r2
 8000ee8:	e75d      	b.n	8000da6 <__aeabi_dmul+0x3a2>
 8000eea:	9b01      	ldr	r3, [sp, #4]
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	e711      	b.n	8000d14 <__aeabi_dmul+0x310>
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <__aeabi_dmul+0x57c>)
 8000ef2:	0026      	movs	r6, r4
 8000ef4:	469c      	mov	ip, r3
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	9d02      	ldr	r5, [sp, #8]
 8000efa:	40cb      	lsrs	r3, r1
 8000efc:	4465      	add	r5, ip
 8000efe:	40ae      	lsls	r6, r5
 8000f00:	431e      	orrs	r6, r3
 8000f02:	0003      	movs	r3, r0
 8000f04:	40ab      	lsls	r3, r5
 8000f06:	1e58      	subs	r0, r3, #1
 8000f08:	4183      	sbcs	r3, r0
 8000f0a:	0030      	movs	r0, r6
 8000f0c:	4318      	orrs	r0, r3
 8000f0e:	40cc      	lsrs	r4, r1
 8000f10:	0743      	lsls	r3, r0, #29
 8000f12:	d0c7      	beq.n	8000ea4 <__aeabi_dmul+0x4a0>
 8000f14:	230f      	movs	r3, #15
 8000f16:	4003      	ands	r3, r0
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d1bd      	bne.n	8000e98 <__aeabi_dmul+0x494>
 8000f1c:	e7c2      	b.n	8000ea4 <__aeabi_dmul+0x4a0>
 8000f1e:	0765      	lsls	r5, r4, #29
 8000f20:	0264      	lsls	r4, r4, #9
 8000f22:	0b24      	lsrs	r4, r4, #12
 8000f24:	08c0      	lsrs	r0, r0, #3
 8000f26:	2300      	movs	r3, #0
 8000f28:	4305      	orrs	r5, r0
 8000f2a:	e5dd      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	2302      	movs	r3, #2
 8000f30:	2e0f      	cmp	r6, #15
 8000f32:	d10c      	bne.n	8000f4e <__aeabi_dmul+0x54a>
 8000f34:	2480      	movs	r4, #128	; 0x80
 8000f36:	465b      	mov	r3, fp
 8000f38:	0324      	lsls	r4, r4, #12
 8000f3a:	4223      	tst	r3, r4
 8000f3c:	d00e      	beq.n	8000f5c <__aeabi_dmul+0x558>
 8000f3e:	4221      	tst	r1, r4
 8000f40:	d10c      	bne.n	8000f5c <__aeabi_dmul+0x558>
 8000f42:	430c      	orrs	r4, r1
 8000f44:	0324      	lsls	r4, r4, #12
 8000f46:	003a      	movs	r2, r7
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <__aeabi_dmul+0x580>)
 8000f4a:	0b24      	lsrs	r4, r4, #12
 8000f4c:	e5cc      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000f4e:	2e0b      	cmp	r6, #11
 8000f50:	d000      	beq.n	8000f54 <__aeabi_dmul+0x550>
 8000f52:	e5a2      	b.n	8000a9a <__aeabi_dmul+0x96>
 8000f54:	468b      	mov	fp, r1
 8000f56:	46aa      	mov	sl, r5
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	e5f7      	b.n	8000b4c <__aeabi_dmul+0x148>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	465b      	mov	r3, fp
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	4642      	mov	r2, r8
 8000f68:	4655      	mov	r5, sl
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <__aeabi_dmul+0x580>)
 8000f6c:	0b24      	lsrs	r4, r4, #12
 8000f6e:	e5bb      	b.n	8000ae8 <__aeabi_dmul+0xe4>
 8000f70:	464d      	mov	r5, r9
 8000f72:	0021      	movs	r1, r4
 8000f74:	2303      	movs	r3, #3
 8000f76:	e7db      	b.n	8000f30 <__aeabi_dmul+0x52c>
 8000f78:	fffffc0d 	.word	0xfffffc0d
 8000f7c:	0000043e 	.word	0x0000043e
 8000f80:	0000041e 	.word	0x0000041e
 8000f84:	000007ff 	.word	0x000007ff

08000f88 <__aeabi_dsub>:
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	4645      	mov	r5, r8
 8000f90:	46de      	mov	lr, fp
 8000f92:	b5e0      	push	{r5, r6, r7, lr}
 8000f94:	000d      	movs	r5, r1
 8000f96:	0004      	movs	r4, r0
 8000f98:	0019      	movs	r1, r3
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	032b      	lsls	r3, r5, #12
 8000f9e:	0a5b      	lsrs	r3, r3, #9
 8000fa0:	0f62      	lsrs	r2, r4, #29
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	00e3      	lsls	r3, r4, #3
 8000fa6:	030c      	lsls	r4, r1, #12
 8000fa8:	0a64      	lsrs	r4, r4, #9
 8000faa:	0f47      	lsrs	r7, r0, #29
 8000fac:	4327      	orrs	r7, r4
 8000fae:	4cd0      	ldr	r4, [pc, #832]	; (80012f0 <__aeabi_dsub+0x368>)
 8000fb0:	006e      	lsls	r6, r5, #1
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	004a      	lsls	r2, r1, #1
 8000fb8:	00c0      	lsls	r0, r0, #3
 8000fba:	4698      	mov	r8, r3
 8000fbc:	46a2      	mov	sl, r4
 8000fbe:	0d76      	lsrs	r6, r6, #21
 8000fc0:	0fed      	lsrs	r5, r5, #31
 8000fc2:	0d52      	lsrs	r2, r2, #21
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	9001      	str	r0, [sp, #4]
 8000fc8:	42a2      	cmp	r2, r4
 8000fca:	d100      	bne.n	8000fce <__aeabi_dsub+0x46>
 8000fcc:	e0b9      	b.n	8001142 <__aeabi_dsub+0x1ba>
 8000fce:	2401      	movs	r4, #1
 8000fd0:	4061      	eors	r1, r4
 8000fd2:	468b      	mov	fp, r1
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dsub+0x52>
 8000fd8:	e08d      	b.n	80010f6 <__aeabi_dsub+0x16e>
 8000fda:	1ab4      	subs	r4, r6, r2
 8000fdc:	46a4      	mov	ip, r4
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	dc00      	bgt.n	8000fe4 <__aeabi_dsub+0x5c>
 8000fe2:	e0b7      	b.n	8001154 <__aeabi_dsub+0x1cc>
 8000fe4:	2a00      	cmp	r2, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dsub+0x62>
 8000fe8:	e0cb      	b.n	8001182 <__aeabi_dsub+0x1fa>
 8000fea:	4ac1      	ldr	r2, [pc, #772]	; (80012f0 <__aeabi_dsub+0x368>)
 8000fec:	4296      	cmp	r6, r2
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_dsub+0x6a>
 8000ff0:	e186      	b.n	8001300 <__aeabi_dsub+0x378>
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	0412      	lsls	r2, r2, #16
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	2a38      	cmp	r2, #56	; 0x38
 8000ffc:	dd00      	ble.n	8001000 <__aeabi_dsub+0x78>
 8000ffe:	e1a4      	b.n	800134a <__aeabi_dsub+0x3c2>
 8001000:	2a1f      	cmp	r2, #31
 8001002:	dd00      	ble.n	8001006 <__aeabi_dsub+0x7e>
 8001004:	e21d      	b.n	8001442 <__aeabi_dsub+0x4ba>
 8001006:	4661      	mov	r1, ip
 8001008:	2220      	movs	r2, #32
 800100a:	003c      	movs	r4, r7
 800100c:	1a52      	subs	r2, r2, r1
 800100e:	0001      	movs	r1, r0
 8001010:	4090      	lsls	r0, r2
 8001012:	4094      	lsls	r4, r2
 8001014:	1e42      	subs	r2, r0, #1
 8001016:	4190      	sbcs	r0, r2
 8001018:	4662      	mov	r2, ip
 800101a:	46a0      	mov	r8, r4
 800101c:	4664      	mov	r4, ip
 800101e:	40d7      	lsrs	r7, r2
 8001020:	464a      	mov	r2, r9
 8001022:	40e1      	lsrs	r1, r4
 8001024:	4644      	mov	r4, r8
 8001026:	1bd2      	subs	r2, r2, r7
 8001028:	4691      	mov	r9, r2
 800102a:	430c      	orrs	r4, r1
 800102c:	4304      	orrs	r4, r0
 800102e:	1b1c      	subs	r4, r3, r4
 8001030:	42a3      	cmp	r3, r4
 8001032:	4192      	sbcs	r2, r2
 8001034:	464b      	mov	r3, r9
 8001036:	4252      	negs	r2, r2
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	469a      	mov	sl, r3
 800103c:	4653      	mov	r3, sl
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	d400      	bmi.n	8001044 <__aeabi_dsub+0xbc>
 8001042:	e12b      	b.n	800129c <__aeabi_dsub+0x314>
 8001044:	4653      	mov	r3, sl
 8001046:	025a      	lsls	r2, r3, #9
 8001048:	0a53      	lsrs	r3, r2, #9
 800104a:	469a      	mov	sl, r3
 800104c:	4653      	mov	r3, sl
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_dsub+0xcc>
 8001052:	e166      	b.n	8001322 <__aeabi_dsub+0x39a>
 8001054:	4650      	mov	r0, sl
 8001056:	f000 fbbd 	bl	80017d4 <__clzsi2>
 800105a:	0003      	movs	r3, r0
 800105c:	3b08      	subs	r3, #8
 800105e:	2220      	movs	r2, #32
 8001060:	0020      	movs	r0, r4
 8001062:	1ad2      	subs	r2, r2, r3
 8001064:	4651      	mov	r1, sl
 8001066:	40d0      	lsrs	r0, r2
 8001068:	4099      	lsls	r1, r3
 800106a:	0002      	movs	r2, r0
 800106c:	409c      	lsls	r4, r3
 800106e:	430a      	orrs	r2, r1
 8001070:	429e      	cmp	r6, r3
 8001072:	dd00      	ble.n	8001076 <__aeabi_dsub+0xee>
 8001074:	e164      	b.n	8001340 <__aeabi_dsub+0x3b8>
 8001076:	1b9b      	subs	r3, r3, r6
 8001078:	1c59      	adds	r1, r3, #1
 800107a:	291f      	cmp	r1, #31
 800107c:	dd00      	ble.n	8001080 <__aeabi_dsub+0xf8>
 800107e:	e0fe      	b.n	800127e <__aeabi_dsub+0x2f6>
 8001080:	2320      	movs	r3, #32
 8001082:	0010      	movs	r0, r2
 8001084:	0026      	movs	r6, r4
 8001086:	1a5b      	subs	r3, r3, r1
 8001088:	409c      	lsls	r4, r3
 800108a:	4098      	lsls	r0, r3
 800108c:	40ce      	lsrs	r6, r1
 800108e:	40ca      	lsrs	r2, r1
 8001090:	1e63      	subs	r3, r4, #1
 8001092:	419c      	sbcs	r4, r3
 8001094:	4330      	orrs	r0, r6
 8001096:	4692      	mov	sl, r2
 8001098:	2600      	movs	r6, #0
 800109a:	4304      	orrs	r4, r0
 800109c:	0763      	lsls	r3, r4, #29
 800109e:	d009      	beq.n	80010b4 <__aeabi_dsub+0x12c>
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d005      	beq.n	80010b4 <__aeabi_dsub+0x12c>
 80010a8:	1d23      	adds	r3, r4, #4
 80010aa:	42a3      	cmp	r3, r4
 80010ac:	41a4      	sbcs	r4, r4
 80010ae:	4264      	negs	r4, r4
 80010b0:	44a2      	add	sl, r4
 80010b2:	001c      	movs	r4, r3
 80010b4:	4653      	mov	r3, sl
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	d400      	bmi.n	80010bc <__aeabi_dsub+0x134>
 80010ba:	e0f2      	b.n	80012a2 <__aeabi_dsub+0x31a>
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <__aeabi_dsub+0x368>)
 80010be:	3601      	adds	r6, #1
 80010c0:	429e      	cmp	r6, r3
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dsub+0x13e>
 80010c4:	e10f      	b.n	80012e6 <__aeabi_dsub+0x35e>
 80010c6:	4653      	mov	r3, sl
 80010c8:	498a      	ldr	r1, [pc, #552]	; (80012f4 <__aeabi_dsub+0x36c>)
 80010ca:	08e4      	lsrs	r4, r4, #3
 80010cc:	400b      	ands	r3, r1
 80010ce:	0019      	movs	r1, r3
 80010d0:	075b      	lsls	r3, r3, #29
 80010d2:	4323      	orrs	r3, r4
 80010d4:	0572      	lsls	r2, r6, #21
 80010d6:	024c      	lsls	r4, r1, #9
 80010d8:	0b24      	lsrs	r4, r4, #12
 80010da:	0d52      	lsrs	r2, r2, #21
 80010dc:	0512      	lsls	r2, r2, #20
 80010de:	4322      	orrs	r2, r4
 80010e0:	07ed      	lsls	r5, r5, #31
 80010e2:	432a      	orrs	r2, r5
 80010e4:	0018      	movs	r0, r3
 80010e6:	0011      	movs	r1, r2
 80010e8:	b003      	add	sp, #12
 80010ea:	bcf0      	pop	{r4, r5, r6, r7}
 80010ec:	46bb      	mov	fp, r7
 80010ee:	46b2      	mov	sl, r6
 80010f0:	46a9      	mov	r9, r5
 80010f2:	46a0      	mov	r8, r4
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f6:	1ab4      	subs	r4, r6, r2
 80010f8:	46a4      	mov	ip, r4
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	dd59      	ble.n	80011b2 <__aeabi_dsub+0x22a>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_dsub+0x17c>
 8001102:	e0b0      	b.n	8001266 <__aeabi_dsub+0x2de>
 8001104:	4556      	cmp	r6, sl
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x182>
 8001108:	e0fa      	b.n	8001300 <__aeabi_dsub+0x378>
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	0412      	lsls	r2, r2, #16
 800110e:	4317      	orrs	r7, r2
 8001110:	4662      	mov	r2, ip
 8001112:	2a38      	cmp	r2, #56	; 0x38
 8001114:	dd00      	ble.n	8001118 <__aeabi_dsub+0x190>
 8001116:	e0d4      	b.n	80012c2 <__aeabi_dsub+0x33a>
 8001118:	2a1f      	cmp	r2, #31
 800111a:	dc00      	bgt.n	800111e <__aeabi_dsub+0x196>
 800111c:	e1c0      	b.n	80014a0 <__aeabi_dsub+0x518>
 800111e:	0039      	movs	r1, r7
 8001120:	3a20      	subs	r2, #32
 8001122:	40d1      	lsrs	r1, r2
 8001124:	4662      	mov	r2, ip
 8001126:	2a20      	cmp	r2, #32
 8001128:	d006      	beq.n	8001138 <__aeabi_dsub+0x1b0>
 800112a:	4664      	mov	r4, ip
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	1b12      	subs	r2, r2, r4
 8001130:	003c      	movs	r4, r7
 8001132:	4094      	lsls	r4, r2
 8001134:	4304      	orrs	r4, r0
 8001136:	9401      	str	r4, [sp, #4]
 8001138:	9c01      	ldr	r4, [sp, #4]
 800113a:	1e62      	subs	r2, r4, #1
 800113c:	4194      	sbcs	r4, r2
 800113e:	430c      	orrs	r4, r1
 8001140:	e0c3      	b.n	80012ca <__aeabi_dsub+0x342>
 8001142:	003c      	movs	r4, r7
 8001144:	4304      	orrs	r4, r0
 8001146:	d02b      	beq.n	80011a0 <__aeabi_dsub+0x218>
 8001148:	468b      	mov	fp, r1
 800114a:	428d      	cmp	r5, r1
 800114c:	d02e      	beq.n	80011ac <__aeabi_dsub+0x224>
 800114e:	4c6a      	ldr	r4, [pc, #424]	; (80012f8 <__aeabi_dsub+0x370>)
 8001150:	46a4      	mov	ip, r4
 8001152:	44b4      	add	ip, r6
 8001154:	4664      	mov	r4, ip
 8001156:	2c00      	cmp	r4, #0
 8001158:	d05f      	beq.n	800121a <__aeabi_dsub+0x292>
 800115a:	1b94      	subs	r4, r2, r6
 800115c:	46a4      	mov	ip, r4
 800115e:	2e00      	cmp	r6, #0
 8001160:	d000      	beq.n	8001164 <__aeabi_dsub+0x1dc>
 8001162:	e120      	b.n	80013a6 <__aeabi_dsub+0x41e>
 8001164:	464c      	mov	r4, r9
 8001166:	431c      	orrs	r4, r3
 8001168:	d100      	bne.n	800116c <__aeabi_dsub+0x1e4>
 800116a:	e1c7      	b.n	80014fc <__aeabi_dsub+0x574>
 800116c:	4661      	mov	r1, ip
 800116e:	1e4c      	subs	r4, r1, #1
 8001170:	2901      	cmp	r1, #1
 8001172:	d100      	bne.n	8001176 <__aeabi_dsub+0x1ee>
 8001174:	e223      	b.n	80015be <__aeabi_dsub+0x636>
 8001176:	4d5e      	ldr	r5, [pc, #376]	; (80012f0 <__aeabi_dsub+0x368>)
 8001178:	45ac      	cmp	ip, r5
 800117a:	d100      	bne.n	800117e <__aeabi_dsub+0x1f6>
 800117c:	e1d8      	b.n	8001530 <__aeabi_dsub+0x5a8>
 800117e:	46a4      	mov	ip, r4
 8001180:	e11a      	b.n	80013b8 <__aeabi_dsub+0x430>
 8001182:	003a      	movs	r2, r7
 8001184:	4302      	orrs	r2, r0
 8001186:	d100      	bne.n	800118a <__aeabi_dsub+0x202>
 8001188:	e0e4      	b.n	8001354 <__aeabi_dsub+0x3cc>
 800118a:	0022      	movs	r2, r4
 800118c:	3a01      	subs	r2, #1
 800118e:	2c01      	cmp	r4, #1
 8001190:	d100      	bne.n	8001194 <__aeabi_dsub+0x20c>
 8001192:	e1c3      	b.n	800151c <__aeabi_dsub+0x594>
 8001194:	4956      	ldr	r1, [pc, #344]	; (80012f0 <__aeabi_dsub+0x368>)
 8001196:	428c      	cmp	r4, r1
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x214>
 800119a:	e0b1      	b.n	8001300 <__aeabi_dsub+0x378>
 800119c:	4694      	mov	ip, r2
 800119e:	e72b      	b.n	8000ff8 <__aeabi_dsub+0x70>
 80011a0:	2401      	movs	r4, #1
 80011a2:	4061      	eors	r1, r4
 80011a4:	468b      	mov	fp, r1
 80011a6:	428d      	cmp	r5, r1
 80011a8:	d000      	beq.n	80011ac <__aeabi_dsub+0x224>
 80011aa:	e716      	b.n	8000fda <__aeabi_dsub+0x52>
 80011ac:	4952      	ldr	r1, [pc, #328]	; (80012f8 <__aeabi_dsub+0x370>)
 80011ae:	468c      	mov	ip, r1
 80011b0:	44b4      	add	ip, r6
 80011b2:	4664      	mov	r4, ip
 80011b4:	2c00      	cmp	r4, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_dsub+0x232>
 80011b8:	e0d3      	b.n	8001362 <__aeabi_dsub+0x3da>
 80011ba:	1b91      	subs	r1, r2, r6
 80011bc:	468c      	mov	ip, r1
 80011be:	2e00      	cmp	r6, #0
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dsub+0x23c>
 80011c2:	e15e      	b.n	8001482 <__aeabi_dsub+0x4fa>
 80011c4:	494a      	ldr	r1, [pc, #296]	; (80012f0 <__aeabi_dsub+0x368>)
 80011c6:	428a      	cmp	r2, r1
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x244>
 80011ca:	e1be      	b.n	800154a <__aeabi_dsub+0x5c2>
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	464c      	mov	r4, r9
 80011d0:	0409      	lsls	r1, r1, #16
 80011d2:	430c      	orrs	r4, r1
 80011d4:	46a1      	mov	r9, r4
 80011d6:	4661      	mov	r1, ip
 80011d8:	2938      	cmp	r1, #56	; 0x38
 80011da:	dd00      	ble.n	80011de <__aeabi_dsub+0x256>
 80011dc:	e1ba      	b.n	8001554 <__aeabi_dsub+0x5cc>
 80011de:	291f      	cmp	r1, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dsub+0x25c>
 80011e2:	e227      	b.n	8001634 <__aeabi_dsub+0x6ac>
 80011e4:	2420      	movs	r4, #32
 80011e6:	1a64      	subs	r4, r4, r1
 80011e8:	4649      	mov	r1, r9
 80011ea:	40a1      	lsls	r1, r4
 80011ec:	001e      	movs	r6, r3
 80011ee:	4688      	mov	r8, r1
 80011f0:	4661      	mov	r1, ip
 80011f2:	40a3      	lsls	r3, r4
 80011f4:	40ce      	lsrs	r6, r1
 80011f6:	4641      	mov	r1, r8
 80011f8:	1e5c      	subs	r4, r3, #1
 80011fa:	41a3      	sbcs	r3, r4
 80011fc:	4331      	orrs	r1, r6
 80011fe:	4319      	orrs	r1, r3
 8001200:	000c      	movs	r4, r1
 8001202:	4663      	mov	r3, ip
 8001204:	4649      	mov	r1, r9
 8001206:	40d9      	lsrs	r1, r3
 8001208:	187f      	adds	r7, r7, r1
 800120a:	1824      	adds	r4, r4, r0
 800120c:	4284      	cmp	r4, r0
 800120e:	419b      	sbcs	r3, r3
 8001210:	425b      	negs	r3, r3
 8001212:	469a      	mov	sl, r3
 8001214:	0016      	movs	r6, r2
 8001216:	44ba      	add	sl, r7
 8001218:	e05d      	b.n	80012d6 <__aeabi_dsub+0x34e>
 800121a:	4c38      	ldr	r4, [pc, #224]	; (80012fc <__aeabi_dsub+0x374>)
 800121c:	1c72      	adds	r2, r6, #1
 800121e:	4222      	tst	r2, r4
 8001220:	d000      	beq.n	8001224 <__aeabi_dsub+0x29c>
 8001222:	e0df      	b.n	80013e4 <__aeabi_dsub+0x45c>
 8001224:	464a      	mov	r2, r9
 8001226:	431a      	orrs	r2, r3
 8001228:	2e00      	cmp	r6, #0
 800122a:	d000      	beq.n	800122e <__aeabi_dsub+0x2a6>
 800122c:	e15c      	b.n	80014e8 <__aeabi_dsub+0x560>
 800122e:	2a00      	cmp	r2, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_dsub+0x2ac>
 8001232:	e1cf      	b.n	80015d4 <__aeabi_dsub+0x64c>
 8001234:	003a      	movs	r2, r7
 8001236:	4302      	orrs	r2, r0
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x2b4>
 800123a:	e17f      	b.n	800153c <__aeabi_dsub+0x5b4>
 800123c:	1a1c      	subs	r4, r3, r0
 800123e:	464a      	mov	r2, r9
 8001240:	42a3      	cmp	r3, r4
 8001242:	4189      	sbcs	r1, r1
 8001244:	1bd2      	subs	r2, r2, r7
 8001246:	4249      	negs	r1, r1
 8001248:	1a52      	subs	r2, r2, r1
 800124a:	4692      	mov	sl, r2
 800124c:	0212      	lsls	r2, r2, #8
 800124e:	d400      	bmi.n	8001252 <__aeabi_dsub+0x2ca>
 8001250:	e20a      	b.n	8001668 <__aeabi_dsub+0x6e0>
 8001252:	1ac4      	subs	r4, r0, r3
 8001254:	42a0      	cmp	r0, r4
 8001256:	4180      	sbcs	r0, r0
 8001258:	464b      	mov	r3, r9
 800125a:	4240      	negs	r0, r0
 800125c:	1aff      	subs	r7, r7, r3
 800125e:	1a3b      	subs	r3, r7, r0
 8001260:	469a      	mov	sl, r3
 8001262:	465d      	mov	r5, fp
 8001264:	e71a      	b.n	800109c <__aeabi_dsub+0x114>
 8001266:	003a      	movs	r2, r7
 8001268:	4302      	orrs	r2, r0
 800126a:	d073      	beq.n	8001354 <__aeabi_dsub+0x3cc>
 800126c:	0022      	movs	r2, r4
 800126e:	3a01      	subs	r2, #1
 8001270:	2c01      	cmp	r4, #1
 8001272:	d100      	bne.n	8001276 <__aeabi_dsub+0x2ee>
 8001274:	e0cb      	b.n	800140e <__aeabi_dsub+0x486>
 8001276:	4554      	cmp	r4, sl
 8001278:	d042      	beq.n	8001300 <__aeabi_dsub+0x378>
 800127a:	4694      	mov	ip, r2
 800127c:	e748      	b.n	8001110 <__aeabi_dsub+0x188>
 800127e:	0010      	movs	r0, r2
 8001280:	3b1f      	subs	r3, #31
 8001282:	40d8      	lsrs	r0, r3
 8001284:	2920      	cmp	r1, #32
 8001286:	d003      	beq.n	8001290 <__aeabi_dsub+0x308>
 8001288:	2340      	movs	r3, #64	; 0x40
 800128a:	1a5b      	subs	r3, r3, r1
 800128c:	409a      	lsls	r2, r3
 800128e:	4314      	orrs	r4, r2
 8001290:	1e63      	subs	r3, r4, #1
 8001292:	419c      	sbcs	r4, r3
 8001294:	2300      	movs	r3, #0
 8001296:	2600      	movs	r6, #0
 8001298:	469a      	mov	sl, r3
 800129a:	4304      	orrs	r4, r0
 800129c:	0763      	lsls	r3, r4, #29
 800129e:	d000      	beq.n	80012a2 <__aeabi_dsub+0x31a>
 80012a0:	e6fe      	b.n	80010a0 <__aeabi_dsub+0x118>
 80012a2:	4652      	mov	r2, sl
 80012a4:	08e3      	lsrs	r3, r4, #3
 80012a6:	0752      	lsls	r2, r2, #29
 80012a8:	4313      	orrs	r3, r2
 80012aa:	4652      	mov	r2, sl
 80012ac:	46b4      	mov	ip, r6
 80012ae:	08d2      	lsrs	r2, r2, #3
 80012b0:	490f      	ldr	r1, [pc, #60]	; (80012f0 <__aeabi_dsub+0x368>)
 80012b2:	458c      	cmp	ip, r1
 80012b4:	d02a      	beq.n	800130c <__aeabi_dsub+0x384>
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	0b14      	lsrs	r4, r2, #12
 80012ba:	4662      	mov	r2, ip
 80012bc:	0552      	lsls	r2, r2, #21
 80012be:	0d52      	lsrs	r2, r2, #21
 80012c0:	e70c      	b.n	80010dc <__aeabi_dsub+0x154>
 80012c2:	003c      	movs	r4, r7
 80012c4:	4304      	orrs	r4, r0
 80012c6:	1e62      	subs	r2, r4, #1
 80012c8:	4194      	sbcs	r4, r2
 80012ca:	18e4      	adds	r4, r4, r3
 80012cc:	429c      	cmp	r4, r3
 80012ce:	4192      	sbcs	r2, r2
 80012d0:	4252      	negs	r2, r2
 80012d2:	444a      	add	r2, r9
 80012d4:	4692      	mov	sl, r2
 80012d6:	4653      	mov	r3, sl
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	d5df      	bpl.n	800129c <__aeabi_dsub+0x314>
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__aeabi_dsub+0x368>)
 80012de:	3601      	adds	r6, #1
 80012e0:	429e      	cmp	r6, r3
 80012e2:	d000      	beq.n	80012e6 <__aeabi_dsub+0x35e>
 80012e4:	e0a0      	b.n	8001428 <__aeabi_dsub+0x4a0>
 80012e6:	0032      	movs	r2, r6
 80012e8:	2400      	movs	r4, #0
 80012ea:	2300      	movs	r3, #0
 80012ec:	e6f6      	b.n	80010dc <__aeabi_dsub+0x154>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	000007ff 	.word	0x000007ff
 80012f4:	ff7fffff 	.word	0xff7fffff
 80012f8:	fffff801 	.word	0xfffff801
 80012fc:	000007fe 	.word	0x000007fe
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	464a      	mov	r2, r9
 8001304:	0752      	lsls	r2, r2, #29
 8001306:	4313      	orrs	r3, r2
 8001308:	464a      	mov	r2, r9
 800130a:	08d2      	lsrs	r2, r2, #3
 800130c:	0019      	movs	r1, r3
 800130e:	4311      	orrs	r1, r2
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0x38c>
 8001312:	e1b5      	b.n	8001680 <__aeabi_dsub+0x6f8>
 8001314:	2480      	movs	r4, #128	; 0x80
 8001316:	0324      	lsls	r4, r4, #12
 8001318:	4314      	orrs	r4, r2
 800131a:	0324      	lsls	r4, r4, #12
 800131c:	4ad5      	ldr	r2, [pc, #852]	; (8001674 <__aeabi_dsub+0x6ec>)
 800131e:	0b24      	lsrs	r4, r4, #12
 8001320:	e6dc      	b.n	80010dc <__aeabi_dsub+0x154>
 8001322:	0020      	movs	r0, r4
 8001324:	f000 fa56 	bl	80017d4 <__clzsi2>
 8001328:	0003      	movs	r3, r0
 800132a:	3318      	adds	r3, #24
 800132c:	2b1f      	cmp	r3, #31
 800132e:	dc00      	bgt.n	8001332 <__aeabi_dsub+0x3aa>
 8001330:	e695      	b.n	800105e <__aeabi_dsub+0xd6>
 8001332:	0022      	movs	r2, r4
 8001334:	3808      	subs	r0, #8
 8001336:	4082      	lsls	r2, r0
 8001338:	2400      	movs	r4, #0
 800133a:	429e      	cmp	r6, r3
 800133c:	dc00      	bgt.n	8001340 <__aeabi_dsub+0x3b8>
 800133e:	e69a      	b.n	8001076 <__aeabi_dsub+0xee>
 8001340:	1af6      	subs	r6, r6, r3
 8001342:	4bcd      	ldr	r3, [pc, #820]	; (8001678 <__aeabi_dsub+0x6f0>)
 8001344:	401a      	ands	r2, r3
 8001346:	4692      	mov	sl, r2
 8001348:	e6a8      	b.n	800109c <__aeabi_dsub+0x114>
 800134a:	003c      	movs	r4, r7
 800134c:	4304      	orrs	r4, r0
 800134e:	1e62      	subs	r2, r4, #1
 8001350:	4194      	sbcs	r4, r2
 8001352:	e66c      	b.n	800102e <__aeabi_dsub+0xa6>
 8001354:	464a      	mov	r2, r9
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	0752      	lsls	r2, r2, #29
 800135a:	4313      	orrs	r3, r2
 800135c:	464a      	mov	r2, r9
 800135e:	08d2      	lsrs	r2, r2, #3
 8001360:	e7a6      	b.n	80012b0 <__aeabi_dsub+0x328>
 8001362:	4cc6      	ldr	r4, [pc, #792]	; (800167c <__aeabi_dsub+0x6f4>)
 8001364:	1c72      	adds	r2, r6, #1
 8001366:	4222      	tst	r2, r4
 8001368:	d000      	beq.n	800136c <__aeabi_dsub+0x3e4>
 800136a:	e0ac      	b.n	80014c6 <__aeabi_dsub+0x53e>
 800136c:	464a      	mov	r2, r9
 800136e:	431a      	orrs	r2, r3
 8001370:	2e00      	cmp	r6, #0
 8001372:	d000      	beq.n	8001376 <__aeabi_dsub+0x3ee>
 8001374:	e105      	b.n	8001582 <__aeabi_dsub+0x5fa>
 8001376:	2a00      	cmp	r2, #0
 8001378:	d100      	bne.n	800137c <__aeabi_dsub+0x3f4>
 800137a:	e156      	b.n	800162a <__aeabi_dsub+0x6a2>
 800137c:	003a      	movs	r2, r7
 800137e:	4302      	orrs	r2, r0
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x3fc>
 8001382:	e0db      	b.n	800153c <__aeabi_dsub+0x5b4>
 8001384:	181c      	adds	r4, r3, r0
 8001386:	429c      	cmp	r4, r3
 8001388:	419b      	sbcs	r3, r3
 800138a:	444f      	add	r7, r9
 800138c:	46ba      	mov	sl, r7
 800138e:	425b      	negs	r3, r3
 8001390:	449a      	add	sl, r3
 8001392:	4653      	mov	r3, sl
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	d400      	bmi.n	800139a <__aeabi_dsub+0x412>
 8001398:	e780      	b.n	800129c <__aeabi_dsub+0x314>
 800139a:	4652      	mov	r2, sl
 800139c:	4bb6      	ldr	r3, [pc, #728]	; (8001678 <__aeabi_dsub+0x6f0>)
 800139e:	2601      	movs	r6, #1
 80013a0:	401a      	ands	r2, r3
 80013a2:	4692      	mov	sl, r2
 80013a4:	e77a      	b.n	800129c <__aeabi_dsub+0x314>
 80013a6:	4cb3      	ldr	r4, [pc, #716]	; (8001674 <__aeabi_dsub+0x6ec>)
 80013a8:	42a2      	cmp	r2, r4
 80013aa:	d100      	bne.n	80013ae <__aeabi_dsub+0x426>
 80013ac:	e0c0      	b.n	8001530 <__aeabi_dsub+0x5a8>
 80013ae:	2480      	movs	r4, #128	; 0x80
 80013b0:	464d      	mov	r5, r9
 80013b2:	0424      	lsls	r4, r4, #16
 80013b4:	4325      	orrs	r5, r4
 80013b6:	46a9      	mov	r9, r5
 80013b8:	4664      	mov	r4, ip
 80013ba:	2c38      	cmp	r4, #56	; 0x38
 80013bc:	dc53      	bgt.n	8001466 <__aeabi_dsub+0x4de>
 80013be:	4661      	mov	r1, ip
 80013c0:	2c1f      	cmp	r4, #31
 80013c2:	dd00      	ble.n	80013c6 <__aeabi_dsub+0x43e>
 80013c4:	e0cd      	b.n	8001562 <__aeabi_dsub+0x5da>
 80013c6:	2520      	movs	r5, #32
 80013c8:	001e      	movs	r6, r3
 80013ca:	1b2d      	subs	r5, r5, r4
 80013cc:	464c      	mov	r4, r9
 80013ce:	40ab      	lsls	r3, r5
 80013d0:	40ac      	lsls	r4, r5
 80013d2:	40ce      	lsrs	r6, r1
 80013d4:	1e5d      	subs	r5, r3, #1
 80013d6:	41ab      	sbcs	r3, r5
 80013d8:	4334      	orrs	r4, r6
 80013da:	4323      	orrs	r3, r4
 80013dc:	464c      	mov	r4, r9
 80013de:	40cc      	lsrs	r4, r1
 80013e0:	1b3f      	subs	r7, r7, r4
 80013e2:	e045      	b.n	8001470 <__aeabi_dsub+0x4e8>
 80013e4:	464a      	mov	r2, r9
 80013e6:	1a1c      	subs	r4, r3, r0
 80013e8:	1bd1      	subs	r1, r2, r7
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	4192      	sbcs	r2, r2
 80013ee:	4252      	negs	r2, r2
 80013f0:	4692      	mov	sl, r2
 80013f2:	000a      	movs	r2, r1
 80013f4:	4651      	mov	r1, sl
 80013f6:	1a52      	subs	r2, r2, r1
 80013f8:	4692      	mov	sl, r2
 80013fa:	0212      	lsls	r2, r2, #8
 80013fc:	d500      	bpl.n	8001400 <__aeabi_dsub+0x478>
 80013fe:	e083      	b.n	8001508 <__aeabi_dsub+0x580>
 8001400:	4653      	mov	r3, sl
 8001402:	4323      	orrs	r3, r4
 8001404:	d000      	beq.n	8001408 <__aeabi_dsub+0x480>
 8001406:	e621      	b.n	800104c <__aeabi_dsub+0xc4>
 8001408:	2200      	movs	r2, #0
 800140a:	2500      	movs	r5, #0
 800140c:	e753      	b.n	80012b6 <__aeabi_dsub+0x32e>
 800140e:	181c      	adds	r4, r3, r0
 8001410:	429c      	cmp	r4, r3
 8001412:	419b      	sbcs	r3, r3
 8001414:	444f      	add	r7, r9
 8001416:	46ba      	mov	sl, r7
 8001418:	425b      	negs	r3, r3
 800141a:	449a      	add	sl, r3
 800141c:	4653      	mov	r3, sl
 800141e:	2601      	movs	r6, #1
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	d400      	bmi.n	8001426 <__aeabi_dsub+0x49e>
 8001424:	e73a      	b.n	800129c <__aeabi_dsub+0x314>
 8001426:	2602      	movs	r6, #2
 8001428:	4652      	mov	r2, sl
 800142a:	4b93      	ldr	r3, [pc, #588]	; (8001678 <__aeabi_dsub+0x6f0>)
 800142c:	2101      	movs	r1, #1
 800142e:	401a      	ands	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	4021      	ands	r1, r4
 8001434:	0862      	lsrs	r2, r4, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	07dc      	lsls	r4, r3, #31
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	469a      	mov	sl, r3
 800143e:	4314      	orrs	r4, r2
 8001440:	e62c      	b.n	800109c <__aeabi_dsub+0x114>
 8001442:	0039      	movs	r1, r7
 8001444:	3a20      	subs	r2, #32
 8001446:	40d1      	lsrs	r1, r2
 8001448:	4662      	mov	r2, ip
 800144a:	2a20      	cmp	r2, #32
 800144c:	d006      	beq.n	800145c <__aeabi_dsub+0x4d4>
 800144e:	4664      	mov	r4, ip
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	1b12      	subs	r2, r2, r4
 8001454:	003c      	movs	r4, r7
 8001456:	4094      	lsls	r4, r2
 8001458:	4304      	orrs	r4, r0
 800145a:	9401      	str	r4, [sp, #4]
 800145c:	9c01      	ldr	r4, [sp, #4]
 800145e:	1e62      	subs	r2, r4, #1
 8001460:	4194      	sbcs	r4, r2
 8001462:	430c      	orrs	r4, r1
 8001464:	e5e3      	b.n	800102e <__aeabi_dsub+0xa6>
 8001466:	4649      	mov	r1, r9
 8001468:	4319      	orrs	r1, r3
 800146a:	000b      	movs	r3, r1
 800146c:	1e5c      	subs	r4, r3, #1
 800146e:	41a3      	sbcs	r3, r4
 8001470:	1ac4      	subs	r4, r0, r3
 8001472:	42a0      	cmp	r0, r4
 8001474:	419b      	sbcs	r3, r3
 8001476:	425b      	negs	r3, r3
 8001478:	1afb      	subs	r3, r7, r3
 800147a:	469a      	mov	sl, r3
 800147c:	465d      	mov	r5, fp
 800147e:	0016      	movs	r6, r2
 8001480:	e5dc      	b.n	800103c <__aeabi_dsub+0xb4>
 8001482:	4649      	mov	r1, r9
 8001484:	4319      	orrs	r1, r3
 8001486:	d100      	bne.n	800148a <__aeabi_dsub+0x502>
 8001488:	e0ae      	b.n	80015e8 <__aeabi_dsub+0x660>
 800148a:	4661      	mov	r1, ip
 800148c:	4664      	mov	r4, ip
 800148e:	3901      	subs	r1, #1
 8001490:	2c01      	cmp	r4, #1
 8001492:	d100      	bne.n	8001496 <__aeabi_dsub+0x50e>
 8001494:	e0e0      	b.n	8001658 <__aeabi_dsub+0x6d0>
 8001496:	4c77      	ldr	r4, [pc, #476]	; (8001674 <__aeabi_dsub+0x6ec>)
 8001498:	45a4      	cmp	ip, r4
 800149a:	d056      	beq.n	800154a <__aeabi_dsub+0x5c2>
 800149c:	468c      	mov	ip, r1
 800149e:	e69a      	b.n	80011d6 <__aeabi_dsub+0x24e>
 80014a0:	4661      	mov	r1, ip
 80014a2:	2220      	movs	r2, #32
 80014a4:	003c      	movs	r4, r7
 80014a6:	1a52      	subs	r2, r2, r1
 80014a8:	4094      	lsls	r4, r2
 80014aa:	0001      	movs	r1, r0
 80014ac:	4090      	lsls	r0, r2
 80014ae:	46a0      	mov	r8, r4
 80014b0:	4664      	mov	r4, ip
 80014b2:	1e42      	subs	r2, r0, #1
 80014b4:	4190      	sbcs	r0, r2
 80014b6:	4662      	mov	r2, ip
 80014b8:	40e1      	lsrs	r1, r4
 80014ba:	4644      	mov	r4, r8
 80014bc:	40d7      	lsrs	r7, r2
 80014be:	430c      	orrs	r4, r1
 80014c0:	4304      	orrs	r4, r0
 80014c2:	44b9      	add	r9, r7
 80014c4:	e701      	b.n	80012ca <__aeabi_dsub+0x342>
 80014c6:	496b      	ldr	r1, [pc, #428]	; (8001674 <__aeabi_dsub+0x6ec>)
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d100      	bne.n	80014ce <__aeabi_dsub+0x546>
 80014cc:	e70c      	b.n	80012e8 <__aeabi_dsub+0x360>
 80014ce:	1818      	adds	r0, r3, r0
 80014d0:	4298      	cmp	r0, r3
 80014d2:	419b      	sbcs	r3, r3
 80014d4:	444f      	add	r7, r9
 80014d6:	425b      	negs	r3, r3
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	07dc      	lsls	r4, r3, #31
 80014dc:	0840      	lsrs	r0, r0, #1
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	469a      	mov	sl, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	4304      	orrs	r4, r0
 80014e6:	e6d9      	b.n	800129c <__aeabi_dsub+0x314>
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d000      	beq.n	80014ee <__aeabi_dsub+0x566>
 80014ec:	e081      	b.n	80015f2 <__aeabi_dsub+0x66a>
 80014ee:	003b      	movs	r3, r7
 80014f0:	4303      	orrs	r3, r0
 80014f2:	d11d      	bne.n	8001530 <__aeabi_dsub+0x5a8>
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	2500      	movs	r5, #0
 80014f8:	0312      	lsls	r2, r2, #12
 80014fa:	e70b      	b.n	8001314 <__aeabi_dsub+0x38c>
 80014fc:	08c0      	lsrs	r0, r0, #3
 80014fe:	077b      	lsls	r3, r7, #29
 8001500:	465d      	mov	r5, fp
 8001502:	4303      	orrs	r3, r0
 8001504:	08fa      	lsrs	r2, r7, #3
 8001506:	e6d3      	b.n	80012b0 <__aeabi_dsub+0x328>
 8001508:	1ac4      	subs	r4, r0, r3
 800150a:	42a0      	cmp	r0, r4
 800150c:	4180      	sbcs	r0, r0
 800150e:	464b      	mov	r3, r9
 8001510:	4240      	negs	r0, r0
 8001512:	1aff      	subs	r7, r7, r3
 8001514:	1a3b      	subs	r3, r7, r0
 8001516:	469a      	mov	sl, r3
 8001518:	465d      	mov	r5, fp
 800151a:	e597      	b.n	800104c <__aeabi_dsub+0xc4>
 800151c:	1a1c      	subs	r4, r3, r0
 800151e:	464a      	mov	r2, r9
 8001520:	42a3      	cmp	r3, r4
 8001522:	419b      	sbcs	r3, r3
 8001524:	1bd7      	subs	r7, r2, r7
 8001526:	425b      	negs	r3, r3
 8001528:	1afb      	subs	r3, r7, r3
 800152a:	469a      	mov	sl, r3
 800152c:	2601      	movs	r6, #1
 800152e:	e585      	b.n	800103c <__aeabi_dsub+0xb4>
 8001530:	08c0      	lsrs	r0, r0, #3
 8001532:	077b      	lsls	r3, r7, #29
 8001534:	465d      	mov	r5, fp
 8001536:	4303      	orrs	r3, r0
 8001538:	08fa      	lsrs	r2, r7, #3
 800153a:	e6e7      	b.n	800130c <__aeabi_dsub+0x384>
 800153c:	464a      	mov	r2, r9
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	0752      	lsls	r2, r2, #29
 8001542:	4313      	orrs	r3, r2
 8001544:	464a      	mov	r2, r9
 8001546:	08d2      	lsrs	r2, r2, #3
 8001548:	e6b5      	b.n	80012b6 <__aeabi_dsub+0x32e>
 800154a:	08c0      	lsrs	r0, r0, #3
 800154c:	077b      	lsls	r3, r7, #29
 800154e:	4303      	orrs	r3, r0
 8001550:	08fa      	lsrs	r2, r7, #3
 8001552:	e6db      	b.n	800130c <__aeabi_dsub+0x384>
 8001554:	4649      	mov	r1, r9
 8001556:	4319      	orrs	r1, r3
 8001558:	000b      	movs	r3, r1
 800155a:	1e59      	subs	r1, r3, #1
 800155c:	418b      	sbcs	r3, r1
 800155e:	001c      	movs	r4, r3
 8001560:	e653      	b.n	800120a <__aeabi_dsub+0x282>
 8001562:	464d      	mov	r5, r9
 8001564:	3c20      	subs	r4, #32
 8001566:	40e5      	lsrs	r5, r4
 8001568:	2920      	cmp	r1, #32
 800156a:	d005      	beq.n	8001578 <__aeabi_dsub+0x5f0>
 800156c:	2440      	movs	r4, #64	; 0x40
 800156e:	1a64      	subs	r4, r4, r1
 8001570:	4649      	mov	r1, r9
 8001572:	40a1      	lsls	r1, r4
 8001574:	430b      	orrs	r3, r1
 8001576:	4698      	mov	r8, r3
 8001578:	4643      	mov	r3, r8
 800157a:	1e5c      	subs	r4, r3, #1
 800157c:	41a3      	sbcs	r3, r4
 800157e:	432b      	orrs	r3, r5
 8001580:	e776      	b.n	8001470 <__aeabi_dsub+0x4e8>
 8001582:	2a00      	cmp	r2, #0
 8001584:	d0e1      	beq.n	800154a <__aeabi_dsub+0x5c2>
 8001586:	003a      	movs	r2, r7
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	4302      	orrs	r2, r0
 800158c:	d100      	bne.n	8001590 <__aeabi_dsub+0x608>
 800158e:	e6b8      	b.n	8001302 <__aeabi_dsub+0x37a>
 8001590:	464a      	mov	r2, r9
 8001592:	0752      	lsls	r2, r2, #29
 8001594:	2480      	movs	r4, #128	; 0x80
 8001596:	4313      	orrs	r3, r2
 8001598:	464a      	mov	r2, r9
 800159a:	0324      	lsls	r4, r4, #12
 800159c:	08d2      	lsrs	r2, r2, #3
 800159e:	4222      	tst	r2, r4
 80015a0:	d007      	beq.n	80015b2 <__aeabi_dsub+0x62a>
 80015a2:	08fe      	lsrs	r6, r7, #3
 80015a4:	4226      	tst	r6, r4
 80015a6:	d104      	bne.n	80015b2 <__aeabi_dsub+0x62a>
 80015a8:	465d      	mov	r5, fp
 80015aa:	0032      	movs	r2, r6
 80015ac:	08c3      	lsrs	r3, r0, #3
 80015ae:	077f      	lsls	r7, r7, #29
 80015b0:	433b      	orrs	r3, r7
 80015b2:	0f59      	lsrs	r1, r3, #29
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	0749      	lsls	r1, r1, #29
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	430b      	orrs	r3, r1
 80015bc:	e6a6      	b.n	800130c <__aeabi_dsub+0x384>
 80015be:	1ac4      	subs	r4, r0, r3
 80015c0:	42a0      	cmp	r0, r4
 80015c2:	4180      	sbcs	r0, r0
 80015c4:	464b      	mov	r3, r9
 80015c6:	4240      	negs	r0, r0
 80015c8:	1aff      	subs	r7, r7, r3
 80015ca:	1a3b      	subs	r3, r7, r0
 80015cc:	469a      	mov	sl, r3
 80015ce:	465d      	mov	r5, fp
 80015d0:	2601      	movs	r6, #1
 80015d2:	e533      	b.n	800103c <__aeabi_dsub+0xb4>
 80015d4:	003b      	movs	r3, r7
 80015d6:	4303      	orrs	r3, r0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dsub+0x654>
 80015da:	e715      	b.n	8001408 <__aeabi_dsub+0x480>
 80015dc:	08c0      	lsrs	r0, r0, #3
 80015de:	077b      	lsls	r3, r7, #29
 80015e0:	465d      	mov	r5, fp
 80015e2:	4303      	orrs	r3, r0
 80015e4:	08fa      	lsrs	r2, r7, #3
 80015e6:	e666      	b.n	80012b6 <__aeabi_dsub+0x32e>
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	077b      	lsls	r3, r7, #29
 80015ec:	4303      	orrs	r3, r0
 80015ee:	08fa      	lsrs	r2, r7, #3
 80015f0:	e65e      	b.n	80012b0 <__aeabi_dsub+0x328>
 80015f2:	003a      	movs	r2, r7
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	4302      	orrs	r2, r0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dsub+0x674>
 80015fa:	e682      	b.n	8001302 <__aeabi_dsub+0x37a>
 80015fc:	464a      	mov	r2, r9
 80015fe:	0752      	lsls	r2, r2, #29
 8001600:	2480      	movs	r4, #128	; 0x80
 8001602:	4313      	orrs	r3, r2
 8001604:	464a      	mov	r2, r9
 8001606:	0324      	lsls	r4, r4, #12
 8001608:	08d2      	lsrs	r2, r2, #3
 800160a:	4222      	tst	r2, r4
 800160c:	d007      	beq.n	800161e <__aeabi_dsub+0x696>
 800160e:	08fe      	lsrs	r6, r7, #3
 8001610:	4226      	tst	r6, r4
 8001612:	d104      	bne.n	800161e <__aeabi_dsub+0x696>
 8001614:	465d      	mov	r5, fp
 8001616:	0032      	movs	r2, r6
 8001618:	08c3      	lsrs	r3, r0, #3
 800161a:	077f      	lsls	r7, r7, #29
 800161c:	433b      	orrs	r3, r7
 800161e:	0f59      	lsrs	r1, r3, #29
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	0749      	lsls	r1, r1, #29
 8001626:	430b      	orrs	r3, r1
 8001628:	e670      	b.n	800130c <__aeabi_dsub+0x384>
 800162a:	08c0      	lsrs	r0, r0, #3
 800162c:	077b      	lsls	r3, r7, #29
 800162e:	4303      	orrs	r3, r0
 8001630:	08fa      	lsrs	r2, r7, #3
 8001632:	e640      	b.n	80012b6 <__aeabi_dsub+0x32e>
 8001634:	464c      	mov	r4, r9
 8001636:	3920      	subs	r1, #32
 8001638:	40cc      	lsrs	r4, r1
 800163a:	4661      	mov	r1, ip
 800163c:	2920      	cmp	r1, #32
 800163e:	d006      	beq.n	800164e <__aeabi_dsub+0x6c6>
 8001640:	4666      	mov	r6, ip
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	1b89      	subs	r1, r1, r6
 8001646:	464e      	mov	r6, r9
 8001648:	408e      	lsls	r6, r1
 800164a:	4333      	orrs	r3, r6
 800164c:	4698      	mov	r8, r3
 800164e:	4643      	mov	r3, r8
 8001650:	1e59      	subs	r1, r3, #1
 8001652:	418b      	sbcs	r3, r1
 8001654:	431c      	orrs	r4, r3
 8001656:	e5d8      	b.n	800120a <__aeabi_dsub+0x282>
 8001658:	181c      	adds	r4, r3, r0
 800165a:	4284      	cmp	r4, r0
 800165c:	4180      	sbcs	r0, r0
 800165e:	444f      	add	r7, r9
 8001660:	46ba      	mov	sl, r7
 8001662:	4240      	negs	r0, r0
 8001664:	4482      	add	sl, r0
 8001666:	e6d9      	b.n	800141c <__aeabi_dsub+0x494>
 8001668:	4653      	mov	r3, sl
 800166a:	4323      	orrs	r3, r4
 800166c:	d100      	bne.n	8001670 <__aeabi_dsub+0x6e8>
 800166e:	e6cb      	b.n	8001408 <__aeabi_dsub+0x480>
 8001670:	e614      	b.n	800129c <__aeabi_dsub+0x314>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	000007ff 	.word	0x000007ff
 8001678:	ff7fffff 	.word	0xff7fffff
 800167c:	000007fe 	.word	0x000007fe
 8001680:	2300      	movs	r3, #0
 8001682:	4a01      	ldr	r2, [pc, #4]	; (8001688 <__aeabi_dsub+0x700>)
 8001684:	001c      	movs	r4, r3
 8001686:	e529      	b.n	80010dc <__aeabi_dsub+0x154>
 8001688:	000007ff 	.word	0x000007ff

0800168c <__aeabi_d2iz>:
 800168c:	000a      	movs	r2, r1
 800168e:	b530      	push	{r4, r5, lr}
 8001690:	4c13      	ldr	r4, [pc, #76]	; (80016e0 <__aeabi_d2iz+0x54>)
 8001692:	0053      	lsls	r3, r2, #1
 8001694:	0309      	lsls	r1, r1, #12
 8001696:	0005      	movs	r5, r0
 8001698:	0b09      	lsrs	r1, r1, #12
 800169a:	2000      	movs	r0, #0
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	0fd2      	lsrs	r2, r2, #31
 80016a0:	42a3      	cmp	r3, r4
 80016a2:	dd04      	ble.n	80016ae <__aeabi_d2iz+0x22>
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <__aeabi_d2iz+0x58>)
 80016a6:	4283      	cmp	r3, r0
 80016a8:	dd02      	ble.n	80016b0 <__aeabi_d2iz+0x24>
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <__aeabi_d2iz+0x5c>)
 80016ac:	18d0      	adds	r0, r2, r3
 80016ae:	bd30      	pop	{r4, r5, pc}
 80016b0:	2080      	movs	r0, #128	; 0x80
 80016b2:	0340      	lsls	r0, r0, #13
 80016b4:	4301      	orrs	r1, r0
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <__aeabi_d2iz+0x60>)
 80016b8:	1ac0      	subs	r0, r0, r3
 80016ba:	281f      	cmp	r0, #31
 80016bc:	dd08      	ble.n	80016d0 <__aeabi_d2iz+0x44>
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <__aeabi_d2iz+0x64>)
 80016c0:	1ac3      	subs	r3, r0, r3
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	4258      	negs	r0, r3
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d1f0      	bne.n	80016ae <__aeabi_d2iz+0x22>
 80016cc:	0018      	movs	r0, r3
 80016ce:	e7ee      	b.n	80016ae <__aeabi_d2iz+0x22>
 80016d0:	4c08      	ldr	r4, [pc, #32]	; (80016f4 <__aeabi_d2iz+0x68>)
 80016d2:	40c5      	lsrs	r5, r0
 80016d4:	46a4      	mov	ip, r4
 80016d6:	4463      	add	r3, ip
 80016d8:	4099      	lsls	r1, r3
 80016da:	000b      	movs	r3, r1
 80016dc:	432b      	orrs	r3, r5
 80016de:	e7f2      	b.n	80016c6 <__aeabi_d2iz+0x3a>
 80016e0:	000003fe 	.word	0x000003fe
 80016e4:	0000041d 	.word	0x0000041d
 80016e8:	7fffffff 	.word	0x7fffffff
 80016ec:	00000433 	.word	0x00000433
 80016f0:	00000413 	.word	0x00000413
 80016f4:	fffffbed 	.word	0xfffffbed

080016f8 <__aeabi_i2d>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d016      	beq.n	800172c <__aeabi_i2d+0x34>
 80016fe:	17c3      	asrs	r3, r0, #31
 8001700:	18c5      	adds	r5, r0, r3
 8001702:	405d      	eors	r5, r3
 8001704:	0fc4      	lsrs	r4, r0, #31
 8001706:	0028      	movs	r0, r5
 8001708:	f000 f864 	bl	80017d4 <__clzsi2>
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <__aeabi_i2d+0x5c>)
 800170e:	1a1b      	subs	r3, r3, r0
 8001710:	280a      	cmp	r0, #10
 8001712:	dc16      	bgt.n	8001742 <__aeabi_i2d+0x4a>
 8001714:	0002      	movs	r2, r0
 8001716:	002e      	movs	r6, r5
 8001718:	3215      	adds	r2, #21
 800171a:	4096      	lsls	r6, r2
 800171c:	220b      	movs	r2, #11
 800171e:	1a12      	subs	r2, r2, r0
 8001720:	40d5      	lsrs	r5, r2
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	032d      	lsls	r5, r5, #12
 8001726:	0b2d      	lsrs	r5, r5, #12
 8001728:	0d5b      	lsrs	r3, r3, #21
 800172a:	e003      	b.n	8001734 <__aeabi_i2d+0x3c>
 800172c:	2400      	movs	r4, #0
 800172e:	2300      	movs	r3, #0
 8001730:	2500      	movs	r5, #0
 8001732:	2600      	movs	r6, #0
 8001734:	051b      	lsls	r3, r3, #20
 8001736:	432b      	orrs	r3, r5
 8001738:	07e4      	lsls	r4, r4, #31
 800173a:	4323      	orrs	r3, r4
 800173c:	0030      	movs	r0, r6
 800173e:	0019      	movs	r1, r3
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	380b      	subs	r0, #11
 8001744:	4085      	lsls	r5, r0
 8001746:	055b      	lsls	r3, r3, #21
 8001748:	032d      	lsls	r5, r5, #12
 800174a:	2600      	movs	r6, #0
 800174c:	0b2d      	lsrs	r5, r5, #12
 800174e:	0d5b      	lsrs	r3, r3, #21
 8001750:	e7f0      	b.n	8001734 <__aeabi_i2d+0x3c>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	0000041e 	.word	0x0000041e

08001758 <__aeabi_cdrcmple>:
 8001758:	4684      	mov	ip, r0
 800175a:	0010      	movs	r0, r2
 800175c:	4662      	mov	r2, ip
 800175e:	468c      	mov	ip, r1
 8001760:	0019      	movs	r1, r3
 8001762:	4663      	mov	r3, ip
 8001764:	e000      	b.n	8001768 <__aeabi_cdcmpeq>
 8001766:	46c0      	nop			; (mov r8, r8)

08001768 <__aeabi_cdcmpeq>:
 8001768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800176a:	f000 f8f9 	bl	8001960 <__ledf2>
 800176e:	2800      	cmp	r0, #0
 8001770:	d401      	bmi.n	8001776 <__aeabi_cdcmpeq+0xe>
 8001772:	2100      	movs	r1, #0
 8001774:	42c8      	cmn	r0, r1
 8001776:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001778 <__aeabi_dcmpeq>:
 8001778:	b510      	push	{r4, lr}
 800177a:	f000 f849 	bl	8001810 <__eqdf2>
 800177e:	4240      	negs	r0, r0
 8001780:	3001      	adds	r0, #1
 8001782:	bd10      	pop	{r4, pc}

08001784 <__aeabi_dcmplt>:
 8001784:	b510      	push	{r4, lr}
 8001786:	f000 f8eb 	bl	8001960 <__ledf2>
 800178a:	2800      	cmp	r0, #0
 800178c:	db01      	blt.n	8001792 <__aeabi_dcmplt+0xe>
 800178e:	2000      	movs	r0, #0
 8001790:	bd10      	pop	{r4, pc}
 8001792:	2001      	movs	r0, #1
 8001794:	bd10      	pop	{r4, pc}
 8001796:	46c0      	nop			; (mov r8, r8)

08001798 <__aeabi_dcmple>:
 8001798:	b510      	push	{r4, lr}
 800179a:	f000 f8e1 	bl	8001960 <__ledf2>
 800179e:	2800      	cmp	r0, #0
 80017a0:	dd01      	ble.n	80017a6 <__aeabi_dcmple+0xe>
 80017a2:	2000      	movs	r0, #0
 80017a4:	bd10      	pop	{r4, pc}
 80017a6:	2001      	movs	r0, #1
 80017a8:	bd10      	pop	{r4, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)

080017ac <__aeabi_dcmpgt>:
 80017ac:	b510      	push	{r4, lr}
 80017ae:	f000 f871 	bl	8001894 <__gedf2>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	dc01      	bgt.n	80017ba <__aeabi_dcmpgt+0xe>
 80017b6:	2000      	movs	r0, #0
 80017b8:	bd10      	pop	{r4, pc}
 80017ba:	2001      	movs	r0, #1
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	46c0      	nop			; (mov r8, r8)

080017c0 <__aeabi_dcmpge>:
 80017c0:	b510      	push	{r4, lr}
 80017c2:	f000 f867 	bl	8001894 <__gedf2>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	da01      	bge.n	80017ce <__aeabi_dcmpge+0xe>
 80017ca:	2000      	movs	r0, #0
 80017cc:	bd10      	pop	{r4, pc}
 80017ce:	2001      	movs	r0, #1
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)

080017d4 <__clzsi2>:
 80017d4:	211c      	movs	r1, #28
 80017d6:	2301      	movs	r3, #1
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	4298      	cmp	r0, r3
 80017dc:	d301      	bcc.n	80017e2 <__clzsi2+0xe>
 80017de:	0c00      	lsrs	r0, r0, #16
 80017e0:	3910      	subs	r1, #16
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	4298      	cmp	r0, r3
 80017e6:	d301      	bcc.n	80017ec <__clzsi2+0x18>
 80017e8:	0a00      	lsrs	r0, r0, #8
 80017ea:	3908      	subs	r1, #8
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	4298      	cmp	r0, r3
 80017f0:	d301      	bcc.n	80017f6 <__clzsi2+0x22>
 80017f2:	0900      	lsrs	r0, r0, #4
 80017f4:	3904      	subs	r1, #4
 80017f6:	a202      	add	r2, pc, #8	; (adr r2, 8001800 <__clzsi2+0x2c>)
 80017f8:	5c10      	ldrb	r0, [r2, r0]
 80017fa:	1840      	adds	r0, r0, r1
 80017fc:	4770      	bx	lr
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	02020304 	.word	0x02020304
 8001804:	01010101 	.word	0x01010101
	...

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <ina219_calibration>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ina219_calibration()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af04      	add	r7, sp, #16
	// adjusting configuration pin
	ina219_config[0] = 0x00;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <ina219_calibration+0xa0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	ina219_config[1] = 0x39;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <ina219_calibration+0xa0>)
 8001a36:	2239      	movs	r2, #57	; 0x39
 8001a38:	705a      	strb	r2, [r3, #1]
	ina219_config[2] = 0x9F;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <ina219_calibration+0xa0>)
 8001a3c:	229f      	movs	r2, #159	; 0x9f
 8001a3e:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c2, U1_ADDRESS << 1, ina219_config, 3, HAL_MAX_DELAY);
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <ina219_calibration+0xa0>)
 8001a42:	4822      	ldr	r0, [pc, #136]	; (8001acc <ina219_calibration+0xa4>)
 8001a44:	2301      	movs	r3, #1
 8001a46:	425b      	negs	r3, r3
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	f000 ff23 	bl	8002898 <HAL_I2C_Master_Transmit>
	current_lsb = max_expected_current / 32767; // max_expected / 2^15.
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <ina219_calibration+0xa8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	491f      	ldr	r1, [pc, #124]	; (8001ad4 <ina219_calibration+0xac>)
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7fe fbdb 	bl	8000214 <__divsi3>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <ina219_calibration+0xb0>)
 8001a64:	701a      	strb	r2, [r3, #0]
	power_lsb = current_lsb * 20;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <ina219_calibration+0xb0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2214      	movs	r2, #20
 8001a6c:	4353      	muls	r3, r2
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <ina219_calibration+0xb4>)
 8001a72:	701a      	strb	r2, [r3, #0]
	cal = 0.04096 / (current_lsb * r_shunt); // 13430
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <ina219_calibration+0xb0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	001a      	movs	r2, r3
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <ina219_calibration+0xb8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4353      	muls	r3, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff fe39 	bl	80016f8 <__aeabi_i2d>
 8001a86:	0002      	movs	r2, r0
 8001a88:	000b      	movs	r3, r1
 8001a8a:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <ina219_calibration+0xbc>)
 8001a8c:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <ina219_calibration+0xc0>)
 8001a8e:	f7fe fccb 	bl	8000428 <__aeabi_ddiv>
 8001a92:	0002      	movs	r2, r0
 8001a94:	000b      	movs	r3, r1
 8001a96:	0010      	movs	r0, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	f7ff fdf7 	bl	800168c <__aeabi_d2iz>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <ina219_calibration+0xc4>)
 8001aa2:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, U1_ADDRESS, 0x05, 2, cal, 2, HAL_MAX_DELAY); // write to calibration register to operate current and power registers.
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <ina219_calibration+0xc4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	4808      	ldr	r0, [pc, #32]	; (8001acc <ina219_calibration+0xa4>)
 8001aac:	2301      	movs	r3, #1
 8001aae:	425b      	negs	r3, r3
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	2205      	movs	r2, #5
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	f001 f8fb 	bl	8002cb8 <HAL_I2C_Mem_Write>
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000a0 	.word	0x200000a0
 8001acc:	20000038 	.word	0x20000038
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	00007fff 	.word	0x00007fff
 8001ad8:	200000a3 	.word	0x200000a3
 8001adc:	200000a4 	.word	0x200000a4
 8001ae0:	200000a5 	.word	0x200000a5
 8001ae4:	88e368f1 	.word	0x88e368f1
 8001ae8:	3fa4f8b5 	.word	0x3fa4f8b5
 8001aec:	200000a8 	.word	0x200000a8

08001af0 <ina219_reading>:

void ina219_reading()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af02      	add	r7, sp, #8
	//reading shunt voltage
	HAL_I2C_Master_Transmit(&hi2c2, U1_ADDRESS << 1, &shunt_ina219, 1, HAL_MAX_DELAY);
 8001af6:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <ina219_reading+0x120>)
 8001af8:	4846      	ldr	r0, [pc, #280]	; (8001c14 <ina219_reading+0x124>)
 8001afa:	2301      	movs	r3, #1
 8001afc:	425b      	negs	r3, r3
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	2180      	movs	r1, #128	; 0x80
 8001b04:	f000 fec8 	bl	8002898 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, U1_ADDRESS << 1, &ina219_raw_shunt, 2, HAL_MAX_DELAY);
 8001b08:	4a43      	ldr	r2, [pc, #268]	; (8001c18 <ina219_reading+0x128>)
 8001b0a:	4842      	ldr	r0, [pc, #264]	; (8001c14 <ina219_reading+0x124>)
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	425b      	negs	r3, r3
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2302      	movs	r3, #2
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	f000 ffc7 	bl	8002aa8 <HAL_I2C_Master_Receive>
	ina219_shunt_value = 0.01 * ina219_raw_shunt; // mV.
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <ina219_reading+0x128>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff fdea 	bl	80016f8 <__aeabi_i2d>
 8001b24:	4a3d      	ldr	r2, [pc, #244]	; (8001c1c <ina219_reading+0x12c>)
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <ina219_reading+0x130>)
 8001b28:	f7fe ff6c 	bl	8000a04 <__aeabi_dmul>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	000b      	movs	r3, r1
 8001b30:	0010      	movs	r0, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	f7fe fc5a 	bl	80003ec <__aeabi_d2uiz>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <ina219_reading+0x134>)
 8001b3e:	801a      	strh	r2, [r3, #0]

	// reading bus voltage
	HAL_I2C_Master_Transmit(&hi2c2, U1_ADDRESS << 1, &bus_ina219, 1, HAL_MAX_DELAY);
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <ina219_reading+0x138>)
 8001b42:	4834      	ldr	r0, [pc, #208]	; (8001c14 <ina219_reading+0x124>)
 8001b44:	2301      	movs	r3, #1
 8001b46:	425b      	negs	r3, r3
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	f000 fea3 	bl	8002898 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, U1_ADDRESS << 1, &ina219_raw_bus, 2, HAL_MAX_DELAY);
 8001b52:	4a36      	ldr	r2, [pc, #216]	; (8001c2c <ina219_reading+0x13c>)
 8001b54:	482f      	ldr	r0, [pc, #188]	; (8001c14 <ina219_reading+0x124>)
 8001b56:	2301      	movs	r3, #1
 8001b58:	425b      	negs	r3, r3
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	f000 ffa2 	bl	8002aa8 <HAL_I2C_Master_Receive>
	ina219_bus_value = (ina219_raw_bus >> 3) * 4;
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <ina219_reading+0x13c>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <ina219_reading+0x140>)
 8001b72:	801a      	strh	r2, [r3, #0]
	ina219_bus_value = ina219_bus_value * 0.001; // V.
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <ina219_reading+0x140>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fdbd 	bl	80016f8 <__aeabi_i2d>
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <ina219_reading+0x144>)
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <ina219_reading+0x148>)
 8001b82:	f7fe ff3f 	bl	8000a04 <__aeabi_dmul>
 8001b86:	0002      	movs	r2, r0
 8001b88:	000b      	movs	r3, r1
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	f7fe fc2d 	bl	80003ec <__aeabi_d2uiz>
 8001b92:	0003      	movs	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <ina219_reading+0x140>)
 8001b98:	801a      	strh	r2, [r3, #0]

	// reading power
	HAL_I2C_Master_Transmit(&hi2c2, U1_ADDRESS << 1, &power_ina219, 1, HAL_MAX_DELAY);
 8001b9a:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <ina219_reading+0x14c>)
 8001b9c:	481d      	ldr	r0, [pc, #116]	; (8001c14 <ina219_reading+0x124>)
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	f000 fe76 	bl	8002898 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, U1_ADDRESS << 1, &ina219_raw_power, 2, HAL_MAX_DELAY);
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <ina219_reading+0x150>)
 8001bae:	4819      	ldr	r0, [pc, #100]	; (8001c14 <ina219_reading+0x124>)
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	f000 ff75 	bl	8002aa8 <HAL_I2C_Master_Receive>
	ina219_power_value = ina219_powerMultiplier_mW * ina219_raw_power; //mW.
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <ina219_reading+0x154>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <ina219_reading+0x150>)
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	4353      	muls	r3, r2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <ina219_reading+0x158>)
 8001bcc:	801a      	strh	r2, [r3, #0]

	// reading current
	HAL_I2C_Master_Transmit(&hi2c2, U1_ADDRESS << 1, &current_ina219, 1, HAL_MAX_DELAY);
 8001bce:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <ina219_reading+0x15c>)
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <ina219_reading+0x124>)
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	425b      	negs	r3, r3
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	f000 fe5c 	bl	8002898 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, U1_ADDRESS << 1, &ina219_raw_current, 2, HAL_MAX_DELAY);
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <ina219_reading+0x160>)
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <ina219_reading+0x124>)
 8001be4:	2301      	movs	r3, #1
 8001be6:	425b      	negs	r3, r3
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2302      	movs	r3, #2
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	f000 ff5b 	bl	8002aa8 <HAL_I2C_Master_Receive>
	ina219_current_value =  ina219_raw_power / ina219_currentDivider_mA; // mA.
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <ina219_reading+0x150>)
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <ina219_reading+0x164>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f7fe fa7f 	bl	8000100 <__udivsi3>
 8001c02:	0003      	movs	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <ina219_reading+0x168>)
 8001c08:	801a      	strh	r2, [r3, #0]
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000003 	.word	0x20000003
 8001c14:	20000038 	.word	0x20000038
 8001c18:	200000ac 	.word	0x200000ac
 8001c1c:	47ae147b 	.word	0x47ae147b
 8001c20:	3f847ae1 	.word	0x3f847ae1
 8001c24:	200000ae 	.word	0x200000ae
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	200000b0 	.word	0x200000b0
 8001c30:	200000b2 	.word	0x200000b2
 8001c34:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c38:	3f50624d 	.word	0x3f50624d
 8001c3c:	20000005 	.word	0x20000005
 8001c40:	200000b4 	.word	0x200000b4
 8001c44:	200000bc 	.word	0x200000bc
 8001c48:	200000b6 	.word	0x200000b6
 8001c4c:	20000006 	.word	0x20000006
 8001c50:	200000b8 	.word	0x200000b8
 8001c54:	20000008 	.word	0x20000008
 8001c58:	200000ba 	.word	0x200000ba

08001c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c62:	f000 fa27 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c66:	f000 f87b 	bl	8001d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6a:	f000 f901 	bl	8001e70 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001c6e:	f000 f8bf 	bl	8001df0 <MX_I2C2_Init>
  ina219_calibration();
 8001c72:	f7ff fed9 	bl	8001a28 <ina219_calibration>
  ina219_reading();
 8001c76:	f7ff ff3b 	bl	8001af0 <ina219_reading>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  ina219_calibration();
 8001c7a:	f7ff fed5 	bl	8001a28 <ina219_calibration>
	  	  ina219_reading();
 8001c7e:	f7ff ff37 	bl	8001af0 <ina219_reading>
	  	  // LTR
		  HAL_I2C_Master_Transmit(&hi2c2, ADDRESS << 1, &ID4, 1, HAL_MAX_DELAY);
 8001c82:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <main+0xdc>)
 8001c84:	482d      	ldr	r0, [pc, #180]	; (8001d3c <main+0xe0>)
 8001c86:	2301      	movs	r3, #1
 8001c88:	425b      	negs	r3, r3
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2152      	movs	r1, #82	; 0x52
 8001c90:	f000 fe02 	bl	8002898 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c2, ADDRESS << 1, rxData, 2, HAL_MAX_DELAY);
 8001c94:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <main+0xe4>)
 8001c96:	4829      	ldr	r0, [pc, #164]	; (8001d3c <main+0xe0>)
 8001c98:	2301      	movs	r3, #1
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	2152      	movs	r1, #82	; 0x52
 8001ca2:	f000 ff01 	bl	8002aa8 <HAL_I2C_Master_Receive>
		  // U4
		  HAL_I2C_Master_Transmit(&hi2c2, U4_ADDRESS << 1, &ID1, 1, HAL_MAX_DELAY);
 8001ca6:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <main+0xe8>)
 8001ca8:	4824      	ldr	r0, [pc, #144]	; (8001d3c <main+0xe0>)
 8001caa:	2301      	movs	r3, #1
 8001cac:	425b      	negs	r3, r3
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	2182      	movs	r1, #130	; 0x82
 8001cb4:	f000 fdf0 	bl	8002898 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c2, U4_ADDRESS << 1, rxData2, 2, HAL_MAX_DELAY);
 8001cb8:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <main+0xec>)
 8001cba:	4820      	ldr	r0, [pc, #128]	; (8001d3c <main+0xe0>)
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	425b      	negs	r3, r3
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	2182      	movs	r1, #130	; 0x82
 8001cc6:	f000 feef 	bl	8002aa8 <HAL_I2C_Master_Receive>

		  // U1
		  HAL_I2C_Master_Transmit(&hi2c2, U1_ADDRESS << 1, &ID2, 1, HAL_MAX_DELAY);
 8001cca:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <main+0xf0>)
 8001ccc:	481b      	ldr	r0, [pc, #108]	; (8001d3c <main+0xe0>)
 8001cce:	2301      	movs	r3, #1
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	f000 fdde 	bl	8002898 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c2, U1_ADDRESS << 1, rxData3, 2, HAL_MAX_DELAY);
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <main+0xf4>)
 8001cde:	4817      	ldr	r0, [pc, #92]	; (8001d3c <main+0xe0>)
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	f000 fedd 	bl	8002aa8 <HAL_I2C_Master_Receive>

		  // U2
		  HAL_I2C_Master_Transmit(&hi2c2, U2_ADDRESS << 1, &ID3, 1, HAL_MAX_DELAY);
 8001cee:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <main+0xf8>)
 8001cf0:	4812      	ldr	r0, [pc, #72]	; (8001d3c <main+0xe0>)
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2188      	movs	r1, #136	; 0x88
 8001cfc:	f000 fdcc 	bl	8002898 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c2, U2_ADDRESS << 1, rxData4, 2, HAL_MAX_DELAY);
 8001d00:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <main+0xfc>)
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <main+0xe0>)
 8001d04:	2301      	movs	r3, #1
 8001d06:	425b      	negs	r3, r3
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	2188      	movs	r1, #136	; 0x88
 8001d0e:	f000 fecb 	bl	8002aa8 <HAL_I2C_Master_Receive>

		  // U3
		  HAL_I2C_Master_Transmit(&hi2c2, U3_ADDRESS << 1, &ID3, 1, HAL_MAX_DELAY);
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <main+0xf8>)
 8001d14:	4809      	ldr	r0, [pc, #36]	; (8001d3c <main+0xe0>)
 8001d16:	2301      	movs	r3, #1
 8001d18:	425b      	negs	r3, r3
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	218a      	movs	r1, #138	; 0x8a
 8001d20:	f000 fdba 	bl	8002898 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c2, U3_ADDRESS << 1, rxData5, 2, HAL_MAX_DELAY);
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <main+0x100>)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <main+0xe0>)
 8001d28:	2301      	movs	r3, #1
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2302      	movs	r3, #2
 8001d30:	218a      	movs	r1, #138	; 0x8a
 8001d32:	f000 feb9 	bl	8002aa8 <HAL_I2C_Master_Receive>
	  	  ina219_calibration();
 8001d36:	e7a0      	b.n	8001c7a <main+0x1e>
 8001d38:	20000002 	.word	0x20000002
 8001d3c:	20000038 	.word	0x20000038
 8001d40:	2000008c 	.word	0x2000008c
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000090 	.word	0x20000090
 8001d4c:	20000001 	.word	0x20000001
 8001d50:	20000094 	.word	0x20000094
 8001d54:	2000009e 	.word	0x2000009e
 8001d58:	20000098 	.word	0x20000098
 8001d5c:	2000009c 	.word	0x2000009c

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b093      	sub	sp, #76	; 0x4c
 8001d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d66:	2414      	movs	r4, #20
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2334      	movs	r3, #52	; 0x34
 8001d6e:	001a      	movs	r2, r3
 8001d70:	2100      	movs	r1, #0
 8001d72:	f002 feef 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	0018      	movs	r0, r3
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f002 fee8 	bl	8004b54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f002 fa09 	bl	80041a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d8e:	193b      	adds	r3, r7, r4
 8001d90:	2202      	movs	r2, #2
 8001d92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	0052      	lsls	r2, r2, #1
 8001d9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dae:	193b      	adds	r3, r7, r4
 8001db0:	0018      	movs	r0, r3
 8001db2:	f002 fa35 	bl	8004220 <HAL_RCC_OscConfig>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001dba:	f000 f89d 	bl	8001ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2100      	movs	r1, #0
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f002 fd30 	bl	8004840 <HAL_RCC_ClockConfig>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001de4:	f000 f888 	bl	8001ef8 <Error_Handler>
  }
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b013      	add	sp, #76	; 0x4c
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001df6:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <MX_I2C2_Init+0x78>)
 8001df8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <MX_I2C2_Init+0x7c>)
 8001dfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 fc9d 	bl	800276c <HAL_I2C_Init>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e36:	f000 f85f 	bl	8001ef8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f002 f916 	bl	8004070 <HAL_I2CEx_ConfigAnalogFilter>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d001      	beq.n	8001e4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e48:	f000 f856 	bl	8001ef8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <MX_I2C2_Init+0x74>)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	0018      	movs	r0, r3
 8001e52:	f002 f959 	bl	8004108 <HAL_I2CEx_ConfigDigitalFilter>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d001      	beq.n	8001e5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e5a:	f000 f84d 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000038 	.word	0x20000038
 8001e68:	40005800 	.word	0x40005800
 8001e6c:	00303d5b 	.word	0x00303d5b

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	240c      	movs	r4, #12
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	2314      	movs	r3, #20
 8001e7e:	001a      	movs	r2, r3
 8001e80:	2100      	movs	r1, #0
 8001e82:	f002 fe67 	bl	8004b54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_GPIO_Init+0x80>)
 8001e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <MX_GPIO_Init+0x80>)
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_GPIO_Init+0x80>)
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_GPIO_Init+0x80>)
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <MX_GPIO_Init+0x80>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_GPIO_Init+0x80>)
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <MX_GPIO_Init+0x84>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2103      	movs	r1, #3
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 fc37 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec2:	0021      	movs	r1, r4
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	2201      	movs	r2, #1
 8001ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <MX_GPIO_Init+0x84>)
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	f000 fac0 	bl	8002468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b009      	add	sp, #36	; 0x24
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	50000400 	.word	0x50000400

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <Error_Handler+0x8>
	...

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_MspInit+0x44>)
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_MspInit+0x44>)
 8001f10:	2101      	movs	r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_MspInit+0x44>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x44>)
 8001f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_MspInit+0x44>)
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0549      	lsls	r1, r1, #21
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_MspInit+0x44>)
 8001f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	055b      	lsls	r3, r3, #21
 8001f38:	4013      	ands	r3, r2
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	2414      	movs	r4, #20
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	0018      	movs	r0, r3
 8001f5a:	2314      	movs	r3, #20
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f002 fdf8 	bl	8004b54 <memset>
  if(hi2c->Instance==I2C2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_I2C_MspInit+0xa0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d139      	bne.n	8001fe2 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_I2C_MspInit+0xa4>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_I2C_MspInit+0xa4>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_I2C_MspInit+0xa4>)
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	22c0      	movs	r2, #192	; 0xc0
 8001f8a:	0152      	lsls	r2, r2, #5
 8001f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8e:	0021      	movs	r1, r4
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	2212      	movs	r2, #18
 8001f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2206      	movs	r2, #6
 8001fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	187a      	adds	r2, r7, r1
 8001faa:	23a0      	movs	r3, #160	; 0xa0
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 fa59 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_I2C_MspInit+0xa4>)
 8001fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_I2C_MspInit+0xa4>)
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	03c9      	lsls	r1, r1, #15
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_I2C_MspInit+0xa4>)
 8001fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	03db      	lsls	r3, r3, #15
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f000 f99e 	bl	8002318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8001fdc:	2018      	movs	r0, #24
 8001fde:	f000 f9b0 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b00b      	add	sp, #44	; 0x2c
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40005800 	.word	0x40005800
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler+0x4>

08002000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002018:	f000 f8b6 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <I2C2_IRQHandler+0x2c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	23e0      	movs	r3, #224	; 0xe0
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4013      	ands	r3, r2
 8002034:	d004      	beq.n	8002040 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <I2C2_IRQHandler+0x2c>)
 8002038:	0018      	movs	r0, r3
 800203a:	f000 ff85 	bl	8002f48 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800203e:	e003      	b.n	8002048 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <I2C2_IRQHandler+0x2c>)
 8002042:	0018      	movs	r0, r3
 8002044:	f000 ff66 	bl	8002f14 <HAL_I2C_EV_IRQHandler>
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	20000038 	.word	0x20000038

08002054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002062:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002064:	f7ff fff6 	bl	8002054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <LoopForever+0x6>)
  ldr r1, =_edata
 800206a:	490d      	ldr	r1, [pc, #52]	; (80020a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <LoopForever+0xe>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002070:	e002      	b.n	8002078 <LoopCopyDataInit>

08002072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002076:	3304      	adds	r3, #4

08002078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800207c:	d3f9      	bcc.n	8002072 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002080:	4c0a      	ldr	r4, [pc, #40]	; (80020ac <LoopForever+0x16>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002084:	e001      	b.n	800208a <LoopFillZerobss>

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002088:	3204      	adds	r2, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800208e:	f002 fd69 	bl	8004b64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002092:	f7ff fde3 	bl	8001c5c <main>

08002096 <LoopForever>:

LoopForever:
  b LoopForever
 8002096:	e7fe      	b.n	8002096 <LoopForever>
  ldr   r0, =_estack
 8002098:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80020a4:	08004c4c 	.word	0x08004c4c
  ldr r2, =_sbss
 80020a8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80020ac:	200000c4 	.word	0x200000c4

080020b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC1_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_Init+0x3c>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_Init+0x3c>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0049      	lsls	r1, r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ce:	2003      	movs	r0, #3
 80020d0:	f000 f810 	bl	80020f4 <HAL_InitTick>
 80020d4:	1e03      	subs	r3, r0, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	e001      	b.n	80020e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff ff10 	bl	8001f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020fc:	230f      	movs	r3, #15
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_InitTick+0x88>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d02b      	beq.n	8002164 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_InitTick+0x8c>)
 800210e:	681c      	ldr	r4, [r3, #0]
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_InitTick+0x88>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	0019      	movs	r1, r3
 8002116:	23fa      	movs	r3, #250	; 0xfa
 8002118:	0098      	lsls	r0, r3, #2
 800211a:	f7fd fff1 	bl	8000100 <__udivsi3>
 800211e:	0003      	movs	r3, r0
 8002120:	0019      	movs	r1, r3
 8002122:	0020      	movs	r0, r4
 8002124:	f7fd ffec 	bl	8000100 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f919 	bl	8002362 <HAL_SYSTICK_Config>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d112      	bne.n	800215a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d80a      	bhi.n	8002150 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	2301      	movs	r3, #1
 800213e:	425b      	negs	r3, r3
 8002140:	2200      	movs	r2, #0
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f8e8 	bl	8002318 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_InitTick+0x90>)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e00d      	b.n	800216c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e008      	b.n	800216c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800215a:	230f      	movs	r3, #15
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	e003      	b.n	800216c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002164:	230f      	movs	r3, #15
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b005      	add	sp, #20
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	20000018 	.word	0x20000018
 8002180:	20000010 	.word	0x20000010
 8002184:	20000014 	.word	0x20000014

08002188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_IncTick+0x1c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	001a      	movs	r2, r3
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_IncTick+0x20>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	18d2      	adds	r2, r2, r3
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_IncTick+0x20>)
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	20000018 	.word	0x20000018
 80021a8:	200000c0 	.word	0x200000c0

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <HAL_GetTick+0x10>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	200000c0 	.word	0x200000c0

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	0002      	movs	r2, r0
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b7f      	cmp	r3, #127	; 0x7f
 80021d2:	d809      	bhi.n	80021e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	001a      	movs	r2, r3
 80021da:	231f      	movs	r3, #31
 80021dc:	401a      	ands	r2, r3
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_EnableIRQ+0x30>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	4091      	lsls	r1, r2
 80021e4:	000a      	movs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	0002      	movs	r2, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b7f      	cmp	r3, #127	; 0x7f
 8002208:	d828      	bhi.n	800225c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800220a:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <__NVIC_SetPriority+0xd4>)
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	33c0      	adds	r3, #192	; 0xc0
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	589b      	ldr	r3, [r3, r2]
 800221a:	1dfa      	adds	r2, r7, #7
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	0011      	movs	r1, r2
 8002220:	2203      	movs	r2, #3
 8002222:	400a      	ands	r2, r1
 8002224:	00d2      	lsls	r2, r2, #3
 8002226:	21ff      	movs	r1, #255	; 0xff
 8002228:	4091      	lsls	r1, r2
 800222a:	000a      	movs	r2, r1
 800222c:	43d2      	mvns	r2, r2
 800222e:	401a      	ands	r2, r3
 8002230:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	22ff      	movs	r2, #255	; 0xff
 8002238:	401a      	ands	r2, r3
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	0018      	movs	r0, r3
 8002240:	2303      	movs	r3, #3
 8002242:	4003      	ands	r3, r0
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002248:	481f      	ldr	r0, [pc, #124]	; (80022c8 <__NVIC_SetPriority+0xd4>)
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b25b      	sxtb	r3, r3
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	430a      	orrs	r2, r1
 8002254:	33c0      	adds	r3, #192	; 0xc0
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800225a:	e031      	b.n	80022c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <__NVIC_SetPriority+0xd8>)
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0019      	movs	r1, r3
 8002264:	230f      	movs	r3, #15
 8002266:	400b      	ands	r3, r1
 8002268:	3b08      	subs	r3, #8
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3306      	adds	r3, #6
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	3304      	adds	r3, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1dfa      	adds	r2, r7, #7
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	0011      	movs	r1, r2
 800227c:	2203      	movs	r2, #3
 800227e:	400a      	ands	r2, r1
 8002280:	00d2      	lsls	r2, r2, #3
 8002282:	21ff      	movs	r1, #255	; 0xff
 8002284:	4091      	lsls	r1, r2
 8002286:	000a      	movs	r2, r1
 8002288:	43d2      	mvns	r2, r2
 800228a:	401a      	ands	r2, r3
 800228c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	019b      	lsls	r3, r3, #6
 8002292:	22ff      	movs	r2, #255	; 0xff
 8002294:	401a      	ands	r2, r3
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	2303      	movs	r3, #3
 800229e:	4003      	ands	r3, r0
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a4:	4809      	ldr	r0, [pc, #36]	; (80022cc <__NVIC_SetPriority+0xd8>)
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	001c      	movs	r4, r3
 80022ac:	230f      	movs	r3, #15
 80022ae:	4023      	ands	r3, r4
 80022b0:	3b08      	subs	r3, #8
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	430a      	orrs	r2, r1
 80022b6:	3306      	adds	r3, #6
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	18c3      	adds	r3, r0, r3
 80022bc:	3304      	adds	r3, #4
 80022be:	601a      	str	r2, [r3, #0]
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b003      	add	sp, #12
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1e5a      	subs	r2, r3, #1
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	045b      	lsls	r3, r3, #17
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d301      	bcc.n	80022e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e4:	2301      	movs	r3, #1
 80022e6:	e010      	b.n	800230a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <SysTick_Config+0x44>)
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	3a01      	subs	r2, #1
 80022ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f0:	2301      	movs	r3, #1
 80022f2:	425b      	negs	r3, r3
 80022f4:	2103      	movs	r1, #3
 80022f6:	0018      	movs	r0, r3
 80022f8:	f7ff ff7c 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Config+0x44>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SysTick_Config+0x44>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	210f      	movs	r1, #15
 8002324:	187b      	adds	r3, r7, r1
 8002326:	1c02      	adds	r2, r0, #0
 8002328:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	187b      	adds	r3, r7, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25b      	sxtb	r3, r3
 8002332:	0011      	movs	r1, r2
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	0002      	movs	r2, r0
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b25b      	sxtb	r3, r3
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff ff33 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	b002      	add	sp, #8
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff ffaf 	bl	80022d0 <SysTick_Config>
 8002372:	0003      	movs	r3, r0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002384:	210f      	movs	r1, #15
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2225      	movs	r2, #37	; 0x25
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d006      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2204      	movs	r2, #4
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e049      	b.n	800243a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	210e      	movs	r1, #14
 80023b2:	438a      	bics	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	438a      	bics	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	491d      	ldr	r1, [pc, #116]	; (8002448 <HAL_DMA_Abort_IT+0xcc>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_DMA_Abort_IT+0xd0>)
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	221c      	movs	r2, #28
 80023e0:	4013      	ands	r3, r2
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_DMA_Abort_IT+0xd0>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	490f      	ldr	r1, [pc, #60]	; (8002448 <HAL_DMA_Abort_IT+0xcc>)
 800240a:	400a      	ands	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002416:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2225      	movs	r2, #37	; 0x25
 800241c:	2101      	movs	r1, #1
 800241e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	0010      	movs	r0, r2
 8002438:	4798      	blx	r3
    }
  }
  return status;
 800243a:	230f      	movs	r3, #15
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}
 8002448:	fffffeff 	.word	0xfffffeff
 800244c:	40020000 	.word	0x40020000

08002450 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2225      	movs	r2, #37	; 0x25
 800245c:	5c9b      	ldrb	r3, [r3, r2]
 800245e:	b2db      	uxtb	r3, r3
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e147      	b.n	8002708 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4091      	lsls	r1, r2
 8002482:	000a      	movs	r2, r1
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d100      	bne.n	8002490 <HAL_GPIO_Init+0x28>
 800248e:	e138      	b.n	8002702 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x40>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	409a      	lsls	r2, r3
 80024b6:	0013      	movs	r3, r2
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	409a      	lsls	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	43da      	mvns	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	2201      	movs	r2, #1
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
 80024fc:	0013      	movs	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2203      	movs	r2, #3
 8002510:	4013      	ands	r3, r2
 8002512:	2b03      	cmp	r3, #3
 8002514:	d017      	beq.n	8002546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	4013      	ands	r3, r2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d123      	bne.n	800259a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	58d3      	ldr	r3, [r2, r3]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2207      	movs	r2, #7
 8002564:	4013      	ands	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2107      	movs	r1, #7
 800257e:	400b      	ands	r3, r1
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	401a      	ands	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	23c0      	movs	r3, #192	; 0xc0
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_GPIO_Init+0x174>
 80025da:	e092      	b.n	8002702 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3318      	adds	r3, #24
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2203      	movs	r2, #3
 80025ee:	4013      	ands	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	220f      	movs	r2, #15
 80025f4:	409a      	lsls	r2, r3
 80025f6:	0013      	movs	r3, r2
 80025f8:	43da      	mvns	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	23a0      	movs	r3, #160	; 0xa0
 8002604:	05db      	lsls	r3, r3, #23
 8002606:	429a      	cmp	r2, r3
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1ca>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a45      	ldr	r2, [pc, #276]	; (8002724 <HAL_GPIO_Init+0x2bc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a44      	ldr	r2, [pc, #272]	; (8002728 <HAL_GPIO_Init+0x2c0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1c2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a43      	ldr	r2, [pc, #268]	; (800272c <HAL_GPIO_Init+0x2c4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1be>
 8002622:	2303      	movs	r3, #3
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 8002626:	2305      	movs	r3, #5
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 8002632:	2300      	movs	r3, #0
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	2103      	movs	r1, #3
 8002638:	400a      	ands	r2, r1
 800263a:	00d2      	lsls	r2, r2, #3
 800263c:	4093      	lsls	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002644:	4936      	ldr	r1, [pc, #216]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3318      	adds	r3, #24
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43da      	mvns	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	035b      	lsls	r3, r3, #13
 800266a:	4013      	ands	r3, r2
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43da      	mvns	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	039b      	lsls	r3, r3, #14
 8002694:	4013      	ands	r3, r2
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026a8:	2384      	movs	r3, #132	; 0x84
 80026aa:	58d3      	ldr	r3, [r2, r3]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43da      	mvns	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	4013      	ands	r3, r2
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026cc:	4914      	ldr	r1, [pc, #80]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026ce:	2284      	movs	r2, #132	; 0x84
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	58d3      	ldr	r3, [r2, r3]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43da      	mvns	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	025b      	lsls	r3, r3, #9
 80026ee:	4013      	ands	r3, r2
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026fa:	4909      	ldr	r1, [pc, #36]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	40da      	lsrs	r2, r3
 8002710:	1e13      	subs	r3, r2, #0
 8002712:	d000      	beq.n	8002716 <HAL_GPIO_Init+0x2ae>
 8002714:	e6b0      	b.n	8002478 <HAL_GPIO_Init+0x10>
  }
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b006      	add	sp, #24
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021800 	.word	0x40021800
 8002724:	50000400 	.word	0x50000400
 8002728:	50000800 	.word	0x50000800
 800272c:	50000c00 	.word	0x50000c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	0008      	movs	r0, r1
 800273a:	0011      	movs	r1, r2
 800273c:	1cbb      	adds	r3, r7, #2
 800273e:	1c02      	adds	r2, r0, #0
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	1c7b      	adds	r3, r7, #1
 8002744:	1c0a      	adds	r2, r1, #0
 8002746:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002748:	1c7b      	adds	r3, r7, #1
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002750:	1cbb      	adds	r3, r7, #2
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275a:	1cbb      	adds	r3, r7, #2
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e082      	b.n	8002884 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2241      	movs	r2, #65	; 0x41
 8002782:	5c9b      	ldrb	r3, [r3, r2]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff fbd9 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2241      	movs	r2, #65	; 0x41
 800279e:	2124      	movs	r1, #36	; 0x24
 80027a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	438a      	bics	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_I2C_Init+0x120>)
 80027bc:	400a      	ands	r2, r1
 80027be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4931      	ldr	r1, [pc, #196]	; (8002890 <HAL_I2C_Init+0x124>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d108      	bne.n	80027ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0209      	lsls	r1, r1, #8
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	e007      	b.n	80027fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2184      	movs	r1, #132	; 0x84
 80027f4:	0209      	lsls	r1, r1, #8
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d104      	bne.n	800280c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	491f      	ldr	r1, [pc, #124]	; (8002894 <HAL_I2C_Init+0x128>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	491a      	ldr	r1, [pc, #104]	; (8002890 <HAL_I2C_Init+0x124>)
 8002828:	400a      	ands	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	431a      	orrs	r2, r3
 8002836:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69d9      	ldr	r1, [r3, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1a      	ldr	r2, [r3, #32]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2241      	movs	r2, #65	; 0x41
 8002870:	2120      	movs	r1, #32
 8002872:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2242      	movs	r2, #66	; 0x42
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}
 800288c:	f0ffffff 	.word	0xf0ffffff
 8002890:	ffff7fff 	.word	0xffff7fff
 8002894:	02008000 	.word	0x02008000

08002898 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	0008      	movs	r0, r1
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	0019      	movs	r1, r3
 80028a6:	230a      	movs	r3, #10
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	1c02      	adds	r2, r0, #0
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	2308      	movs	r3, #8
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	1c0a      	adds	r2, r1, #0
 80028b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	5c9b      	ldrb	r3, [r3, r2]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d000      	beq.n	80028c4 <HAL_I2C_Master_Transmit+0x2c>
 80028c2:	e0e7      	b.n	8002a94 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	5c9b      	ldrb	r3, [r3, r2]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Master_Transmit+0x3a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0e1      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1fe>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028da:	f7ff fc67 	bl	80021ac <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	0219      	lsls	r1, r3, #8
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2319      	movs	r3, #25
 80028ee:	2201      	movs	r2, #1
 80028f0:	f001 f8ec 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2241      	movs	r2, #65	; 0x41
 8002900:	2121      	movs	r1, #33	; 0x21
 8002902:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2242      	movs	r2, #66	; 0x42
 8002908:	2110      	movs	r1, #16
 800290a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2208      	movs	r2, #8
 800291c:	18ba      	adds	r2, r7, r2
 800291e:	8812      	ldrh	r2, [r2, #0]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2bff      	cmp	r3, #255	; 0xff
 8002930:	d911      	bls.n	8002956 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22ff      	movs	r2, #255	; 0xff
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	b2da      	uxtb	r2, r3
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	045c      	lsls	r4, r3, #17
 8002942:	230a      	movs	r3, #10
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	8819      	ldrh	r1, [r3, #0]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <HAL_I2C_Master_Transmit+0x208>)
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	0023      	movs	r3, r4
 8002950:	f001 faf0 	bl	8003f34 <I2C_TransferConfig>
 8002954:	e075      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	b2da      	uxtb	r2, r3
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	049c      	lsls	r4, r3, #18
 800296a:	230a      	movs	r3, #10
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	8819      	ldrh	r1, [r3, #0]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_I2C_Master_Transmit+0x208>)
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	0023      	movs	r3, r4
 8002978:	f001 fadc 	bl	8003f34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800297c:	e061      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0018      	movs	r0, r3
 8002986:	f001 f8e0 	bl	8003b4a <I2C_WaitOnTXISFlagUntilTimeout>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e081      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d03a      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x1aa>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d136      	bne.n	8002a42 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	0013      	movs	r3, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	f001 f873 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e053      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2bff      	cmp	r3, #255	; 0xff
 80029f6:	d911      	bls.n	8002a1c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	22ff      	movs	r2, #255	; 0xff
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	045c      	lsls	r4, r3, #17
 8002a08:	230a      	movs	r3, #10
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	8819      	ldrh	r1, [r3, #0]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	2300      	movs	r3, #0
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	0023      	movs	r3, r4
 8002a16:	f001 fa8d 	bl	8003f34 <I2C_TransferConfig>
 8002a1a:	e012      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	049c      	lsls	r4, r3, #18
 8002a30:	230a      	movs	r3, #10
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	8819      	ldrh	r1, [r3, #0]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	0023      	movs	r3, r4
 8002a3e:	f001 fa79 	bl	8003f34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d198      	bne.n	800297e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f001 f8b8 	bl	8003bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e01a      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <HAL_I2C_Master_Transmit+0x20c>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2241      	movs	r2, #65	; 0x41
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2242      	movs	r2, #66	; 0x42
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2240      	movs	r2, #64	; 0x40
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b007      	add	sp, #28
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	80002000 	.word	0x80002000
 8002aa4:	fe00e800 	.word	0xfe00e800

08002aa8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	1c02      	adds	r2, r0, #0
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	2308      	movs	r3, #8
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2241      	movs	r2, #65	; 0x41
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d000      	beq.n	8002ad4 <HAL_I2C_Master_Receive+0x2c>
 8002ad2:	e0e8      	b.n	8002ca6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Master_Receive+0x3a>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0e2      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x200>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aea:	f7ff fb5f 	bl	80021ac <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	0219      	lsls	r1, r3, #8
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2319      	movs	r3, #25
 8002afe:	2201      	movs	r2, #1
 8002b00:	f000 ffe4 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cd      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2241      	movs	r2, #65	; 0x41
 8002b10:	2122      	movs	r1, #34	; 0x22
 8002b12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2242      	movs	r2, #66	; 0x42
 8002b18:	2110      	movs	r1, #16
 8002b1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	18ba      	adds	r2, r7, r2
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d911      	bls.n	8002b66 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22ff      	movs	r2, #255	; 0xff
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	045c      	lsls	r4, r3, #17
 8002b52:	230a      	movs	r3, #10
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	8819      	ldrh	r1, [r3, #0]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_I2C_Master_Receive+0x208>)
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	0023      	movs	r3, r4
 8002b60:	f001 f9e8 	bl	8003f34 <I2C_TransferConfig>
 8002b64:	e076      	b.n	8002c54 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	049c      	lsls	r4, r3, #18
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	8819      	ldrh	r1, [r3, #0]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_I2C_Master_Receive+0x208>)
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	0023      	movs	r3, r4
 8002b88:	f001 f9d4 	bl	8003f34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b8c:	e062      	b.n	8002c54 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f001 f853 	bl	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9a:	1e03      	subs	r3, r0, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e082      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03a      	beq.n	8002c54 <HAL_I2C_Master_Receive+0x1ac>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d136      	bne.n	8002c54 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	0013      	movs	r3, r2
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	f000 ff6a 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e053      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d911      	bls.n	8002c2e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	045c      	lsls	r4, r3, #17
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	8819      	ldrh	r1, [r3, #0]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	0023      	movs	r3, r4
 8002c28:	f001 f984 	bl	8003f34 <I2C_TransferConfig>
 8002c2c:	e012      	b.n	8002c54 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	049c      	lsls	r4, r3, #18
 8002c42:	230a      	movs	r3, #10
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	8819      	ldrh	r1, [r3, #0]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	0023      	movs	r3, r4
 8002c50:	f001 f970 	bl	8003f34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d197      	bne.n	8002b8e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 ffaf 	bl	8003bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e01a      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2220      	movs	r2, #32
 8002c78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <HAL_I2C_Master_Receive+0x20c>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2241      	movs	r2, #65	; 0x41
 8002c8e:	2120      	movs	r1, #32
 8002c90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2242      	movs	r2, #66	; 0x42
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
  }
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b007      	add	sp, #28
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	80002400 	.word	0x80002400
 8002cb4:	fe00e800 	.word	0xfe00e800

08002cb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	000c      	movs	r4, r1
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	1c22      	adds	r2, r4, #0
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	2308      	movs	r3, #8
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	1c02      	adds	r2, r0, #0
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	1dbb      	adds	r3, r7, #6
 8002cd8:	1c0a      	adds	r2, r1, #0
 8002cda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2241      	movs	r2, #65	; 0x41
 8002ce0:	5c9b      	ldrb	r3, [r3, r2]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d000      	beq.n	8002cea <HAL_I2C_Mem_Write+0x32>
 8002ce8:	e10c      	b.n	8002f04 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_I2C_Mem_Write+0x42>
 8002cf0:	232c      	movs	r3, #44	; 0x2c
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0ff      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	5c9b      	ldrb	r3, [r3, r2]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2C_Mem_Write+0x5c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0f8      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	2101      	movs	r1, #1
 8002d1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d1c:	f7ff fa46 	bl	80021ac <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	0219      	lsls	r1, r3, #8
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2319      	movs	r3, #25
 8002d30:	2201      	movs	r2, #1
 8002d32:	f000 fecb 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0e3      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2241      	movs	r2, #65	; 0x41
 8002d42:	2121      	movs	r1, #33	; 0x21
 8002d44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2242      	movs	r2, #66	; 0x42
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	222c      	movs	r2, #44	; 0x2c
 8002d5e:	18ba      	adds	r2, r7, r2
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d6a:	1dbb      	adds	r3, r7, #6
 8002d6c:	881c      	ldrh	r4, [r3, #0]
 8002d6e:	2308      	movs	r3, #8
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	230a      	movs	r3, #10
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	8819      	ldrh	r1, [r3, #0]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	0023      	movs	r3, r4
 8002d86:	f000 fa71 	bl	800326c <I2C_RequestMemoryWrite>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0b5      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2bff      	cmp	r3, #255	; 0xff
 8002da2:	d911      	bls.n	8002dc8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	22ff      	movs	r2, #255	; 0xff
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	045c      	lsls	r4, r3, #17
 8002db4:	230a      	movs	r3, #10
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	8819      	ldrh	r1, [r3, #0]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	0023      	movs	r3, r4
 8002dc2:	f001 f8b7 	bl	8003f34 <I2C_TransferConfig>
 8002dc6:	e012      	b.n	8002dee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	049c      	lsls	r4, r3, #18
 8002ddc:	230a      	movs	r3, #10
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	8819      	ldrh	r1, [r3, #0]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	2300      	movs	r3, #0
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	0023      	movs	r3, r4
 8002dea:	f001 f8a3 	bl	8003f34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 fea8 	bl	8003b4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002dfa:	1e03      	subs	r3, r0, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e081      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03a      	beq.n	8002eb2 <HAL_I2C_Mem_Write+0x1fa>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d136      	bne.n	8002eb2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	f000 fe3b 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e053      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2bff      	cmp	r3, #255	; 0xff
 8002e66:	d911      	bls.n	8002e8c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	22ff      	movs	r2, #255	; 0xff
 8002e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	045c      	lsls	r4, r3, #17
 8002e78:	230a      	movs	r3, #10
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	8819      	ldrh	r1, [r3, #0]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	2300      	movs	r3, #0
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	0023      	movs	r3, r4
 8002e86:	f001 f855 	bl	8003f34 <I2C_TransferConfig>
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	049c      	lsls	r4, r3, #18
 8002ea0:	230a      	movs	r3, #10
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	8819      	ldrh	r1, [r3, #0]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	0023      	movs	r3, r4
 8002eae:	f001 f841 	bl	8003f34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d198      	bne.n	8002dee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fe80 	bl	8003bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e01a      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	490b      	ldr	r1, [pc, #44]	; (8002f10 <HAL_I2C_Mem_Write+0x258>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2241      	movs	r2, #65	; 0x41
 8002eec:	2120      	movs	r1, #32
 8002eee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2242      	movs	r2, #66	; 0x42
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b007      	add	sp, #28
 8002f0c:	bd90      	pop	{r4, r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
  }
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4013      	ands	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f70:	d00a      	beq.n	8002f88 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	2201      	movs	r2, #1
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	0052      	lsls	r2, r2, #1
 8002f86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f98:	d00a      	beq.n	8002fb0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	00d2      	lsls	r2, r2, #3
 8002fae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	220b      	movs	r2, #11
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d005      	beq.n	8002ff2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fc21 	bl	8003834 <I2C_ITError>
  }
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b002      	add	sp, #8
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	0008      	movs	r0, r1
 8003024:	0011      	movs	r1, r2
 8003026:	1cfb      	adds	r3, r7, #3
 8003028:	1c02      	adds	r2, r0, #0
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	003b      	movs	r3, r7
 800302e:	1c0a      	adds	r2, r1, #0
 8003030:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b002      	add	sp, #8
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2240      	movs	r2, #64	; 0x40
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <I2C_Slave_ISR_IT+0x24>
 800308c:	2302      	movs	r3, #2
 800308e:	e0e6      	b.n	800325e <I2C_Slave_ISR_IT+0x1f2>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d009      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030a6:	d005      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 fa48 	bl	8003544 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2210      	movs	r2, #16
 80030b8:	4013      	ands	r3, r2
 80030ba:	d052      	beq.n	8003162 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2210      	movs	r2, #16
 80030c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030c2:	d04e      	beq.n	8003162 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d12d      	bne.n	800312a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2241      	movs	r2, #65	; 0x41
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b28      	cmp	r3, #40	; 0x28
 80030d8:	d10b      	bne.n	80030f2 <I2C_Slave_ISR_IT+0x86>
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	049b      	lsls	r3, r3, #18
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d106      	bne.n	80030f2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	0011      	movs	r1, r2
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fb4a 	bl	8003784 <I2C_ITListenCplt>
 80030f0:	e036      	b.n	8003160 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2241      	movs	r2, #65	; 0x41
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b29      	cmp	r3, #41	; 0x29
 80030fc:	d110      	bne.n	8003120 <I2C_Slave_ISR_IT+0xb4>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	4a59      	ldr	r2, [pc, #356]	; (8003268 <I2C_Slave_ISR_IT+0x1fc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00c      	beq.n	8003120 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2210      	movs	r2, #16
 800310c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fc9a 	bl	8003a4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f9af 	bl	800347c <I2C_ITSlaveSeqCplt>
 800311e:	e01f      	b.n	8003160 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2210      	movs	r2, #16
 8003126:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003128:	e091      	b.n	800324e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2210      	movs	r2, #16
 8003130:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	2204      	movs	r2, #4
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <I2C_Slave_ISR_IT+0xe4>
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	045b      	lsls	r3, r3, #17
 800314a:	429a      	cmp	r2, r3
 800314c:	d000      	beq.n	8003150 <I2C_Slave_ISR_IT+0xe4>
 800314e:	e07e      	b.n	800324e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fb6b 	bl	8003834 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800315e:	e076      	b.n	800324e <I2C_Slave_ISR_IT+0x1e2>
 8003160:	e075      	b.n	800324e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2204      	movs	r2, #4
 8003166:	4013      	ands	r3, r2
 8003168:	d02f      	beq.n	80031ca <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2204      	movs	r2, #4
 800316e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003170:	d02b      	beq.n	80031ca <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d018      	beq.n	80031ae <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d14c      	bne.n	8003252 <I2C_Slave_ISR_IT+0x1e6>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <I2C_Slave_ISR_IT+0x1fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d048      	beq.n	8003252 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f95a 	bl	800347c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031c8:	e043      	b.n	8003252 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2208      	movs	r2, #8
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00a      	beq.n	80031e8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2208      	movs	r2, #8
 80031d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031d8:	d006      	beq.n	80031e8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	0011      	movs	r1, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 f8a7 	bl	8003334 <I2C_ITAddrCplt>
 80031e6:	e035      	b.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d031      	beq.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031f6:	d02d      	beq.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
 8003232:	e00f      	b.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	045b      	lsls	r3, r3, #17
 800323a:	429a      	cmp	r2, r3
 800323c:	d002      	beq.n	8003244 <I2C_Slave_ISR_IT+0x1d8>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 f918 	bl	800347c <I2C_ITSlaveSeqCplt>
 800324c:	e002      	b.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	e000      	b.n	8003254 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8003252:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2240      	movs	r2, #64	; 0x40
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b006      	add	sp, #24
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	ffff0000 	.word	0xffff0000

0800326c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	000c      	movs	r4, r1
 8003276:	0010      	movs	r0, r2
 8003278:	0019      	movs	r1, r3
 800327a:	250a      	movs	r5, #10
 800327c:	197b      	adds	r3, r7, r5
 800327e:	1c22      	adds	r2, r4, #0
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	2308      	movs	r3, #8
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	1c02      	adds	r2, r0, #0
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	1dbb      	adds	r3, r7, #6
 800328c:	1c0a      	adds	r2, r1, #0
 800328e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003290:	1dbb      	adds	r3, r7, #6
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	045c      	lsls	r4, r3, #17
 800329a:	197b      	adds	r3, r7, r5
 800329c:	8819      	ldrh	r1, [r3, #0]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <I2C_RequestMemoryWrite+0xc4>)
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	0023      	movs	r3, r4
 80032a6:	f000 fe45 	bl	8003f34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 fc4a 	bl	8003b4a <I2C_WaitOnTXISFlagUntilTimeout>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d001      	beq.n	80032be <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e033      	b.n	8003326 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032be:	1dbb      	adds	r3, r7, #6
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c6:	2308      	movs	r3, #8
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
 80032d4:	e019      	b.n	800330a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032d6:	2308      	movs	r3, #8
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	b29b      	uxth	r3, r3
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ea:	6a39      	ldr	r1, [r7, #32]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f000 fc2b 	bl	8003b4a <I2C_WaitOnTXISFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e014      	b.n	8003326 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	2308      	movs	r3, #8
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	0013      	movs	r3, r2
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	f000 fbd8 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d001      	beq.n	8003324 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bdb0      	pop	{r4, r5, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	80002000 	.word	0x80002000

08003334 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003334:	b5b0      	push	{r4, r5, r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2241      	movs	r2, #65	; 0x41
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	001a      	movs	r2, r3
 8003348:	2328      	movs	r3, #40	; 0x28
 800334a:	4013      	ands	r3, r2
 800334c:	2b28      	cmp	r3, #40	; 0x28
 800334e:	d000      	beq.n	8003352 <I2C_ITAddrCplt+0x1e>
 8003350:	e088      	b.n	8003464 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	b2da      	uxtb	r2, r3
 800335c:	250f      	movs	r5, #15
 800335e:	197b      	adds	r3, r7, r5
 8003360:	2101      	movs	r1, #1
 8003362:	400a      	ands	r2, r1
 8003364:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	b29a      	uxth	r2, r3
 8003370:	200c      	movs	r0, #12
 8003372:	183b      	adds	r3, r7, r0
 8003374:	21fe      	movs	r1, #254	; 0xfe
 8003376:	400a      	ands	r2, r1
 8003378:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	b29a      	uxth	r2, r3
 8003382:	240a      	movs	r4, #10
 8003384:	193b      	adds	r3, r7, r4
 8003386:	0592      	lsls	r2, r2, #22
 8003388:	0d92      	lsrs	r2, r2, #22
 800338a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	b29a      	uxth	r2, r3
 8003394:	2308      	movs	r3, #8
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	21fe      	movs	r1, #254	; 0xfe
 800339a:	400a      	ands	r2, r1
 800339c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d148      	bne.n	8003438 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80033a6:	0021      	movs	r1, r4
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	09db      	lsrs	r3, r3, #7
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	183b      	adds	r3, r7, r0
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	4053      	eors	r3, r2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	001a      	movs	r2, r3
 80033ba:	2306      	movs	r3, #6
 80033bc:	4013      	ands	r3, r2
 80033be:	d120      	bne.n	8003402 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	187a      	adds	r2, r7, r1
 80033c4:	8812      	ldrh	r2, [r2, #0]
 80033c6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d14c      	bne.n	8003474 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2208      	movs	r2, #8
 80033e6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033f0:	183b      	adds	r3, r7, r0
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	197b      	adds	r3, r7, r5
 80033f6:	7819      	ldrb	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff fe0d 	bl	800301a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003400:	e038      	b.n	8003474 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003402:	240c      	movs	r4, #12
 8003404:	193b      	adds	r3, r7, r4
 8003406:	2208      	movs	r2, #8
 8003408:	18ba      	adds	r2, r7, r2
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	021a      	lsls	r2, r3, #8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0011      	movs	r1, r2
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fdc6 	bl	8003fa8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003424:	193b      	adds	r3, r7, r4
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	230f      	movs	r3, #15
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	7819      	ldrb	r1, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff fdf2 	bl	800301a <HAL_I2C_AddrCallback>
}
 8003436:	e01d      	b.n	8003474 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fdb1 	bl	8003fa8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800344e:	230c      	movs	r3, #12
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	230f      	movs	r3, #15
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	7819      	ldrb	r1, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff fddc 	bl	800301a <HAL_I2C_AddrCallback>
}
 8003462:	e007      	b.n	8003474 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bdb0      	pop	{r4, r5, r7, pc}

0800347c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2242      	movs	r2, #66	; 0x42
 8003490:	2100      	movs	r1, #0
 8003492:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	01db      	lsls	r3, r3, #7
 800349a:	4013      	ands	r3, r2
 800349c:	d008      	beq.n	80034b0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4924      	ldr	r1, [pc, #144]	; (800353c <I2C_ITSlaveSeqCplt+0xc0>)
 80034aa:	400a      	ands	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e00c      	b.n	80034ca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	4013      	ands	r3, r2
 80034b8:	d007      	beq.n	80034ca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	491e      	ldr	r1, [pc, #120]	; (8003540 <I2C_ITSlaveSeqCplt+0xc4>)
 80034c6:	400a      	ands	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2241      	movs	r2, #65	; 0x41
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b29      	cmp	r3, #41	; 0x29
 80034d4:	d114      	bne.n	8003500 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2241      	movs	r2, #65	; 0x41
 80034da:	2128      	movs	r1, #40	; 0x28
 80034dc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2221      	movs	r2, #33	; 0x21
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2101      	movs	r1, #1
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 fd5d 	bl	8003fa8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff fd7e 	bl	8002ffa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034fe:	e019      	b.n	8003534 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2241      	movs	r2, #65	; 0x41
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d113      	bne.n	8003534 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2241      	movs	r2, #65	; 0x41
 8003510:	2128      	movs	r1, #40	; 0x28
 8003512:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2222      	movs	r2, #34	; 0x22
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2102      	movs	r1, #2
 800351e:	0018      	movs	r0, r3
 8003520:	f000 fd42 	bl	8003fa8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2240      	movs	r2, #64	; 0x40
 8003528:	2100      	movs	r1, #0
 800352a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff fd6b 	bl	800300a <HAL_I2C_SlaveRxCpltCallback>
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	ffffbfff 	.word	0xffffbfff
 8003540:	ffff7fff 	.word	0xffff7fff

08003544 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800355a:	200f      	movs	r0, #15
 800355c:	183b      	adds	r3, r7, r0
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	2141      	movs	r1, #65	; 0x41
 8003562:	5c52      	ldrb	r2, [r2, r1]
 8003564:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2220      	movs	r2, #32
 800356c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800356e:	183b      	adds	r3, r7, r0
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b21      	cmp	r3, #33	; 0x21
 8003574:	d003      	beq.n	800357e <I2C_ITSlaveCplt+0x3a>
 8003576:	183b      	adds	r3, r7, r0
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b29      	cmp	r3, #41	; 0x29
 800357c:	d109      	bne.n	8003592 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800357e:	4a7b      	ldr	r2, [pc, #492]	; (800376c <I2C_ITSlaveCplt+0x228>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fd0f 	bl	8003fa8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2221      	movs	r2, #33	; 0x21
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
 8003590:	e011      	b.n	80035b6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003592:	220f      	movs	r2, #15
 8003594:	18bb      	adds	r3, r7, r2
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b22      	cmp	r3, #34	; 0x22
 800359a:	d003      	beq.n	80035a4 <I2C_ITSlaveCplt+0x60>
 800359c:	18bb      	adds	r3, r7, r2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d108      	bne.n	80035b6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035a4:	4a72      	ldr	r2, [pc, #456]	; (8003770 <I2C_ITSlaveCplt+0x22c>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fcfc 	bl	8003fa8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2222      	movs	r2, #34	; 0x22
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	0209      	lsls	r1, r1, #8
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4968      	ldr	r1, [pc, #416]	; (8003774 <I2C_ITSlaveCplt+0x230>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fa35 	bl	8003a4a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	01db      	lsls	r3, r3, #7
 80035e6:	4013      	ands	r3, r2
 80035e8:	d013      	beq.n	8003612 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4960      	ldr	r1, [pc, #384]	; (8003778 <I2C_ITSlaveCplt+0x234>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01f      	beq.n	8003642 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003610:	e017      	b.n	8003642 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4013      	ands	r3, r2
 800361a:	d012      	beq.n	8003642 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4955      	ldr	r1, [pc, #340]	; (800377c <I2C_ITSlaveCplt+0x238>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29a      	uxth	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2204      	movs	r2, #4
 8003646:	4013      	ands	r3, r2
 8003648:	d020      	beq.n	800368c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2204      	movs	r2, #4
 800364e:	4393      	bics	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	2204      	movs	r2, #4
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2242      	movs	r2, #66	; 0x42
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0011      	movs	r1, r2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 f8b7 	bl	8003834 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2241      	movs	r2, #65	; 0x41
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b28      	cmp	r3, #40	; 0x28
 80036d0:	d147      	bne.n	8003762 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0011      	movs	r1, r2
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f853 	bl	8003784 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036de:	e040      	b.n	8003762 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <I2C_ITSlaveCplt+0x23c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d016      	beq.n	8003718 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff fec5 	bl	800347c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <I2C_ITSlaveCplt+0x23c>)
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2241      	movs	r2, #65	; 0x41
 80036fc:	2120      	movs	r1, #32
 80036fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2240      	movs	r2, #64	; 0x40
 800370a:	2100      	movs	r1, #0
 800370c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff fc92 	bl	800303a <HAL_I2C_ListenCpltCallback>
}
 8003716:	e024      	b.n	8003762 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2241      	movs	r2, #65	; 0x41
 800371c:	5c9b      	ldrb	r3, [r3, r2]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b22      	cmp	r3, #34	; 0x22
 8003722:	d10f      	bne.n	8003744 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2241      	movs	r2, #65	; 0x41
 8003728:	2120      	movs	r1, #32
 800372a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2240      	movs	r2, #64	; 0x40
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff fc64 	bl	800300a <HAL_I2C_SlaveRxCpltCallback>
}
 8003742:	e00e      	b.n	8003762 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2241      	movs	r2, #65	; 0x41
 8003748:	2120      	movs	r1, #32
 800374a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fc4c 	bl	8002ffa <HAL_I2C_SlaveTxCpltCallback>
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b006      	add	sp, #24
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	00008001 	.word	0x00008001
 8003770:	00008002 	.word	0x00008002
 8003774:	fe00e800 	.word	0xfe00e800
 8003778:	ffffbfff 	.word	0xffffbfff
 800377c:	ffff7fff 	.word	0xffff7fff
 8003780:	ffff0000 	.word	0xffff0000

08003784 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a26      	ldr	r2, [pc, #152]	; (800382c <I2C_ITListenCplt+0xa8>)
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2241      	movs	r2, #65	; 0x41
 800379e:	2120      	movs	r1, #32
 80037a0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2242      	movs	r2, #66	; 0x42
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2204      	movs	r2, #4
 80037b4:	4013      	ands	r3, r2
 80037b6:	d022      	beq.n	80037fe <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	2204      	movs	r2, #4
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037fe:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <I2C_ITListenCplt+0xac>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	0011      	movs	r1, r2
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fbcf 	bl	8003fa8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2210      	movs	r2, #16
 8003810:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f7ff fc0c 	bl	800303a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	ffff0000 	.word	0xffff0000
 8003830:	00008003 	.word	0x00008003

08003834 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800383e:	200f      	movs	r0, #15
 8003840:	183b      	adds	r3, r7, r0
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	2141      	movs	r1, #65	; 0x41
 8003846:	5c52      	ldrb	r2, [r2, r1]
 8003848:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2242      	movs	r2, #66	; 0x42
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a62      	ldr	r2, [pc, #392]	; (80039e0 <I2C_ITError+0x1ac>)
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800386a:	183b      	adds	r3, r7, r0
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b28      	cmp	r3, #40	; 0x28
 8003870:	d007      	beq.n	8003882 <I2C_ITError+0x4e>
 8003872:	183b      	adds	r3, r7, r0
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b29      	cmp	r3, #41	; 0x29
 8003878:	d003      	beq.n	8003882 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800387a:	183b      	adds	r3, r7, r0
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b2a      	cmp	r3, #42	; 0x2a
 8003880:	d10c      	bne.n	800389c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2103      	movs	r1, #3
 8003886:	0018      	movs	r0, r3
 8003888:	f000 fb8e 	bl	8003fa8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2241      	movs	r2, #65	; 0x41
 8003890:	2128      	movs	r1, #40	; 0x28
 8003892:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a53      	ldr	r2, [pc, #332]	; (80039e4 <I2C_ITError+0x1b0>)
 8003898:	635a      	str	r2, [r3, #52]	; 0x34
 800389a:	e012      	b.n	80038c2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800389c:	4a52      	ldr	r2, [pc, #328]	; (80039e8 <I2C_ITError+0x1b4>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 fb80 	bl	8003fa8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2241      	movs	r2, #65	; 0x41
 80038ac:	5c9b      	ldrb	r3, [r3, r2]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d003      	beq.n	80038bc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2241      	movs	r2, #65	; 0x41
 80038b8:	2120      	movs	r1, #32
 80038ba:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d03b      	beq.n	8003948 <I2C_ITError+0x114>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b11      	cmp	r3, #17
 80038d4:	d002      	beq.n	80038dc <I2C_ITError+0xa8>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b21      	cmp	r3, #33	; 0x21
 80038da:	d135      	bne.n	8003948 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	01db      	lsls	r3, r3, #7
 80038e6:	401a      	ands	r2, r3
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	01db      	lsls	r3, r3, #7
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	493c      	ldr	r1, [pc, #240]	; (80039ec <I2C_ITError+0x1b8>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	0018      	movs	r0, r3
 8003906:	f7fe fda3 	bl	8002450 <HAL_DMA_GetState>
 800390a:	0003      	movs	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d016      	beq.n	800393e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	4a36      	ldr	r2, [pc, #216]	; (80039f0 <I2C_ITError+0x1bc>)
 8003916:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	0018      	movs	r0, r3
 8003926:	f7fe fd29 	bl	800237c <HAL_DMA_Abort_IT>
 800392a:	1e03      	subs	r3, r0, #0
 800392c:	d051      	beq.n	80039d2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	0018      	movs	r0, r3
 800393a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800393c:	e049      	b.n	80039d2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f859 	bl	80039f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003946:	e044      	b.n	80039d2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03b      	beq.n	80039c8 <I2C_ITError+0x194>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b12      	cmp	r3, #18
 8003954:	d002      	beq.n	800395c <I2C_ITError+0x128>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b22      	cmp	r3, #34	; 0x22
 800395a:	d135      	bne.n	80039c8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	401a      	ands	r2, r3
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	429a      	cmp	r2, r3
 800396e:	d107      	bne.n	8003980 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	491e      	ldr	r1, [pc, #120]	; (80039f4 <I2C_ITError+0x1c0>)
 800397c:	400a      	ands	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	0018      	movs	r0, r3
 8003986:	f7fe fd63 	bl	8002450 <HAL_DMA_GetState>
 800398a:	0003      	movs	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d016      	beq.n	80039be <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <I2C_ITError+0x1bc>)
 8003996:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fe fce9 	bl	800237c <HAL_DMA_Abort_IT>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d013      	beq.n	80039d6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	0018      	movs	r0, r3
 80039ba:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039bc:	e00b      	b.n	80039d6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 f819 	bl	80039f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039c6:	e006      	b.n	80039d6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 f814 	bl	80039f8 <I2C_TreatErrorCallback>
  }
}
 80039d0:	e002      	b.n	80039d8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	e000      	b.n	80039d8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039d6:	46c0      	nop			; (mov r8, r8)
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b004      	add	sp, #16
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	ffff0000 	.word	0xffff0000
 80039e4:	0800306d 	.word	0x0800306d
 80039e8:	00008003 	.word	0x00008003
 80039ec:	ffffbfff 	.word	0xffffbfff
 80039f0:	08003a8f 	.word	0x08003a8f
 80039f4:	ffff7fff 	.word	0xffff7fff

080039f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2241      	movs	r2, #65	; 0x41
 8003a04:	5c9b      	ldrb	r3, [r3, r2]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b60      	cmp	r3, #96	; 0x60
 8003a0a:	d10f      	bne.n	8003a2c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2241      	movs	r2, #65	; 0x41
 8003a10:	2120      	movs	r1, #32
 8003a12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff fb18 	bl	800305a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a2a:	e00a      	b.n	8003a42 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2240      	movs	r2, #64	; 0x40
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff fb04 	bl	800304a <HAL_I2C_ErrorCallback>
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b002      	add	sp, #8
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d103      	bne.n	8003a68 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d007      	beq.n	8003a86 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
  }
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	2200      	movs	r2, #0
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7ff ff9a 	bl	80039f8 <I2C_TreatErrorCallback>
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b004      	add	sp, #16
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	1dfb      	adds	r3, r7, #7
 8003ada:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	e021      	b.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	d01e      	beq.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae4:	f7fe fb62 	bl	80021ac <HAL_GetTick>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	2220      	movs	r2, #32
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2241      	movs	r2, #65	; 0x41
 8003b0a:	2120      	movs	r1, #32
 8003b0c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2242      	movs	r2, #66	; 0x42
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2240      	movs	r2, #64	; 0x40
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00f      	b.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	425a      	negs	r2, r3
 8003b32:	4153      	adcs	r3, r2
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	001a      	movs	r2, r3
 8003b38:	1dfb      	adds	r3, r7, #7
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d0ce      	beq.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b56:	e02b      	b.n	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 f8e8 	bl	8003d34 <I2C_IsErrorOccurred>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d001      	beq.n	8003b6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e029      	b.n	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	d01e      	beq.n	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fb1b 	bl	80021ac <HAL_GetTick>
 8003b76:	0002      	movs	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2241      	movs	r2, #65	; 0x41
 8003b98:	2120      	movs	r1, #32
 8003b9a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2242      	movs	r2, #66	; 0x42
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e007      	b.n	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d1cc      	bne.n	8003b58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b004      	add	sp, #16
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd4:	e028      	b.n	8003c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 f8a9 	bl	8003d34 <I2C_IsErrorOccurred>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d001      	beq.n	8003bea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e026      	b.n	8003c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe fadf 	bl	80021ac <HAL_GetTick>
 8003bee:	0002      	movs	r2, r0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d113      	bne.n	8003c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	2220      	movs	r2, #32
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2241      	movs	r2, #65	; 0x41
 8003c10:	2120      	movs	r1, #32
 8003c12:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2242      	movs	r2, #66	; 0x42
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e007      	b.n	8003c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d1cf      	bne.n	8003bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c4c:	e064      	b.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f86d 	bl	8003d34 <I2C_IsErrorOccurred>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e062      	b.n	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d138      	bne.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2204      	movs	r2, #4
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d105      	bne.n	8003c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e04e      	b.n	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2210      	movs	r2, #16
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d107      	bne.n	8003ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ca6:	e002      	b.n	8003cae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	491b      	ldr	r1, [pc, #108]	; (8003d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2241      	movs	r2, #65	; 0x41
 8003cca:	2120      	movs	r1, #32
 8003ccc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2242      	movs	r2, #66	; 0x42
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2240      	movs	r2, #64	; 0x40
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e022      	b.n	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe fa63 	bl	80021ac <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2241      	movs	r2, #65	; 0x41
 8003d08:	2120      	movs	r1, #32
 8003d0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	2100      	movs	r1, #0
 8003d12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2204      	movs	r2, #4
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d193      	bne.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b004      	add	sp, #16
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	fe00e800 	.word	0xfe00e800

08003d34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b08b      	sub	sp, #44	; 0x2c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2327      	movs	r3, #39	; 0x27
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <I2C_IsErrorOccurred+0x2e>
 8003d60:	e082      	b.n	8003e68 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2210      	movs	r2, #16
 8003d68:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d6a:	e060      	b.n	8003e2e <I2C_IsErrorOccurred+0xfa>
 8003d6c:	2427      	movs	r4, #39	; 0x27
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	193a      	adds	r2, r7, r4
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	d058      	beq.n	8003e2e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7fe fa16 	bl	80021ac <HAL_GetTick>
 8003d80:	0002      	movs	r2, r0
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d306      	bcc.n	8003d9a <I2C_IsErrorOccurred+0x66>
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	193a      	adds	r2, r7, r4
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d149      	bne.n	8003e2e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	01db      	lsls	r3, r3, #7
 8003da4:	4013      	ands	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003da8:	2013      	movs	r0, #19
 8003daa:	183b      	adds	r3, r7, r0
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	2142      	movs	r1, #66	; 0x42
 8003db0:	5c52      	ldrb	r2, [r2, r1]
 8003db2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d126      	bne.n	8003e16 <I2C_IsErrorOccurred+0xe2>
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	01db      	lsls	r3, r3, #7
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d021      	beq.n	8003e16 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003dd2:	183b      	adds	r3, r7, r0
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d01d      	beq.n	8003e16 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	01c9      	lsls	r1, r1, #7
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dec:	f7fe f9de 	bl	80021ac <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df4:	e00f      	b.n	8003e16 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003df6:	f7fe f9d9 	bl	80021ac <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b19      	cmp	r3, #25
 8003e02:	d908      	bls.n	8003e16 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	2220      	movs	r2, #32
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e0c:	2327      	movs	r3, #39	; 0x27
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]

              break;
 8003e14:	e00b      	b.n	8003e2e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2127      	movs	r1, #39	; 0x27
 8003e22:	187a      	adds	r2, r7, r1
 8003e24:	1879      	adds	r1, r7, r1
 8003e26:	7809      	ldrb	r1, [r1, #0]
 8003e28:	7011      	strb	r1, [r2, #0]
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d1e3      	bne.n	8003df6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2220      	movs	r2, #32
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d004      	beq.n	8003e46 <I2C_IsErrorOccurred+0x112>
 8003e3c:	2327      	movs	r3, #39	; 0x27
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d092      	beq.n	8003d6c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e46:	2327      	movs	r3, #39	; 0x27
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2220      	movs	r2, #32
 8003e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e60:	2327      	movs	r3, #39	; 0x27
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00c      	beq.n	8003e94 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	0052      	lsls	r2, r2, #1
 8003e8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e8c:	2327      	movs	r3, #39	; 0x27
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d00c      	beq.n	8003eb8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	00d2      	lsls	r2, r2, #3
 8003eae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eb0:	2327      	movs	r3, #39	; 0x27
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d00c      	beq.n	8003edc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	0092      	lsls	r2, r2, #2
 8003ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ed4:	2327      	movs	r3, #39	; 0x27
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003edc:	2327      	movs	r3, #39	; 0x27
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01d      	beq.n	8003f22 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff fdae 	bl	8003a4a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	490d      	ldr	r1, [pc, #52]	; (8003f30 <I2C_IsErrorOccurred+0x1fc>)
 8003efa:	400a      	ands	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2241      	movs	r2, #65	; 0x41
 8003f0e:	2120      	movs	r1, #32
 8003f10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2242      	movs	r2, #66	; 0x42
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2240      	movs	r2, #64	; 0x40
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003f22:	2327      	movs	r3, #39	; 0x27
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	781b      	ldrb	r3, [r3, #0]
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b00b      	add	sp, #44	; 0x2c
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	fe00e800 	.word	0xfe00e800

08003f34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	0008      	movs	r0, r1
 8003f3e:	0011      	movs	r1, r2
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	240a      	movs	r4, #10
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	1c02      	adds	r2, r0, #0
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	2009      	movs	r0, #9
 8003f4c:	183b      	adds	r3, r7, r0
 8003f4e:	1c0a      	adds	r2, r1, #0
 8003f50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f52:	193b      	adds	r3, r7, r4
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	059b      	lsls	r3, r3, #22
 8003f58:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f5a:	183b      	adds	r3, r7, r0
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	0419      	lsls	r1, r3, #16
 8003f60:	23ff      	movs	r3, #255	; 0xff
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f66:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7e:	0d51      	lsrs	r1, r2, #21
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	400a      	ands	r2, r1
 8003f86:	4907      	ldr	r1, [pc, #28]	; (8003fa4 <I2C_TransferConfig+0x70>)
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	43d2      	mvns	r2, r2
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	0011      	movs	r1, r2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b007      	add	sp, #28
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	03ff63ff 	.word	0x03ff63ff

08003fa8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	000a      	movs	r2, r1
 8003fb2:	1cbb      	adds	r3, r7, #2
 8003fb4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003fba:	1cbb      	adds	r3, r7, #2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d010      	beq.n	8003fe6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2242      	movs	r2, #66	; 0x42
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2241      	movs	r2, #65	; 0x41
 8003fd0:	5c9b      	ldrb	r3, [r3, r2]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	2328      	movs	r3, #40	; 0x28
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b28      	cmp	r3, #40	; 0x28
 8003fdc:	d003      	beq.n	8003fe6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	22b0      	movs	r2, #176	; 0xb0
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003fe6:	1cbb      	adds	r3, r7, #2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d010      	beq.n	8004012 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2244      	movs	r2, #68	; 0x44
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2241      	movs	r2, #65	; 0x41
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	001a      	movs	r2, r3
 8004002:	2328      	movs	r3, #40	; 0x28
 8004004:	4013      	ands	r3, r2
 8004006:	2b28      	cmp	r3, #40	; 0x28
 8004008:	d003      	beq.n	8004012 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	22b0      	movs	r2, #176	; 0xb0
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004012:	1cbb      	adds	r3, r7, #2
 8004014:	2200      	movs	r2, #0
 8004016:	5e9b      	ldrsh	r3, [r3, r2]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da03      	bge.n	8004024 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	22b8      	movs	r2, #184	; 0xb8
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004024:	1cbb      	adds	r3, r7, #2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	2b10      	cmp	r3, #16
 800402a:	d103      	bne.n	8004034 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2290      	movs	r2, #144	; 0x90
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004034:	1cbb      	adds	r3, r7, #2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	2b20      	cmp	r3, #32
 800403a:	d103      	bne.n	8004044 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004044:	1cbb      	adds	r3, r7, #2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d103      	bne.n	8004054 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43d9      	mvns	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	400a      	ands	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2241      	movs	r2, #65	; 0x41
 800407e:	5c9b      	ldrb	r3, [r3, r2]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	d138      	bne.n	80040f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2240      	movs	r2, #64	; 0x40
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004090:	2302      	movs	r3, #2
 8004092:	e032      	b.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	2101      	movs	r1, #1
 800409a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2241      	movs	r2, #65	; 0x41
 80040a0:	2124      	movs	r1, #36	; 0x24
 80040a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4911      	ldr	r1, [pc, #68]	; (8004104 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2101      	movs	r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2241      	movs	r2, #65	; 0x41
 80040e8:	2120      	movs	r1, #32
 80040ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	ffffefff 	.word	0xffffefff

08004108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2241      	movs	r2, #65	; 0x41
 8004116:	5c9b      	ldrb	r3, [r3, r2]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d139      	bne.n	8004192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2240      	movs	r2, #64	; 0x40
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004128:	2302      	movs	r3, #2
 800412a:	e033      	b.n	8004194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	2101      	movs	r1, #1
 8004132:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2241      	movs	r2, #65	; 0x41
 8004138:	2124      	movs	r1, #36	; 0x24
 800413a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	438a      	bics	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a11      	ldr	r2, [pc, #68]	; (800419c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	430a      	orrs	r2, r1
 800417c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2241      	movs	r2, #65	; 0x41
 8004182:	2120      	movs	r1, #32
 8004184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2240      	movs	r2, #64	; 0x40
 800418a:	2100      	movs	r1, #0
 800418c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b004      	add	sp, #16
 800419a:	bd80      	pop	{r7, pc}
 800419c:	fffff0ff 	.word	0xfffff0ff

080041a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d11f      	bne.n	8004204 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	0013      	movs	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4912      	ldr	r1, [pc, #72]	; (800421c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7fb ff94 	bl	8000100 <__udivsi3>
 80041d8:	0003      	movs	r3, r0
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041de:	e008      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e001      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e009      	b.n	8004206 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	401a      	ands	r2, r3
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	429a      	cmp	r2, r3
 8004202:	d0ed      	beq.n	80041e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40007000 	.word	0x40007000
 8004214:	fffff9ff 	.word	0xfffff9ff
 8004218:	20000010 	.word	0x20000010
 800421c:	000f4240 	.word	0x000f4240

08004220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e2f3      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d100      	bne.n	800423e <HAL_RCC_OscConfig+0x1e>
 800423c:	e07c      	b.n	8004338 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800423e:	4bc3      	ldr	r3, [pc, #780]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2238      	movs	r2, #56	; 0x38
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004248:	4bc0      	ldr	r3, [pc, #768]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2203      	movs	r2, #3
 800424e:	4013      	ands	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b10      	cmp	r3, #16
 8004256:	d102      	bne.n	800425e <HAL_RCC_OscConfig+0x3e>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d002      	beq.n	8004264 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d10b      	bne.n	800427c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	4bb9      	ldr	r3, [pc, #740]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	4013      	ands	r3, r2
 800426e:	d062      	beq.n	8004336 <HAL_RCC_OscConfig+0x116>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d15e      	bne.n	8004336 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e2ce      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	025b      	lsls	r3, r3, #9
 8004284:	429a      	cmp	r2, r3
 8004286:	d107      	bne.n	8004298 <HAL_RCC_OscConfig+0x78>
 8004288:	4bb0      	ldr	r3, [pc, #704]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4baf      	ldr	r3, [pc, #700]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800428e:	2180      	movs	r1, #128	; 0x80
 8004290:	0249      	lsls	r1, r1, #9
 8004292:	430a      	orrs	r2, r1
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e020      	b.n	80042da <HAL_RCC_OscConfig+0xba>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	23a0      	movs	r3, #160	; 0xa0
 800429e:	02db      	lsls	r3, r3, #11
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d10e      	bne.n	80042c2 <HAL_RCC_OscConfig+0xa2>
 80042a4:	4ba9      	ldr	r3, [pc, #676]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4ba8      	ldr	r3, [pc, #672]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	02c9      	lsls	r1, r1, #11
 80042ae:	430a      	orrs	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	4ba6      	ldr	r3, [pc, #664]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4ba5      	ldr	r3, [pc, #660]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	0249      	lsls	r1, r1, #9
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e00b      	b.n	80042da <HAL_RCC_OscConfig+0xba>
 80042c2:	4ba2      	ldr	r3, [pc, #648]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4ba1      	ldr	r3, [pc, #644]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042c8:	49a1      	ldr	r1, [pc, #644]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	4b9f      	ldr	r3, [pc, #636]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b9e      	ldr	r3, [pc, #632]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80042d4:	499f      	ldr	r1, [pc, #636]	; (8004554 <HAL_RCC_OscConfig+0x334>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d014      	beq.n	800430c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd ff63 	bl	80021ac <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fd ff5e 	bl	80021ac <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e28d      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fe:	4b93      	ldr	r3, [pc, #588]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	4013      	ands	r3, r2
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0xcc>
 800430a:	e015      	b.n	8004338 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fd ff4e 	bl	80021ac <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004316:	f7fd ff49 	bl	80021ac <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e278      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004328:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	029b      	lsls	r3, r3, #10
 8004330:	4013      	ands	r3, r2
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0xf6>
 8004334:	e000      	b.n	8004338 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004336:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2202      	movs	r2, #2
 800433e:	4013      	ands	r3, r2
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x124>
 8004342:	e099      	b.n	8004478 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004344:	4b81      	ldr	r3, [pc, #516]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2238      	movs	r2, #56	; 0x38
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434e:	4b7f      	ldr	r3, [pc, #508]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2203      	movs	r2, #3
 8004354:	4013      	ands	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b10      	cmp	r3, #16
 800435c:	d102      	bne.n	8004364 <HAL_RCC_OscConfig+0x144>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d002      	beq.n	800436a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d135      	bne.n	80043d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436a:	4b78      	ldr	r3, [pc, #480]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4013      	ands	r3, r2
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x162>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e24b      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b72      	ldr	r3, [pc, #456]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4a74      	ldr	r2, [pc, #464]	; (8004558 <HAL_RCC_OscConfig+0x338>)
 8004388:	4013      	ands	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	021a      	lsls	r2, r3, #8
 8004392:	4b6e      	ldr	r3, [pc, #440]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d112      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800439e:	4b6b      	ldr	r3, [pc, #428]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6e      	ldr	r2, [pc, #440]	; (800455c <HAL_RCC_OscConfig+0x33c>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	4b67      	ldr	r3, [pc, #412]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043b2:	4b66      	ldr	r3, [pc, #408]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	0adb      	lsrs	r3, r3, #11
 80043b8:	2207      	movs	r2, #7
 80043ba:	4013      	ands	r3, r2
 80043bc:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_RCC_OscConfig+0x340>)
 80043be:	40da      	lsrs	r2, r3
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCC_OscConfig+0x344>)
 80043c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x348>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7fd fe93 	bl	80020f4 <HAL_InitTick>
 80043ce:	1e03      	subs	r3, r0, #0
 80043d0:	d051      	beq.n	8004476 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e221      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d030      	beq.n	8004440 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043de:	4b5b      	ldr	r3, [pc, #364]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5e      	ldr	r2, [pc, #376]	; (800455c <HAL_RCC_OscConfig+0x33c>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	4b57      	ldr	r3, [pc, #348]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043f2:	4b56      	ldr	r3, [pc, #344]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b55      	ldr	r3, [pc, #340]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	0049      	lsls	r1, r1, #1
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fed4 	bl	80021ac <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fd fecf 	bl	80021ac <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1fe      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441c:	4b4b      	ldr	r3, [pc, #300]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4013      	ands	r3, r2
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b48      	ldr	r3, [pc, #288]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <HAL_RCC_OscConfig+0x338>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	4b44      	ldr	r3, [pc, #272]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	e01b      	b.n	8004478 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004440:	4b42      	ldr	r3, [pc, #264]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b41      	ldr	r3, [pc, #260]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004446:	4949      	ldr	r1, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x34c>)
 8004448:	400a      	ands	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd feae 	bl	80021ac <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004456:	f7fd fea9 	bl	80021ac <HAL_GetTick>
 800445a:	0002      	movs	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1d8      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004468:	4b38      	ldr	r3, [pc, #224]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4013      	ands	r3, r2
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x236>
 8004474:	e000      	b.n	8004478 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004476:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2208      	movs	r2, #8
 800447e:	4013      	ands	r3, r2
 8004480:	d047      	beq.n	8004512 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004482:	4b32      	ldr	r3, [pc, #200]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2238      	movs	r2, #56	; 0x38
 8004488:	4013      	ands	r3, r2
 800448a:	2b18      	cmp	r3, #24
 800448c:	d10a      	bne.n	80044a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004492:	2202      	movs	r2, #2
 8004494:	4013      	ands	r3, r2
 8004496:	d03c      	beq.n	8004512 <HAL_RCC_OscConfig+0x2f2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d138      	bne.n	8004512 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e1ba      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d019      	beq.n	80044e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80044ac:	4b27      	ldr	r3, [pc, #156]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80044ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b0:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80044b2:	2101      	movs	r1, #1
 80044b4:	430a      	orrs	r2, r1
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fd fe78 	bl	80021ac <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fd fe73 	bl	80021ac <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1a2      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	2202      	movs	r2, #2
 80044da:	4013      	ands	r3, r2
 80044dc:	d0f1      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2a2>
 80044de:	e018      	b.n	8004512 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80044e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 80044e6:	2101      	movs	r1, #1
 80044e8:	438a      	bics	r2, r1
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe5e 	bl	80021ac <HAL_GetTick>
 80044f0:	0003      	movs	r3, r0
 80044f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fd fe59 	bl	80021ac <HAL_GetTick>
 80044fa:	0002      	movs	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e188      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	2202      	movs	r2, #2
 800450e:	4013      	ands	r3, r2
 8004510:	d1f1      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2204      	movs	r2, #4
 8004518:	4013      	ands	r3, r2
 800451a:	d100      	bne.n	800451e <HAL_RCC_OscConfig+0x2fe>
 800451c:	e0c6      	b.n	80046ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	231f      	movs	r3, #31
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2238      	movs	r2, #56	; 0x38
 800452c:	4013      	ands	r3, r2
 800452e:	2b20      	cmp	r3, #32
 8004530:	d11e      	bne.n	8004570 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x32c>)
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	2202      	movs	r2, #2
 8004538:	4013      	ands	r3, r2
 800453a:	d100      	bne.n	800453e <HAL_RCC_OscConfig+0x31e>
 800453c:	e0b6      	b.n	80046ac <HAL_RCC_OscConfig+0x48c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d000      	beq.n	8004548 <HAL_RCC_OscConfig+0x328>
 8004546:	e0b1      	b.n	80046ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e166      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
 800454c:	40021000 	.word	0x40021000
 8004550:	fffeffff 	.word	0xfffeffff
 8004554:	fffbffff 	.word	0xfffbffff
 8004558:	ffff80ff 	.word	0xffff80ff
 800455c:	ffffc7ff 	.word	0xffffc7ff
 8004560:	00f42400 	.word	0x00f42400
 8004564:	20000010 	.word	0x20000010
 8004568:	20000014 	.word	0x20000014
 800456c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004570:	4bac      	ldr	r3, [pc, #688]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	055b      	lsls	r3, r3, #21
 8004578:	4013      	ands	r3, r2
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x360>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x362>
 8004580:	2300      	movs	r3, #0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d011      	beq.n	80045aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4ba7      	ldr	r3, [pc, #668]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458a:	4ba6      	ldr	r3, [pc, #664]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	0549      	lsls	r1, r1, #21
 8004590:	430a      	orrs	r2, r1
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c
 8004594:	4ba3      	ldr	r3, [pc, #652]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	055b      	lsls	r3, r3, #21
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80045a2:	231f      	movs	r3, #31
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045aa:	4b9f      	ldr	r3, [pc, #636]	; (8004828 <HAL_RCC_OscConfig+0x608>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	d11a      	bne.n	80045ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b6:	4b9c      	ldr	r3, [pc, #624]	; (8004828 <HAL_RCC_OscConfig+0x608>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b9b      	ldr	r3, [pc, #620]	; (8004828 <HAL_RCC_OscConfig+0x608>)
 80045bc:	2180      	movs	r1, #128	; 0x80
 80045be:	0049      	lsls	r1, r1, #1
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045c4:	f7fd fdf2 	bl	80021ac <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7fd fded 	bl	80021ac <HAL_GetTick>
 80045d2:	0002      	movs	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e11c      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e0:	4b91      	ldr	r3, [pc, #580]	; (8004828 <HAL_RCC_OscConfig+0x608>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4013      	ands	r3, r2
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x3e2>
 80045f4:	4b8b      	ldr	r3, [pc, #556]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80045f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045f8:	4b8a      	ldr	r3, [pc, #552]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80045fa:	2101      	movs	r1, #1
 80045fc:	430a      	orrs	r2, r1
 80045fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004600:	e01c      	b.n	800463c <HAL_RCC_OscConfig+0x41c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x404>
 800460a:	4b86      	ldr	r3, [pc, #536]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800460c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800460e:	4b85      	ldr	r3, [pc, #532]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004610:	2104      	movs	r1, #4
 8004612:	430a      	orrs	r2, r1
 8004614:	65da      	str	r2, [r3, #92]	; 0x5c
 8004616:	4b83      	ldr	r3, [pc, #524]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004618:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800461a:	4b82      	ldr	r3, [pc, #520]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800461c:	2101      	movs	r1, #1
 800461e:	430a      	orrs	r2, r1
 8004620:	65da      	str	r2, [r3, #92]	; 0x5c
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0x41c>
 8004624:	4b7f      	ldr	r3, [pc, #508]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004626:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800462a:	2101      	movs	r1, #1
 800462c:	438a      	bics	r2, r1
 800462e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004630:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004632:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004634:	4b7b      	ldr	r3, [pc, #492]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004636:	2104      	movs	r1, #4
 8004638:	438a      	bics	r2, r1
 800463a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d014      	beq.n	800466e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fdb2 	bl	80021ac <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464c:	e009      	b.n	8004662 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd fdad 	bl	80021ac <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	4a74      	ldr	r2, [pc, #464]	; (800482c <HAL_RCC_OscConfig+0x60c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0db      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x42e>
 800466c:	e013      	b.n	8004696 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fd fd9d 	bl	80021ac <HAL_GetTick>
 8004672:	0003      	movs	r3, r0
 8004674:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004676:	e009      	b.n	800468c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd fd98 	bl	80021ac <HAL_GetTick>
 800467c:	0002      	movs	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	4a6a      	ldr	r2, [pc, #424]	; (800482c <HAL_RCC_OscConfig+0x60c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0c6      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	2202      	movs	r2, #2
 8004692:	4013      	ands	r3, r2
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004696:	231f      	movs	r3, #31
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d105      	bne.n	80046ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046a0:	4b60      	ldr	r3, [pc, #384]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80046a6:	4962      	ldr	r1, [pc, #392]	; (8004830 <HAL_RCC_OscConfig+0x610>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d100      	bne.n	80046b6 <HAL_RCC_OscConfig+0x496>
 80046b4:	e0b0      	b.n	8004818 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2238      	movs	r2, #56	; 0x38
 80046bc:	4013      	ands	r3, r2
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d100      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4a4>
 80046c2:	e078      	b.n	80047b6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d153      	bne.n	8004774 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b55      	ldr	r3, [pc, #340]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b54      	ldr	r3, [pc, #336]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80046d2:	4958      	ldr	r1, [pc, #352]	; (8004834 <HAL_RCC_OscConfig+0x614>)
 80046d4:	400a      	ands	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fd68 	bl	80021ac <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fd fd63 	bl	80021ac <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e092      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	049b      	lsls	r3, r3, #18
 80046fc:	4013      	ands	r3, r2
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004700:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a4c      	ldr	r2, [pc, #304]	; (8004838 <HAL_RCC_OscConfig+0x618>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1a      	ldr	r2, [r3, #32]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	431a      	orrs	r2, r3
 8004728:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800472a:	430a      	orrs	r2, r1
 800472c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472e:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b3c      	ldr	r3, [pc, #240]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	0449      	lsls	r1, r1, #17
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800473c:	4b39      	ldr	r3, [pc, #228]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	0549      	lsls	r1, r1, #21
 8004746:	430a      	orrs	r2, r1
 8004748:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fd2f 	bl	80021ac <HAL_GetTick>
 800474e:	0003      	movs	r3, r0
 8004750:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fd fd2a 	bl	80021ac <HAL_GetTick>
 8004758:	0002      	movs	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e059      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	049b      	lsls	r3, r3, #18
 800476e:	4013      	ands	r3, r2
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x534>
 8004772:	e051      	b.n	8004818 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800477a:	492e      	ldr	r1, [pc, #184]	; (8004834 <HAL_RCC_OscConfig+0x614>)
 800477c:	400a      	ands	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fd14 	bl	80021ac <HAL_GetTick>
 8004784:	0003      	movs	r3, r0
 8004786:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7fd fd0f 	bl	80021ac <HAL_GetTick>
 800478e:	0002      	movs	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e03e      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479c:	4b21      	ldr	r3, [pc, #132]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	049b      	lsls	r3, r3, #18
 80047a4:	4013      	ands	r3, r2
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80047ae:	4923      	ldr	r1, [pc, #140]	; (800483c <HAL_RCC_OscConfig+0x61c>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e030      	b.n	8004818 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02b      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047c2:	4b18      	ldr	r3, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x604>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2203      	movs	r2, #3
 80047cc:	401a      	ands	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d11e      	bne.n	8004814 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2270      	movs	r2, #112	; 0x70
 80047da:	401a      	ands	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d117      	bne.n	8004814 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	23fe      	movs	r3, #254	; 0xfe
 80047e8:	01db      	lsls	r3, r3, #7
 80047ea:	401a      	ands	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10e      	bne.n	8004814 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	23f8      	movs	r3, #248	; 0xf8
 80047fa:	039b      	lsls	r3, r3, #14
 80047fc:	401a      	ands	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	0f5b      	lsrs	r3, r3, #29
 800480a:	075a      	lsls	r2, r3, #29
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b008      	add	sp, #32
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
 800482c:	00001388 	.word	0x00001388
 8004830:	efffffff 	.word	0xefffffff
 8004834:	feffffff 	.word	0xfeffffff
 8004838:	1fc1808c 	.word	0x1fc1808c
 800483c:	effefffc 	.word	0xeffefffc

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0e9      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2207      	movs	r2, #7
 800485a:	4013      	ands	r3, r2
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d91e      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2207      	movs	r2, #7
 8004868:	4393      	bics	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	4b70      	ldr	r3, [pc, #448]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004874:	f7fd fc9a 	bl	80021ac <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800487c:	e009      	b.n	8004892 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487e:	f7fd fc95 	bl	80021ac <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	4a6a      	ldr	r2, [pc, #424]	; (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0ca      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004892:	4b67      	ldr	r3, [pc, #412]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2207      	movs	r2, #7
 8004898:	4013      	ands	r3, r2
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d015      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	d006      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048b4:	4b60      	ldr	r3, [pc, #384]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048ba:	21e0      	movs	r1, #224	; 0xe0
 80048bc:	01c9      	lsls	r1, r1, #7
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c2:	4b5d      	ldr	r3, [pc, #372]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a5d      	ldr	r2, [pc, #372]	; (8004a3c <HAL_RCC_ClockConfig+0x1fc>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	0019      	movs	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	d057      	beq.n	8004990 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e8:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	4013      	ands	r3, r2
 80048f2:	d12b      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e097      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004900:	4b4d      	ldr	r3, [pc, #308]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	049b      	lsls	r3, r3, #18
 8004908:	4013      	ands	r3, r2
 800490a:	d11f      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e08b      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4013      	ands	r3, r2
 8004922:	d113      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e07f      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d106      	bne.n	800493e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	2202      	movs	r2, #2
 8004936:	4013      	ands	r3, r2
 8004938:	d108      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e074      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493e:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	2202      	movs	r2, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e06d      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800494c:	4b3a      	ldr	r3, [pc, #232]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2207      	movs	r2, #7
 8004952:	4393      	bics	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fd fc24 	bl	80021ac <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004968:	e009      	b.n	800497e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496a:	f7fd fc1f 	bl	80021ac <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e054      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2238      	movs	r2, #56	; 0x38
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	429a      	cmp	r2, r3
 800498e:	d1ec      	bne.n	800496a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2207      	movs	r2, #7
 8004996:	4013      	ands	r3, r2
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d21e      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2207      	movs	r2, #7
 80049a4:	4393      	bics	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b0:	f7fd fbfc 	bl	80021ac <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b8:	e009      	b.n	80049ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ba:	f7fd fbf7 	bl	80021ac <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_RCC_ClockConfig+0x1f4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e02c      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2207      	movs	r2, #7
 80049d4:	4013      	ands	r3, r2
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1ee      	bne.n	80049ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2204      	movs	r2, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_RCC_ClockConfig+0x200>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049fa:	f000 f829 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 80049fe:	0001      	movs	r1, r0
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_RCC_ClockConfig+0x1f8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	220f      	movs	r2, #15
 8004a08:	401a      	ands	r2, r3
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x204>)
 8004a0c:	0092      	lsls	r2, r2, #2
 8004a0e:	58d3      	ldr	r3, [r2, r3]
 8004a10:	221f      	movs	r2, #31
 8004a12:	4013      	ands	r3, r2
 8004a14:	000a      	movs	r2, r1
 8004a16:	40da      	lsrs	r2, r3
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x208>)
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x20c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fd fb67 	bl	80020f4 <HAL_InitTick>
 8004a26:	0003      	movs	r3, r0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40022000 	.word	0x40022000
 8004a34:	00001388 	.word	0x00001388
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	fffff0ff 	.word	0xfffff0ff
 8004a40:	ffff8fff 	.word	0xffff8fff
 8004a44:	08004c04 	.word	0x08004c04
 8004a48:	20000010 	.word	0x20000010
 8004a4c:	20000014 	.word	0x20000014

08004a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a56:	4b3c      	ldr	r3, [pc, #240]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2238      	movs	r2, #56	; 0x38
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d10f      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a60:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0adb      	lsrs	r3, r3, #11
 8004a66:	2207      	movs	r2, #7
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	0013      	movs	r3, r2
 8004a70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	4835      	ldr	r0, [pc, #212]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a76:	f7fb fb43 	bl	8000100 <__udivsi3>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e05d      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2238      	movs	r2, #56	; 0x38
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d102      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a8c:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e054      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2238      	movs	r2, #56	; 0x38
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d138      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa8:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	2207      	movs	r2, #7
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d10d      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4824      	ldr	r0, [pc, #144]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ac0:	f7fb fb1e 	bl	8000100 <__udivsi3>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	227f      	movs	r2, #127	; 0x7f
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	434b      	muls	r3, r1
 8004ad4:	617b      	str	r3, [r7, #20]
        break;
 8004ad6:	e00d      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	481c      	ldr	r0, [pc, #112]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004adc:	f7fb fb10 	bl	8000100 <__udivsi3>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	227f      	movs	r2, #127	; 0x7f
 8004aec:	4013      	ands	r3, r2
 8004aee:	434b      	muls	r3, r1
 8004af0:	617b      	str	r3, [r7, #20]
        break;
 8004af2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0f5b      	lsrs	r3, r3, #29
 8004afa:	2207      	movs	r2, #7
 8004afc:	4013      	ands	r3, r2
 8004afe:	3301      	adds	r3, #1
 8004b00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	6978      	ldr	r0, [r7, #20]
 8004b06:	f7fb fafb 	bl	8000100 <__udivsi3>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e015      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2238      	movs	r2, #56	; 0x38
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d103      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2238      	movs	r2, #56	; 0x38
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b18      	cmp	r3, #24
 8004b2e:	d103      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b30:	23fa      	movs	r3, #250	; 0xfa
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e001      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b3c:	693b      	ldr	r3, [r7, #16]
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b006      	add	sp, #24
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <memset>:
 8004b54:	0003      	movs	r3, r0
 8004b56:	1882      	adds	r2, r0, r2
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	7019      	strb	r1, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	2600      	movs	r6, #0
 8004b68:	4c0c      	ldr	r4, [pc, #48]	; (8004b9c <__libc_init_array+0x38>)
 8004b6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ba0 <__libc_init_array+0x3c>)
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	2600      	movs	r6, #0
 8004b76:	f000 f819 	bl	8004bac <_init>
 8004b7a:	4c0a      	ldr	r4, [pc, #40]	; (8004ba4 <__libc_init_array+0x40>)
 8004b7c:	4d0a      	ldr	r5, [pc, #40]	; (8004ba8 <__libc_init_array+0x44>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	00b3      	lsls	r3, r6, #2
 8004b8a:	58eb      	ldr	r3, [r5, r3]
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	00b3      	lsls	r3, r6, #2
 8004b94:	58eb      	ldr	r3, [r5, r3]
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	08004c44 	.word	0x08004c44
 8004ba0:	08004c44 	.word	0x08004c44
 8004ba4:	08004c48 	.word	0x08004c48
 8004ba8:	08004c44 	.word	0x08004c44

08004bac <_init>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr

08004bb8 <_fini>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

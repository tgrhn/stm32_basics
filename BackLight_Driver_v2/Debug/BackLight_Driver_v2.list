
BackLight_Driver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007634  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007848  08007848  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007848  08007848  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007848  08007848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000010  0800785c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800785c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad08  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f03  00000000  00000000  0002ad7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000924  00000000  00000000  0002d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001842c  00000000  00000000  0002e174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e70b  00000000  00000000  000465a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c2b8  00000000  00000000  00054cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e64  00000000  00000000  000f0f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f3dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080076dc 	.word	0x080076dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080076dc 	.word	0x080076dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fd99 	bl	8001d68 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fce9 	bl	8001c18 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fd8b 	bl	8001d68 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fd81 	bl	8001d68 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fd11 	bl	8001c9c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fd07 	bl	8001c9c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fbcb 	bl	8000a40 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fb57 	bl	8000968 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fbbd 	bl	8000a40 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fbb3 	bl	8000a40 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb63 	bl	80009b4 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fb59 	bl	80009b4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	; 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fd71 	bl	8000e08 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 fbcb 	bl	8000ac8 <__aeabi_fsub>
 8000332:	f000 fd69 	bl	8000e08 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__aeabi_f2ulz>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	f002 fbdf 	bl	8002b04 <__aeabi_f2d>
 8000346:	2200      	movs	r2, #0
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <__aeabi_f2ulz+0x38>)
 800034a:	000d      	movs	r5, r1
 800034c:	0004      	movs	r4, r0
 800034e:	f001 fd6f 	bl	8001e30 <__aeabi_dmul>
 8000352:	f002 fcc3 	bl	8002cdc <__aeabi_d2uiz>
 8000356:	0006      	movs	r6, r0
 8000358:	f002 fbae 	bl	8002ab8 <__aeabi_ui2d>
 800035c:	2200      	movs	r2, #0
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <__aeabi_f2ulz+0x3c>)
 8000360:	f001 fd66 	bl	8001e30 <__aeabi_dmul>
 8000364:	0002      	movs	r2, r0
 8000366:	000b      	movs	r3, r1
 8000368:	0020      	movs	r0, r4
 800036a:	0029      	movs	r1, r5
 800036c:	f002 f822 	bl	80023b4 <__aeabi_dsub>
 8000370:	f002 fcb4 	bl	8002cdc <__aeabi_d2uiz>
 8000374:	0031      	movs	r1, r6
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	3df00000 	.word	0x3df00000
 800037c:	41f00000 	.word	0x41f00000

08000380 <__aeabi_ul2f>:
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	b5d0      	push	{r4, r6, r7, lr}
 8000384:	039b      	lsls	r3, r3, #14
 8000386:	0004      	movs	r4, r0
 8000388:	0008      	movs	r0, r1
 800038a:	4299      	cmp	r1, r3
 800038c:	d301      	bcc.n	8000392 <__aeabi_ul2f+0x12>
 800038e:	0563      	lsls	r3, r4, #21
 8000390:	d111      	bne.n	80003b6 <__aeabi_ul2f+0x36>
 8000392:	f002 fb91 	bl	8002ab8 <__aeabi_ui2d>
 8000396:	2200      	movs	r2, #0
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <__aeabi_ul2f+0x44>)
 800039a:	f001 fd49 	bl	8001e30 <__aeabi_dmul>
 800039e:	0006      	movs	r6, r0
 80003a0:	000f      	movs	r7, r1
 80003a2:	0020      	movs	r0, r4
 80003a4:	f002 fb88 	bl	8002ab8 <__aeabi_ui2d>
 80003a8:	0032      	movs	r2, r6
 80003aa:	003b      	movs	r3, r7
 80003ac:	f000 fde6 	bl	8000f7c <__aeabi_dadd>
 80003b0:	f002 fbf0 	bl	8002b94 <__aeabi_d2f>
 80003b4:	bdd0      	pop	{r4, r6, r7, pc}
 80003b6:	0ae3      	lsrs	r3, r4, #11
 80003b8:	2480      	movs	r4, #128	; 0x80
 80003ba:	02db      	lsls	r3, r3, #11
 80003bc:	0124      	lsls	r4, r4, #4
 80003be:	431c      	orrs	r4, r3
 80003c0:	e7e7      	b.n	8000392 <__aeabi_ul2f+0x12>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	41f00000 	.word	0x41f00000

080003c8 <__aeabi_ul2d>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	0006      	movs	r6, r0
 80003cc:	0008      	movs	r0, r1
 80003ce:	f002 fb73 	bl	8002ab8 <__aeabi_ui2d>
 80003d2:	2200      	movs	r2, #0
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <__aeabi_ul2d+0x28>)
 80003d6:	f001 fd2b 	bl	8001e30 <__aeabi_dmul>
 80003da:	000d      	movs	r5, r1
 80003dc:	0004      	movs	r4, r0
 80003de:	0030      	movs	r0, r6
 80003e0:	f002 fb6a 	bl	8002ab8 <__aeabi_ui2d>
 80003e4:	002b      	movs	r3, r5
 80003e6:	0022      	movs	r2, r4
 80003e8:	f000 fdc8 	bl	8000f7c <__aeabi_dadd>
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	41f00000 	.word	0x41f00000

080003f4 <__aeabi_fadd>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	4647      	mov	r7, r8
 80003f8:	46ce      	mov	lr, r9
 80003fa:	024a      	lsls	r2, r1, #9
 80003fc:	0243      	lsls	r3, r0, #9
 80003fe:	0045      	lsls	r5, r0, #1
 8000400:	0fc4      	lsrs	r4, r0, #31
 8000402:	0a50      	lsrs	r0, r2, #9
 8000404:	4680      	mov	r8, r0
 8000406:	0048      	lsls	r0, r1, #1
 8000408:	0a5b      	lsrs	r3, r3, #9
 800040a:	0e00      	lsrs	r0, r0, #24
 800040c:	0992      	lsrs	r2, r2, #6
 800040e:	4694      	mov	ip, r2
 8000410:	b580      	push	{r7, lr}
 8000412:	001e      	movs	r6, r3
 8000414:	4681      	mov	r9, r0
 8000416:	0002      	movs	r2, r0
 8000418:	0e2d      	lsrs	r5, r5, #24
 800041a:	00df      	lsls	r7, r3, #3
 800041c:	0fc9      	lsrs	r1, r1, #31
 800041e:	428c      	cmp	r4, r1
 8000420:	d024      	beq.n	800046c <__aeabi_fadd+0x78>
 8000422:	1a28      	subs	r0, r5, r0
 8000424:	2800      	cmp	r0, #0
 8000426:	dd0e      	ble.n	8000446 <__aeabi_fadd+0x52>
 8000428:	2a00      	cmp	r2, #0
 800042a:	d13e      	bne.n	80004aa <__aeabi_fadd+0xb6>
 800042c:	4662      	mov	r2, ip
 800042e:	2a00      	cmp	r2, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_fadd+0x40>
 8000432:	e0fd      	b.n	8000630 <__aeabi_fadd+0x23c>
 8000434:	1e42      	subs	r2, r0, #1
 8000436:	2801      	cmp	r0, #1
 8000438:	d100      	bne.n	800043c <__aeabi_fadd+0x48>
 800043a:	e137      	b.n	80006ac <__aeabi_fadd+0x2b8>
 800043c:	28ff      	cmp	r0, #255	; 0xff
 800043e:	d100      	bne.n	8000442 <__aeabi_fadd+0x4e>
 8000440:	e0a9      	b.n	8000596 <__aeabi_fadd+0x1a2>
 8000442:	0010      	movs	r0, r2
 8000444:	e039      	b.n	80004ba <__aeabi_fadd+0xc6>
 8000446:	2800      	cmp	r0, #0
 8000448:	d063      	beq.n	8000512 <__aeabi_fadd+0x11e>
 800044a:	464b      	mov	r3, r9
 800044c:	1b52      	subs	r2, r2, r5
 800044e:	2d00      	cmp	r5, #0
 8000450:	d000      	beq.n	8000454 <__aeabi_fadd+0x60>
 8000452:	e0e0      	b.n	8000616 <__aeabi_fadd+0x222>
 8000454:	2f00      	cmp	r7, #0
 8000456:	d100      	bne.n	800045a <__aeabi_fadd+0x66>
 8000458:	e0ce      	b.n	80005f8 <__aeabi_fadd+0x204>
 800045a:	1e53      	subs	r3, r2, #1
 800045c:	2a01      	cmp	r2, #1
 800045e:	d100      	bne.n	8000462 <__aeabi_fadd+0x6e>
 8000460:	e155      	b.n	800070e <__aeabi_fadd+0x31a>
 8000462:	2aff      	cmp	r2, #255	; 0xff
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x74>
 8000466:	e094      	b.n	8000592 <__aeabi_fadd+0x19e>
 8000468:	001a      	movs	r2, r3
 800046a:	e0d9      	b.n	8000620 <__aeabi_fadd+0x22c>
 800046c:	1a2a      	subs	r2, r5, r0
 800046e:	2a00      	cmp	r2, #0
 8000470:	dc00      	bgt.n	8000474 <__aeabi_fadd+0x80>
 8000472:	e099      	b.n	80005a8 <__aeabi_fadd+0x1b4>
 8000474:	2800      	cmp	r0, #0
 8000476:	d062      	beq.n	800053e <__aeabi_fadd+0x14a>
 8000478:	2dff      	cmp	r5, #255	; 0xff
 800047a:	d100      	bne.n	800047e <__aeabi_fadd+0x8a>
 800047c:	e08b      	b.n	8000596 <__aeabi_fadd+0x1a2>
 800047e:	2380      	movs	r3, #128	; 0x80
 8000480:	4661      	mov	r1, ip
 8000482:	04db      	lsls	r3, r3, #19
 8000484:	4319      	orrs	r1, r3
 8000486:	468c      	mov	ip, r1
 8000488:	2a1b      	cmp	r2, #27
 800048a:	dc00      	bgt.n	800048e <__aeabi_fadd+0x9a>
 800048c:	e0d2      	b.n	8000634 <__aeabi_fadd+0x240>
 800048e:	2301      	movs	r3, #1
 8000490:	19db      	adds	r3, r3, r7
 8000492:	015a      	lsls	r2, r3, #5
 8000494:	d56a      	bpl.n	800056c <__aeabi_fadd+0x178>
 8000496:	3501      	adds	r5, #1
 8000498:	2dff      	cmp	r5, #255	; 0xff
 800049a:	d05b      	beq.n	8000554 <__aeabi_fadd+0x160>
 800049c:	2201      	movs	r2, #1
 800049e:	49a3      	ldr	r1, [pc, #652]	; (800072c <__aeabi_fadd+0x338>)
 80004a0:	401a      	ands	r2, r3
 80004a2:	085b      	lsrs	r3, r3, #1
 80004a4:	400b      	ands	r3, r1
 80004a6:	4313      	orrs	r3, r2
 80004a8:	e01c      	b.n	80004e4 <__aeabi_fadd+0xf0>
 80004aa:	2dff      	cmp	r5, #255	; 0xff
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0xbc>
 80004ae:	e072      	b.n	8000596 <__aeabi_fadd+0x1a2>
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	4662      	mov	r2, ip
 80004b4:	04db      	lsls	r3, r3, #19
 80004b6:	431a      	orrs	r2, r3
 80004b8:	4694      	mov	ip, r2
 80004ba:	281b      	cmp	r0, #27
 80004bc:	dc00      	bgt.n	80004c0 <__aeabi_fadd+0xcc>
 80004be:	e090      	b.n	80005e2 <__aeabi_fadd+0x1ee>
 80004c0:	2301      	movs	r3, #1
 80004c2:	1afb      	subs	r3, r7, r3
 80004c4:	015a      	lsls	r2, r3, #5
 80004c6:	d551      	bpl.n	800056c <__aeabi_fadd+0x178>
 80004c8:	019b      	lsls	r3, r3, #6
 80004ca:	099e      	lsrs	r6, r3, #6
 80004cc:	0030      	movs	r0, r6
 80004ce:	f002 fbe7 	bl	8002ca0 <__clzsi2>
 80004d2:	0033      	movs	r3, r6
 80004d4:	3805      	subs	r0, #5
 80004d6:	4083      	lsls	r3, r0
 80004d8:	4285      	cmp	r5, r0
 80004da:	dc00      	bgt.n	80004de <__aeabi_fadd+0xea>
 80004dc:	e075      	b.n	80005ca <__aeabi_fadd+0x1d6>
 80004de:	4a94      	ldr	r2, [pc, #592]	; (8000730 <__aeabi_fadd+0x33c>)
 80004e0:	1a2d      	subs	r5, r5, r0
 80004e2:	4013      	ands	r3, r2
 80004e4:	075a      	lsls	r2, r3, #29
 80004e6:	d004      	beq.n	80004f2 <__aeabi_fadd+0xfe>
 80004e8:	220f      	movs	r2, #15
 80004ea:	401a      	ands	r2, r3
 80004ec:	2a04      	cmp	r2, #4
 80004ee:	d000      	beq.n	80004f2 <__aeabi_fadd+0xfe>
 80004f0:	3304      	adds	r3, #4
 80004f2:	015a      	lsls	r2, r3, #5
 80004f4:	d53c      	bpl.n	8000570 <__aeabi_fadd+0x17c>
 80004f6:	1c68      	adds	r0, r5, #1
 80004f8:	2dfe      	cmp	r5, #254	; 0xfe
 80004fa:	d02b      	beq.n	8000554 <__aeabi_fadd+0x160>
 80004fc:	019b      	lsls	r3, r3, #6
 80004fe:	0a5e      	lsrs	r6, r3, #9
 8000500:	b2c0      	uxtb	r0, r0
 8000502:	05c0      	lsls	r0, r0, #23
 8000504:	4330      	orrs	r0, r6
 8000506:	07e4      	lsls	r4, r4, #31
 8000508:	4320      	orrs	r0, r4
 800050a:	bcc0      	pop	{r6, r7}
 800050c:	46b9      	mov	r9, r7
 800050e:	46b0      	mov	r8, r6
 8000510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000512:	20fe      	movs	r0, #254	; 0xfe
 8000514:	1c6a      	adds	r2, r5, #1
 8000516:	4210      	tst	r0, r2
 8000518:	d172      	bne.n	8000600 <__aeabi_fadd+0x20c>
 800051a:	2d00      	cmp	r5, #0
 800051c:	d000      	beq.n	8000520 <__aeabi_fadd+0x12c>
 800051e:	e0ae      	b.n	800067e <__aeabi_fadd+0x28a>
 8000520:	2f00      	cmp	r7, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0x132>
 8000524:	e0ec      	b.n	8000700 <__aeabi_fadd+0x30c>
 8000526:	4663      	mov	r3, ip
 8000528:	2000      	movs	r0, #0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0e9      	beq.n	8000502 <__aeabi_fadd+0x10e>
 800052e:	1afb      	subs	r3, r7, r3
 8000530:	015a      	lsls	r2, r3, #5
 8000532:	d400      	bmi.n	8000536 <__aeabi_fadd+0x142>
 8000534:	e0f3      	b.n	800071e <__aeabi_fadd+0x32a>
 8000536:	4663      	mov	r3, ip
 8000538:	000c      	movs	r4, r1
 800053a:	1bdb      	subs	r3, r3, r7
 800053c:	e7d2      	b.n	80004e4 <__aeabi_fadd+0xf0>
 800053e:	4661      	mov	r1, ip
 8000540:	2900      	cmp	r1, #0
 8000542:	d05b      	beq.n	80005fc <__aeabi_fadd+0x208>
 8000544:	1e51      	subs	r1, r2, #1
 8000546:	2a01      	cmp	r2, #1
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0x158>
 800054a:	e0a7      	b.n	800069c <__aeabi_fadd+0x2a8>
 800054c:	2aff      	cmp	r2, #255	; 0xff
 800054e:	d022      	beq.n	8000596 <__aeabi_fadd+0x1a2>
 8000550:	000a      	movs	r2, r1
 8000552:	e799      	b.n	8000488 <__aeabi_fadd+0x94>
 8000554:	20ff      	movs	r0, #255	; 0xff
 8000556:	2600      	movs	r6, #0
 8000558:	e7d3      	b.n	8000502 <__aeabi_fadd+0x10e>
 800055a:	21fe      	movs	r1, #254	; 0xfe
 800055c:	1c6a      	adds	r2, r5, #1
 800055e:	4211      	tst	r1, r2
 8000560:	d073      	beq.n	800064a <__aeabi_fadd+0x256>
 8000562:	2aff      	cmp	r2, #255	; 0xff
 8000564:	d0f6      	beq.n	8000554 <__aeabi_fadd+0x160>
 8000566:	0015      	movs	r5, r2
 8000568:	4467      	add	r7, ip
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	075a      	lsls	r2, r3, #29
 800056e:	d1bb      	bne.n	80004e8 <__aeabi_fadd+0xf4>
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	2dff      	cmp	r5, #255	; 0xff
 8000574:	d00f      	beq.n	8000596 <__aeabi_fadd+0x1a2>
 8000576:	025b      	lsls	r3, r3, #9
 8000578:	0a5e      	lsrs	r6, r3, #9
 800057a:	b2e8      	uxtb	r0, r5
 800057c:	e7c1      	b.n	8000502 <__aeabi_fadd+0x10e>
 800057e:	4662      	mov	r2, ip
 8000580:	2a00      	cmp	r2, #0
 8000582:	d008      	beq.n	8000596 <__aeabi_fadd+0x1a2>
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	4213      	tst	r3, r2
 800058a:	d004      	beq.n	8000596 <__aeabi_fadd+0x1a2>
 800058c:	4640      	mov	r0, r8
 800058e:	4210      	tst	r0, r2
 8000590:	d101      	bne.n	8000596 <__aeabi_fadd+0x1a2>
 8000592:	000c      	movs	r4, r1
 8000594:	4643      	mov	r3, r8
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0dc      	beq.n	8000554 <__aeabi_fadd+0x160>
 800059a:	2680      	movs	r6, #128	; 0x80
 800059c:	03f6      	lsls	r6, r6, #15
 800059e:	431e      	orrs	r6, r3
 80005a0:	0276      	lsls	r6, r6, #9
 80005a2:	20ff      	movs	r0, #255	; 0xff
 80005a4:	0a76      	lsrs	r6, r6, #9
 80005a6:	e7ac      	b.n	8000502 <__aeabi_fadd+0x10e>
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d0d6      	beq.n	800055a <__aeabi_fadd+0x166>
 80005ac:	1b42      	subs	r2, r0, r5
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d05c      	beq.n	800066c <__aeabi_fadd+0x278>
 80005b2:	28ff      	cmp	r0, #255	; 0xff
 80005b4:	d0ee      	beq.n	8000594 <__aeabi_fadd+0x1a0>
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	04db      	lsls	r3, r3, #19
 80005ba:	431f      	orrs	r7, r3
 80005bc:	2a1b      	cmp	r2, #27
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_fadd+0x1ce>
 80005c0:	e082      	b.n	80006c8 <__aeabi_fadd+0x2d4>
 80005c2:	2301      	movs	r3, #1
 80005c4:	464d      	mov	r5, r9
 80005c6:	4463      	add	r3, ip
 80005c8:	e763      	b.n	8000492 <__aeabi_fadd+0x9e>
 80005ca:	2220      	movs	r2, #32
 80005cc:	1b40      	subs	r0, r0, r5
 80005ce:	3001      	adds	r0, #1
 80005d0:	1a12      	subs	r2, r2, r0
 80005d2:	0019      	movs	r1, r3
 80005d4:	4093      	lsls	r3, r2
 80005d6:	40c1      	lsrs	r1, r0
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	4193      	sbcs	r3, r2
 80005dc:	2500      	movs	r5, #0
 80005de:	430b      	orrs	r3, r1
 80005e0:	e780      	b.n	80004e4 <__aeabi_fadd+0xf0>
 80005e2:	2320      	movs	r3, #32
 80005e4:	4661      	mov	r1, ip
 80005e6:	1a1b      	subs	r3, r3, r0
 80005e8:	4099      	lsls	r1, r3
 80005ea:	4662      	mov	r2, ip
 80005ec:	000b      	movs	r3, r1
 80005ee:	40c2      	lsrs	r2, r0
 80005f0:	1e59      	subs	r1, r3, #1
 80005f2:	418b      	sbcs	r3, r1
 80005f4:	4313      	orrs	r3, r2
 80005f6:	e764      	b.n	80004c2 <__aeabi_fadd+0xce>
 80005f8:	000c      	movs	r4, r1
 80005fa:	4643      	mov	r3, r8
 80005fc:	0015      	movs	r5, r2
 80005fe:	e7b8      	b.n	8000572 <__aeabi_fadd+0x17e>
 8000600:	4663      	mov	r3, ip
 8000602:	1afe      	subs	r6, r7, r3
 8000604:	0173      	lsls	r3, r6, #5
 8000606:	d445      	bmi.n	8000694 <__aeabi_fadd+0x2a0>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d000      	beq.n	800060e <__aeabi_fadd+0x21a>
 800060c:	e75e      	b.n	80004cc <__aeabi_fadd+0xd8>
 800060e:	2400      	movs	r4, #0
 8000610:	2000      	movs	r0, #0
 8000612:	2600      	movs	r6, #0
 8000614:	e775      	b.n	8000502 <__aeabi_fadd+0x10e>
 8000616:	2bff      	cmp	r3, #255	; 0xff
 8000618:	d0bb      	beq.n	8000592 <__aeabi_fadd+0x19e>
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	04db      	lsls	r3, r3, #19
 800061e:	431f      	orrs	r7, r3
 8000620:	2a1b      	cmp	r2, #27
 8000622:	dd47      	ble.n	80006b4 <__aeabi_fadd+0x2c0>
 8000624:	2301      	movs	r3, #1
 8000626:	4662      	mov	r2, ip
 8000628:	000c      	movs	r4, r1
 800062a:	464d      	mov	r5, r9
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	e749      	b.n	80004c4 <__aeabi_fadd+0xd0>
 8000630:	0005      	movs	r5, r0
 8000632:	e79e      	b.n	8000572 <__aeabi_fadd+0x17e>
 8000634:	4661      	mov	r1, ip
 8000636:	2320      	movs	r3, #32
 8000638:	40d1      	lsrs	r1, r2
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	4662      	mov	r2, ip
 800063e:	409a      	lsls	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	4193      	sbcs	r3, r2
 8000646:	430b      	orrs	r3, r1
 8000648:	e722      	b.n	8000490 <__aeabi_fadd+0x9c>
 800064a:	2d00      	cmp	r5, #0
 800064c:	d146      	bne.n	80006dc <__aeabi_fadd+0x2e8>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d062      	beq.n	8000718 <__aeabi_fadd+0x324>
 8000652:	4663      	mov	r3, ip
 8000654:	2000      	movs	r0, #0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x268>
 800065a:	e752      	b.n	8000502 <__aeabi_fadd+0x10e>
 800065c:	003b      	movs	r3, r7
 800065e:	4463      	add	r3, ip
 8000660:	015a      	lsls	r2, r3, #5
 8000662:	d583      	bpl.n	800056c <__aeabi_fadd+0x178>
 8000664:	4a32      	ldr	r2, [pc, #200]	; (8000730 <__aeabi_fadd+0x33c>)
 8000666:	3501      	adds	r5, #1
 8000668:	4013      	ands	r3, r2
 800066a:	e77f      	b.n	800056c <__aeabi_fadd+0x178>
 800066c:	2f00      	cmp	r7, #0
 800066e:	d0c4      	beq.n	80005fa <__aeabi_fadd+0x206>
 8000670:	1e53      	subs	r3, r2, #1
 8000672:	2a01      	cmp	r2, #1
 8000674:	d012      	beq.n	800069c <__aeabi_fadd+0x2a8>
 8000676:	2aff      	cmp	r2, #255	; 0xff
 8000678:	d08c      	beq.n	8000594 <__aeabi_fadd+0x1a0>
 800067a:	001a      	movs	r2, r3
 800067c:	e79e      	b.n	80005bc <__aeabi_fadd+0x1c8>
 800067e:	2f00      	cmp	r7, #0
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x290>
 8000682:	e77c      	b.n	800057e <__aeabi_fadd+0x18a>
 8000684:	4663      	mov	r3, ip
 8000686:	2b00      	cmp	r3, #0
 8000688:	d183      	bne.n	8000592 <__aeabi_fadd+0x19e>
 800068a:	2680      	movs	r6, #128	; 0x80
 800068c:	2400      	movs	r4, #0
 800068e:	20ff      	movs	r0, #255	; 0xff
 8000690:	03f6      	lsls	r6, r6, #15
 8000692:	e736      	b.n	8000502 <__aeabi_fadd+0x10e>
 8000694:	4663      	mov	r3, ip
 8000696:	000c      	movs	r4, r1
 8000698:	1bde      	subs	r6, r3, r7
 800069a:	e717      	b.n	80004cc <__aeabi_fadd+0xd8>
 800069c:	003b      	movs	r3, r7
 800069e:	4463      	add	r3, ip
 80006a0:	2501      	movs	r5, #1
 80006a2:	015a      	lsls	r2, r3, #5
 80006a4:	d400      	bmi.n	80006a8 <__aeabi_fadd+0x2b4>
 80006a6:	e761      	b.n	800056c <__aeabi_fadd+0x178>
 80006a8:	2502      	movs	r5, #2
 80006aa:	e6f7      	b.n	800049c <__aeabi_fadd+0xa8>
 80006ac:	4663      	mov	r3, ip
 80006ae:	2501      	movs	r5, #1
 80006b0:	1afb      	subs	r3, r7, r3
 80006b2:	e707      	b.n	80004c4 <__aeabi_fadd+0xd0>
 80006b4:	2320      	movs	r3, #32
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	0038      	movs	r0, r7
 80006ba:	409f      	lsls	r7, r3
 80006bc:	003b      	movs	r3, r7
 80006be:	40d0      	lsrs	r0, r2
 80006c0:	1e5a      	subs	r2, r3, #1
 80006c2:	4193      	sbcs	r3, r2
 80006c4:	4303      	orrs	r3, r0
 80006c6:	e7ae      	b.n	8000626 <__aeabi_fadd+0x232>
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	0039      	movs	r1, r7
 80006ce:	409f      	lsls	r7, r3
 80006d0:	003b      	movs	r3, r7
 80006d2:	40d1      	lsrs	r1, r2
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	4193      	sbcs	r3, r2
 80006d8:	430b      	orrs	r3, r1
 80006da:	e773      	b.n	80005c4 <__aeabi_fadd+0x1d0>
 80006dc:	2f00      	cmp	r7, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x2ee>
 80006e0:	e758      	b.n	8000594 <__aeabi_fadd+0x1a0>
 80006e2:	4662      	mov	r2, ip
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x2f6>
 80006e8:	e755      	b.n	8000596 <__aeabi_fadd+0x1a2>
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	03d2      	lsls	r2, r2, #15
 80006ee:	4213      	tst	r3, r2
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fadd+0x300>
 80006f2:	e750      	b.n	8000596 <__aeabi_fadd+0x1a2>
 80006f4:	4641      	mov	r1, r8
 80006f6:	4211      	tst	r1, r2
 80006f8:	d000      	beq.n	80006fc <__aeabi_fadd+0x308>
 80006fa:	e74c      	b.n	8000596 <__aeabi_fadd+0x1a2>
 80006fc:	4643      	mov	r3, r8
 80006fe:	e74a      	b.n	8000596 <__aeabi_fadd+0x1a2>
 8000700:	4663      	mov	r3, ip
 8000702:	2b00      	cmp	r3, #0
 8000704:	d083      	beq.n	800060e <__aeabi_fadd+0x21a>
 8000706:	000c      	movs	r4, r1
 8000708:	4646      	mov	r6, r8
 800070a:	2000      	movs	r0, #0
 800070c:	e6f9      	b.n	8000502 <__aeabi_fadd+0x10e>
 800070e:	4663      	mov	r3, ip
 8000710:	000c      	movs	r4, r1
 8000712:	1bdb      	subs	r3, r3, r7
 8000714:	3501      	adds	r5, #1
 8000716:	e6d5      	b.n	80004c4 <__aeabi_fadd+0xd0>
 8000718:	4646      	mov	r6, r8
 800071a:	2000      	movs	r0, #0
 800071c:	e6f1      	b.n	8000502 <__aeabi_fadd+0x10e>
 800071e:	2b00      	cmp	r3, #0
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x330>
 8000722:	e723      	b.n	800056c <__aeabi_fadd+0x178>
 8000724:	2400      	movs	r4, #0
 8000726:	2600      	movs	r6, #0
 8000728:	e6eb      	b.n	8000502 <__aeabi_fadd+0x10e>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	7dffffff 	.word	0x7dffffff
 8000730:	fbffffff 	.word	0xfbffffff

08000734 <__aeabi_fdiv>:
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	464f      	mov	r7, r9
 8000738:	4646      	mov	r6, r8
 800073a:	46d6      	mov	lr, sl
 800073c:	0245      	lsls	r5, r0, #9
 800073e:	b5c0      	push	{r6, r7, lr}
 8000740:	0047      	lsls	r7, r0, #1
 8000742:	1c0c      	adds	r4, r1, #0
 8000744:	0a6d      	lsrs	r5, r5, #9
 8000746:	0e3f      	lsrs	r7, r7, #24
 8000748:	0fc6      	lsrs	r6, r0, #31
 800074a:	2f00      	cmp	r7, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_fdiv+0x1c>
 800074e:	e06f      	b.n	8000830 <__aeabi_fdiv+0xfc>
 8000750:	2fff      	cmp	r7, #255	; 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fdiv+0x22>
 8000754:	e074      	b.n	8000840 <__aeabi_fdiv+0x10c>
 8000756:	2300      	movs	r3, #0
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	4699      	mov	r9, r3
 800075c:	469a      	mov	sl, r3
 800075e:	00ed      	lsls	r5, r5, #3
 8000760:	04d2      	lsls	r2, r2, #19
 8000762:	4315      	orrs	r5, r2
 8000764:	3f7f      	subs	r7, #127	; 0x7f
 8000766:	0263      	lsls	r3, r4, #9
 8000768:	0a5b      	lsrs	r3, r3, #9
 800076a:	4698      	mov	r8, r3
 800076c:	0063      	lsls	r3, r4, #1
 800076e:	0e1b      	lsrs	r3, r3, #24
 8000770:	0fe4      	lsrs	r4, r4, #31
 8000772:	2b00      	cmp	r3, #0
 8000774:	d04d      	beq.n	8000812 <__aeabi_fdiv+0xde>
 8000776:	2bff      	cmp	r3, #255	; 0xff
 8000778:	d045      	beq.n	8000806 <__aeabi_fdiv+0xd2>
 800077a:	4642      	mov	r2, r8
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	00d2      	lsls	r2, r2, #3
 8000780:	04c9      	lsls	r1, r1, #19
 8000782:	4311      	orrs	r1, r2
 8000784:	4688      	mov	r8, r1
 8000786:	2200      	movs	r2, #0
 8000788:	3b7f      	subs	r3, #127	; 0x7f
 800078a:	0031      	movs	r1, r6
 800078c:	1aff      	subs	r7, r7, r3
 800078e:	464b      	mov	r3, r9
 8000790:	4061      	eors	r1, r4
 8000792:	b2c9      	uxtb	r1, r1
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d900      	bls.n	800079a <__aeabi_fdiv+0x66>
 8000798:	e0b8      	b.n	800090c <__aeabi_fdiv+0x1d8>
 800079a:	4870      	ldr	r0, [pc, #448]	; (800095c <__aeabi_fdiv+0x228>)
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	58c3      	ldr	r3, [r0, r3]
 80007a0:	469f      	mov	pc, r3
 80007a2:	2300      	movs	r3, #0
 80007a4:	4698      	mov	r8, r3
 80007a6:	0026      	movs	r6, r4
 80007a8:	4645      	mov	r5, r8
 80007aa:	4692      	mov	sl, r2
 80007ac:	4653      	mov	r3, sl
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fdiv+0x80>
 80007b2:	e08d      	b.n	80008d0 <__aeabi_fdiv+0x19c>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d100      	bne.n	80007ba <__aeabi_fdiv+0x86>
 80007b8:	e0a1      	b.n	80008fe <__aeabi_fdiv+0x1ca>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d018      	beq.n	80007f0 <__aeabi_fdiv+0xbc>
 80007be:	003b      	movs	r3, r7
 80007c0:	337f      	adds	r3, #127	; 0x7f
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	dd6d      	ble.n	80008a2 <__aeabi_fdiv+0x16e>
 80007c6:	076a      	lsls	r2, r5, #29
 80007c8:	d004      	beq.n	80007d4 <__aeabi_fdiv+0xa0>
 80007ca:	220f      	movs	r2, #15
 80007cc:	402a      	ands	r2, r5
 80007ce:	2a04      	cmp	r2, #4
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fdiv+0xa0>
 80007d2:	3504      	adds	r5, #4
 80007d4:	012a      	lsls	r2, r5, #4
 80007d6:	d503      	bpl.n	80007e0 <__aeabi_fdiv+0xac>
 80007d8:	4b61      	ldr	r3, [pc, #388]	; (8000960 <__aeabi_fdiv+0x22c>)
 80007da:	401d      	ands	r5, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	3380      	adds	r3, #128	; 0x80
 80007e0:	2bfe      	cmp	r3, #254	; 0xfe
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_fdiv+0xb2>
 80007e4:	e074      	b.n	80008d0 <__aeabi_fdiv+0x19c>
 80007e6:	01aa      	lsls	r2, r5, #6
 80007e8:	0a52      	lsrs	r2, r2, #9
 80007ea:	b2d8      	uxtb	r0, r3
 80007ec:	e002      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 80007ee:	000e      	movs	r6, r1
 80007f0:	2000      	movs	r0, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	07f6      	lsls	r6, r6, #31
 80007f8:	4310      	orrs	r0, r2
 80007fa:	4330      	orrs	r0, r6
 80007fc:	bce0      	pop	{r5, r6, r7}
 80007fe:	46ba      	mov	sl, r7
 8000800:	46b1      	mov	r9, r6
 8000802:	46a8      	mov	r8, r5
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	4643      	mov	r3, r8
 8000808:	2b00      	cmp	r3, #0
 800080a:	d13f      	bne.n	800088c <__aeabi_fdiv+0x158>
 800080c:	2202      	movs	r2, #2
 800080e:	3fff      	subs	r7, #255	; 0xff
 8000810:	e003      	b.n	800081a <__aeabi_fdiv+0xe6>
 8000812:	4643      	mov	r3, r8
 8000814:	2b00      	cmp	r3, #0
 8000816:	d12d      	bne.n	8000874 <__aeabi_fdiv+0x140>
 8000818:	2201      	movs	r2, #1
 800081a:	0031      	movs	r1, r6
 800081c:	464b      	mov	r3, r9
 800081e:	4061      	eors	r1, r4
 8000820:	b2c9      	uxtb	r1, r1
 8000822:	4313      	orrs	r3, r2
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d838      	bhi.n	800089a <__aeabi_fdiv+0x166>
 8000828:	484e      	ldr	r0, [pc, #312]	; (8000964 <__aeabi_fdiv+0x230>)
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	58c3      	ldr	r3, [r0, r3]
 800082e:	469f      	mov	pc, r3
 8000830:	2d00      	cmp	r5, #0
 8000832:	d113      	bne.n	800085c <__aeabi_fdiv+0x128>
 8000834:	2304      	movs	r3, #4
 8000836:	4699      	mov	r9, r3
 8000838:	3b03      	subs	r3, #3
 800083a:	2700      	movs	r7, #0
 800083c:	469a      	mov	sl, r3
 800083e:	e792      	b.n	8000766 <__aeabi_fdiv+0x32>
 8000840:	2d00      	cmp	r5, #0
 8000842:	d105      	bne.n	8000850 <__aeabi_fdiv+0x11c>
 8000844:	2308      	movs	r3, #8
 8000846:	4699      	mov	r9, r3
 8000848:	3b06      	subs	r3, #6
 800084a:	27ff      	movs	r7, #255	; 0xff
 800084c:	469a      	mov	sl, r3
 800084e:	e78a      	b.n	8000766 <__aeabi_fdiv+0x32>
 8000850:	230c      	movs	r3, #12
 8000852:	4699      	mov	r9, r3
 8000854:	3b09      	subs	r3, #9
 8000856:	27ff      	movs	r7, #255	; 0xff
 8000858:	469a      	mov	sl, r3
 800085a:	e784      	b.n	8000766 <__aeabi_fdiv+0x32>
 800085c:	0028      	movs	r0, r5
 800085e:	f002 fa1f 	bl	8002ca0 <__clzsi2>
 8000862:	2776      	movs	r7, #118	; 0x76
 8000864:	1f43      	subs	r3, r0, #5
 8000866:	409d      	lsls	r5, r3
 8000868:	2300      	movs	r3, #0
 800086a:	427f      	negs	r7, r7
 800086c:	4699      	mov	r9, r3
 800086e:	469a      	mov	sl, r3
 8000870:	1a3f      	subs	r7, r7, r0
 8000872:	e778      	b.n	8000766 <__aeabi_fdiv+0x32>
 8000874:	4640      	mov	r0, r8
 8000876:	f002 fa13 	bl	8002ca0 <__clzsi2>
 800087a:	4642      	mov	r2, r8
 800087c:	1f43      	subs	r3, r0, #5
 800087e:	409a      	lsls	r2, r3
 8000880:	2376      	movs	r3, #118	; 0x76
 8000882:	425b      	negs	r3, r3
 8000884:	4690      	mov	r8, r2
 8000886:	1a1b      	subs	r3, r3, r0
 8000888:	2200      	movs	r2, #0
 800088a:	e77e      	b.n	800078a <__aeabi_fdiv+0x56>
 800088c:	2303      	movs	r3, #3
 800088e:	464a      	mov	r2, r9
 8000890:	431a      	orrs	r2, r3
 8000892:	4691      	mov	r9, r2
 8000894:	33fc      	adds	r3, #252	; 0xfc
 8000896:	2203      	movs	r2, #3
 8000898:	e777      	b.n	800078a <__aeabi_fdiv+0x56>
 800089a:	000e      	movs	r6, r1
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	2200      	movs	r2, #0
 80008a0:	e7a8      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 80008a2:	2201      	movs	r2, #1
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2b1b      	cmp	r3, #27
 80008a8:	dca2      	bgt.n	80007f0 <__aeabi_fdiv+0xbc>
 80008aa:	379e      	adds	r7, #158	; 0x9e
 80008ac:	002a      	movs	r2, r5
 80008ae:	40bd      	lsls	r5, r7
 80008b0:	40da      	lsrs	r2, r3
 80008b2:	1e6b      	subs	r3, r5, #1
 80008b4:	419d      	sbcs	r5, r3
 80008b6:	4315      	orrs	r5, r2
 80008b8:	076a      	lsls	r2, r5, #29
 80008ba:	d004      	beq.n	80008c6 <__aeabi_fdiv+0x192>
 80008bc:	220f      	movs	r2, #15
 80008be:	402a      	ands	r2, r5
 80008c0:	2a04      	cmp	r2, #4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fdiv+0x192>
 80008c4:	3504      	adds	r5, #4
 80008c6:	016a      	lsls	r2, r5, #5
 80008c8:	d544      	bpl.n	8000954 <__aeabi_fdiv+0x220>
 80008ca:	2001      	movs	r0, #1
 80008cc:	2200      	movs	r2, #0
 80008ce:	e791      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 80008d0:	20ff      	movs	r0, #255	; 0xff
 80008d2:	2200      	movs	r2, #0
 80008d4:	e78e      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	2600      	movs	r6, #0
 80008da:	20ff      	movs	r0, #255	; 0xff
 80008dc:	03d2      	lsls	r2, r2, #15
 80008de:	e789      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 80008e0:	2300      	movs	r3, #0
 80008e2:	4698      	mov	r8, r3
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	03d2      	lsls	r2, r2, #15
 80008e8:	4215      	tst	r5, r2
 80008ea:	d008      	beq.n	80008fe <__aeabi_fdiv+0x1ca>
 80008ec:	4643      	mov	r3, r8
 80008ee:	4213      	tst	r3, r2
 80008f0:	d105      	bne.n	80008fe <__aeabi_fdiv+0x1ca>
 80008f2:	431a      	orrs	r2, r3
 80008f4:	0252      	lsls	r2, r2, #9
 80008f6:	0026      	movs	r6, r4
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	0a52      	lsrs	r2, r2, #9
 80008fc:	e77a      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	432a      	orrs	r2, r5
 8000904:	0252      	lsls	r2, r2, #9
 8000906:	20ff      	movs	r0, #255	; 0xff
 8000908:	0a52      	lsrs	r2, r2, #9
 800090a:	e773      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 800090c:	4642      	mov	r2, r8
 800090e:	016b      	lsls	r3, r5, #5
 8000910:	0155      	lsls	r5, r2, #5
 8000912:	42ab      	cmp	r3, r5
 8000914:	d21a      	bcs.n	800094c <__aeabi_fdiv+0x218>
 8000916:	201b      	movs	r0, #27
 8000918:	2200      	movs	r2, #0
 800091a:	3f01      	subs	r7, #1
 800091c:	2601      	movs	r6, #1
 800091e:	001c      	movs	r4, r3
 8000920:	0052      	lsls	r2, r2, #1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2c00      	cmp	r4, #0
 8000926:	db01      	blt.n	800092c <__aeabi_fdiv+0x1f8>
 8000928:	429d      	cmp	r5, r3
 800092a:	d801      	bhi.n	8000930 <__aeabi_fdiv+0x1fc>
 800092c:	1b5b      	subs	r3, r3, r5
 800092e:	4332      	orrs	r2, r6
 8000930:	3801      	subs	r0, #1
 8000932:	2800      	cmp	r0, #0
 8000934:	d1f3      	bne.n	800091e <__aeabi_fdiv+0x1ea>
 8000936:	1e58      	subs	r0, r3, #1
 8000938:	4183      	sbcs	r3, r0
 800093a:	4313      	orrs	r3, r2
 800093c:	001d      	movs	r5, r3
 800093e:	003b      	movs	r3, r7
 8000940:	337f      	adds	r3, #127	; 0x7f
 8000942:	000e      	movs	r6, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	dd00      	ble.n	800094a <__aeabi_fdiv+0x216>
 8000948:	e73d      	b.n	80007c6 <__aeabi_fdiv+0x92>
 800094a:	e7aa      	b.n	80008a2 <__aeabi_fdiv+0x16e>
 800094c:	201a      	movs	r0, #26
 800094e:	2201      	movs	r2, #1
 8000950:	1b5b      	subs	r3, r3, r5
 8000952:	e7e3      	b.n	800091c <__aeabi_fdiv+0x1e8>
 8000954:	01aa      	lsls	r2, r5, #6
 8000956:	2000      	movs	r0, #0
 8000958:	0a52      	lsrs	r2, r2, #9
 800095a:	e74b      	b.n	80007f4 <__aeabi_fdiv+0xc0>
 800095c:	080076f4 	.word	0x080076f4
 8000960:	f7ffffff 	.word	0xf7ffffff
 8000964:	08007734 	.word	0x08007734

08000968 <__eqsf2>:
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	0042      	lsls	r2, r0, #1
 800096c:	0245      	lsls	r5, r0, #9
 800096e:	024e      	lsls	r6, r1, #9
 8000970:	004c      	lsls	r4, r1, #1
 8000972:	0fc3      	lsrs	r3, r0, #31
 8000974:	0a6d      	lsrs	r5, r5, #9
 8000976:	2001      	movs	r0, #1
 8000978:	0e12      	lsrs	r2, r2, #24
 800097a:	0a76      	lsrs	r6, r6, #9
 800097c:	0e24      	lsrs	r4, r4, #24
 800097e:	0fc9      	lsrs	r1, r1, #31
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d006      	beq.n	8000992 <__eqsf2+0x2a>
 8000984:	2cff      	cmp	r4, #255	; 0xff
 8000986:	d003      	beq.n	8000990 <__eqsf2+0x28>
 8000988:	42a2      	cmp	r2, r4
 800098a:	d101      	bne.n	8000990 <__eqsf2+0x28>
 800098c:	42b5      	cmp	r5, r6
 800098e:	d006      	beq.n	800099e <__eqsf2+0x36>
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	2d00      	cmp	r5, #0
 8000994:	d1fc      	bne.n	8000990 <__eqsf2+0x28>
 8000996:	2cff      	cmp	r4, #255	; 0xff
 8000998:	d1fa      	bne.n	8000990 <__eqsf2+0x28>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d1f8      	bne.n	8000990 <__eqsf2+0x28>
 800099e:	428b      	cmp	r3, r1
 80009a0:	d006      	beq.n	80009b0 <__eqsf2+0x48>
 80009a2:	2001      	movs	r0, #1
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d1f3      	bne.n	8000990 <__eqsf2+0x28>
 80009a8:	0028      	movs	r0, r5
 80009aa:	1e43      	subs	r3, r0, #1
 80009ac:	4198      	sbcs	r0, r3
 80009ae:	e7ef      	b.n	8000990 <__eqsf2+0x28>
 80009b0:	2000      	movs	r0, #0
 80009b2:	e7ed      	b.n	8000990 <__eqsf2+0x28>

080009b4 <__gesf2>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	0042      	lsls	r2, r0, #1
 80009b8:	0245      	lsls	r5, r0, #9
 80009ba:	024e      	lsls	r6, r1, #9
 80009bc:	004c      	lsls	r4, r1, #1
 80009be:	0fc3      	lsrs	r3, r0, #31
 80009c0:	0a6d      	lsrs	r5, r5, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	0a76      	lsrs	r6, r6, #9
 80009c6:	0e24      	lsrs	r4, r4, #24
 80009c8:	0fc8      	lsrs	r0, r1, #31
 80009ca:	2aff      	cmp	r2, #255	; 0xff
 80009cc:	d01b      	beq.n	8000a06 <__gesf2+0x52>
 80009ce:	2cff      	cmp	r4, #255	; 0xff
 80009d0:	d00e      	beq.n	80009f0 <__gesf2+0x3c>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d11b      	bne.n	8000a0e <__gesf2+0x5a>
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d101      	bne.n	80009de <__gesf2+0x2a>
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d01c      	beq.n	8000a18 <__gesf2+0x64>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d00c      	beq.n	80009fc <__gesf2+0x48>
 80009e2:	4283      	cmp	r3, r0
 80009e4:	d01c      	beq.n	8000a20 <__gesf2+0x6c>
 80009e6:	2102      	movs	r1, #2
 80009e8:	1e58      	subs	r0, r3, #1
 80009ea:	4008      	ands	r0, r1
 80009ec:	3801      	subs	r0, #1
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d122      	bne.n	8000a3a <__gesf2+0x86>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	d1f4      	bne.n	80009e2 <__gesf2+0x2e>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d1f2      	bne.n	80009e2 <__gesf2+0x2e>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d1f6      	bne.n	80009ee <__gesf2+0x3a>
 8000a00:	2001      	movs	r0, #1
 8000a02:	4240      	negs	r0, r0
 8000a04:	e7f3      	b.n	80009ee <__gesf2+0x3a>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d117      	bne.n	8000a3a <__gesf2+0x86>
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d0f0      	beq.n	80009f0 <__gesf2+0x3c>
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	d1e7      	bne.n	80009e2 <__gesf2+0x2e>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d1e5      	bne.n	80009e2 <__gesf2+0x2e>
 8000a16:	e7e6      	b.n	80009e6 <__gesf2+0x32>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d0e7      	beq.n	80009ee <__gesf2+0x3a>
 8000a1e:	e7e2      	b.n	80009e6 <__gesf2+0x32>
 8000a20:	42a2      	cmp	r2, r4
 8000a22:	dc05      	bgt.n	8000a30 <__gesf2+0x7c>
 8000a24:	dbea      	blt.n	80009fc <__gesf2+0x48>
 8000a26:	42b5      	cmp	r5, r6
 8000a28:	d802      	bhi.n	8000a30 <__gesf2+0x7c>
 8000a2a:	d3e7      	bcc.n	80009fc <__gesf2+0x48>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	e7de      	b.n	80009ee <__gesf2+0x3a>
 8000a30:	4243      	negs	r3, r0
 8000a32:	4158      	adcs	r0, r3
 8000a34:	0040      	lsls	r0, r0, #1
 8000a36:	3801      	subs	r0, #1
 8000a38:	e7d9      	b.n	80009ee <__gesf2+0x3a>
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	4240      	negs	r0, r0
 8000a3e:	e7d6      	b.n	80009ee <__gesf2+0x3a>

08000a40 <__lesf2>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	0042      	lsls	r2, r0, #1
 8000a44:	0245      	lsls	r5, r0, #9
 8000a46:	024e      	lsls	r6, r1, #9
 8000a48:	004c      	lsls	r4, r1, #1
 8000a4a:	0fc3      	lsrs	r3, r0, #31
 8000a4c:	0a6d      	lsrs	r5, r5, #9
 8000a4e:	0e12      	lsrs	r2, r2, #24
 8000a50:	0a76      	lsrs	r6, r6, #9
 8000a52:	0e24      	lsrs	r4, r4, #24
 8000a54:	0fc8      	lsrs	r0, r1, #31
 8000a56:	2aff      	cmp	r2, #255	; 0xff
 8000a58:	d00b      	beq.n	8000a72 <__lesf2+0x32>
 8000a5a:	2cff      	cmp	r4, #255	; 0xff
 8000a5c:	d00d      	beq.n	8000a7a <__lesf2+0x3a>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d11f      	bne.n	8000aa2 <__lesf2+0x62>
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	d116      	bne.n	8000a94 <__lesf2+0x54>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d114      	bne.n	8000a94 <__lesf2+0x54>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d010      	beq.n	8000a92 <__lesf2+0x52>
 8000a70:	e009      	b.n	8000a86 <__lesf2+0x46>
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d10c      	bne.n	8000a90 <__lesf2+0x50>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d113      	bne.n	8000aa2 <__lesf2+0x62>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d108      	bne.n	8000a90 <__lesf2+0x50>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d008      	beq.n	8000a94 <__lesf2+0x54>
 8000a82:	4283      	cmp	r3, r0
 8000a84:	d012      	beq.n	8000aac <__lesf2+0x6c>
 8000a86:	2102      	movs	r1, #2
 8000a88:	1e58      	subs	r0, r3, #1
 8000a8a:	4008      	ands	r0, r1
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e000      	b.n	8000a92 <__lesf2+0x52>
 8000a90:	2002      	movs	r0, #2
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	d1f4      	bne.n	8000a82 <__lesf2+0x42>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d1fa      	bne.n	8000a92 <__lesf2+0x52>
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	e7f7      	b.n	8000a92 <__lesf2+0x52>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d1ed      	bne.n	8000a82 <__lesf2+0x42>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d1eb      	bne.n	8000a82 <__lesf2+0x42>
 8000aaa:	e7ec      	b.n	8000a86 <__lesf2+0x46>
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	dc05      	bgt.n	8000abc <__lesf2+0x7c>
 8000ab0:	dbf2      	blt.n	8000a98 <__lesf2+0x58>
 8000ab2:	42b5      	cmp	r5, r6
 8000ab4:	d802      	bhi.n	8000abc <__lesf2+0x7c>
 8000ab6:	d3ef      	bcc.n	8000a98 <__lesf2+0x58>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	e7ea      	b.n	8000a92 <__lesf2+0x52>
 8000abc:	4243      	negs	r3, r0
 8000abe:	4158      	adcs	r0, r3
 8000ac0:	0040      	lsls	r0, r0, #1
 8000ac2:	3801      	subs	r0, #1
 8000ac4:	e7e5      	b.n	8000a92 <__lesf2+0x52>
 8000ac6:	46c0      	nop			; (mov r8, r8)

08000ac8 <__aeabi_fsub>:
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aca:	46c6      	mov	lr, r8
 8000acc:	0243      	lsls	r3, r0, #9
 8000ace:	0a5b      	lsrs	r3, r3, #9
 8000ad0:	0045      	lsls	r5, r0, #1
 8000ad2:	00da      	lsls	r2, r3, #3
 8000ad4:	0fc4      	lsrs	r4, r0, #31
 8000ad6:	0248      	lsls	r0, r1, #9
 8000ad8:	004f      	lsls	r7, r1, #1
 8000ada:	4694      	mov	ip, r2
 8000adc:	0a42      	lsrs	r2, r0, #9
 8000ade:	001e      	movs	r6, r3
 8000ae0:	4690      	mov	r8, r2
 8000ae2:	b500      	push	{lr}
 8000ae4:	0e2d      	lsrs	r5, r5, #24
 8000ae6:	0e3f      	lsrs	r7, r7, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	0980      	lsrs	r0, r0, #6
 8000aec:	2fff      	cmp	r7, #255	; 0xff
 8000aee:	d059      	beq.n	8000ba4 <__aeabi_fsub+0xdc>
 8000af0:	2201      	movs	r2, #1
 8000af2:	4051      	eors	r1, r2
 8000af4:	428c      	cmp	r4, r1
 8000af6:	d039      	beq.n	8000b6c <__aeabi_fsub+0xa4>
 8000af8:	1bea      	subs	r2, r5, r7
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	dd58      	ble.n	8000bb0 <__aeabi_fsub+0xe8>
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d068      	beq.n	8000bd4 <__aeabi_fsub+0x10c>
 8000b02:	2dff      	cmp	r5, #255	; 0xff
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x40>
 8000b06:	e0d1      	b.n	8000cac <__aeabi_fsub+0x1e4>
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	04db      	lsls	r3, r3, #19
 8000b0c:	4318      	orrs	r0, r3
 8000b0e:	2a1b      	cmp	r2, #27
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_fsub+0x4c>
 8000b12:	e0e3      	b.n	8000cdc <__aeabi_fsub+0x214>
 8000b14:	2301      	movs	r3, #1
 8000b16:	4662      	mov	r2, ip
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	015a      	lsls	r2, r3, #5
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_fsub+0x58>
 8000b1e:	e0ac      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	099e      	lsrs	r6, r3, #6
 8000b24:	0030      	movs	r0, r6
 8000b26:	f002 f8bb 	bl	8002ca0 <__clzsi2>
 8000b2a:	0033      	movs	r3, r6
 8000b2c:	3805      	subs	r0, #5
 8000b2e:	4083      	lsls	r3, r0
 8000b30:	4285      	cmp	r5, r0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x6e>
 8000b34:	e0c6      	b.n	8000cc4 <__aeabi_fsub+0x1fc>
 8000b36:	4ab2      	ldr	r2, [pc, #712]	; (8000e00 <__aeabi_fsub+0x338>)
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	075a      	lsls	r2, r3, #29
 8000b3e:	d004      	beq.n	8000b4a <__aeabi_fsub+0x82>
 8000b40:	220f      	movs	r2, #15
 8000b42:	401a      	ands	r2, r3
 8000b44:	2a04      	cmp	r2, #4
 8000b46:	d000      	beq.n	8000b4a <__aeabi_fsub+0x82>
 8000b48:	3304      	adds	r3, #4
 8000b4a:	015a      	lsls	r2, r3, #5
 8000b4c:	d400      	bmi.n	8000b50 <__aeabi_fsub+0x88>
 8000b4e:	e097      	b.n	8000c80 <__aeabi_fsub+0x1b8>
 8000b50:	1c6a      	adds	r2, r5, #1
 8000b52:	2dfe      	cmp	r5, #254	; 0xfe
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x90>
 8000b56:	e084      	b.n	8000c62 <__aeabi_fsub+0x19a>
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	0a5e      	lsrs	r6, r3, #9
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	05d0      	lsls	r0, r2, #23
 8000b60:	4330      	orrs	r0, r6
 8000b62:	07e4      	lsls	r4, r4, #31
 8000b64:	4320      	orrs	r0, r4
 8000b66:	bc80      	pop	{r7}
 8000b68:	46b8      	mov	r8, r7
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	1bea      	subs	r2, r5, r7
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	dd41      	ble.n	8000bf6 <__aeabi_fsub+0x12e>
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	d06b      	beq.n	8000c4e <__aeabi_fsub+0x186>
 8000b76:	2dff      	cmp	r5, #255	; 0xff
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0xb4>
 8000b7a:	e097      	b.n	8000cac <__aeabi_fsub+0x1e4>
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	04db      	lsls	r3, r3, #19
 8000b80:	4318      	orrs	r0, r3
 8000b82:	2a1b      	cmp	r2, #27
 8000b84:	dc00      	bgt.n	8000b88 <__aeabi_fsub+0xc0>
 8000b86:	e0cc      	b.n	8000d22 <__aeabi_fsub+0x25a>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	4463      	add	r3, ip
 8000b8c:	015a      	lsls	r2, r3, #5
 8000b8e:	d574      	bpl.n	8000c7a <__aeabi_fsub+0x1b2>
 8000b90:	3501      	adds	r5, #1
 8000b92:	2dff      	cmp	r5, #255	; 0xff
 8000b94:	d065      	beq.n	8000c62 <__aeabi_fsub+0x19a>
 8000b96:	2201      	movs	r2, #1
 8000b98:	499a      	ldr	r1, [pc, #616]	; (8000e04 <__aeabi_fsub+0x33c>)
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	e7cb      	b.n	8000b3c <__aeabi_fsub+0x74>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d01f      	beq.n	8000be8 <__aeabi_fsub+0x120>
 8000ba8:	428c      	cmp	r4, r1
 8000baa:	d022      	beq.n	8000bf2 <__aeabi_fsub+0x12a>
 8000bac:	002a      	movs	r2, r5
 8000bae:	3aff      	subs	r2, #255	; 0xff
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d035      	beq.n	8000c20 <__aeabi_fsub+0x158>
 8000bb4:	1b7a      	subs	r2, r7, r5
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fsub+0xf4>
 8000bba:	e099      	b.n	8000cf0 <__aeabi_fsub+0x228>
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0xfc>
 8000bc2:	e0dd      	b.n	8000d80 <__aeabi_fsub+0x2b8>
 8000bc4:	1e53      	subs	r3, r2, #1
 8000bc6:	2a01      	cmp	r2, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x104>
 8000bca:	e105      	b.n	8000dd8 <__aeabi_fsub+0x310>
 8000bcc:	2aff      	cmp	r2, #255	; 0xff
 8000bce:	d06b      	beq.n	8000ca8 <__aeabi_fsub+0x1e0>
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	e094      	b.n	8000cfe <__aeabi_fsub+0x236>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d073      	beq.n	8000cc0 <__aeabi_fsub+0x1f8>
 8000bd8:	1e51      	subs	r1, r2, #1
 8000bda:	2a01      	cmp	r2, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x118>
 8000bde:	e0df      	b.n	8000da0 <__aeabi_fsub+0x2d8>
 8000be0:	2aff      	cmp	r2, #255	; 0xff
 8000be2:	d063      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000be4:	000a      	movs	r2, r1
 8000be6:	e792      	b.n	8000b0e <__aeabi_fsub+0x46>
 8000be8:	2201      	movs	r2, #1
 8000bea:	4051      	eors	r1, r2
 8000bec:	42a1      	cmp	r1, r4
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fsub+0x12a>
 8000bf0:	e782      	b.n	8000af8 <__aeabi_fsub+0x30>
 8000bf2:	002a      	movs	r2, r5
 8000bf4:	3aff      	subs	r2, #255	; 0xff
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d036      	beq.n	8000c68 <__aeabi_fsub+0x1a0>
 8000bfa:	1b7a      	subs	r2, r7, r5
 8000bfc:	2d00      	cmp	r5, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x13a>
 8000c00:	e0aa      	b.n	8000d58 <__aeabi_fsub+0x290>
 8000c02:	2fff      	cmp	r7, #255	; 0xff
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x140>
 8000c06:	e0da      	b.n	8000dbe <__aeabi_fsub+0x2f6>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	4661      	mov	r1, ip
 8000c0c:	04db      	lsls	r3, r3, #19
 8000c0e:	4319      	orrs	r1, r3
 8000c10:	468c      	mov	ip, r1
 8000c12:	2a1b      	cmp	r2, #27
 8000c14:	dc00      	bgt.n	8000c18 <__aeabi_fsub+0x150>
 8000c16:	e0d4      	b.n	8000dc2 <__aeabi_fsub+0x2fa>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	003d      	movs	r5, r7
 8000c1c:	181b      	adds	r3, r3, r0
 8000c1e:	e7b5      	b.n	8000b8c <__aeabi_fsub+0xc4>
 8000c20:	27fe      	movs	r7, #254	; 0xfe
 8000c22:	1c6a      	adds	r2, r5, #1
 8000c24:	4217      	tst	r7, r2
 8000c26:	d171      	bne.n	8000d0c <__aeabi_fsub+0x244>
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fsub+0x166>
 8000c2c:	e09e      	b.n	8000d6c <__aeabi_fsub+0x2a4>
 8000c2e:	4663      	mov	r3, ip
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x16e>
 8000c34:	e0d5      	b.n	8000de2 <__aeabi_fsub+0x31a>
 8000c36:	2200      	movs	r2, #0
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x176>
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000c3e:	1a1b      	subs	r3, r3, r0
 8000c40:	015e      	lsls	r6, r3, #5
 8000c42:	d400      	bmi.n	8000c46 <__aeabi_fsub+0x17e>
 8000c44:	e0d6      	b.n	8000df4 <__aeabi_fsub+0x32c>
 8000c46:	4663      	mov	r3, ip
 8000c48:	000c      	movs	r4, r1
 8000c4a:	1ac3      	subs	r3, r0, r3
 8000c4c:	e776      	b.n	8000b3c <__aeabi_fsub+0x74>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d036      	beq.n	8000cc0 <__aeabi_fsub+0x1f8>
 8000c52:	1e51      	subs	r1, r2, #1
 8000c54:	2a01      	cmp	r2, #1
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x192>
 8000c58:	e09a      	b.n	8000d90 <__aeabi_fsub+0x2c8>
 8000c5a:	2aff      	cmp	r2, #255	; 0xff
 8000c5c:	d026      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000c5e:	000a      	movs	r2, r1
 8000c60:	e78f      	b.n	8000b82 <__aeabi_fsub+0xba>
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	2600      	movs	r6, #0
 8000c66:	e77a      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000c68:	27fe      	movs	r7, #254	; 0xfe
 8000c6a:	1c6a      	adds	r2, r5, #1
 8000c6c:	4217      	tst	r7, r2
 8000c6e:	d062      	beq.n	8000d36 <__aeabi_fsub+0x26e>
 8000c70:	2aff      	cmp	r2, #255	; 0xff
 8000c72:	d0f6      	beq.n	8000c62 <__aeabi_fsub+0x19a>
 8000c74:	0015      	movs	r5, r2
 8000c76:	4460      	add	r0, ip
 8000c78:	0843      	lsrs	r3, r0, #1
 8000c7a:	075a      	lsls	r2, r3, #29
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_fsub+0x1b8>
 8000c7e:	e75f      	b.n	8000b40 <__aeabi_fsub+0x78>
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	2dff      	cmp	r5, #255	; 0xff
 8000c84:	d012      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	0a5e      	lsrs	r6, r3, #9
 8000c8a:	b2ea      	uxtb	r2, r5
 8000c8c:	e767      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000c8e:	4662      	mov	r2, ip
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x1ce>
 8000c94:	e093      	b.n	8000dbe <__aeabi_fsub+0x2f6>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d008      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	03d2      	lsls	r2, r2, #15
 8000c9e:	4213      	tst	r3, r2
 8000ca0:	d004      	beq.n	8000cac <__aeabi_fsub+0x1e4>
 8000ca2:	4640      	mov	r0, r8
 8000ca4:	4210      	tst	r0, r2
 8000ca6:	d101      	bne.n	8000cac <__aeabi_fsub+0x1e4>
 8000ca8:	000c      	movs	r4, r1
 8000caa:	4643      	mov	r3, r8
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0d8      	beq.n	8000c62 <__aeabi_fsub+0x19a>
 8000cb0:	2680      	movs	r6, #128	; 0x80
 8000cb2:	03f6      	lsls	r6, r6, #15
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	0276      	lsls	r6, r6, #9
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	0a76      	lsrs	r6, r6, #9
 8000cbc:	e74f      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	0015      	movs	r5, r2
 8000cc2:	e7de      	b.n	8000c82 <__aeabi_fsub+0x1ba>
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	1b40      	subs	r0, r0, r5
 8000cc8:	3001      	adds	r0, #1
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	0019      	movs	r1, r3
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	40c1      	lsrs	r1, r0
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	4193      	sbcs	r3, r2
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	e72f      	b.n	8000b3c <__aeabi_fsub+0x74>
 8000cdc:	2320      	movs	r3, #32
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	4098      	lsls	r0, r3
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	40d1      	lsrs	r1, r2
 8000ce8:	1e5a      	subs	r2, r3, #1
 8000cea:	4193      	sbcs	r3, r2
 8000cec:	430b      	orrs	r3, r1
 8000cee:	e712      	b.n	8000b16 <__aeabi_fsub+0x4e>
 8000cf0:	2fff      	cmp	r7, #255	; 0xff
 8000cf2:	d0d9      	beq.n	8000ca8 <__aeabi_fsub+0x1e0>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	4664      	mov	r4, ip
 8000cf8:	04db      	lsls	r3, r3, #19
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	46a4      	mov	ip, r4
 8000cfe:	2a1b      	cmp	r2, #27
 8000d00:	dd52      	ble.n	8000da8 <__aeabi_fsub+0x2e0>
 8000d02:	2301      	movs	r3, #1
 8000d04:	000c      	movs	r4, r1
 8000d06:	003d      	movs	r5, r7
 8000d08:	1ac3      	subs	r3, r0, r3
 8000d0a:	e706      	b.n	8000b1a <__aeabi_fsub+0x52>
 8000d0c:	4663      	mov	r3, ip
 8000d0e:	1a1e      	subs	r6, r3, r0
 8000d10:	0173      	lsls	r3, r6, #5
 8000d12:	d439      	bmi.n	8000d88 <__aeabi_fsub+0x2c0>
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0x252>
 8000d18:	e704      	b.n	8000b24 <__aeabi_fsub+0x5c>
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2600      	movs	r6, #0
 8000d20:	e71d      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000d22:	2320      	movs	r3, #32
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	0001      	movs	r1, r0
 8000d28:	4098      	lsls	r0, r3
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	40d1      	lsrs	r1, r2
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	4193      	sbcs	r3, r2
 8000d32:	430b      	orrs	r3, r1
 8000d34:	e729      	b.n	8000b8a <__aeabi_fsub+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d1a9      	bne.n	8000c8e <__aeabi_fsub+0x1c6>
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d056      	beq.n	8000dee <__aeabi_fsub+0x326>
 8000d40:	2200      	movs	r2, #0
 8000d42:	2800      	cmp	r0, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x280>
 8000d46:	e70a      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	4463      	add	r3, ip
 8000d4c:	015a      	lsls	r2, r3, #5
 8000d4e:	d594      	bpl.n	8000c7a <__aeabi_fsub+0x1b2>
 8000d50:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <__aeabi_fsub+0x338>)
 8000d52:	3501      	adds	r5, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	e790      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000d58:	4663      	mov	r3, ip
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0af      	beq.n	8000cbe <__aeabi_fsub+0x1f6>
 8000d5e:	1e53      	subs	r3, r2, #1
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d015      	beq.n	8000d90 <__aeabi_fsub+0x2c8>
 8000d64:	2aff      	cmp	r2, #255	; 0xff
 8000d66:	d02a      	beq.n	8000dbe <__aeabi_fsub+0x2f6>
 8000d68:	001a      	movs	r2, r3
 8000d6a:	e752      	b.n	8000c12 <__aeabi_fsub+0x14a>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d191      	bne.n	8000c96 <__aeabi_fsub+0x1ce>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d198      	bne.n	8000ca8 <__aeabi_fsub+0x1e0>
 8000d76:	2680      	movs	r6, #128	; 0x80
 8000d78:	2400      	movs	r4, #0
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	03f6      	lsls	r6, r6, #15
 8000d7e:	e6ee      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000d80:	000c      	movs	r4, r1
 8000d82:	4643      	mov	r3, r8
 8000d84:	0015      	movs	r5, r2
 8000d86:	e77c      	b.n	8000c82 <__aeabi_fsub+0x1ba>
 8000d88:	4663      	mov	r3, ip
 8000d8a:	000c      	movs	r4, r1
 8000d8c:	1ac6      	subs	r6, r0, r3
 8000d8e:	e6c9      	b.n	8000b24 <__aeabi_fsub+0x5c>
 8000d90:	0003      	movs	r3, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	2501      	movs	r5, #1
 8000d96:	015a      	lsls	r2, r3, #5
 8000d98:	d400      	bmi.n	8000d9c <__aeabi_fsub+0x2d4>
 8000d9a:	e76e      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000d9c:	2502      	movs	r5, #2
 8000d9e:	e6fa      	b.n	8000b96 <__aeabi_fsub+0xce>
 8000da0:	4663      	mov	r3, ip
 8000da2:	2501      	movs	r5, #1
 8000da4:	1a1b      	subs	r3, r3, r0
 8000da6:	e6b8      	b.n	8000b1a <__aeabi_fsub+0x52>
 8000da8:	4664      	mov	r4, ip
 8000daa:	2320      	movs	r3, #32
 8000dac:	40d4      	lsrs	r4, r2
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	4662      	mov	r2, ip
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	4193      	sbcs	r3, r2
 8000dba:	4323      	orrs	r3, r4
 8000dbc:	e7a2      	b.n	8000d04 <__aeabi_fsub+0x23c>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	e774      	b.n	8000cac <__aeabi_fsub+0x1e4>
 8000dc2:	4661      	mov	r1, ip
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	40d1      	lsrs	r1, r2
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	4662      	mov	r2, ip
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	4193      	sbcs	r3, r2
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	e720      	b.n	8000c1a <__aeabi_fsub+0x152>
 8000dd8:	4663      	mov	r3, ip
 8000dda:	000c      	movs	r4, r1
 8000ddc:	2501      	movs	r5, #1
 8000dde:	1ac3      	subs	r3, r0, r3
 8000de0:	e69b      	b.n	8000b1a <__aeabi_fsub+0x52>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d099      	beq.n	8000d1a <__aeabi_fsub+0x252>
 8000de6:	000c      	movs	r4, r1
 8000de8:	4646      	mov	r6, r8
 8000dea:	2200      	movs	r2, #0
 8000dec:	e6b7      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000dee:	4646      	mov	r6, r8
 8000df0:	2200      	movs	r2, #0
 8000df2:	e6b4      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fsub+0x332>
 8000df8:	e73f      	b.n	8000c7a <__aeabi_fsub+0x1b2>
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	e6ae      	b.n	8000b5e <__aeabi_fsub+0x96>
 8000e00:	fbffffff 	.word	0xfbffffff
 8000e04:	7dffffff 	.word	0x7dffffff

08000e08 <__aeabi_f2iz>:
 8000e08:	0241      	lsls	r1, r0, #9
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	0fc3      	lsrs	r3, r0, #31
 8000e0e:	0a49      	lsrs	r1, r1, #9
 8000e10:	2000      	movs	r0, #0
 8000e12:	0e12      	lsrs	r2, r2, #24
 8000e14:	2a7e      	cmp	r2, #126	; 0x7e
 8000e16:	dd03      	ble.n	8000e20 <__aeabi_f2iz+0x18>
 8000e18:	2a9d      	cmp	r2, #157	; 0x9d
 8000e1a:	dd02      	ble.n	8000e22 <__aeabi_f2iz+0x1a>
 8000e1c:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <__aeabi_f2iz+0x3c>)
 8000e1e:	1898      	adds	r0, r3, r2
 8000e20:	4770      	bx	lr
 8000e22:	2080      	movs	r0, #128	; 0x80
 8000e24:	0400      	lsls	r0, r0, #16
 8000e26:	4301      	orrs	r1, r0
 8000e28:	2a95      	cmp	r2, #149	; 0x95
 8000e2a:	dc07      	bgt.n	8000e3c <__aeabi_f2iz+0x34>
 8000e2c:	2096      	movs	r0, #150	; 0x96
 8000e2e:	1a82      	subs	r2, r0, r2
 8000e30:	40d1      	lsrs	r1, r2
 8000e32:	4248      	negs	r0, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f3      	bne.n	8000e20 <__aeabi_f2iz+0x18>
 8000e38:	0008      	movs	r0, r1
 8000e3a:	e7f1      	b.n	8000e20 <__aeabi_f2iz+0x18>
 8000e3c:	3a96      	subs	r2, #150	; 0x96
 8000e3e:	4091      	lsls	r1, r2
 8000e40:	e7f7      	b.n	8000e32 <__aeabi_f2iz+0x2a>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	7fffffff 	.word	0x7fffffff

08000e48 <__aeabi_i2f>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d013      	beq.n	8000e76 <__aeabi_i2f+0x2e>
 8000e4e:	17c3      	asrs	r3, r0, #31
 8000e50:	18c5      	adds	r5, r0, r3
 8000e52:	405d      	eors	r5, r3
 8000e54:	0fc4      	lsrs	r4, r0, #31
 8000e56:	0028      	movs	r0, r5
 8000e58:	f001 ff22 	bl	8002ca0 <__clzsi2>
 8000e5c:	239e      	movs	r3, #158	; 0x9e
 8000e5e:	0001      	movs	r1, r0
 8000e60:	1a1b      	subs	r3, r3, r0
 8000e62:	2b96      	cmp	r3, #150	; 0x96
 8000e64:	dc0f      	bgt.n	8000e86 <__aeabi_i2f+0x3e>
 8000e66:	2808      	cmp	r0, #8
 8000e68:	d031      	beq.n	8000ece <__aeabi_i2f+0x86>
 8000e6a:	3908      	subs	r1, #8
 8000e6c:	408d      	lsls	r5, r1
 8000e6e:	026d      	lsls	r5, r5, #9
 8000e70:	0a6d      	lsrs	r5, r5, #9
 8000e72:	b2d8      	uxtb	r0, r3
 8000e74:	e002      	b.n	8000e7c <__aeabi_i2f+0x34>
 8000e76:	2400      	movs	r4, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	05c0      	lsls	r0, r0, #23
 8000e7e:	4328      	orrs	r0, r5
 8000e80:	07e4      	lsls	r4, r4, #31
 8000e82:	4320      	orrs	r0, r4
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
 8000e86:	2b99      	cmp	r3, #153	; 0x99
 8000e88:	dd0c      	ble.n	8000ea4 <__aeabi_i2f+0x5c>
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	1a12      	subs	r2, r2, r0
 8000e8e:	0028      	movs	r0, r5
 8000e90:	40d0      	lsrs	r0, r2
 8000e92:	0002      	movs	r2, r0
 8000e94:	0008      	movs	r0, r1
 8000e96:	301b      	adds	r0, #27
 8000e98:	4085      	lsls	r5, r0
 8000e9a:	0028      	movs	r0, r5
 8000e9c:	1e45      	subs	r5, r0, #1
 8000e9e:	41a8      	sbcs	r0, r5
 8000ea0:	4302      	orrs	r2, r0
 8000ea2:	0015      	movs	r5, r2
 8000ea4:	2905      	cmp	r1, #5
 8000ea6:	dc16      	bgt.n	8000ed6 <__aeabi_i2f+0x8e>
 8000ea8:	002a      	movs	r2, r5
 8000eaa:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <__aeabi_i2f+0xa0>)
 8000eac:	4002      	ands	r2, r0
 8000eae:	076e      	lsls	r6, r5, #29
 8000eb0:	d009      	beq.n	8000ec6 <__aeabi_i2f+0x7e>
 8000eb2:	260f      	movs	r6, #15
 8000eb4:	4035      	ands	r5, r6
 8000eb6:	2d04      	cmp	r5, #4
 8000eb8:	d005      	beq.n	8000ec6 <__aeabi_i2f+0x7e>
 8000eba:	3204      	adds	r2, #4
 8000ebc:	0155      	lsls	r5, r2, #5
 8000ebe:	d502      	bpl.n	8000ec6 <__aeabi_i2f+0x7e>
 8000ec0:	239f      	movs	r3, #159	; 0x9f
 8000ec2:	4002      	ands	r2, r0
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	0192      	lsls	r2, r2, #6
 8000ec8:	0a55      	lsrs	r5, r2, #9
 8000eca:	b2d8      	uxtb	r0, r3
 8000ecc:	e7d6      	b.n	8000e7c <__aeabi_i2f+0x34>
 8000ece:	026d      	lsls	r5, r5, #9
 8000ed0:	2096      	movs	r0, #150	; 0x96
 8000ed2:	0a6d      	lsrs	r5, r5, #9
 8000ed4:	e7d2      	b.n	8000e7c <__aeabi_i2f+0x34>
 8000ed6:	1f4a      	subs	r2, r1, #5
 8000ed8:	4095      	lsls	r5, r2
 8000eda:	002a      	movs	r2, r5
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <__aeabi_i2f+0xa0>)
 8000ede:	4002      	ands	r2, r0
 8000ee0:	076e      	lsls	r6, r5, #29
 8000ee2:	d0f0      	beq.n	8000ec6 <__aeabi_i2f+0x7e>
 8000ee4:	e7e5      	b.n	8000eb2 <__aeabi_i2f+0x6a>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	fbffffff 	.word	0xfbffffff

08000eec <__aeabi_ui2f>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	1e04      	subs	r4, r0, #0
 8000ef0:	d00e      	beq.n	8000f10 <__aeabi_ui2f+0x24>
 8000ef2:	f001 fed5 	bl	8002ca0 <__clzsi2>
 8000ef6:	239e      	movs	r3, #158	; 0x9e
 8000ef8:	0001      	movs	r1, r0
 8000efa:	1a1b      	subs	r3, r3, r0
 8000efc:	2b96      	cmp	r3, #150	; 0x96
 8000efe:	dc0c      	bgt.n	8000f1a <__aeabi_ui2f+0x2e>
 8000f00:	2808      	cmp	r0, #8
 8000f02:	d02c      	beq.n	8000f5e <__aeabi_ui2f+0x72>
 8000f04:	3908      	subs	r1, #8
 8000f06:	408c      	lsls	r4, r1
 8000f08:	0264      	lsls	r4, r4, #9
 8000f0a:	0a64      	lsrs	r4, r4, #9
 8000f0c:	b2d8      	uxtb	r0, r3
 8000f0e:	e001      	b.n	8000f14 <__aeabi_ui2f+0x28>
 8000f10:	2000      	movs	r0, #0
 8000f12:	2400      	movs	r4, #0
 8000f14:	05c0      	lsls	r0, r0, #23
 8000f16:	4320      	orrs	r0, r4
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
 8000f1a:	2b99      	cmp	r3, #153	; 0x99
 8000f1c:	dd0a      	ble.n	8000f34 <__aeabi_ui2f+0x48>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	0020      	movs	r0, r4
 8000f22:	321b      	adds	r2, #27
 8000f24:	4090      	lsls	r0, r2
 8000f26:	0002      	movs	r2, r0
 8000f28:	1e50      	subs	r0, r2, #1
 8000f2a:	4182      	sbcs	r2, r0
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	1a40      	subs	r0, r0, r1
 8000f30:	40c4      	lsrs	r4, r0
 8000f32:	4314      	orrs	r4, r2
 8000f34:	2905      	cmp	r1, #5
 8000f36:	dc16      	bgt.n	8000f66 <__aeabi_ui2f+0x7a>
 8000f38:	0022      	movs	r2, r4
 8000f3a:	480f      	ldr	r0, [pc, #60]	; (8000f78 <__aeabi_ui2f+0x8c>)
 8000f3c:	4002      	ands	r2, r0
 8000f3e:	0765      	lsls	r5, r4, #29
 8000f40:	d009      	beq.n	8000f56 <__aeabi_ui2f+0x6a>
 8000f42:	250f      	movs	r5, #15
 8000f44:	402c      	ands	r4, r5
 8000f46:	2c04      	cmp	r4, #4
 8000f48:	d005      	beq.n	8000f56 <__aeabi_ui2f+0x6a>
 8000f4a:	3204      	adds	r2, #4
 8000f4c:	0154      	lsls	r4, r2, #5
 8000f4e:	d502      	bpl.n	8000f56 <__aeabi_ui2f+0x6a>
 8000f50:	239f      	movs	r3, #159	; 0x9f
 8000f52:	4002      	ands	r2, r0
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	0192      	lsls	r2, r2, #6
 8000f58:	0a54      	lsrs	r4, r2, #9
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	e7da      	b.n	8000f14 <__aeabi_ui2f+0x28>
 8000f5e:	0264      	lsls	r4, r4, #9
 8000f60:	2096      	movs	r0, #150	; 0x96
 8000f62:	0a64      	lsrs	r4, r4, #9
 8000f64:	e7d6      	b.n	8000f14 <__aeabi_ui2f+0x28>
 8000f66:	1f4a      	subs	r2, r1, #5
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	0022      	movs	r2, r4
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <__aeabi_ui2f+0x8c>)
 8000f6e:	4002      	ands	r2, r0
 8000f70:	0765      	lsls	r5, r4, #29
 8000f72:	d0f0      	beq.n	8000f56 <__aeabi_ui2f+0x6a>
 8000f74:	e7e5      	b.n	8000f42 <__aeabi_ui2f+0x56>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fbffffff 	.word	0xfbffffff

08000f7c <__aeabi_dadd>:
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	464f      	mov	r7, r9
 8000f80:	4646      	mov	r6, r8
 8000f82:	46d6      	mov	lr, sl
 8000f84:	0004      	movs	r4, r0
 8000f86:	b5c0      	push	{r6, r7, lr}
 8000f88:	001f      	movs	r7, r3
 8000f8a:	030b      	lsls	r3, r1, #12
 8000f8c:	0010      	movs	r0, r2
 8000f8e:	004e      	lsls	r6, r1, #1
 8000f90:	0a5b      	lsrs	r3, r3, #9
 8000f92:	0fcd      	lsrs	r5, r1, #31
 8000f94:	0f61      	lsrs	r1, r4, #29
 8000f96:	007a      	lsls	r2, r7, #1
 8000f98:	4319      	orrs	r1, r3
 8000f9a:	00e3      	lsls	r3, r4, #3
 8000f9c:	033c      	lsls	r4, r7, #12
 8000f9e:	0fff      	lsrs	r7, r7, #31
 8000fa0:	46bc      	mov	ip, r7
 8000fa2:	0a64      	lsrs	r4, r4, #9
 8000fa4:	0f47      	lsrs	r7, r0, #29
 8000fa6:	4327      	orrs	r7, r4
 8000fa8:	0d76      	lsrs	r6, r6, #21
 8000faa:	0d52      	lsrs	r2, r2, #21
 8000fac:	00c0      	lsls	r0, r0, #3
 8000fae:	46b9      	mov	r9, r7
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	1ab7      	subs	r7, r6, r2
 8000fb4:	4565      	cmp	r5, ip
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x3e>
 8000fb8:	e09b      	b.n	80010f2 <__aeabi_dadd+0x176>
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	dc00      	bgt.n	8000fc0 <__aeabi_dadd+0x44>
 8000fbe:	e084      	b.n	80010ca <__aeabi_dadd+0x14e>
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x4a>
 8000fc4:	e0be      	b.n	8001144 <__aeabi_dadd+0x1c8>
 8000fc6:	4ac8      	ldr	r2, [pc, #800]	; (80012e8 <__aeabi_dadd+0x36c>)
 8000fc8:	4296      	cmp	r6, r2
 8000fca:	d100      	bne.n	8000fce <__aeabi_dadd+0x52>
 8000fcc:	e124      	b.n	8001218 <__aeabi_dadd+0x29c>
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	464c      	mov	r4, r9
 8000fd2:	0412      	lsls	r2, r2, #16
 8000fd4:	4314      	orrs	r4, r2
 8000fd6:	46a1      	mov	r9, r4
 8000fd8:	2f38      	cmp	r7, #56	; 0x38
 8000fda:	dd00      	ble.n	8000fde <__aeabi_dadd+0x62>
 8000fdc:	e167      	b.n	80012ae <__aeabi_dadd+0x332>
 8000fde:	2f1f      	cmp	r7, #31
 8000fe0:	dd00      	ble.n	8000fe4 <__aeabi_dadd+0x68>
 8000fe2:	e1d6      	b.n	8001392 <__aeabi_dadd+0x416>
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	464c      	mov	r4, r9
 8000fe8:	1bd2      	subs	r2, r2, r7
 8000fea:	4094      	lsls	r4, r2
 8000fec:	46a2      	mov	sl, r4
 8000fee:	4644      	mov	r4, r8
 8000ff0:	40fc      	lsrs	r4, r7
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	4654      	mov	r4, sl
 8000ff6:	4304      	orrs	r4, r0
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	4090      	lsls	r0, r2
 8000ffc:	1e42      	subs	r2, r0, #1
 8000ffe:	4190      	sbcs	r0, r2
 8001000:	464a      	mov	r2, r9
 8001002:	40fa      	lsrs	r2, r7
 8001004:	4304      	orrs	r4, r0
 8001006:	1a89      	subs	r1, r1, r2
 8001008:	1b1c      	subs	r4, r3, r4
 800100a:	42a3      	cmp	r3, r4
 800100c:	4192      	sbcs	r2, r2
 800100e:	4252      	negs	r2, r2
 8001010:	1a8b      	subs	r3, r1, r2
 8001012:	469a      	mov	sl, r3
 8001014:	4653      	mov	r3, sl
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	d400      	bmi.n	800101c <__aeabi_dadd+0xa0>
 800101a:	e0d4      	b.n	80011c6 <__aeabi_dadd+0x24a>
 800101c:	4653      	mov	r3, sl
 800101e:	025a      	lsls	r2, r3, #9
 8001020:	0a53      	lsrs	r3, r2, #9
 8001022:	469a      	mov	sl, r3
 8001024:	4653      	mov	r3, sl
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_dadd+0xb0>
 800102a:	e104      	b.n	8001236 <__aeabi_dadd+0x2ba>
 800102c:	4650      	mov	r0, sl
 800102e:	f001 fe37 	bl	8002ca0 <__clzsi2>
 8001032:	0003      	movs	r3, r0
 8001034:	3b08      	subs	r3, #8
 8001036:	2220      	movs	r2, #32
 8001038:	0020      	movs	r0, r4
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	4651      	mov	r1, sl
 800103e:	40d0      	lsrs	r0, r2
 8001040:	4099      	lsls	r1, r3
 8001042:	0002      	movs	r2, r0
 8001044:	409c      	lsls	r4, r3
 8001046:	430a      	orrs	r2, r1
 8001048:	42b3      	cmp	r3, r6
 800104a:	da00      	bge.n	800104e <__aeabi_dadd+0xd2>
 800104c:	e102      	b.n	8001254 <__aeabi_dadd+0x2d8>
 800104e:	1b9b      	subs	r3, r3, r6
 8001050:	1c59      	adds	r1, r3, #1
 8001052:	291f      	cmp	r1, #31
 8001054:	dd00      	ble.n	8001058 <__aeabi_dadd+0xdc>
 8001056:	e0a7      	b.n	80011a8 <__aeabi_dadd+0x22c>
 8001058:	2320      	movs	r3, #32
 800105a:	0010      	movs	r0, r2
 800105c:	0026      	movs	r6, r4
 800105e:	1a5b      	subs	r3, r3, r1
 8001060:	409c      	lsls	r4, r3
 8001062:	4098      	lsls	r0, r3
 8001064:	40ce      	lsrs	r6, r1
 8001066:	40ca      	lsrs	r2, r1
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4330      	orrs	r0, r6
 800106e:	4692      	mov	sl, r2
 8001070:	2600      	movs	r6, #0
 8001072:	4304      	orrs	r4, r0
 8001074:	0763      	lsls	r3, r4, #29
 8001076:	d009      	beq.n	800108c <__aeabi_dadd+0x110>
 8001078:	230f      	movs	r3, #15
 800107a:	4023      	ands	r3, r4
 800107c:	2b04      	cmp	r3, #4
 800107e:	d005      	beq.n	800108c <__aeabi_dadd+0x110>
 8001080:	1d23      	adds	r3, r4, #4
 8001082:	42a3      	cmp	r3, r4
 8001084:	41a4      	sbcs	r4, r4
 8001086:	4264      	negs	r4, r4
 8001088:	44a2      	add	sl, r4
 800108a:	001c      	movs	r4, r3
 800108c:	4653      	mov	r3, sl
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	d400      	bmi.n	8001094 <__aeabi_dadd+0x118>
 8001092:	e09b      	b.n	80011cc <__aeabi_dadd+0x250>
 8001094:	4b94      	ldr	r3, [pc, #592]	; (80012e8 <__aeabi_dadd+0x36c>)
 8001096:	3601      	adds	r6, #1
 8001098:	429e      	cmp	r6, r3
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x122>
 800109c:	e0b8      	b.n	8001210 <__aeabi_dadd+0x294>
 800109e:	4653      	mov	r3, sl
 80010a0:	4992      	ldr	r1, [pc, #584]	; (80012ec <__aeabi_dadd+0x370>)
 80010a2:	08e4      	lsrs	r4, r4, #3
 80010a4:	400b      	ands	r3, r1
 80010a6:	0019      	movs	r1, r3
 80010a8:	075b      	lsls	r3, r3, #29
 80010aa:	4323      	orrs	r3, r4
 80010ac:	0572      	lsls	r2, r6, #21
 80010ae:	024c      	lsls	r4, r1, #9
 80010b0:	0b24      	lsrs	r4, r4, #12
 80010b2:	0d52      	lsrs	r2, r2, #21
 80010b4:	0512      	lsls	r2, r2, #20
 80010b6:	07ed      	lsls	r5, r5, #31
 80010b8:	4322      	orrs	r2, r4
 80010ba:	432a      	orrs	r2, r5
 80010bc:	0018      	movs	r0, r3
 80010be:	0011      	movs	r1, r2
 80010c0:	bce0      	pop	{r5, r6, r7}
 80010c2:	46ba      	mov	sl, r7
 80010c4:	46b1      	mov	r9, r6
 80010c6:	46a8      	mov	r8, r5
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	2f00      	cmp	r7, #0
 80010cc:	d048      	beq.n	8001160 <__aeabi_dadd+0x1e4>
 80010ce:	1b97      	subs	r7, r2, r6
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x15a>
 80010d4:	e10e      	b.n	80012f4 <__aeabi_dadd+0x378>
 80010d6:	000c      	movs	r4, r1
 80010d8:	431c      	orrs	r4, r3
 80010da:	d100      	bne.n	80010de <__aeabi_dadd+0x162>
 80010dc:	e1b7      	b.n	800144e <__aeabi_dadd+0x4d2>
 80010de:	1e7c      	subs	r4, r7, #1
 80010e0:	2f01      	cmp	r7, #1
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x16a>
 80010e4:	e226      	b.n	8001534 <__aeabi_dadd+0x5b8>
 80010e6:	4d80      	ldr	r5, [pc, #512]	; (80012e8 <__aeabi_dadd+0x36c>)
 80010e8:	42af      	cmp	r7, r5
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0x172>
 80010ec:	e1d5      	b.n	800149a <__aeabi_dadd+0x51e>
 80010ee:	0027      	movs	r7, r4
 80010f0:	e107      	b.n	8001302 <__aeabi_dadd+0x386>
 80010f2:	2f00      	cmp	r7, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_dadd+0x17c>
 80010f6:	e0b2      	b.n	800125e <__aeabi_dadd+0x2e2>
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d047      	beq.n	800118c <__aeabi_dadd+0x210>
 80010fc:	4a7a      	ldr	r2, [pc, #488]	; (80012e8 <__aeabi_dadd+0x36c>)
 80010fe:	4296      	cmp	r6, r2
 8001100:	d100      	bne.n	8001104 <__aeabi_dadd+0x188>
 8001102:	e089      	b.n	8001218 <__aeabi_dadd+0x29c>
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	464c      	mov	r4, r9
 8001108:	0412      	lsls	r2, r2, #16
 800110a:	4314      	orrs	r4, r2
 800110c:	46a1      	mov	r9, r4
 800110e:	2f38      	cmp	r7, #56	; 0x38
 8001110:	dc6b      	bgt.n	80011ea <__aeabi_dadd+0x26e>
 8001112:	2f1f      	cmp	r7, #31
 8001114:	dc00      	bgt.n	8001118 <__aeabi_dadd+0x19c>
 8001116:	e16e      	b.n	80013f6 <__aeabi_dadd+0x47a>
 8001118:	003a      	movs	r2, r7
 800111a:	4648      	mov	r0, r9
 800111c:	3a20      	subs	r2, #32
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4684      	mov	ip, r0
 8001122:	2f20      	cmp	r7, #32
 8001124:	d007      	beq.n	8001136 <__aeabi_dadd+0x1ba>
 8001126:	2240      	movs	r2, #64	; 0x40
 8001128:	4648      	mov	r0, r9
 800112a:	1bd2      	subs	r2, r2, r7
 800112c:	4090      	lsls	r0, r2
 800112e:	0002      	movs	r2, r0
 8001130:	4640      	mov	r0, r8
 8001132:	4310      	orrs	r0, r2
 8001134:	4680      	mov	r8, r0
 8001136:	4640      	mov	r0, r8
 8001138:	1e42      	subs	r2, r0, #1
 800113a:	4190      	sbcs	r0, r2
 800113c:	4662      	mov	r2, ip
 800113e:	0004      	movs	r4, r0
 8001140:	4314      	orrs	r4, r2
 8001142:	e057      	b.n	80011f4 <__aeabi_dadd+0x278>
 8001144:	464a      	mov	r2, r9
 8001146:	4302      	orrs	r2, r0
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x1d0>
 800114a:	e103      	b.n	8001354 <__aeabi_dadd+0x3d8>
 800114c:	1e7a      	subs	r2, r7, #1
 800114e:	2f01      	cmp	r7, #1
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x1d8>
 8001152:	e193      	b.n	800147c <__aeabi_dadd+0x500>
 8001154:	4c64      	ldr	r4, [pc, #400]	; (80012e8 <__aeabi_dadd+0x36c>)
 8001156:	42a7      	cmp	r7, r4
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x1e0>
 800115a:	e18a      	b.n	8001472 <__aeabi_dadd+0x4f6>
 800115c:	0017      	movs	r7, r2
 800115e:	e73b      	b.n	8000fd8 <__aeabi_dadd+0x5c>
 8001160:	4c63      	ldr	r4, [pc, #396]	; (80012f0 <__aeabi_dadd+0x374>)
 8001162:	1c72      	adds	r2, r6, #1
 8001164:	4222      	tst	r2, r4
 8001166:	d000      	beq.n	800116a <__aeabi_dadd+0x1ee>
 8001168:	e0e0      	b.n	800132c <__aeabi_dadd+0x3b0>
 800116a:	000a      	movs	r2, r1
 800116c:	431a      	orrs	r2, r3
 800116e:	2e00      	cmp	r6, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_dadd+0x1f8>
 8001172:	e174      	b.n	800145e <__aeabi_dadd+0x4e2>
 8001174:	2a00      	cmp	r2, #0
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x1fe>
 8001178:	e1d0      	b.n	800151c <__aeabi_dadd+0x5a0>
 800117a:	464a      	mov	r2, r9
 800117c:	4302      	orrs	r2, r0
 800117e:	d000      	beq.n	8001182 <__aeabi_dadd+0x206>
 8001180:	e1e3      	b.n	800154a <__aeabi_dadd+0x5ce>
 8001182:	074a      	lsls	r2, r1, #29
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	4313      	orrs	r3, r2
 8001188:	08c9      	lsrs	r1, r1, #3
 800118a:	e029      	b.n	80011e0 <__aeabi_dadd+0x264>
 800118c:	464a      	mov	r2, r9
 800118e:	4302      	orrs	r2, r0
 8001190:	d100      	bne.n	8001194 <__aeabi_dadd+0x218>
 8001192:	e17d      	b.n	8001490 <__aeabi_dadd+0x514>
 8001194:	1e7a      	subs	r2, r7, #1
 8001196:	2f01      	cmp	r7, #1
 8001198:	d100      	bne.n	800119c <__aeabi_dadd+0x220>
 800119a:	e0e0      	b.n	800135e <__aeabi_dadd+0x3e2>
 800119c:	4c52      	ldr	r4, [pc, #328]	; (80012e8 <__aeabi_dadd+0x36c>)
 800119e:	42a7      	cmp	r7, r4
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x228>
 80011a2:	e166      	b.n	8001472 <__aeabi_dadd+0x4f6>
 80011a4:	0017      	movs	r7, r2
 80011a6:	e7b2      	b.n	800110e <__aeabi_dadd+0x192>
 80011a8:	0010      	movs	r0, r2
 80011aa:	3b1f      	subs	r3, #31
 80011ac:	40d8      	lsrs	r0, r3
 80011ae:	2920      	cmp	r1, #32
 80011b0:	d003      	beq.n	80011ba <__aeabi_dadd+0x23e>
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	1a5b      	subs	r3, r3, r1
 80011b6:	409a      	lsls	r2, r3
 80011b8:	4314      	orrs	r4, r2
 80011ba:	1e63      	subs	r3, r4, #1
 80011bc:	419c      	sbcs	r4, r3
 80011be:	2300      	movs	r3, #0
 80011c0:	2600      	movs	r6, #0
 80011c2:	469a      	mov	sl, r3
 80011c4:	4304      	orrs	r4, r0
 80011c6:	0763      	lsls	r3, r4, #29
 80011c8:	d000      	beq.n	80011cc <__aeabi_dadd+0x250>
 80011ca:	e755      	b.n	8001078 <__aeabi_dadd+0xfc>
 80011cc:	4652      	mov	r2, sl
 80011ce:	08e3      	lsrs	r3, r4, #3
 80011d0:	0752      	lsls	r2, r2, #29
 80011d2:	4313      	orrs	r3, r2
 80011d4:	4652      	mov	r2, sl
 80011d6:	0037      	movs	r7, r6
 80011d8:	08d1      	lsrs	r1, r2, #3
 80011da:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <__aeabi_dadd+0x36c>)
 80011dc:	4297      	cmp	r7, r2
 80011de:	d01f      	beq.n	8001220 <__aeabi_dadd+0x2a4>
 80011e0:	0309      	lsls	r1, r1, #12
 80011e2:	057a      	lsls	r2, r7, #21
 80011e4:	0b0c      	lsrs	r4, r1, #12
 80011e6:	0d52      	lsrs	r2, r2, #21
 80011e8:	e764      	b.n	80010b4 <__aeabi_dadd+0x138>
 80011ea:	4642      	mov	r2, r8
 80011ec:	464c      	mov	r4, r9
 80011ee:	4314      	orrs	r4, r2
 80011f0:	1e62      	subs	r2, r4, #1
 80011f2:	4194      	sbcs	r4, r2
 80011f4:	18e4      	adds	r4, r4, r3
 80011f6:	429c      	cmp	r4, r3
 80011f8:	4192      	sbcs	r2, r2
 80011fa:	4252      	negs	r2, r2
 80011fc:	4692      	mov	sl, r2
 80011fe:	448a      	add	sl, r1
 8001200:	4653      	mov	r3, sl
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	d5df      	bpl.n	80011c6 <__aeabi_dadd+0x24a>
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <__aeabi_dadd+0x36c>)
 8001208:	3601      	adds	r6, #1
 800120a:	429e      	cmp	r6, r3
 800120c:	d000      	beq.n	8001210 <__aeabi_dadd+0x294>
 800120e:	e0b3      	b.n	8001378 <__aeabi_dadd+0x3fc>
 8001210:	0032      	movs	r2, r6
 8001212:	2400      	movs	r4, #0
 8001214:	2300      	movs	r3, #0
 8001216:	e74d      	b.n	80010b4 <__aeabi_dadd+0x138>
 8001218:	074a      	lsls	r2, r1, #29
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	4313      	orrs	r3, r2
 800121e:	08c9      	lsrs	r1, r1, #3
 8001220:	001a      	movs	r2, r3
 8001222:	430a      	orrs	r2, r1
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x2ac>
 8001226:	e200      	b.n	800162a <__aeabi_dadd+0x6ae>
 8001228:	2480      	movs	r4, #128	; 0x80
 800122a:	0324      	lsls	r4, r4, #12
 800122c:	430c      	orrs	r4, r1
 800122e:	0324      	lsls	r4, r4, #12
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <__aeabi_dadd+0x36c>)
 8001232:	0b24      	lsrs	r4, r4, #12
 8001234:	e73e      	b.n	80010b4 <__aeabi_dadd+0x138>
 8001236:	0020      	movs	r0, r4
 8001238:	f001 fd32 	bl	8002ca0 <__clzsi2>
 800123c:	0003      	movs	r3, r0
 800123e:	3318      	adds	r3, #24
 8001240:	2b1f      	cmp	r3, #31
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dadd+0x2ca>
 8001244:	e6f7      	b.n	8001036 <__aeabi_dadd+0xba>
 8001246:	0022      	movs	r2, r4
 8001248:	3808      	subs	r0, #8
 800124a:	4082      	lsls	r2, r0
 800124c:	2400      	movs	r4, #0
 800124e:	42b3      	cmp	r3, r6
 8001250:	db00      	blt.n	8001254 <__aeabi_dadd+0x2d8>
 8001252:	e6fc      	b.n	800104e <__aeabi_dadd+0xd2>
 8001254:	1af6      	subs	r6, r6, r3
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <__aeabi_dadd+0x370>)
 8001258:	401a      	ands	r2, r3
 800125a:	4692      	mov	sl, r2
 800125c:	e70a      	b.n	8001074 <__aeabi_dadd+0xf8>
 800125e:	2f00      	cmp	r7, #0
 8001260:	d02b      	beq.n	80012ba <__aeabi_dadd+0x33e>
 8001262:	1b97      	subs	r7, r2, r6
 8001264:	2e00      	cmp	r6, #0
 8001266:	d100      	bne.n	800126a <__aeabi_dadd+0x2ee>
 8001268:	e0b8      	b.n	80013dc <__aeabi_dadd+0x460>
 800126a:	4c1f      	ldr	r4, [pc, #124]	; (80012e8 <__aeabi_dadd+0x36c>)
 800126c:	42a2      	cmp	r2, r4
 800126e:	d100      	bne.n	8001272 <__aeabi_dadd+0x2f6>
 8001270:	e11c      	b.n	80014ac <__aeabi_dadd+0x530>
 8001272:	2480      	movs	r4, #128	; 0x80
 8001274:	0424      	lsls	r4, r4, #16
 8001276:	4321      	orrs	r1, r4
 8001278:	2f38      	cmp	r7, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x302>
 800127c:	e11e      	b.n	80014bc <__aeabi_dadd+0x540>
 800127e:	2f1f      	cmp	r7, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x308>
 8001282:	e19e      	b.n	80015c2 <__aeabi_dadd+0x646>
 8001284:	2620      	movs	r6, #32
 8001286:	000c      	movs	r4, r1
 8001288:	1bf6      	subs	r6, r6, r7
 800128a:	0018      	movs	r0, r3
 800128c:	40b3      	lsls	r3, r6
 800128e:	40b4      	lsls	r4, r6
 8001290:	40f8      	lsrs	r0, r7
 8001292:	1e5e      	subs	r6, r3, #1
 8001294:	41b3      	sbcs	r3, r6
 8001296:	40f9      	lsrs	r1, r7
 8001298:	4304      	orrs	r4, r0
 800129a:	431c      	orrs	r4, r3
 800129c:	4489      	add	r9, r1
 800129e:	4444      	add	r4, r8
 80012a0:	4544      	cmp	r4, r8
 80012a2:	419b      	sbcs	r3, r3
 80012a4:	425b      	negs	r3, r3
 80012a6:	444b      	add	r3, r9
 80012a8:	469a      	mov	sl, r3
 80012aa:	0016      	movs	r6, r2
 80012ac:	e7a8      	b.n	8001200 <__aeabi_dadd+0x284>
 80012ae:	4642      	mov	r2, r8
 80012b0:	464c      	mov	r4, r9
 80012b2:	4314      	orrs	r4, r2
 80012b4:	1e62      	subs	r2, r4, #1
 80012b6:	4194      	sbcs	r4, r2
 80012b8:	e6a6      	b.n	8001008 <__aeabi_dadd+0x8c>
 80012ba:	4c0d      	ldr	r4, [pc, #52]	; (80012f0 <__aeabi_dadd+0x374>)
 80012bc:	1c72      	adds	r2, r6, #1
 80012be:	4222      	tst	r2, r4
 80012c0:	d000      	beq.n	80012c4 <__aeabi_dadd+0x348>
 80012c2:	e0a8      	b.n	8001416 <__aeabi_dadd+0x49a>
 80012c4:	000a      	movs	r2, r1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d000      	beq.n	80012ce <__aeabi_dadd+0x352>
 80012cc:	e10a      	b.n	80014e4 <__aeabi_dadd+0x568>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x358>
 80012d2:	e15e      	b.n	8001592 <__aeabi_dadd+0x616>
 80012d4:	464a      	mov	r2, r9
 80012d6:	4302      	orrs	r2, r0
 80012d8:	d000      	beq.n	80012dc <__aeabi_dadd+0x360>
 80012da:	e161      	b.n	80015a0 <__aeabi_dadd+0x624>
 80012dc:	074a      	lsls	r2, r1, #29
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	08c9      	lsrs	r1, r1, #3
 80012e4:	e77c      	b.n	80011e0 <__aeabi_dadd+0x264>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	000007ff 	.word	0x000007ff
 80012ec:	ff7fffff 	.word	0xff7fffff
 80012f0:	000007fe 	.word	0x000007fe
 80012f4:	4ccf      	ldr	r4, [pc, #828]	; (8001634 <__aeabi_dadd+0x6b8>)
 80012f6:	42a2      	cmp	r2, r4
 80012f8:	d100      	bne.n	80012fc <__aeabi_dadd+0x380>
 80012fa:	e0ce      	b.n	800149a <__aeabi_dadd+0x51e>
 80012fc:	2480      	movs	r4, #128	; 0x80
 80012fe:	0424      	lsls	r4, r4, #16
 8001300:	4321      	orrs	r1, r4
 8001302:	2f38      	cmp	r7, #56	; 0x38
 8001304:	dc5b      	bgt.n	80013be <__aeabi_dadd+0x442>
 8001306:	2f1f      	cmp	r7, #31
 8001308:	dd00      	ble.n	800130c <__aeabi_dadd+0x390>
 800130a:	e0dc      	b.n	80014c6 <__aeabi_dadd+0x54a>
 800130c:	2520      	movs	r5, #32
 800130e:	000c      	movs	r4, r1
 8001310:	1bed      	subs	r5, r5, r7
 8001312:	001e      	movs	r6, r3
 8001314:	40ab      	lsls	r3, r5
 8001316:	40ac      	lsls	r4, r5
 8001318:	40fe      	lsrs	r6, r7
 800131a:	1e5d      	subs	r5, r3, #1
 800131c:	41ab      	sbcs	r3, r5
 800131e:	4334      	orrs	r4, r6
 8001320:	40f9      	lsrs	r1, r7
 8001322:	431c      	orrs	r4, r3
 8001324:	464b      	mov	r3, r9
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	4699      	mov	r9, r3
 800132a:	e04c      	b.n	80013c6 <__aeabi_dadd+0x44a>
 800132c:	464a      	mov	r2, r9
 800132e:	1a1c      	subs	r4, r3, r0
 8001330:	1a88      	subs	r0, r1, r2
 8001332:	42a3      	cmp	r3, r4
 8001334:	4192      	sbcs	r2, r2
 8001336:	4252      	negs	r2, r2
 8001338:	4692      	mov	sl, r2
 800133a:	0002      	movs	r2, r0
 800133c:	4650      	mov	r0, sl
 800133e:	1a12      	subs	r2, r2, r0
 8001340:	4692      	mov	sl, r2
 8001342:	0212      	lsls	r2, r2, #8
 8001344:	d478      	bmi.n	8001438 <__aeabi_dadd+0x4bc>
 8001346:	4653      	mov	r3, sl
 8001348:	4323      	orrs	r3, r4
 800134a:	d000      	beq.n	800134e <__aeabi_dadd+0x3d2>
 800134c:	e66a      	b.n	8001024 <__aeabi_dadd+0xa8>
 800134e:	2100      	movs	r1, #0
 8001350:	2500      	movs	r5, #0
 8001352:	e745      	b.n	80011e0 <__aeabi_dadd+0x264>
 8001354:	074a      	lsls	r2, r1, #29
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	4313      	orrs	r3, r2
 800135a:	08c9      	lsrs	r1, r1, #3
 800135c:	e73d      	b.n	80011da <__aeabi_dadd+0x25e>
 800135e:	181c      	adds	r4, r3, r0
 8001360:	429c      	cmp	r4, r3
 8001362:	419b      	sbcs	r3, r3
 8001364:	4449      	add	r1, r9
 8001366:	468a      	mov	sl, r1
 8001368:	425b      	negs	r3, r3
 800136a:	449a      	add	sl, r3
 800136c:	4653      	mov	r3, sl
 800136e:	2601      	movs	r6, #1
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	d400      	bmi.n	8001376 <__aeabi_dadd+0x3fa>
 8001374:	e727      	b.n	80011c6 <__aeabi_dadd+0x24a>
 8001376:	2602      	movs	r6, #2
 8001378:	4652      	mov	r2, sl
 800137a:	4baf      	ldr	r3, [pc, #700]	; (8001638 <__aeabi_dadd+0x6bc>)
 800137c:	2101      	movs	r1, #1
 800137e:	401a      	ands	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	4021      	ands	r1, r4
 8001384:	0862      	lsrs	r2, r4, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	07dc      	lsls	r4, r3, #31
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	469a      	mov	sl, r3
 800138e:	4314      	orrs	r4, r2
 8001390:	e670      	b.n	8001074 <__aeabi_dadd+0xf8>
 8001392:	003a      	movs	r2, r7
 8001394:	464c      	mov	r4, r9
 8001396:	3a20      	subs	r2, #32
 8001398:	40d4      	lsrs	r4, r2
 800139a:	46a4      	mov	ip, r4
 800139c:	2f20      	cmp	r7, #32
 800139e:	d007      	beq.n	80013b0 <__aeabi_dadd+0x434>
 80013a0:	2240      	movs	r2, #64	; 0x40
 80013a2:	4648      	mov	r0, r9
 80013a4:	1bd2      	subs	r2, r2, r7
 80013a6:	4090      	lsls	r0, r2
 80013a8:	0002      	movs	r2, r0
 80013aa:	4640      	mov	r0, r8
 80013ac:	4310      	orrs	r0, r2
 80013ae:	4680      	mov	r8, r0
 80013b0:	4640      	mov	r0, r8
 80013b2:	1e42      	subs	r2, r0, #1
 80013b4:	4190      	sbcs	r0, r2
 80013b6:	4662      	mov	r2, ip
 80013b8:	0004      	movs	r4, r0
 80013ba:	4314      	orrs	r4, r2
 80013bc:	e624      	b.n	8001008 <__aeabi_dadd+0x8c>
 80013be:	4319      	orrs	r1, r3
 80013c0:	000c      	movs	r4, r1
 80013c2:	1e63      	subs	r3, r4, #1
 80013c4:	419c      	sbcs	r4, r3
 80013c6:	4643      	mov	r3, r8
 80013c8:	1b1c      	subs	r4, r3, r4
 80013ca:	45a0      	cmp	r8, r4
 80013cc:	419b      	sbcs	r3, r3
 80013ce:	4649      	mov	r1, r9
 80013d0:	425b      	negs	r3, r3
 80013d2:	1acb      	subs	r3, r1, r3
 80013d4:	469a      	mov	sl, r3
 80013d6:	4665      	mov	r5, ip
 80013d8:	0016      	movs	r6, r2
 80013da:	e61b      	b.n	8001014 <__aeabi_dadd+0x98>
 80013dc:	000c      	movs	r4, r1
 80013de:	431c      	orrs	r4, r3
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x468>
 80013e2:	e0c7      	b.n	8001574 <__aeabi_dadd+0x5f8>
 80013e4:	1e7c      	subs	r4, r7, #1
 80013e6:	2f01      	cmp	r7, #1
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x470>
 80013ea:	e0f9      	b.n	80015e0 <__aeabi_dadd+0x664>
 80013ec:	4e91      	ldr	r6, [pc, #580]	; (8001634 <__aeabi_dadd+0x6b8>)
 80013ee:	42b7      	cmp	r7, r6
 80013f0:	d05c      	beq.n	80014ac <__aeabi_dadd+0x530>
 80013f2:	0027      	movs	r7, r4
 80013f4:	e740      	b.n	8001278 <__aeabi_dadd+0x2fc>
 80013f6:	2220      	movs	r2, #32
 80013f8:	464c      	mov	r4, r9
 80013fa:	4640      	mov	r0, r8
 80013fc:	1bd2      	subs	r2, r2, r7
 80013fe:	4094      	lsls	r4, r2
 8001400:	40f8      	lsrs	r0, r7
 8001402:	4304      	orrs	r4, r0
 8001404:	4640      	mov	r0, r8
 8001406:	4090      	lsls	r0, r2
 8001408:	1e42      	subs	r2, r0, #1
 800140a:	4190      	sbcs	r0, r2
 800140c:	464a      	mov	r2, r9
 800140e:	40fa      	lsrs	r2, r7
 8001410:	4304      	orrs	r4, r0
 8001412:	1889      	adds	r1, r1, r2
 8001414:	e6ee      	b.n	80011f4 <__aeabi_dadd+0x278>
 8001416:	4c87      	ldr	r4, [pc, #540]	; (8001634 <__aeabi_dadd+0x6b8>)
 8001418:	42a2      	cmp	r2, r4
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x4a2>
 800141c:	e6f9      	b.n	8001212 <__aeabi_dadd+0x296>
 800141e:	1818      	adds	r0, r3, r0
 8001420:	4298      	cmp	r0, r3
 8001422:	419b      	sbcs	r3, r3
 8001424:	4449      	add	r1, r9
 8001426:	425b      	negs	r3, r3
 8001428:	18cb      	adds	r3, r1, r3
 800142a:	07dc      	lsls	r4, r3, #31
 800142c:	0840      	lsrs	r0, r0, #1
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	469a      	mov	sl, r3
 8001432:	0016      	movs	r6, r2
 8001434:	4304      	orrs	r4, r0
 8001436:	e6c6      	b.n	80011c6 <__aeabi_dadd+0x24a>
 8001438:	4642      	mov	r2, r8
 800143a:	1ad4      	subs	r4, r2, r3
 800143c:	45a0      	cmp	r8, r4
 800143e:	4180      	sbcs	r0, r0
 8001440:	464b      	mov	r3, r9
 8001442:	4240      	negs	r0, r0
 8001444:	1a59      	subs	r1, r3, r1
 8001446:	1a0b      	subs	r3, r1, r0
 8001448:	469a      	mov	sl, r3
 800144a:	4665      	mov	r5, ip
 800144c:	e5ea      	b.n	8001024 <__aeabi_dadd+0xa8>
 800144e:	464b      	mov	r3, r9
 8001450:	464a      	mov	r2, r9
 8001452:	08c0      	lsrs	r0, r0, #3
 8001454:	075b      	lsls	r3, r3, #29
 8001456:	4665      	mov	r5, ip
 8001458:	4303      	orrs	r3, r0
 800145a:	08d1      	lsrs	r1, r2, #3
 800145c:	e6bd      	b.n	80011da <__aeabi_dadd+0x25e>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d000      	beq.n	8001464 <__aeabi_dadd+0x4e8>
 8001462:	e08e      	b.n	8001582 <__aeabi_dadd+0x606>
 8001464:	464b      	mov	r3, r9
 8001466:	4303      	orrs	r3, r0
 8001468:	d117      	bne.n	800149a <__aeabi_dadd+0x51e>
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	2500      	movs	r5, #0
 800146e:	0309      	lsls	r1, r1, #12
 8001470:	e6da      	b.n	8001228 <__aeabi_dadd+0x2ac>
 8001472:	074a      	lsls	r2, r1, #29
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	4313      	orrs	r3, r2
 8001478:	08c9      	lsrs	r1, r1, #3
 800147a:	e6d1      	b.n	8001220 <__aeabi_dadd+0x2a4>
 800147c:	1a1c      	subs	r4, r3, r0
 800147e:	464a      	mov	r2, r9
 8001480:	42a3      	cmp	r3, r4
 8001482:	419b      	sbcs	r3, r3
 8001484:	1a89      	subs	r1, r1, r2
 8001486:	425b      	negs	r3, r3
 8001488:	1acb      	subs	r3, r1, r3
 800148a:	469a      	mov	sl, r3
 800148c:	2601      	movs	r6, #1
 800148e:	e5c1      	b.n	8001014 <__aeabi_dadd+0x98>
 8001490:	074a      	lsls	r2, r1, #29
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	4313      	orrs	r3, r2
 8001496:	08c9      	lsrs	r1, r1, #3
 8001498:	e69f      	b.n	80011da <__aeabi_dadd+0x25e>
 800149a:	4643      	mov	r3, r8
 800149c:	08d8      	lsrs	r0, r3, #3
 800149e:	464b      	mov	r3, r9
 80014a0:	464a      	mov	r2, r9
 80014a2:	075b      	lsls	r3, r3, #29
 80014a4:	4665      	mov	r5, ip
 80014a6:	4303      	orrs	r3, r0
 80014a8:	08d1      	lsrs	r1, r2, #3
 80014aa:	e6b9      	b.n	8001220 <__aeabi_dadd+0x2a4>
 80014ac:	4643      	mov	r3, r8
 80014ae:	08d8      	lsrs	r0, r3, #3
 80014b0:	464b      	mov	r3, r9
 80014b2:	464a      	mov	r2, r9
 80014b4:	075b      	lsls	r3, r3, #29
 80014b6:	4303      	orrs	r3, r0
 80014b8:	08d1      	lsrs	r1, r2, #3
 80014ba:	e6b1      	b.n	8001220 <__aeabi_dadd+0x2a4>
 80014bc:	4319      	orrs	r1, r3
 80014be:	000c      	movs	r4, r1
 80014c0:	1e63      	subs	r3, r4, #1
 80014c2:	419c      	sbcs	r4, r3
 80014c4:	e6eb      	b.n	800129e <__aeabi_dadd+0x322>
 80014c6:	003c      	movs	r4, r7
 80014c8:	000d      	movs	r5, r1
 80014ca:	3c20      	subs	r4, #32
 80014cc:	40e5      	lsrs	r5, r4
 80014ce:	2f20      	cmp	r7, #32
 80014d0:	d003      	beq.n	80014da <__aeabi_dadd+0x55e>
 80014d2:	2440      	movs	r4, #64	; 0x40
 80014d4:	1be4      	subs	r4, r4, r7
 80014d6:	40a1      	lsls	r1, r4
 80014d8:	430b      	orrs	r3, r1
 80014da:	001c      	movs	r4, r3
 80014dc:	1e63      	subs	r3, r4, #1
 80014de:	419c      	sbcs	r4, r3
 80014e0:	432c      	orrs	r4, r5
 80014e2:	e770      	b.n	80013c6 <__aeabi_dadd+0x44a>
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d0e1      	beq.n	80014ac <__aeabi_dadd+0x530>
 80014e8:	464a      	mov	r2, r9
 80014ea:	4302      	orrs	r2, r0
 80014ec:	d0c1      	beq.n	8001472 <__aeabi_dadd+0x4f6>
 80014ee:	074a      	lsls	r2, r1, #29
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	08c9      	lsrs	r1, r1, #3
 80014f8:	0312      	lsls	r2, r2, #12
 80014fa:	4211      	tst	r1, r2
 80014fc:	d008      	beq.n	8001510 <__aeabi_dadd+0x594>
 80014fe:	4648      	mov	r0, r9
 8001500:	08c4      	lsrs	r4, r0, #3
 8001502:	4214      	tst	r4, r2
 8001504:	d104      	bne.n	8001510 <__aeabi_dadd+0x594>
 8001506:	4643      	mov	r3, r8
 8001508:	0021      	movs	r1, r4
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	0742      	lsls	r2, r0, #29
 800150e:	4313      	orrs	r3, r2
 8001510:	0f5a      	lsrs	r2, r3, #29
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	0752      	lsls	r2, r2, #29
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	4313      	orrs	r3, r2
 800151a:	e681      	b.n	8001220 <__aeabi_dadd+0x2a4>
 800151c:	464b      	mov	r3, r9
 800151e:	4303      	orrs	r3, r0
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x5a8>
 8001522:	e714      	b.n	800134e <__aeabi_dadd+0x3d2>
 8001524:	464b      	mov	r3, r9
 8001526:	464a      	mov	r2, r9
 8001528:	08c0      	lsrs	r0, r0, #3
 800152a:	075b      	lsls	r3, r3, #29
 800152c:	4665      	mov	r5, ip
 800152e:	4303      	orrs	r3, r0
 8001530:	08d1      	lsrs	r1, r2, #3
 8001532:	e655      	b.n	80011e0 <__aeabi_dadd+0x264>
 8001534:	1ac4      	subs	r4, r0, r3
 8001536:	45a0      	cmp	r8, r4
 8001538:	4180      	sbcs	r0, r0
 800153a:	464b      	mov	r3, r9
 800153c:	4240      	negs	r0, r0
 800153e:	1a59      	subs	r1, r3, r1
 8001540:	1a0b      	subs	r3, r1, r0
 8001542:	469a      	mov	sl, r3
 8001544:	4665      	mov	r5, ip
 8001546:	2601      	movs	r6, #1
 8001548:	e564      	b.n	8001014 <__aeabi_dadd+0x98>
 800154a:	1a1c      	subs	r4, r3, r0
 800154c:	464a      	mov	r2, r9
 800154e:	42a3      	cmp	r3, r4
 8001550:	4180      	sbcs	r0, r0
 8001552:	1a8a      	subs	r2, r1, r2
 8001554:	4240      	negs	r0, r0
 8001556:	1a12      	subs	r2, r2, r0
 8001558:	4692      	mov	sl, r2
 800155a:	0212      	lsls	r2, r2, #8
 800155c:	d549      	bpl.n	80015f2 <__aeabi_dadd+0x676>
 800155e:	4642      	mov	r2, r8
 8001560:	1ad4      	subs	r4, r2, r3
 8001562:	45a0      	cmp	r8, r4
 8001564:	4180      	sbcs	r0, r0
 8001566:	464b      	mov	r3, r9
 8001568:	4240      	negs	r0, r0
 800156a:	1a59      	subs	r1, r3, r1
 800156c:	1a0b      	subs	r3, r1, r0
 800156e:	469a      	mov	sl, r3
 8001570:	4665      	mov	r5, ip
 8001572:	e57f      	b.n	8001074 <__aeabi_dadd+0xf8>
 8001574:	464b      	mov	r3, r9
 8001576:	464a      	mov	r2, r9
 8001578:	08c0      	lsrs	r0, r0, #3
 800157a:	075b      	lsls	r3, r3, #29
 800157c:	4303      	orrs	r3, r0
 800157e:	08d1      	lsrs	r1, r2, #3
 8001580:	e62b      	b.n	80011da <__aeabi_dadd+0x25e>
 8001582:	464a      	mov	r2, r9
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	4302      	orrs	r2, r0
 8001588:	d138      	bne.n	80015fc <__aeabi_dadd+0x680>
 800158a:	074a      	lsls	r2, r1, #29
 800158c:	4313      	orrs	r3, r2
 800158e:	08c9      	lsrs	r1, r1, #3
 8001590:	e646      	b.n	8001220 <__aeabi_dadd+0x2a4>
 8001592:	464b      	mov	r3, r9
 8001594:	464a      	mov	r2, r9
 8001596:	08c0      	lsrs	r0, r0, #3
 8001598:	075b      	lsls	r3, r3, #29
 800159a:	4303      	orrs	r3, r0
 800159c:	08d1      	lsrs	r1, r2, #3
 800159e:	e61f      	b.n	80011e0 <__aeabi_dadd+0x264>
 80015a0:	181c      	adds	r4, r3, r0
 80015a2:	429c      	cmp	r4, r3
 80015a4:	419b      	sbcs	r3, r3
 80015a6:	4449      	add	r1, r9
 80015a8:	468a      	mov	sl, r1
 80015aa:	425b      	negs	r3, r3
 80015ac:	449a      	add	sl, r3
 80015ae:	4653      	mov	r3, sl
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	d400      	bmi.n	80015b6 <__aeabi_dadd+0x63a>
 80015b4:	e607      	b.n	80011c6 <__aeabi_dadd+0x24a>
 80015b6:	4652      	mov	r2, sl
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <__aeabi_dadd+0x6bc>)
 80015ba:	2601      	movs	r6, #1
 80015bc:	401a      	ands	r2, r3
 80015be:	4692      	mov	sl, r2
 80015c0:	e601      	b.n	80011c6 <__aeabi_dadd+0x24a>
 80015c2:	003c      	movs	r4, r7
 80015c4:	000e      	movs	r6, r1
 80015c6:	3c20      	subs	r4, #32
 80015c8:	40e6      	lsrs	r6, r4
 80015ca:	2f20      	cmp	r7, #32
 80015cc:	d003      	beq.n	80015d6 <__aeabi_dadd+0x65a>
 80015ce:	2440      	movs	r4, #64	; 0x40
 80015d0:	1be4      	subs	r4, r4, r7
 80015d2:	40a1      	lsls	r1, r4
 80015d4:	430b      	orrs	r3, r1
 80015d6:	001c      	movs	r4, r3
 80015d8:	1e63      	subs	r3, r4, #1
 80015da:	419c      	sbcs	r4, r3
 80015dc:	4334      	orrs	r4, r6
 80015de:	e65e      	b.n	800129e <__aeabi_dadd+0x322>
 80015e0:	4443      	add	r3, r8
 80015e2:	4283      	cmp	r3, r0
 80015e4:	4180      	sbcs	r0, r0
 80015e6:	4449      	add	r1, r9
 80015e8:	468a      	mov	sl, r1
 80015ea:	4240      	negs	r0, r0
 80015ec:	001c      	movs	r4, r3
 80015ee:	4482      	add	sl, r0
 80015f0:	e6bc      	b.n	800136c <__aeabi_dadd+0x3f0>
 80015f2:	4653      	mov	r3, sl
 80015f4:	4323      	orrs	r3, r4
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x67e>
 80015f8:	e6a9      	b.n	800134e <__aeabi_dadd+0x3d2>
 80015fa:	e5e4      	b.n	80011c6 <__aeabi_dadd+0x24a>
 80015fc:	074a      	lsls	r2, r1, #29
 80015fe:	4313      	orrs	r3, r2
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	08c9      	lsrs	r1, r1, #3
 8001604:	0312      	lsls	r2, r2, #12
 8001606:	4211      	tst	r1, r2
 8001608:	d009      	beq.n	800161e <__aeabi_dadd+0x6a2>
 800160a:	4648      	mov	r0, r9
 800160c:	08c4      	lsrs	r4, r0, #3
 800160e:	4214      	tst	r4, r2
 8001610:	d105      	bne.n	800161e <__aeabi_dadd+0x6a2>
 8001612:	4643      	mov	r3, r8
 8001614:	4665      	mov	r5, ip
 8001616:	0021      	movs	r1, r4
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	0742      	lsls	r2, r0, #29
 800161c:	4313      	orrs	r3, r2
 800161e:	0f5a      	lsrs	r2, r3, #29
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	0752      	lsls	r2, r2, #29
 8001626:	4313      	orrs	r3, r2
 8001628:	e5fa      	b.n	8001220 <__aeabi_dadd+0x2a4>
 800162a:	2300      	movs	r3, #0
 800162c:	4a01      	ldr	r2, [pc, #4]	; (8001634 <__aeabi_dadd+0x6b8>)
 800162e:	001c      	movs	r4, r3
 8001630:	e540      	b.n	80010b4 <__aeabi_dadd+0x138>
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	000007ff 	.word	0x000007ff
 8001638:	ff7fffff 	.word	0xff7fffff

0800163c <__aeabi_ddiv>:
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	4657      	mov	r7, sl
 8001640:	464e      	mov	r6, r9
 8001642:	4645      	mov	r5, r8
 8001644:	46de      	mov	lr, fp
 8001646:	b5e0      	push	{r5, r6, r7, lr}
 8001648:	030c      	lsls	r4, r1, #12
 800164a:	001f      	movs	r7, r3
 800164c:	004b      	lsls	r3, r1, #1
 800164e:	4681      	mov	r9, r0
 8001650:	4692      	mov	sl, r2
 8001652:	0005      	movs	r5, r0
 8001654:	b085      	sub	sp, #20
 8001656:	0b24      	lsrs	r4, r4, #12
 8001658:	0d5b      	lsrs	r3, r3, #21
 800165a:	0fce      	lsrs	r6, r1, #31
 800165c:	2b00      	cmp	r3, #0
 800165e:	d100      	bne.n	8001662 <__aeabi_ddiv+0x26>
 8001660:	e152      	b.n	8001908 <__aeabi_ddiv+0x2cc>
 8001662:	4ad2      	ldr	r2, [pc, #840]	; (80019ac <__aeabi_ddiv+0x370>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d100      	bne.n	800166a <__aeabi_ddiv+0x2e>
 8001668:	e16e      	b.n	8001948 <__aeabi_ddiv+0x30c>
 800166a:	0f42      	lsrs	r2, r0, #29
 800166c:	00e4      	lsls	r4, r4, #3
 800166e:	4314      	orrs	r4, r2
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	4322      	orrs	r2, r4
 8001676:	4690      	mov	r8, r2
 8001678:	4acd      	ldr	r2, [pc, #820]	; (80019b0 <__aeabi_ddiv+0x374>)
 800167a:	00c5      	lsls	r5, r0, #3
 800167c:	4693      	mov	fp, r2
 800167e:	449b      	add	fp, r3
 8001680:	2300      	movs	r3, #0
 8001682:	4699      	mov	r9, r3
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	033c      	lsls	r4, r7, #12
 8001688:	007b      	lsls	r3, r7, #1
 800168a:	4650      	mov	r0, sl
 800168c:	0b24      	lsrs	r4, r4, #12
 800168e:	0d5b      	lsrs	r3, r3, #21
 8001690:	0fff      	lsrs	r7, r7, #31
 8001692:	2b00      	cmp	r3, #0
 8001694:	d100      	bne.n	8001698 <__aeabi_ddiv+0x5c>
 8001696:	e11a      	b.n	80018ce <__aeabi_ddiv+0x292>
 8001698:	4ac4      	ldr	r2, [pc, #784]	; (80019ac <__aeabi_ddiv+0x370>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d100      	bne.n	80016a0 <__aeabi_ddiv+0x64>
 800169e:	e15e      	b.n	800195e <__aeabi_ddiv+0x322>
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00e4      	lsls	r4, r4, #3
 80016a4:	4322      	orrs	r2, r4
 80016a6:	2480      	movs	r4, #128	; 0x80
 80016a8:	0424      	lsls	r4, r4, #16
 80016aa:	4314      	orrs	r4, r2
 80016ac:	4ac0      	ldr	r2, [pc, #768]	; (80019b0 <__aeabi_ddiv+0x374>)
 80016ae:	00c1      	lsls	r1, r0, #3
 80016b0:	4694      	mov	ip, r2
 80016b2:	465a      	mov	r2, fp
 80016b4:	4463      	add	r3, ip
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	469b      	mov	fp, r3
 80016ba:	2000      	movs	r0, #0
 80016bc:	0033      	movs	r3, r6
 80016be:	407b      	eors	r3, r7
 80016c0:	469a      	mov	sl, r3
 80016c2:	464b      	mov	r3, r9
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d827      	bhi.n	8001718 <__aeabi_ddiv+0xdc>
 80016c8:	4aba      	ldr	r2, [pc, #744]	; (80019b4 <__aeabi_ddiv+0x378>)
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	58d3      	ldr	r3, [r2, r3]
 80016ce:	469f      	mov	pc, r3
 80016d0:	46b2      	mov	sl, r6
 80016d2:	9b00      	ldr	r3, [sp, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d016      	beq.n	8001706 <__aeabi_ddiv+0xca>
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d100      	bne.n	80016de <__aeabi_ddiv+0xa2>
 80016dc:	e287      	b.n	8001bee <__aeabi_ddiv+0x5b2>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d000      	beq.n	80016e4 <__aeabi_ddiv+0xa8>
 80016e2:	e0d5      	b.n	8001890 <__aeabi_ddiv+0x254>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2200      	movs	r2, #0
 80016e8:	2500      	movs	r5, #0
 80016ea:	051b      	lsls	r3, r3, #20
 80016ec:	4313      	orrs	r3, r2
 80016ee:	4652      	mov	r2, sl
 80016f0:	07d2      	lsls	r2, r2, #31
 80016f2:	4313      	orrs	r3, r2
 80016f4:	0028      	movs	r0, r5
 80016f6:	0019      	movs	r1, r3
 80016f8:	b005      	add	sp, #20
 80016fa:	bcf0      	pop	{r4, r5, r6, r7}
 80016fc:	46bb      	mov	fp, r7
 80016fe:	46b2      	mov	sl, r6
 8001700:	46a9      	mov	r9, r5
 8001702:	46a0      	mov	r8, r4
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	2200      	movs	r2, #0
 8001708:	2500      	movs	r5, #0
 800170a:	4ba8      	ldr	r3, [pc, #672]	; (80019ac <__aeabi_ddiv+0x370>)
 800170c:	e7ed      	b.n	80016ea <__aeabi_ddiv+0xae>
 800170e:	46ba      	mov	sl, r7
 8001710:	46a0      	mov	r8, r4
 8001712:	000d      	movs	r5, r1
 8001714:	9000      	str	r0, [sp, #0]
 8001716:	e7dc      	b.n	80016d2 <__aeabi_ddiv+0x96>
 8001718:	4544      	cmp	r4, r8
 800171a:	d200      	bcs.n	800171e <__aeabi_ddiv+0xe2>
 800171c:	e1c4      	b.n	8001aa8 <__aeabi_ddiv+0x46c>
 800171e:	d100      	bne.n	8001722 <__aeabi_ddiv+0xe6>
 8001720:	e1bf      	b.n	8001aa2 <__aeabi_ddiv+0x466>
 8001722:	2301      	movs	r3, #1
 8001724:	425b      	negs	r3, r3
 8001726:	469c      	mov	ip, r3
 8001728:	002e      	movs	r6, r5
 800172a:	4640      	mov	r0, r8
 800172c:	2500      	movs	r5, #0
 800172e:	44e3      	add	fp, ip
 8001730:	0223      	lsls	r3, r4, #8
 8001732:	0e0c      	lsrs	r4, r1, #24
 8001734:	431c      	orrs	r4, r3
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	4699      	mov	r9, r3
 800173a:	0423      	lsls	r3, r4, #16
 800173c:	020a      	lsls	r2, r1, #8
 800173e:	0c1f      	lsrs	r7, r3, #16
 8001740:	4649      	mov	r1, r9
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	9701      	str	r7, [sp, #4]
 8001746:	f7fe fd65 	bl	8000214 <__aeabi_uidivmod>
 800174a:	0002      	movs	r2, r0
 800174c:	437a      	muls	r2, r7
 800174e:	040b      	lsls	r3, r1, #16
 8001750:	0c31      	lsrs	r1, r6, #16
 8001752:	4680      	mov	r8, r0
 8001754:	4319      	orrs	r1, r3
 8001756:	428a      	cmp	r2, r1
 8001758:	d907      	bls.n	800176a <__aeabi_ddiv+0x12e>
 800175a:	2301      	movs	r3, #1
 800175c:	425b      	negs	r3, r3
 800175e:	469c      	mov	ip, r3
 8001760:	1909      	adds	r1, r1, r4
 8001762:	44e0      	add	r8, ip
 8001764:	428c      	cmp	r4, r1
 8001766:	d800      	bhi.n	800176a <__aeabi_ddiv+0x12e>
 8001768:	e201      	b.n	8001b6e <__aeabi_ddiv+0x532>
 800176a:	1a88      	subs	r0, r1, r2
 800176c:	4649      	mov	r1, r9
 800176e:	f7fe fd51 	bl	8000214 <__aeabi_uidivmod>
 8001772:	9a01      	ldr	r2, [sp, #4]
 8001774:	0436      	lsls	r6, r6, #16
 8001776:	4342      	muls	r2, r0
 8001778:	0409      	lsls	r1, r1, #16
 800177a:	0c36      	lsrs	r6, r6, #16
 800177c:	0003      	movs	r3, r0
 800177e:	430e      	orrs	r6, r1
 8001780:	42b2      	cmp	r2, r6
 8001782:	d904      	bls.n	800178e <__aeabi_ddiv+0x152>
 8001784:	1936      	adds	r6, r6, r4
 8001786:	3b01      	subs	r3, #1
 8001788:	42b4      	cmp	r4, r6
 800178a:	d800      	bhi.n	800178e <__aeabi_ddiv+0x152>
 800178c:	e1e9      	b.n	8001b62 <__aeabi_ddiv+0x526>
 800178e:	1ab0      	subs	r0, r6, r2
 8001790:	4642      	mov	r2, r8
 8001792:	9e00      	ldr	r6, [sp, #0]
 8001794:	0412      	lsls	r2, r2, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	0c33      	lsrs	r3, r6, #16
 800179a:	001f      	movs	r7, r3
 800179c:	0c11      	lsrs	r1, r2, #16
 800179e:	4690      	mov	r8, r2
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	0413      	lsls	r3, r2, #16
 80017a4:	0432      	lsls	r2, r6, #16
 80017a6:	0c16      	lsrs	r6, r2, #16
 80017a8:	0032      	movs	r2, r6
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	435a      	muls	r2, r3
 80017ae:	9603      	str	r6, [sp, #12]
 80017b0:	437b      	muls	r3, r7
 80017b2:	434e      	muls	r6, r1
 80017b4:	4379      	muls	r1, r7
 80017b6:	0c17      	lsrs	r7, r2, #16
 80017b8:	46bc      	mov	ip, r7
 80017ba:	199b      	adds	r3, r3, r6
 80017bc:	4463      	add	r3, ip
 80017be:	429e      	cmp	r6, r3
 80017c0:	d903      	bls.n	80017ca <__aeabi_ddiv+0x18e>
 80017c2:	2680      	movs	r6, #128	; 0x80
 80017c4:	0276      	lsls	r6, r6, #9
 80017c6:	46b4      	mov	ip, r6
 80017c8:	4461      	add	r1, ip
 80017ca:	0c1e      	lsrs	r6, r3, #16
 80017cc:	1871      	adds	r1, r6, r1
 80017ce:	0416      	lsls	r6, r2, #16
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	0c36      	lsrs	r6, r6, #16
 80017d4:	199e      	adds	r6, r3, r6
 80017d6:	4288      	cmp	r0, r1
 80017d8:	d302      	bcc.n	80017e0 <__aeabi_ddiv+0x1a4>
 80017da:	d112      	bne.n	8001802 <__aeabi_ddiv+0x1c6>
 80017dc:	42b5      	cmp	r5, r6
 80017de:	d210      	bcs.n	8001802 <__aeabi_ddiv+0x1c6>
 80017e0:	4643      	mov	r3, r8
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	9b00      	ldr	r3, [sp, #0]
 80017e6:	469c      	mov	ip, r3
 80017e8:	4465      	add	r5, ip
 80017ea:	001f      	movs	r7, r3
 80017ec:	429d      	cmp	r5, r3
 80017ee:	419b      	sbcs	r3, r3
 80017f0:	425b      	negs	r3, r3
 80017f2:	191b      	adds	r3, r3, r4
 80017f4:	18c0      	adds	r0, r0, r3
 80017f6:	4284      	cmp	r4, r0
 80017f8:	d200      	bcs.n	80017fc <__aeabi_ddiv+0x1c0>
 80017fa:	e19e      	b.n	8001b3a <__aeabi_ddiv+0x4fe>
 80017fc:	d100      	bne.n	8001800 <__aeabi_ddiv+0x1c4>
 80017fe:	e199      	b.n	8001b34 <__aeabi_ddiv+0x4f8>
 8001800:	4690      	mov	r8, r2
 8001802:	1bae      	subs	r6, r5, r6
 8001804:	42b5      	cmp	r5, r6
 8001806:	41ad      	sbcs	r5, r5
 8001808:	1a40      	subs	r0, r0, r1
 800180a:	426d      	negs	r5, r5
 800180c:	1b40      	subs	r0, r0, r5
 800180e:	4284      	cmp	r4, r0
 8001810:	d100      	bne.n	8001814 <__aeabi_ddiv+0x1d8>
 8001812:	e1d2      	b.n	8001bba <__aeabi_ddiv+0x57e>
 8001814:	4649      	mov	r1, r9
 8001816:	f7fe fcfd 	bl	8000214 <__aeabi_uidivmod>
 800181a:	9a01      	ldr	r2, [sp, #4]
 800181c:	040b      	lsls	r3, r1, #16
 800181e:	4342      	muls	r2, r0
 8001820:	0c31      	lsrs	r1, r6, #16
 8001822:	0005      	movs	r5, r0
 8001824:	4319      	orrs	r1, r3
 8001826:	428a      	cmp	r2, r1
 8001828:	d900      	bls.n	800182c <__aeabi_ddiv+0x1f0>
 800182a:	e16c      	b.n	8001b06 <__aeabi_ddiv+0x4ca>
 800182c:	1a88      	subs	r0, r1, r2
 800182e:	4649      	mov	r1, r9
 8001830:	f7fe fcf0 	bl	8000214 <__aeabi_uidivmod>
 8001834:	9a01      	ldr	r2, [sp, #4]
 8001836:	0436      	lsls	r6, r6, #16
 8001838:	4342      	muls	r2, r0
 800183a:	0409      	lsls	r1, r1, #16
 800183c:	0c36      	lsrs	r6, r6, #16
 800183e:	0003      	movs	r3, r0
 8001840:	430e      	orrs	r6, r1
 8001842:	42b2      	cmp	r2, r6
 8001844:	d900      	bls.n	8001848 <__aeabi_ddiv+0x20c>
 8001846:	e153      	b.n	8001af0 <__aeabi_ddiv+0x4b4>
 8001848:	9803      	ldr	r0, [sp, #12]
 800184a:	1ab6      	subs	r6, r6, r2
 800184c:	0002      	movs	r2, r0
 800184e:	042d      	lsls	r5, r5, #16
 8001850:	431d      	orrs	r5, r3
 8001852:	9f02      	ldr	r7, [sp, #8]
 8001854:	042b      	lsls	r3, r5, #16
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	435a      	muls	r2, r3
 800185a:	437b      	muls	r3, r7
 800185c:	469c      	mov	ip, r3
 800185e:	0c29      	lsrs	r1, r5, #16
 8001860:	4348      	muls	r0, r1
 8001862:	0c13      	lsrs	r3, r2, #16
 8001864:	4484      	add	ip, r0
 8001866:	4463      	add	r3, ip
 8001868:	4379      	muls	r1, r7
 800186a:	4298      	cmp	r0, r3
 800186c:	d903      	bls.n	8001876 <__aeabi_ddiv+0x23a>
 800186e:	2080      	movs	r0, #128	; 0x80
 8001870:	0240      	lsls	r0, r0, #9
 8001872:	4684      	mov	ip, r0
 8001874:	4461      	add	r1, ip
 8001876:	0c18      	lsrs	r0, r3, #16
 8001878:	0412      	lsls	r2, r2, #16
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	0c12      	lsrs	r2, r2, #16
 800187e:	1840      	adds	r0, r0, r1
 8001880:	189b      	adds	r3, r3, r2
 8001882:	4286      	cmp	r6, r0
 8001884:	d200      	bcs.n	8001888 <__aeabi_ddiv+0x24c>
 8001886:	e100      	b.n	8001a8a <__aeabi_ddiv+0x44e>
 8001888:	d100      	bne.n	800188c <__aeabi_ddiv+0x250>
 800188a:	e0fb      	b.n	8001a84 <__aeabi_ddiv+0x448>
 800188c:	2301      	movs	r3, #1
 800188e:	431d      	orrs	r5, r3
 8001890:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <__aeabi_ddiv+0x37c>)
 8001892:	445b      	add	r3, fp
 8001894:	2b00      	cmp	r3, #0
 8001896:	dc00      	bgt.n	800189a <__aeabi_ddiv+0x25e>
 8001898:	e0aa      	b.n	80019f0 <__aeabi_ddiv+0x3b4>
 800189a:	076a      	lsls	r2, r5, #29
 800189c:	d000      	beq.n	80018a0 <__aeabi_ddiv+0x264>
 800189e:	e13d      	b.n	8001b1c <__aeabi_ddiv+0x4e0>
 80018a0:	08e9      	lsrs	r1, r5, #3
 80018a2:	4642      	mov	r2, r8
 80018a4:	01d2      	lsls	r2, r2, #7
 80018a6:	d506      	bpl.n	80018b6 <__aeabi_ddiv+0x27a>
 80018a8:	4642      	mov	r2, r8
 80018aa:	4b44      	ldr	r3, [pc, #272]	; (80019bc <__aeabi_ddiv+0x380>)
 80018ac:	401a      	ands	r2, r3
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	4690      	mov	r8, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	445b      	add	r3, fp
 80018b6:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <__aeabi_ddiv+0x384>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	dd00      	ble.n	80018be <__aeabi_ddiv+0x282>
 80018bc:	e723      	b.n	8001706 <__aeabi_ddiv+0xca>
 80018be:	4642      	mov	r2, r8
 80018c0:	055b      	lsls	r3, r3, #21
 80018c2:	0755      	lsls	r5, r2, #29
 80018c4:	0252      	lsls	r2, r2, #9
 80018c6:	430d      	orrs	r5, r1
 80018c8:	0b12      	lsrs	r2, r2, #12
 80018ca:	0d5b      	lsrs	r3, r3, #21
 80018cc:	e70d      	b.n	80016ea <__aeabi_ddiv+0xae>
 80018ce:	4651      	mov	r1, sl
 80018d0:	4321      	orrs	r1, r4
 80018d2:	d100      	bne.n	80018d6 <__aeabi_ddiv+0x29a>
 80018d4:	e07c      	b.n	80019d0 <__aeabi_ddiv+0x394>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d100      	bne.n	80018dc <__aeabi_ddiv+0x2a0>
 80018da:	e0fb      	b.n	8001ad4 <__aeabi_ddiv+0x498>
 80018dc:	0020      	movs	r0, r4
 80018de:	f001 f9df 	bl	8002ca0 <__clzsi2>
 80018e2:	0002      	movs	r2, r0
 80018e4:	3a0b      	subs	r2, #11
 80018e6:	231d      	movs	r3, #29
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	4652      	mov	r2, sl
 80018ec:	0001      	movs	r1, r0
 80018ee:	40da      	lsrs	r2, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	3908      	subs	r1, #8
 80018f4:	408b      	lsls	r3, r1
 80018f6:	408c      	lsls	r4, r1
 80018f8:	0019      	movs	r1, r3
 80018fa:	4314      	orrs	r4, r2
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <__aeabi_ddiv+0x388>)
 80018fe:	4458      	add	r0, fp
 8001900:	469b      	mov	fp, r3
 8001902:	4483      	add	fp, r0
 8001904:	2000      	movs	r0, #0
 8001906:	e6d9      	b.n	80016bc <__aeabi_ddiv+0x80>
 8001908:	0003      	movs	r3, r0
 800190a:	4323      	orrs	r3, r4
 800190c:	4698      	mov	r8, r3
 800190e:	d044      	beq.n	800199a <__aeabi_ddiv+0x35e>
 8001910:	2c00      	cmp	r4, #0
 8001912:	d100      	bne.n	8001916 <__aeabi_ddiv+0x2da>
 8001914:	e0cf      	b.n	8001ab6 <__aeabi_ddiv+0x47a>
 8001916:	0020      	movs	r0, r4
 8001918:	f001 f9c2 	bl	8002ca0 <__clzsi2>
 800191c:	0001      	movs	r1, r0
 800191e:	0002      	movs	r2, r0
 8001920:	390b      	subs	r1, #11
 8001922:	231d      	movs	r3, #29
 8001924:	1a5b      	subs	r3, r3, r1
 8001926:	4649      	mov	r1, r9
 8001928:	0010      	movs	r0, r2
 800192a:	40d9      	lsrs	r1, r3
 800192c:	3808      	subs	r0, #8
 800192e:	4084      	lsls	r4, r0
 8001930:	000b      	movs	r3, r1
 8001932:	464d      	mov	r5, r9
 8001934:	4323      	orrs	r3, r4
 8001936:	4698      	mov	r8, r3
 8001938:	4085      	lsls	r5, r0
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <__aeabi_ddiv+0x38c>)
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	469b      	mov	fp, r3
 8001940:	2300      	movs	r3, #0
 8001942:	4699      	mov	r9, r3
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	e69e      	b.n	8001686 <__aeabi_ddiv+0x4a>
 8001948:	0002      	movs	r2, r0
 800194a:	4322      	orrs	r2, r4
 800194c:	4690      	mov	r8, r2
 800194e:	d11d      	bne.n	800198c <__aeabi_ddiv+0x350>
 8001950:	2208      	movs	r2, #8
 8001952:	469b      	mov	fp, r3
 8001954:	2302      	movs	r3, #2
 8001956:	2500      	movs	r5, #0
 8001958:	4691      	mov	r9, r2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e693      	b.n	8001686 <__aeabi_ddiv+0x4a>
 800195e:	4651      	mov	r1, sl
 8001960:	4321      	orrs	r1, r4
 8001962:	d109      	bne.n	8001978 <__aeabi_ddiv+0x33c>
 8001964:	2302      	movs	r3, #2
 8001966:	464a      	mov	r2, r9
 8001968:	431a      	orrs	r2, r3
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <__aeabi_ddiv+0x390>)
 800196c:	4691      	mov	r9, r2
 800196e:	469c      	mov	ip, r3
 8001970:	2400      	movs	r4, #0
 8001972:	2002      	movs	r0, #2
 8001974:	44e3      	add	fp, ip
 8001976:	e6a1      	b.n	80016bc <__aeabi_ddiv+0x80>
 8001978:	2303      	movs	r3, #3
 800197a:	464a      	mov	r2, r9
 800197c:	431a      	orrs	r2, r3
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <__aeabi_ddiv+0x390>)
 8001980:	4691      	mov	r9, r2
 8001982:	469c      	mov	ip, r3
 8001984:	4651      	mov	r1, sl
 8001986:	2003      	movs	r0, #3
 8001988:	44e3      	add	fp, ip
 800198a:	e697      	b.n	80016bc <__aeabi_ddiv+0x80>
 800198c:	220c      	movs	r2, #12
 800198e:	469b      	mov	fp, r3
 8001990:	2303      	movs	r3, #3
 8001992:	46a0      	mov	r8, r4
 8001994:	4691      	mov	r9, r2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	e675      	b.n	8001686 <__aeabi_ddiv+0x4a>
 800199a:	2304      	movs	r3, #4
 800199c:	4699      	mov	r9, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	469b      	mov	fp, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	2500      	movs	r5, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	e66d      	b.n	8001686 <__aeabi_ddiv+0x4a>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	000007ff 	.word	0x000007ff
 80019b0:	fffffc01 	.word	0xfffffc01
 80019b4:	08007774 	.word	0x08007774
 80019b8:	000003ff 	.word	0x000003ff
 80019bc:	feffffff 	.word	0xfeffffff
 80019c0:	000007fe 	.word	0x000007fe
 80019c4:	000003f3 	.word	0x000003f3
 80019c8:	fffffc0d 	.word	0xfffffc0d
 80019cc:	fffff801 	.word	0xfffff801
 80019d0:	464a      	mov	r2, r9
 80019d2:	2301      	movs	r3, #1
 80019d4:	431a      	orrs	r2, r3
 80019d6:	4691      	mov	r9, r2
 80019d8:	2400      	movs	r4, #0
 80019da:	2001      	movs	r0, #1
 80019dc:	e66e      	b.n	80016bc <__aeabi_ddiv+0x80>
 80019de:	2300      	movs	r3, #0
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	469a      	mov	sl, r3
 80019e4:	2500      	movs	r5, #0
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <__aeabi_ddiv+0x5cc>)
 80019e8:	0312      	lsls	r2, r2, #12
 80019ea:	e67e      	b.n	80016ea <__aeabi_ddiv+0xae>
 80019ec:	2501      	movs	r5, #1
 80019ee:	426d      	negs	r5, r5
 80019f0:	2201      	movs	r2, #1
 80019f2:	1ad2      	subs	r2, r2, r3
 80019f4:	2a38      	cmp	r2, #56	; 0x38
 80019f6:	dd00      	ble.n	80019fa <__aeabi_ddiv+0x3be>
 80019f8:	e674      	b.n	80016e4 <__aeabi_ddiv+0xa8>
 80019fa:	2a1f      	cmp	r2, #31
 80019fc:	dc00      	bgt.n	8001a00 <__aeabi_ddiv+0x3c4>
 80019fe:	e0bd      	b.n	8001b7c <__aeabi_ddiv+0x540>
 8001a00:	211f      	movs	r1, #31
 8001a02:	4249      	negs	r1, r1
 8001a04:	1acb      	subs	r3, r1, r3
 8001a06:	4641      	mov	r1, r8
 8001a08:	40d9      	lsrs	r1, r3
 8001a0a:	000b      	movs	r3, r1
 8001a0c:	2a20      	cmp	r2, #32
 8001a0e:	d004      	beq.n	8001a1a <__aeabi_ddiv+0x3de>
 8001a10:	4641      	mov	r1, r8
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <__aeabi_ddiv+0x5d0>)
 8001a14:	445a      	add	r2, fp
 8001a16:	4091      	lsls	r1, r2
 8001a18:	430d      	orrs	r5, r1
 8001a1a:	0029      	movs	r1, r5
 8001a1c:	1e4a      	subs	r2, r1, #1
 8001a1e:	4191      	sbcs	r1, r2
 8001a20:	4319      	orrs	r1, r3
 8001a22:	2307      	movs	r3, #7
 8001a24:	001d      	movs	r5, r3
 8001a26:	2200      	movs	r2, #0
 8001a28:	400d      	ands	r5, r1
 8001a2a:	420b      	tst	r3, r1
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_ddiv+0x3f4>
 8001a2e:	e0d0      	b.n	8001bd2 <__aeabi_ddiv+0x596>
 8001a30:	220f      	movs	r2, #15
 8001a32:	2300      	movs	r3, #0
 8001a34:	400a      	ands	r2, r1
 8001a36:	2a04      	cmp	r2, #4
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x400>
 8001a3a:	e0c7      	b.n	8001bcc <__aeabi_ddiv+0x590>
 8001a3c:	1d0a      	adds	r2, r1, #4
 8001a3e:	428a      	cmp	r2, r1
 8001a40:	4189      	sbcs	r1, r1
 8001a42:	4249      	negs	r1, r1
 8001a44:	185b      	adds	r3, r3, r1
 8001a46:	0011      	movs	r1, r2
 8001a48:	021a      	lsls	r2, r3, #8
 8001a4a:	d400      	bmi.n	8001a4e <__aeabi_ddiv+0x412>
 8001a4c:	e0be      	b.n	8001bcc <__aeabi_ddiv+0x590>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2200      	movs	r2, #0
 8001a52:	2500      	movs	r5, #0
 8001a54:	e649      	b.n	80016ea <__aeabi_ddiv+0xae>
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	4643      	mov	r3, r8
 8001a5a:	0312      	lsls	r2, r2, #12
 8001a5c:	4213      	tst	r3, r2
 8001a5e:	d008      	beq.n	8001a72 <__aeabi_ddiv+0x436>
 8001a60:	4214      	tst	r4, r2
 8001a62:	d106      	bne.n	8001a72 <__aeabi_ddiv+0x436>
 8001a64:	4322      	orrs	r2, r4
 8001a66:	0312      	lsls	r2, r2, #12
 8001a68:	46ba      	mov	sl, r7
 8001a6a:	000d      	movs	r5, r1
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <__aeabi_ddiv+0x5cc>)
 8001a6e:	0b12      	lsrs	r2, r2, #12
 8001a70:	e63b      	b.n	80016ea <__aeabi_ddiv+0xae>
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	4643      	mov	r3, r8
 8001a76:	0312      	lsls	r2, r2, #12
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	0312      	lsls	r2, r2, #12
 8001a7c:	46b2      	mov	sl, r6
 8001a7e:	4b62      	ldr	r3, [pc, #392]	; (8001c08 <__aeabi_ddiv+0x5cc>)
 8001a80:	0b12      	lsrs	r2, r2, #12
 8001a82:	e632      	b.n	80016ea <__aeabi_ddiv+0xae>
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_ddiv+0x44e>
 8001a88:	e702      	b.n	8001890 <__aeabi_ddiv+0x254>
 8001a8a:	19a6      	adds	r6, r4, r6
 8001a8c:	1e6a      	subs	r2, r5, #1
 8001a8e:	42a6      	cmp	r6, r4
 8001a90:	d200      	bcs.n	8001a94 <__aeabi_ddiv+0x458>
 8001a92:	e089      	b.n	8001ba8 <__aeabi_ddiv+0x56c>
 8001a94:	4286      	cmp	r6, r0
 8001a96:	d200      	bcs.n	8001a9a <__aeabi_ddiv+0x45e>
 8001a98:	e09f      	b.n	8001bda <__aeabi_ddiv+0x59e>
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_ddiv+0x462>
 8001a9c:	e0af      	b.n	8001bfe <__aeabi_ddiv+0x5c2>
 8001a9e:	0015      	movs	r5, r2
 8001aa0:	e6f4      	b.n	800188c <__aeabi_ddiv+0x250>
 8001aa2:	42a9      	cmp	r1, r5
 8001aa4:	d900      	bls.n	8001aa8 <__aeabi_ddiv+0x46c>
 8001aa6:	e63c      	b.n	8001722 <__aeabi_ddiv+0xe6>
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	07de      	lsls	r6, r3, #31
 8001aac:	0858      	lsrs	r0, r3, #1
 8001aae:	086b      	lsrs	r3, r5, #1
 8001ab0:	431e      	orrs	r6, r3
 8001ab2:	07ed      	lsls	r5, r5, #31
 8001ab4:	e63c      	b.n	8001730 <__aeabi_ddiv+0xf4>
 8001ab6:	f001 f8f3 	bl	8002ca0 <__clzsi2>
 8001aba:	0001      	movs	r1, r0
 8001abc:	0002      	movs	r2, r0
 8001abe:	3115      	adds	r1, #21
 8001ac0:	3220      	adds	r2, #32
 8001ac2:	291c      	cmp	r1, #28
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_ddiv+0x48c>
 8001ac6:	e72c      	b.n	8001922 <__aeabi_ddiv+0x2e6>
 8001ac8:	464b      	mov	r3, r9
 8001aca:	3808      	subs	r0, #8
 8001acc:	4083      	lsls	r3, r0
 8001ace:	2500      	movs	r5, #0
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	e732      	b.n	800193a <__aeabi_ddiv+0x2fe>
 8001ad4:	f001 f8e4 	bl	8002ca0 <__clzsi2>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	001a      	movs	r2, r3
 8001adc:	3215      	adds	r2, #21
 8001ade:	3020      	adds	r0, #32
 8001ae0:	2a1c      	cmp	r2, #28
 8001ae2:	dc00      	bgt.n	8001ae6 <__aeabi_ddiv+0x4aa>
 8001ae4:	e6ff      	b.n	80018e6 <__aeabi_ddiv+0x2aa>
 8001ae6:	4654      	mov	r4, sl
 8001ae8:	3b08      	subs	r3, #8
 8001aea:	2100      	movs	r1, #0
 8001aec:	409c      	lsls	r4, r3
 8001aee:	e705      	b.n	80018fc <__aeabi_ddiv+0x2c0>
 8001af0:	1936      	adds	r6, r6, r4
 8001af2:	3b01      	subs	r3, #1
 8001af4:	42b4      	cmp	r4, r6
 8001af6:	d900      	bls.n	8001afa <__aeabi_ddiv+0x4be>
 8001af8:	e6a6      	b.n	8001848 <__aeabi_ddiv+0x20c>
 8001afa:	42b2      	cmp	r2, r6
 8001afc:	d800      	bhi.n	8001b00 <__aeabi_ddiv+0x4c4>
 8001afe:	e6a3      	b.n	8001848 <__aeabi_ddiv+0x20c>
 8001b00:	1e83      	subs	r3, r0, #2
 8001b02:	1936      	adds	r6, r6, r4
 8001b04:	e6a0      	b.n	8001848 <__aeabi_ddiv+0x20c>
 8001b06:	1909      	adds	r1, r1, r4
 8001b08:	3d01      	subs	r5, #1
 8001b0a:	428c      	cmp	r4, r1
 8001b0c:	d900      	bls.n	8001b10 <__aeabi_ddiv+0x4d4>
 8001b0e:	e68d      	b.n	800182c <__aeabi_ddiv+0x1f0>
 8001b10:	428a      	cmp	r2, r1
 8001b12:	d800      	bhi.n	8001b16 <__aeabi_ddiv+0x4da>
 8001b14:	e68a      	b.n	800182c <__aeabi_ddiv+0x1f0>
 8001b16:	1e85      	subs	r5, r0, #2
 8001b18:	1909      	adds	r1, r1, r4
 8001b1a:	e687      	b.n	800182c <__aeabi_ddiv+0x1f0>
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	402a      	ands	r2, r5
 8001b20:	2a04      	cmp	r2, #4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_ddiv+0x4ea>
 8001b24:	e6bc      	b.n	80018a0 <__aeabi_ddiv+0x264>
 8001b26:	1d29      	adds	r1, r5, #4
 8001b28:	42a9      	cmp	r1, r5
 8001b2a:	41ad      	sbcs	r5, r5
 8001b2c:	426d      	negs	r5, r5
 8001b2e:	08c9      	lsrs	r1, r1, #3
 8001b30:	44a8      	add	r8, r5
 8001b32:	e6b6      	b.n	80018a2 <__aeabi_ddiv+0x266>
 8001b34:	42af      	cmp	r7, r5
 8001b36:	d900      	bls.n	8001b3a <__aeabi_ddiv+0x4fe>
 8001b38:	e662      	b.n	8001800 <__aeabi_ddiv+0x1c4>
 8001b3a:	4281      	cmp	r1, r0
 8001b3c:	d804      	bhi.n	8001b48 <__aeabi_ddiv+0x50c>
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_ddiv+0x506>
 8001b40:	e65e      	b.n	8001800 <__aeabi_ddiv+0x1c4>
 8001b42:	42ae      	cmp	r6, r5
 8001b44:	d800      	bhi.n	8001b48 <__aeabi_ddiv+0x50c>
 8001b46:	e65b      	b.n	8001800 <__aeabi_ddiv+0x1c4>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	469c      	mov	ip, r3
 8001b4e:	9b00      	ldr	r3, [sp, #0]
 8001b50:	44e0      	add	r8, ip
 8001b52:	469c      	mov	ip, r3
 8001b54:	4465      	add	r5, ip
 8001b56:	429d      	cmp	r5, r3
 8001b58:	419b      	sbcs	r3, r3
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	191b      	adds	r3, r3, r4
 8001b5e:	18c0      	adds	r0, r0, r3
 8001b60:	e64f      	b.n	8001802 <__aeabi_ddiv+0x1c6>
 8001b62:	42b2      	cmp	r2, r6
 8001b64:	d800      	bhi.n	8001b68 <__aeabi_ddiv+0x52c>
 8001b66:	e612      	b.n	800178e <__aeabi_ddiv+0x152>
 8001b68:	1e83      	subs	r3, r0, #2
 8001b6a:	1936      	adds	r6, r6, r4
 8001b6c:	e60f      	b.n	800178e <__aeabi_ddiv+0x152>
 8001b6e:	428a      	cmp	r2, r1
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x538>
 8001b72:	e5fa      	b.n	800176a <__aeabi_ddiv+0x12e>
 8001b74:	1e83      	subs	r3, r0, #2
 8001b76:	4698      	mov	r8, r3
 8001b78:	1909      	adds	r1, r1, r4
 8001b7a:	e5f6      	b.n	800176a <__aeabi_ddiv+0x12e>
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <__aeabi_ddiv+0x5d4>)
 8001b7e:	0028      	movs	r0, r5
 8001b80:	445b      	add	r3, fp
 8001b82:	4641      	mov	r1, r8
 8001b84:	409d      	lsls	r5, r3
 8001b86:	4099      	lsls	r1, r3
 8001b88:	40d0      	lsrs	r0, r2
 8001b8a:	1e6b      	subs	r3, r5, #1
 8001b8c:	419d      	sbcs	r5, r3
 8001b8e:	4643      	mov	r3, r8
 8001b90:	4301      	orrs	r1, r0
 8001b92:	4329      	orrs	r1, r5
 8001b94:	40d3      	lsrs	r3, r2
 8001b96:	074a      	lsls	r2, r1, #29
 8001b98:	d100      	bne.n	8001b9c <__aeabi_ddiv+0x560>
 8001b9a:	e755      	b.n	8001a48 <__aeabi_ddiv+0x40c>
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	2a04      	cmp	r2, #4
 8001ba2:	d000      	beq.n	8001ba6 <__aeabi_ddiv+0x56a>
 8001ba4:	e74a      	b.n	8001a3c <__aeabi_ddiv+0x400>
 8001ba6:	e74f      	b.n	8001a48 <__aeabi_ddiv+0x40c>
 8001ba8:	0015      	movs	r5, r2
 8001baa:	4286      	cmp	r6, r0
 8001bac:	d000      	beq.n	8001bb0 <__aeabi_ddiv+0x574>
 8001bae:	e66d      	b.n	800188c <__aeabi_ddiv+0x250>
 8001bb0:	9a00      	ldr	r2, [sp, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d000      	beq.n	8001bb8 <__aeabi_ddiv+0x57c>
 8001bb6:	e669      	b.n	800188c <__aeabi_ddiv+0x250>
 8001bb8:	e66a      	b.n	8001890 <__aeabi_ddiv+0x254>
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <__aeabi_ddiv+0x5d8>)
 8001bbc:	445b      	add	r3, fp
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dc00      	bgt.n	8001bc4 <__aeabi_ddiv+0x588>
 8001bc2:	e713      	b.n	80019ec <__aeabi_ddiv+0x3b0>
 8001bc4:	2501      	movs	r5, #1
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	44a8      	add	r8, r5
 8001bca:	e66a      	b.n	80018a2 <__aeabi_ddiv+0x266>
 8001bcc:	075d      	lsls	r5, r3, #29
 8001bce:	025b      	lsls	r3, r3, #9
 8001bd0:	0b1a      	lsrs	r2, r3, #12
 8001bd2:	08c9      	lsrs	r1, r1, #3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	430d      	orrs	r5, r1
 8001bd8:	e587      	b.n	80016ea <__aeabi_ddiv+0xae>
 8001bda:	9900      	ldr	r1, [sp, #0]
 8001bdc:	3d02      	subs	r5, #2
 8001bde:	004a      	lsls	r2, r1, #1
 8001be0:	428a      	cmp	r2, r1
 8001be2:	41bf      	sbcs	r7, r7
 8001be4:	427f      	negs	r7, r7
 8001be6:	193f      	adds	r7, r7, r4
 8001be8:	19f6      	adds	r6, r6, r7
 8001bea:	9200      	str	r2, [sp, #0]
 8001bec:	e7dd      	b.n	8001baa <__aeabi_ddiv+0x56e>
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	0312      	lsls	r2, r2, #12
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	0312      	lsls	r2, r2, #12
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <__aeabi_ddiv+0x5cc>)
 8001bfa:	0b12      	lsrs	r2, r2, #12
 8001bfc:	e575      	b.n	80016ea <__aeabi_ddiv+0xae>
 8001bfe:	9900      	ldr	r1, [sp, #0]
 8001c00:	4299      	cmp	r1, r3
 8001c02:	d3ea      	bcc.n	8001bda <__aeabi_ddiv+0x59e>
 8001c04:	0015      	movs	r5, r2
 8001c06:	e7d3      	b.n	8001bb0 <__aeabi_ddiv+0x574>
 8001c08:	000007ff 	.word	0x000007ff
 8001c0c:	0000043e 	.word	0x0000043e
 8001c10:	0000041e 	.word	0x0000041e
 8001c14:	000003ff 	.word	0x000003ff

08001c18 <__eqdf2>:
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	464e      	mov	r6, r9
 8001c1c:	4645      	mov	r5, r8
 8001c1e:	46de      	mov	lr, fp
 8001c20:	4657      	mov	r7, sl
 8001c22:	4690      	mov	r8, r2
 8001c24:	b5e0      	push	{r5, r6, r7, lr}
 8001c26:	0017      	movs	r7, r2
 8001c28:	031a      	lsls	r2, r3, #12
 8001c2a:	0b12      	lsrs	r2, r2, #12
 8001c2c:	0005      	movs	r5, r0
 8001c2e:	4684      	mov	ip, r0
 8001c30:	4819      	ldr	r0, [pc, #100]	; (8001c98 <__eqdf2+0x80>)
 8001c32:	030e      	lsls	r6, r1, #12
 8001c34:	004c      	lsls	r4, r1, #1
 8001c36:	4691      	mov	r9, r2
 8001c38:	005a      	lsls	r2, r3, #1
 8001c3a:	0fdb      	lsrs	r3, r3, #31
 8001c3c:	469b      	mov	fp, r3
 8001c3e:	0b36      	lsrs	r6, r6, #12
 8001c40:	0d64      	lsrs	r4, r4, #21
 8001c42:	0fc9      	lsrs	r1, r1, #31
 8001c44:	0d52      	lsrs	r2, r2, #21
 8001c46:	4284      	cmp	r4, r0
 8001c48:	d019      	beq.n	8001c7e <__eqdf2+0x66>
 8001c4a:	4282      	cmp	r2, r0
 8001c4c:	d010      	beq.n	8001c70 <__eqdf2+0x58>
 8001c4e:	2001      	movs	r0, #1
 8001c50:	4294      	cmp	r4, r2
 8001c52:	d10e      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c54:	454e      	cmp	r6, r9
 8001c56:	d10c      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c58:	2001      	movs	r0, #1
 8001c5a:	45c4      	cmp	ip, r8
 8001c5c:	d109      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c5e:	4559      	cmp	r1, fp
 8001c60:	d017      	beq.n	8001c92 <__eqdf2+0x7a>
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d105      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c66:	0030      	movs	r0, r6
 8001c68:	4328      	orrs	r0, r5
 8001c6a:	1e43      	subs	r3, r0, #1
 8001c6c:	4198      	sbcs	r0, r3
 8001c6e:	e000      	b.n	8001c72 <__eqdf2+0x5a>
 8001c70:	2001      	movs	r0, #1
 8001c72:	bcf0      	pop	{r4, r5, r6, r7}
 8001c74:	46bb      	mov	fp, r7
 8001c76:	46b2      	mov	sl, r6
 8001c78:	46a9      	mov	r9, r5
 8001c7a:	46a0      	mov	r8, r4
 8001c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7e:	0033      	movs	r3, r6
 8001c80:	2001      	movs	r0, #1
 8001c82:	432b      	orrs	r3, r5
 8001c84:	d1f5      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c86:	42a2      	cmp	r2, r4
 8001c88:	d1f3      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	433b      	orrs	r3, r7
 8001c8e:	d1f0      	bne.n	8001c72 <__eqdf2+0x5a>
 8001c90:	e7e2      	b.n	8001c58 <__eqdf2+0x40>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7ed      	b.n	8001c72 <__eqdf2+0x5a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	4647      	mov	r7, r8
 8001ca0:	46ce      	mov	lr, r9
 8001ca2:	0004      	movs	r4, r0
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	0016      	movs	r6, r2
 8001ca8:	031b      	lsls	r3, r3, #12
 8001caa:	0b1b      	lsrs	r3, r3, #12
 8001cac:	4d2d      	ldr	r5, [pc, #180]	; (8001d64 <__gedf2+0xc8>)
 8001cae:	004a      	lsls	r2, r1, #1
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	0043      	lsls	r3, r0, #1
 8001cb6:	030f      	lsls	r7, r1, #12
 8001cb8:	46a4      	mov	ip, r4
 8001cba:	46b0      	mov	r8, r6
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d52      	lsrs	r2, r2, #21
 8001cc0:	0fc9      	lsrs	r1, r1, #31
 8001cc2:	0d5b      	lsrs	r3, r3, #21
 8001cc4:	0fc0      	lsrs	r0, r0, #31
 8001cc6:	42aa      	cmp	r2, r5
 8001cc8:	d021      	beq.n	8001d0e <__gedf2+0x72>
 8001cca:	42ab      	cmp	r3, r5
 8001ccc:	d013      	beq.n	8001cf6 <__gedf2+0x5a>
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d122      	bne.n	8001d18 <__gedf2+0x7c>
 8001cd2:	433c      	orrs	r4, r7
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <__gedf2+0x42>
 8001cd8:	464d      	mov	r5, r9
 8001cda:	432e      	orrs	r6, r5
 8001cdc:	d022      	beq.n	8001d24 <__gedf2+0x88>
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	d010      	beq.n	8001d04 <__gedf2+0x68>
 8001ce2:	4281      	cmp	r1, r0
 8001ce4:	d022      	beq.n	8001d2c <__gedf2+0x90>
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bcc0      	pop	{r6, r7}
 8001cf0:	46b9      	mov	r9, r7
 8001cf2:	46b0      	mov	r8, r6
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf6:	464d      	mov	r5, r9
 8001cf8:	432e      	orrs	r6, r5
 8001cfa:	d129      	bne.n	8001d50 <__gedf2+0xb4>
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <__gedf2+0x46>
 8001d00:	433c      	orrs	r4, r7
 8001d02:	d1ee      	bne.n	8001ce2 <__gedf2+0x46>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d1f2      	bne.n	8001cee <__gedf2+0x52>
 8001d08:	2001      	movs	r0, #1
 8001d0a:	4240      	negs	r0, r0
 8001d0c:	e7ef      	b.n	8001cee <__gedf2+0x52>
 8001d0e:	003d      	movs	r5, r7
 8001d10:	4325      	orrs	r5, r4
 8001d12:	d11d      	bne.n	8001d50 <__gedf2+0xb4>
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d0ee      	beq.n	8001cf6 <__gedf2+0x5a>
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e2      	bne.n	8001ce2 <__gedf2+0x46>
 8001d1c:	464c      	mov	r4, r9
 8001d1e:	4326      	orrs	r6, r4
 8001d20:	d1df      	bne.n	8001ce2 <__gedf2+0x46>
 8001d22:	e7e0      	b.n	8001ce6 <__gedf2+0x4a>
 8001d24:	2000      	movs	r0, #0
 8001d26:	2c00      	cmp	r4, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7dc      	b.n	8001ce6 <__gedf2+0x4a>
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dc0a      	bgt.n	8001d46 <__gedf2+0xaa>
 8001d30:	dbe8      	blt.n	8001d04 <__gedf2+0x68>
 8001d32:	454f      	cmp	r7, r9
 8001d34:	d8d7      	bhi.n	8001ce6 <__gedf2+0x4a>
 8001d36:	d00e      	beq.n	8001d56 <__gedf2+0xba>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	454f      	cmp	r7, r9
 8001d3c:	d2d7      	bcs.n	8001cee <__gedf2+0x52>
 8001d3e:	2900      	cmp	r1, #0
 8001d40:	d0e2      	beq.n	8001d08 <__gedf2+0x6c>
 8001d42:	0008      	movs	r0, r1
 8001d44:	e7d3      	b.n	8001cee <__gedf2+0x52>
 8001d46:	4243      	negs	r3, r0
 8001d48:	4158      	adcs	r0, r3
 8001d4a:	0040      	lsls	r0, r0, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	e7ce      	b.n	8001cee <__gedf2+0x52>
 8001d50:	2002      	movs	r0, #2
 8001d52:	4240      	negs	r0, r0
 8001d54:	e7cb      	b.n	8001cee <__gedf2+0x52>
 8001d56:	45c4      	cmp	ip, r8
 8001d58:	d8c5      	bhi.n	8001ce6 <__gedf2+0x4a>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	45c4      	cmp	ip, r8
 8001d5e:	d2c6      	bcs.n	8001cee <__gedf2+0x52>
 8001d60:	e7ed      	b.n	8001d3e <__gedf2+0xa2>
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	000007ff 	.word	0x000007ff

08001d68 <__ledf2>:
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	4647      	mov	r7, r8
 8001d6c:	46ce      	mov	lr, r9
 8001d6e:	0004      	movs	r4, r0
 8001d70:	0018      	movs	r0, r3
 8001d72:	0016      	movs	r6, r2
 8001d74:	031b      	lsls	r3, r3, #12
 8001d76:	0b1b      	lsrs	r3, r3, #12
 8001d78:	4d2c      	ldr	r5, [pc, #176]	; (8001e2c <__ledf2+0xc4>)
 8001d7a:	004a      	lsls	r2, r1, #1
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	0043      	lsls	r3, r0, #1
 8001d82:	030f      	lsls	r7, r1, #12
 8001d84:	46a4      	mov	ip, r4
 8001d86:	46b0      	mov	r8, r6
 8001d88:	0b3f      	lsrs	r7, r7, #12
 8001d8a:	0d52      	lsrs	r2, r2, #21
 8001d8c:	0fc9      	lsrs	r1, r1, #31
 8001d8e:	0d5b      	lsrs	r3, r3, #21
 8001d90:	0fc0      	lsrs	r0, r0, #31
 8001d92:	42aa      	cmp	r2, r5
 8001d94:	d00d      	beq.n	8001db2 <__ledf2+0x4a>
 8001d96:	42ab      	cmp	r3, r5
 8001d98:	d010      	beq.n	8001dbc <__ledf2+0x54>
 8001d9a:	2a00      	cmp	r2, #0
 8001d9c:	d127      	bne.n	8001dee <__ledf2+0x86>
 8001d9e:	433c      	orrs	r4, r7
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d111      	bne.n	8001dc8 <__ledf2+0x60>
 8001da4:	464d      	mov	r5, r9
 8001da6:	432e      	orrs	r6, r5
 8001da8:	d10e      	bne.n	8001dc8 <__ledf2+0x60>
 8001daa:	2000      	movs	r0, #0
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	d015      	beq.n	8001ddc <__ledf2+0x74>
 8001db0:	e00e      	b.n	8001dd0 <__ledf2+0x68>
 8001db2:	003d      	movs	r5, r7
 8001db4:	4325      	orrs	r5, r4
 8001db6:	d110      	bne.n	8001dda <__ledf2+0x72>
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d118      	bne.n	8001dee <__ledf2+0x86>
 8001dbc:	464d      	mov	r5, r9
 8001dbe:	432e      	orrs	r6, r5
 8001dc0:	d10b      	bne.n	8001dda <__ledf2+0x72>
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d102      	bne.n	8001dcc <__ledf2+0x64>
 8001dc6:	433c      	orrs	r4, r7
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d00b      	beq.n	8001de4 <__ledf2+0x7c>
 8001dcc:	4281      	cmp	r1, r0
 8001dce:	d014      	beq.n	8001dfa <__ledf2+0x92>
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	3901      	subs	r1, #1
 8001dd4:	4008      	ands	r0, r1
 8001dd6:	3801      	subs	r0, #1
 8001dd8:	e000      	b.n	8001ddc <__ledf2+0x74>
 8001dda:	2002      	movs	r0, #2
 8001ddc:	bcc0      	pop	{r6, r7}
 8001dde:	46b9      	mov	r9, r7
 8001de0:	46b0      	mov	r8, r6
 8001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f9      	bne.n	8001ddc <__ledf2+0x74>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7f6      	b.n	8001ddc <__ledf2+0x74>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ec      	bne.n	8001dcc <__ledf2+0x64>
 8001df2:	464c      	mov	r4, r9
 8001df4:	4326      	orrs	r6, r4
 8001df6:	d1e9      	bne.n	8001dcc <__ledf2+0x64>
 8001df8:	e7ea      	b.n	8001dd0 <__ledf2+0x68>
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dd04      	ble.n	8001e08 <__ledf2+0xa0>
 8001dfe:	4243      	negs	r3, r0
 8001e00:	4158      	adcs	r0, r3
 8001e02:	0040      	lsls	r0, r0, #1
 8001e04:	3801      	subs	r0, #1
 8001e06:	e7e9      	b.n	8001ddc <__ledf2+0x74>
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbeb      	blt.n	8001de4 <__ledf2+0x7c>
 8001e0c:	454f      	cmp	r7, r9
 8001e0e:	d8df      	bhi.n	8001dd0 <__ledf2+0x68>
 8001e10:	d006      	beq.n	8001e20 <__ledf2+0xb8>
 8001e12:	2000      	movs	r0, #0
 8001e14:	454f      	cmp	r7, r9
 8001e16:	d2e1      	bcs.n	8001ddc <__ledf2+0x74>
 8001e18:	2900      	cmp	r1, #0
 8001e1a:	d0e5      	beq.n	8001de8 <__ledf2+0x80>
 8001e1c:	0008      	movs	r0, r1
 8001e1e:	e7dd      	b.n	8001ddc <__ledf2+0x74>
 8001e20:	45c4      	cmp	ip, r8
 8001e22:	d8d5      	bhi.n	8001dd0 <__ledf2+0x68>
 8001e24:	2000      	movs	r0, #0
 8001e26:	45c4      	cmp	ip, r8
 8001e28:	d2d8      	bcs.n	8001ddc <__ledf2+0x74>
 8001e2a:	e7f5      	b.n	8001e18 <__ledf2+0xb0>
 8001e2c:	000007ff 	.word	0x000007ff

08001e30 <__aeabi_dmul>:
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	4645      	mov	r5, r8
 8001e34:	46de      	mov	lr, fp
 8001e36:	4657      	mov	r7, sl
 8001e38:	464e      	mov	r6, r9
 8001e3a:	b5e0      	push	{r5, r6, r7, lr}
 8001e3c:	001f      	movs	r7, r3
 8001e3e:	030b      	lsls	r3, r1, #12
 8001e40:	0b1b      	lsrs	r3, r3, #12
 8001e42:	469b      	mov	fp, r3
 8001e44:	004d      	lsls	r5, r1, #1
 8001e46:	0fcb      	lsrs	r3, r1, #31
 8001e48:	0004      	movs	r4, r0
 8001e4a:	4691      	mov	r9, r2
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	b087      	sub	sp, #28
 8001e50:	0d6d      	lsrs	r5, r5, #21
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dmul+0x26>
 8001e54:	e1cd      	b.n	80021f2 <__aeabi_dmul+0x3c2>
 8001e56:	4bce      	ldr	r3, [pc, #824]	; (8002190 <__aeabi_dmul+0x360>)
 8001e58:	429d      	cmp	r5, r3
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dmul+0x2e>
 8001e5c:	e1e9      	b.n	8002232 <__aeabi_dmul+0x402>
 8001e5e:	465a      	mov	r2, fp
 8001e60:	0f43      	lsrs	r3, r0, #29
 8001e62:	00d2      	lsls	r2, r2, #3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0412      	lsls	r2, r2, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	00c3      	lsls	r3, r0, #3
 8001e6e:	469a      	mov	sl, r3
 8001e70:	4bc8      	ldr	r3, [pc, #800]	; (8002194 <__aeabi_dmul+0x364>)
 8001e72:	4693      	mov	fp, r2
 8001e74:	469c      	mov	ip, r3
 8001e76:	2300      	movs	r3, #0
 8001e78:	2600      	movs	r6, #0
 8001e7a:	4465      	add	r5, ip
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	033c      	lsls	r4, r7, #12
 8001e80:	007b      	lsls	r3, r7, #1
 8001e82:	4648      	mov	r0, r9
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	0d5b      	lsrs	r3, r3, #21
 8001e88:	0fff      	lsrs	r7, r7, #31
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x60>
 8001e8e:	e189      	b.n	80021a4 <__aeabi_dmul+0x374>
 8001e90:	4abf      	ldr	r2, [pc, #764]	; (8002190 <__aeabi_dmul+0x360>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <__aeabi_dmul+0x9a>
 8001e96:	0f42      	lsrs	r2, r0, #29
 8001e98:	00e4      	lsls	r4, r4, #3
 8001e9a:	4322      	orrs	r2, r4
 8001e9c:	2480      	movs	r4, #128	; 0x80
 8001e9e:	0424      	lsls	r4, r4, #16
 8001ea0:	4314      	orrs	r4, r2
 8001ea2:	4abc      	ldr	r2, [pc, #752]	; (8002194 <__aeabi_dmul+0x364>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4694      	mov	ip, r2
 8001ea8:	4642      	mov	r2, r8
 8001eaa:	4463      	add	r3, ip
 8001eac:	195b      	adds	r3, r3, r5
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	407a      	eors	r2, r7
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	00c0      	lsls	r0, r0, #3
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2e0a      	cmp	r6, #10
 8001ebe:	dd1c      	ble.n	8001efa <__aeabi_dmul+0xca>
 8001ec0:	003a      	movs	r2, r7
 8001ec2:	2e0b      	cmp	r6, #11
 8001ec4:	d05e      	beq.n	8001f84 <__aeabi_dmul+0x154>
 8001ec6:	4647      	mov	r7, r8
 8001ec8:	e056      	b.n	8001f78 <__aeabi_dmul+0x148>
 8001eca:	4649      	mov	r1, r9
 8001ecc:	4bb0      	ldr	r3, [pc, #704]	; (8002190 <__aeabi_dmul+0x360>)
 8001ece:	4321      	orrs	r1, r4
 8001ed0:	18eb      	adds	r3, r5, r3
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d12a      	bne.n	8001f2e <__aeabi_dmul+0xfe>
 8001ed8:	2080      	movs	r0, #128	; 0x80
 8001eda:	2202      	movs	r2, #2
 8001edc:	0100      	lsls	r0, r0, #4
 8001ede:	002b      	movs	r3, r5
 8001ee0:	4684      	mov	ip, r0
 8001ee2:	4316      	orrs	r6, r2
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	4463      	add	r3, ip
 8001ee8:	407a      	eors	r2, r7
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	2e0a      	cmp	r6, #10
 8001ef0:	dd00      	ble.n	8001ef4 <__aeabi_dmul+0xc4>
 8001ef2:	e231      	b.n	8002358 <__aeabi_dmul+0x528>
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	2102      	movs	r1, #2
 8001efa:	2e02      	cmp	r6, #2
 8001efc:	dc26      	bgt.n	8001f4c <__aeabi_dmul+0x11c>
 8001efe:	3e01      	subs	r6, #1
 8001f00:	2e01      	cmp	r6, #1
 8001f02:	d852      	bhi.n	8001faa <__aeabi_dmul+0x17a>
 8001f04:	2902      	cmp	r1, #2
 8001f06:	d04c      	beq.n	8001fa2 <__aeabi_dmul+0x172>
 8001f08:	2901      	cmp	r1, #1
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dmul+0xde>
 8001f0c:	e118      	b.n	8002140 <__aeabi_dmul+0x310>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2400      	movs	r4, #0
 8001f12:	2500      	movs	r5, #0
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	4323      	orrs	r3, r4
 8001f18:	07d2      	lsls	r2, r2, #31
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	0028      	movs	r0, r5
 8001f1e:	0019      	movs	r1, r3
 8001f20:	b007      	add	sp, #28
 8001f22:	bcf0      	pop	{r4, r5, r6, r7}
 8001f24:	46bb      	mov	fp, r7
 8001f26:	46b2      	mov	sl, r6
 8001f28:	46a9      	mov	r9, r5
 8001f2a:	46a0      	mov	r8, r4
 8001f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	2203      	movs	r2, #3
 8001f32:	0109      	lsls	r1, r1, #4
 8001f34:	002b      	movs	r3, r5
 8001f36:	468c      	mov	ip, r1
 8001f38:	4316      	orrs	r6, r2
 8001f3a:	4642      	mov	r2, r8
 8001f3c:	4463      	add	r3, ip
 8001f3e:	407a      	eors	r2, r7
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	2e0a      	cmp	r6, #10
 8001f46:	dd00      	ble.n	8001f4a <__aeabi_dmul+0x11a>
 8001f48:	e228      	b.n	800239c <__aeabi_dmul+0x56c>
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	2501      	movs	r5, #1
 8001f4e:	40b5      	lsls	r5, r6
 8001f50:	46ac      	mov	ip, r5
 8001f52:	26a6      	movs	r6, #166	; 0xa6
 8001f54:	4663      	mov	r3, ip
 8001f56:	00f6      	lsls	r6, r6, #3
 8001f58:	4035      	ands	r5, r6
 8001f5a:	4233      	tst	r3, r6
 8001f5c:	d10b      	bne.n	8001f76 <__aeabi_dmul+0x146>
 8001f5e:	2690      	movs	r6, #144	; 0x90
 8001f60:	00b6      	lsls	r6, r6, #2
 8001f62:	4233      	tst	r3, r6
 8001f64:	d118      	bne.n	8001f98 <__aeabi_dmul+0x168>
 8001f66:	3eb9      	subs	r6, #185	; 0xb9
 8001f68:	3eff      	subs	r6, #255	; 0xff
 8001f6a:	421e      	tst	r6, r3
 8001f6c:	d01d      	beq.n	8001faa <__aeabi_dmul+0x17a>
 8001f6e:	46a3      	mov	fp, r4
 8001f70:	4682      	mov	sl, r0
 8001f72:	9100      	str	r1, [sp, #0]
 8001f74:	e000      	b.n	8001f78 <__aeabi_dmul+0x148>
 8001f76:	0017      	movs	r7, r2
 8001f78:	9900      	ldr	r1, [sp, #0]
 8001f7a:	003a      	movs	r2, r7
 8001f7c:	2902      	cmp	r1, #2
 8001f7e:	d010      	beq.n	8001fa2 <__aeabi_dmul+0x172>
 8001f80:	465c      	mov	r4, fp
 8001f82:	4650      	mov	r0, sl
 8001f84:	2903      	cmp	r1, #3
 8001f86:	d1bf      	bne.n	8001f08 <__aeabi_dmul+0xd8>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	431c      	orrs	r4, r3
 8001f8e:	0324      	lsls	r4, r4, #12
 8001f90:	0005      	movs	r5, r0
 8001f92:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <__aeabi_dmul+0x360>)
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	e7bd      	b.n	8001f14 <__aeabi_dmul+0xe4>
 8001f98:	2480      	movs	r4, #128	; 0x80
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <__aeabi_dmul+0x360>)
 8001f9e:	0324      	lsls	r4, r4, #12
 8001fa0:	e7b8      	b.n	8001f14 <__aeabi_dmul+0xe4>
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	4b7a      	ldr	r3, [pc, #488]	; (8002190 <__aeabi_dmul+0x360>)
 8001fa8:	e7b4      	b.n	8001f14 <__aeabi_dmul+0xe4>
 8001faa:	4653      	mov	r3, sl
 8001fac:	041e      	lsls	r6, r3, #16
 8001fae:	0c36      	lsrs	r6, r6, #16
 8001fb0:	0c1f      	lsrs	r7, r3, #16
 8001fb2:	0033      	movs	r3, r6
 8001fb4:	0c01      	lsrs	r1, r0, #16
 8001fb6:	0400      	lsls	r0, r0, #16
 8001fb8:	0c00      	lsrs	r0, r0, #16
 8001fba:	4343      	muls	r3, r0
 8001fbc:	4698      	mov	r8, r3
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	437b      	muls	r3, r7
 8001fc2:	4699      	mov	r9, r3
 8001fc4:	0033      	movs	r3, r6
 8001fc6:	434b      	muls	r3, r1
 8001fc8:	469c      	mov	ip, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	000d      	movs	r5, r1
 8001fce:	0c1b      	lsrs	r3, r3, #16
 8001fd0:	469a      	mov	sl, r3
 8001fd2:	437d      	muls	r5, r7
 8001fd4:	44cc      	add	ip, r9
 8001fd6:	44d4      	add	ip, sl
 8001fd8:	9500      	str	r5, [sp, #0]
 8001fda:	45e1      	cmp	r9, ip
 8001fdc:	d904      	bls.n	8001fe8 <__aeabi_dmul+0x1b8>
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	444d      	add	r5, r9
 8001fe6:	9500      	str	r5, [sp, #0]
 8001fe8:	4663      	mov	r3, ip
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	001d      	movs	r5, r3
 8001fee:	4663      	mov	r3, ip
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	469c      	mov	ip, r3
 8001ff4:	4643      	mov	r3, r8
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	4663      	mov	r3, ip
 8001ffe:	4443      	add	r3, r8
 8002000:	9303      	str	r3, [sp, #12]
 8002002:	0c23      	lsrs	r3, r4, #16
 8002004:	4698      	mov	r8, r3
 8002006:	0033      	movs	r3, r6
 8002008:	0424      	lsls	r4, r4, #16
 800200a:	0c24      	lsrs	r4, r4, #16
 800200c:	4363      	muls	r3, r4
 800200e:	469c      	mov	ip, r3
 8002010:	0023      	movs	r3, r4
 8002012:	437b      	muls	r3, r7
 8002014:	4699      	mov	r9, r3
 8002016:	4643      	mov	r3, r8
 8002018:	435e      	muls	r6, r3
 800201a:	435f      	muls	r7, r3
 800201c:	444e      	add	r6, r9
 800201e:	4663      	mov	r3, ip
 8002020:	46b2      	mov	sl, r6
 8002022:	0c1e      	lsrs	r6, r3, #16
 8002024:	4456      	add	r6, sl
 8002026:	45b1      	cmp	r9, r6
 8002028:	d903      	bls.n	8002032 <__aeabi_dmul+0x202>
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	025b      	lsls	r3, r3, #9
 800202e:	4699      	mov	r9, r3
 8002030:	444f      	add	r7, r9
 8002032:	0c33      	lsrs	r3, r6, #16
 8002034:	4699      	mov	r9, r3
 8002036:	003b      	movs	r3, r7
 8002038:	444b      	add	r3, r9
 800203a:	9305      	str	r3, [sp, #20]
 800203c:	4663      	mov	r3, ip
 800203e:	46ac      	mov	ip, r5
 8002040:	041f      	lsls	r7, r3, #16
 8002042:	0c3f      	lsrs	r7, r7, #16
 8002044:	0436      	lsls	r6, r6, #16
 8002046:	19f6      	adds	r6, r6, r7
 8002048:	44b4      	add	ip, r6
 800204a:	4663      	mov	r3, ip
 800204c:	9304      	str	r3, [sp, #16]
 800204e:	465b      	mov	r3, fp
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	469c      	mov	ip, r3
 8002054:	465b      	mov	r3, fp
 8002056:	041f      	lsls	r7, r3, #16
 8002058:	0c3f      	lsrs	r7, r7, #16
 800205a:	003b      	movs	r3, r7
 800205c:	4343      	muls	r3, r0
 800205e:	4699      	mov	r9, r3
 8002060:	4663      	mov	r3, ip
 8002062:	4343      	muls	r3, r0
 8002064:	469a      	mov	sl, r3
 8002066:	464b      	mov	r3, r9
 8002068:	4660      	mov	r0, ip
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	469b      	mov	fp, r3
 800206e:	4348      	muls	r0, r1
 8002070:	4379      	muls	r1, r7
 8002072:	4451      	add	r1, sl
 8002074:	4459      	add	r1, fp
 8002076:	458a      	cmp	sl, r1
 8002078:	d903      	bls.n	8002082 <__aeabi_dmul+0x252>
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	469a      	mov	sl, r3
 8002080:	4450      	add	r0, sl
 8002082:	0c0b      	lsrs	r3, r1, #16
 8002084:	469a      	mov	sl, r3
 8002086:	464b      	mov	r3, r9
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	0c1b      	lsrs	r3, r3, #16
 800208c:	4699      	mov	r9, r3
 800208e:	003b      	movs	r3, r7
 8002090:	4363      	muls	r3, r4
 8002092:	0409      	lsls	r1, r1, #16
 8002094:	4645      	mov	r5, r8
 8002096:	4449      	add	r1, r9
 8002098:	4699      	mov	r9, r3
 800209a:	4663      	mov	r3, ip
 800209c:	435c      	muls	r4, r3
 800209e:	436b      	muls	r3, r5
 80020a0:	469c      	mov	ip, r3
 80020a2:	464b      	mov	r3, r9
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	4698      	mov	r8, r3
 80020a8:	436f      	muls	r7, r5
 80020aa:	193f      	adds	r7, r7, r4
 80020ac:	4447      	add	r7, r8
 80020ae:	4450      	add	r0, sl
 80020b0:	42bc      	cmp	r4, r7
 80020b2:	d903      	bls.n	80020bc <__aeabi_dmul+0x28c>
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	4698      	mov	r8, r3
 80020ba:	44c4      	add	ip, r8
 80020bc:	9b04      	ldr	r3, [sp, #16]
 80020be:	9d00      	ldr	r5, [sp, #0]
 80020c0:	4698      	mov	r8, r3
 80020c2:	4445      	add	r5, r8
 80020c4:	42b5      	cmp	r5, r6
 80020c6:	41b6      	sbcs	r6, r6
 80020c8:	4273      	negs	r3, r6
 80020ca:	4698      	mov	r8, r3
 80020cc:	464b      	mov	r3, r9
 80020ce:	041e      	lsls	r6, r3, #16
 80020d0:	9b05      	ldr	r3, [sp, #20]
 80020d2:	043c      	lsls	r4, r7, #16
 80020d4:	4699      	mov	r9, r3
 80020d6:	0c36      	lsrs	r6, r6, #16
 80020d8:	19a4      	adds	r4, r4, r6
 80020da:	444c      	add	r4, r9
 80020dc:	46a1      	mov	r9, r4
 80020de:	4683      	mov	fp, r0
 80020e0:	186e      	adds	r6, r5, r1
 80020e2:	44c1      	add	r9, r8
 80020e4:	428e      	cmp	r6, r1
 80020e6:	4189      	sbcs	r1, r1
 80020e8:	44cb      	add	fp, r9
 80020ea:	465d      	mov	r5, fp
 80020ec:	4249      	negs	r1, r1
 80020ee:	186d      	adds	r5, r5, r1
 80020f0:	429c      	cmp	r4, r3
 80020f2:	41a4      	sbcs	r4, r4
 80020f4:	45c1      	cmp	r9, r8
 80020f6:	419b      	sbcs	r3, r3
 80020f8:	4583      	cmp	fp, r0
 80020fa:	4180      	sbcs	r0, r0
 80020fc:	428d      	cmp	r5, r1
 80020fe:	4189      	sbcs	r1, r1
 8002100:	425b      	negs	r3, r3
 8002102:	4264      	negs	r4, r4
 8002104:	431c      	orrs	r4, r3
 8002106:	4240      	negs	r0, r0
 8002108:	9b03      	ldr	r3, [sp, #12]
 800210a:	4249      	negs	r1, r1
 800210c:	4301      	orrs	r1, r0
 800210e:	0270      	lsls	r0, r6, #9
 8002110:	0c3f      	lsrs	r7, r7, #16
 8002112:	4318      	orrs	r0, r3
 8002114:	19e4      	adds	r4, r4, r7
 8002116:	1e47      	subs	r7, r0, #1
 8002118:	41b8      	sbcs	r0, r7
 800211a:	1864      	adds	r4, r4, r1
 800211c:	4464      	add	r4, ip
 800211e:	0df6      	lsrs	r6, r6, #23
 8002120:	0261      	lsls	r1, r4, #9
 8002122:	4330      	orrs	r0, r6
 8002124:	0dec      	lsrs	r4, r5, #23
 8002126:	026e      	lsls	r6, r5, #9
 8002128:	430c      	orrs	r4, r1
 800212a:	4330      	orrs	r0, r6
 800212c:	01c9      	lsls	r1, r1, #7
 800212e:	d400      	bmi.n	8002132 <__aeabi_dmul+0x302>
 8002130:	e0f1      	b.n	8002316 <__aeabi_dmul+0x4e6>
 8002132:	2101      	movs	r1, #1
 8002134:	0843      	lsrs	r3, r0, #1
 8002136:	4001      	ands	r1, r0
 8002138:	430b      	orrs	r3, r1
 800213a:	07e0      	lsls	r0, r4, #31
 800213c:	4318      	orrs	r0, r3
 800213e:	0864      	lsrs	r4, r4, #1
 8002140:	4915      	ldr	r1, [pc, #84]	; (8002198 <__aeabi_dmul+0x368>)
 8002142:	9b02      	ldr	r3, [sp, #8]
 8002144:	468c      	mov	ip, r1
 8002146:	4463      	add	r3, ip
 8002148:	2b00      	cmp	r3, #0
 800214a:	dc00      	bgt.n	800214e <__aeabi_dmul+0x31e>
 800214c:	e097      	b.n	800227e <__aeabi_dmul+0x44e>
 800214e:	0741      	lsls	r1, r0, #29
 8002150:	d009      	beq.n	8002166 <__aeabi_dmul+0x336>
 8002152:	210f      	movs	r1, #15
 8002154:	4001      	ands	r1, r0
 8002156:	2904      	cmp	r1, #4
 8002158:	d005      	beq.n	8002166 <__aeabi_dmul+0x336>
 800215a:	1d01      	adds	r1, r0, #4
 800215c:	4281      	cmp	r1, r0
 800215e:	4180      	sbcs	r0, r0
 8002160:	4240      	negs	r0, r0
 8002162:	1824      	adds	r4, r4, r0
 8002164:	0008      	movs	r0, r1
 8002166:	01e1      	lsls	r1, r4, #7
 8002168:	d506      	bpl.n	8002178 <__aeabi_dmul+0x348>
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	00c9      	lsls	r1, r1, #3
 800216e:	468c      	mov	ip, r1
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <__aeabi_dmul+0x36c>)
 8002172:	401c      	ands	r4, r3
 8002174:	9b02      	ldr	r3, [sp, #8]
 8002176:	4463      	add	r3, ip
 8002178:	4909      	ldr	r1, [pc, #36]	; (80021a0 <__aeabi_dmul+0x370>)
 800217a:	428b      	cmp	r3, r1
 800217c:	dd00      	ble.n	8002180 <__aeabi_dmul+0x350>
 800217e:	e710      	b.n	8001fa2 <__aeabi_dmul+0x172>
 8002180:	0761      	lsls	r1, r4, #29
 8002182:	08c5      	lsrs	r5, r0, #3
 8002184:	0264      	lsls	r4, r4, #9
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	430d      	orrs	r5, r1
 800218a:	0b24      	lsrs	r4, r4, #12
 800218c:	0d5b      	lsrs	r3, r3, #21
 800218e:	e6c1      	b.n	8001f14 <__aeabi_dmul+0xe4>
 8002190:	000007ff 	.word	0x000007ff
 8002194:	fffffc01 	.word	0xfffffc01
 8002198:	000003ff 	.word	0x000003ff
 800219c:	feffffff 	.word	0xfeffffff
 80021a0:	000007fe 	.word	0x000007fe
 80021a4:	464b      	mov	r3, r9
 80021a6:	4323      	orrs	r3, r4
 80021a8:	d059      	beq.n	800225e <__aeabi_dmul+0x42e>
 80021aa:	2c00      	cmp	r4, #0
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x380>
 80021ae:	e0a3      	b.n	80022f8 <__aeabi_dmul+0x4c8>
 80021b0:	0020      	movs	r0, r4
 80021b2:	f000 fd75 	bl	8002ca0 <__clzsi2>
 80021b6:	0001      	movs	r1, r0
 80021b8:	0003      	movs	r3, r0
 80021ba:	390b      	subs	r1, #11
 80021bc:	221d      	movs	r2, #29
 80021be:	1a52      	subs	r2, r2, r1
 80021c0:	4649      	mov	r1, r9
 80021c2:	0018      	movs	r0, r3
 80021c4:	40d1      	lsrs	r1, r2
 80021c6:	464a      	mov	r2, r9
 80021c8:	3808      	subs	r0, #8
 80021ca:	4082      	lsls	r2, r0
 80021cc:	4084      	lsls	r4, r0
 80021ce:	0010      	movs	r0, r2
 80021d0:	430c      	orrs	r4, r1
 80021d2:	4a74      	ldr	r2, [pc, #464]	; (80023a4 <__aeabi_dmul+0x574>)
 80021d4:	1aeb      	subs	r3, r5, r3
 80021d6:	4694      	mov	ip, r2
 80021d8:	4642      	mov	r2, r8
 80021da:	4463      	add	r3, ip
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	9b01      	ldr	r3, [sp, #4]
 80021e0:	407a      	eors	r2, r7
 80021e2:	3301      	adds	r3, #1
 80021e4:	2100      	movs	r1, #0
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2e0a      	cmp	r6, #10
 80021ec:	dd00      	ble.n	80021f0 <__aeabi_dmul+0x3c0>
 80021ee:	e667      	b.n	8001ec0 <__aeabi_dmul+0x90>
 80021f0:	e683      	b.n	8001efa <__aeabi_dmul+0xca>
 80021f2:	465b      	mov	r3, fp
 80021f4:	4303      	orrs	r3, r0
 80021f6:	469a      	mov	sl, r3
 80021f8:	d02a      	beq.n	8002250 <__aeabi_dmul+0x420>
 80021fa:	465b      	mov	r3, fp
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d06d      	beq.n	80022dc <__aeabi_dmul+0x4ac>
 8002200:	4658      	mov	r0, fp
 8002202:	f000 fd4d 	bl	8002ca0 <__clzsi2>
 8002206:	0001      	movs	r1, r0
 8002208:	0003      	movs	r3, r0
 800220a:	390b      	subs	r1, #11
 800220c:	221d      	movs	r2, #29
 800220e:	1a52      	subs	r2, r2, r1
 8002210:	0021      	movs	r1, r4
 8002212:	0018      	movs	r0, r3
 8002214:	465d      	mov	r5, fp
 8002216:	40d1      	lsrs	r1, r2
 8002218:	3808      	subs	r0, #8
 800221a:	4085      	lsls	r5, r0
 800221c:	000a      	movs	r2, r1
 800221e:	4084      	lsls	r4, r0
 8002220:	432a      	orrs	r2, r5
 8002222:	4693      	mov	fp, r2
 8002224:	46a2      	mov	sl, r4
 8002226:	4d5f      	ldr	r5, [pc, #380]	; (80023a4 <__aeabi_dmul+0x574>)
 8002228:	2600      	movs	r6, #0
 800222a:	1aed      	subs	r5, r5, r3
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	e625      	b.n	8001e7e <__aeabi_dmul+0x4e>
 8002232:	465b      	mov	r3, fp
 8002234:	4303      	orrs	r3, r0
 8002236:	469a      	mov	sl, r3
 8002238:	d105      	bne.n	8002246 <__aeabi_dmul+0x416>
 800223a:	2300      	movs	r3, #0
 800223c:	469b      	mov	fp, r3
 800223e:	3302      	adds	r3, #2
 8002240:	2608      	movs	r6, #8
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	e61b      	b.n	8001e7e <__aeabi_dmul+0x4e>
 8002246:	2303      	movs	r3, #3
 8002248:	4682      	mov	sl, r0
 800224a:	260c      	movs	r6, #12
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	e616      	b.n	8001e7e <__aeabi_dmul+0x4e>
 8002250:	2300      	movs	r3, #0
 8002252:	469b      	mov	fp, r3
 8002254:	3301      	adds	r3, #1
 8002256:	2604      	movs	r6, #4
 8002258:	2500      	movs	r5, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	e60f      	b.n	8001e7e <__aeabi_dmul+0x4e>
 800225e:	4642      	mov	r2, r8
 8002260:	3301      	adds	r3, #1
 8002262:	9501      	str	r5, [sp, #4]
 8002264:	431e      	orrs	r6, r3
 8002266:	9b01      	ldr	r3, [sp, #4]
 8002268:	407a      	eors	r2, r7
 800226a:	3301      	adds	r3, #1
 800226c:	2400      	movs	r4, #0
 800226e:	2000      	movs	r0, #0
 8002270:	2101      	movs	r1, #1
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2e0a      	cmp	r6, #10
 8002278:	dd00      	ble.n	800227c <__aeabi_dmul+0x44c>
 800227a:	e621      	b.n	8001ec0 <__aeabi_dmul+0x90>
 800227c:	e63d      	b.n	8001efa <__aeabi_dmul+0xca>
 800227e:	2101      	movs	r1, #1
 8002280:	1ac9      	subs	r1, r1, r3
 8002282:	2938      	cmp	r1, #56	; 0x38
 8002284:	dd00      	ble.n	8002288 <__aeabi_dmul+0x458>
 8002286:	e642      	b.n	8001f0e <__aeabi_dmul+0xde>
 8002288:	291f      	cmp	r1, #31
 800228a:	dd47      	ble.n	800231c <__aeabi_dmul+0x4ec>
 800228c:	261f      	movs	r6, #31
 800228e:	0025      	movs	r5, r4
 8002290:	4276      	negs	r6, r6
 8002292:	1af3      	subs	r3, r6, r3
 8002294:	40dd      	lsrs	r5, r3
 8002296:	002b      	movs	r3, r5
 8002298:	2920      	cmp	r1, #32
 800229a:	d005      	beq.n	80022a8 <__aeabi_dmul+0x478>
 800229c:	4942      	ldr	r1, [pc, #264]	; (80023a8 <__aeabi_dmul+0x578>)
 800229e:	9d02      	ldr	r5, [sp, #8]
 80022a0:	468c      	mov	ip, r1
 80022a2:	4465      	add	r5, ip
 80022a4:	40ac      	lsls	r4, r5
 80022a6:	4320      	orrs	r0, r4
 80022a8:	1e41      	subs	r1, r0, #1
 80022aa:	4188      	sbcs	r0, r1
 80022ac:	4318      	orrs	r0, r3
 80022ae:	2307      	movs	r3, #7
 80022b0:	001d      	movs	r5, r3
 80022b2:	2400      	movs	r4, #0
 80022b4:	4005      	ands	r5, r0
 80022b6:	4203      	tst	r3, r0
 80022b8:	d04a      	beq.n	8002350 <__aeabi_dmul+0x520>
 80022ba:	230f      	movs	r3, #15
 80022bc:	2400      	movs	r4, #0
 80022be:	4003      	ands	r3, r0
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d042      	beq.n	800234a <__aeabi_dmul+0x51a>
 80022c4:	1d03      	adds	r3, r0, #4
 80022c6:	4283      	cmp	r3, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	4240      	negs	r0, r0
 80022cc:	1824      	adds	r4, r4, r0
 80022ce:	0018      	movs	r0, r3
 80022d0:	0223      	lsls	r3, r4, #8
 80022d2:	d53a      	bpl.n	800234a <__aeabi_dmul+0x51a>
 80022d4:	2301      	movs	r3, #1
 80022d6:	2400      	movs	r4, #0
 80022d8:	2500      	movs	r5, #0
 80022da:	e61b      	b.n	8001f14 <__aeabi_dmul+0xe4>
 80022dc:	f000 fce0 	bl	8002ca0 <__clzsi2>
 80022e0:	0001      	movs	r1, r0
 80022e2:	0003      	movs	r3, r0
 80022e4:	3115      	adds	r1, #21
 80022e6:	3320      	adds	r3, #32
 80022e8:	291c      	cmp	r1, #28
 80022ea:	dd8f      	ble.n	800220c <__aeabi_dmul+0x3dc>
 80022ec:	3808      	subs	r0, #8
 80022ee:	2200      	movs	r2, #0
 80022f0:	4084      	lsls	r4, r0
 80022f2:	4692      	mov	sl, r2
 80022f4:	46a3      	mov	fp, r4
 80022f6:	e796      	b.n	8002226 <__aeabi_dmul+0x3f6>
 80022f8:	f000 fcd2 	bl	8002ca0 <__clzsi2>
 80022fc:	0001      	movs	r1, r0
 80022fe:	0003      	movs	r3, r0
 8002300:	3115      	adds	r1, #21
 8002302:	3320      	adds	r3, #32
 8002304:	291c      	cmp	r1, #28
 8002306:	dc00      	bgt.n	800230a <__aeabi_dmul+0x4da>
 8002308:	e758      	b.n	80021bc <__aeabi_dmul+0x38c>
 800230a:	0002      	movs	r2, r0
 800230c:	464c      	mov	r4, r9
 800230e:	3a08      	subs	r2, #8
 8002310:	2000      	movs	r0, #0
 8002312:	4094      	lsls	r4, r2
 8002314:	e75d      	b.n	80021d2 <__aeabi_dmul+0x3a2>
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	e711      	b.n	8002140 <__aeabi_dmul+0x310>
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <__aeabi_dmul+0x57c>)
 800231e:	0026      	movs	r6, r4
 8002320:	469c      	mov	ip, r3
 8002322:	0003      	movs	r3, r0
 8002324:	9d02      	ldr	r5, [sp, #8]
 8002326:	40cb      	lsrs	r3, r1
 8002328:	4465      	add	r5, ip
 800232a:	40ae      	lsls	r6, r5
 800232c:	431e      	orrs	r6, r3
 800232e:	0003      	movs	r3, r0
 8002330:	40ab      	lsls	r3, r5
 8002332:	1e58      	subs	r0, r3, #1
 8002334:	4183      	sbcs	r3, r0
 8002336:	0030      	movs	r0, r6
 8002338:	4318      	orrs	r0, r3
 800233a:	40cc      	lsrs	r4, r1
 800233c:	0743      	lsls	r3, r0, #29
 800233e:	d0c7      	beq.n	80022d0 <__aeabi_dmul+0x4a0>
 8002340:	230f      	movs	r3, #15
 8002342:	4003      	ands	r3, r0
 8002344:	2b04      	cmp	r3, #4
 8002346:	d1bd      	bne.n	80022c4 <__aeabi_dmul+0x494>
 8002348:	e7c2      	b.n	80022d0 <__aeabi_dmul+0x4a0>
 800234a:	0765      	lsls	r5, r4, #29
 800234c:	0264      	lsls	r4, r4, #9
 800234e:	0b24      	lsrs	r4, r4, #12
 8002350:	08c0      	lsrs	r0, r0, #3
 8002352:	2300      	movs	r3, #0
 8002354:	4305      	orrs	r5, r0
 8002356:	e5dd      	b.n	8001f14 <__aeabi_dmul+0xe4>
 8002358:	2500      	movs	r5, #0
 800235a:	2302      	movs	r3, #2
 800235c:	2e0f      	cmp	r6, #15
 800235e:	d10c      	bne.n	800237a <__aeabi_dmul+0x54a>
 8002360:	2480      	movs	r4, #128	; 0x80
 8002362:	465b      	mov	r3, fp
 8002364:	0324      	lsls	r4, r4, #12
 8002366:	4223      	tst	r3, r4
 8002368:	d00e      	beq.n	8002388 <__aeabi_dmul+0x558>
 800236a:	4221      	tst	r1, r4
 800236c:	d10c      	bne.n	8002388 <__aeabi_dmul+0x558>
 800236e:	430c      	orrs	r4, r1
 8002370:	0324      	lsls	r4, r4, #12
 8002372:	003a      	movs	r2, r7
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <__aeabi_dmul+0x580>)
 8002376:	0b24      	lsrs	r4, r4, #12
 8002378:	e5cc      	b.n	8001f14 <__aeabi_dmul+0xe4>
 800237a:	2e0b      	cmp	r6, #11
 800237c:	d000      	beq.n	8002380 <__aeabi_dmul+0x550>
 800237e:	e5a2      	b.n	8001ec6 <__aeabi_dmul+0x96>
 8002380:	468b      	mov	fp, r1
 8002382:	46aa      	mov	sl, r5
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	e5f7      	b.n	8001f78 <__aeabi_dmul+0x148>
 8002388:	2480      	movs	r4, #128	; 0x80
 800238a:	465b      	mov	r3, fp
 800238c:	0324      	lsls	r4, r4, #12
 800238e:	431c      	orrs	r4, r3
 8002390:	0324      	lsls	r4, r4, #12
 8002392:	4642      	mov	r2, r8
 8002394:	4655      	mov	r5, sl
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <__aeabi_dmul+0x580>)
 8002398:	0b24      	lsrs	r4, r4, #12
 800239a:	e5bb      	b.n	8001f14 <__aeabi_dmul+0xe4>
 800239c:	464d      	mov	r5, r9
 800239e:	0021      	movs	r1, r4
 80023a0:	2303      	movs	r3, #3
 80023a2:	e7db      	b.n	800235c <__aeabi_dmul+0x52c>
 80023a4:	fffffc0d 	.word	0xfffffc0d
 80023a8:	0000043e 	.word	0x0000043e
 80023ac:	0000041e 	.word	0x0000041e
 80023b0:	000007ff 	.word	0x000007ff

080023b4 <__aeabi_dsub>:
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	4657      	mov	r7, sl
 80023b8:	464e      	mov	r6, r9
 80023ba:	4645      	mov	r5, r8
 80023bc:	46de      	mov	lr, fp
 80023be:	b5e0      	push	{r5, r6, r7, lr}
 80023c0:	000d      	movs	r5, r1
 80023c2:	0004      	movs	r4, r0
 80023c4:	0019      	movs	r1, r3
 80023c6:	0010      	movs	r0, r2
 80023c8:	032b      	lsls	r3, r5, #12
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	0f62      	lsrs	r2, r4, #29
 80023ce:	431a      	orrs	r2, r3
 80023d0:	00e3      	lsls	r3, r4, #3
 80023d2:	030c      	lsls	r4, r1, #12
 80023d4:	0a64      	lsrs	r4, r4, #9
 80023d6:	0f47      	lsrs	r7, r0, #29
 80023d8:	4327      	orrs	r7, r4
 80023da:	4cd0      	ldr	r4, [pc, #832]	; (800271c <__aeabi_dsub+0x368>)
 80023dc:	006e      	lsls	r6, r5, #1
 80023de:	4691      	mov	r9, r2
 80023e0:	b083      	sub	sp, #12
 80023e2:	004a      	lsls	r2, r1, #1
 80023e4:	00c0      	lsls	r0, r0, #3
 80023e6:	4698      	mov	r8, r3
 80023e8:	46a2      	mov	sl, r4
 80023ea:	0d76      	lsrs	r6, r6, #21
 80023ec:	0fed      	lsrs	r5, r5, #31
 80023ee:	0d52      	lsrs	r2, r2, #21
 80023f0:	0fc9      	lsrs	r1, r1, #31
 80023f2:	9001      	str	r0, [sp, #4]
 80023f4:	42a2      	cmp	r2, r4
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x46>
 80023f8:	e0b9      	b.n	800256e <__aeabi_dsub+0x1ba>
 80023fa:	2401      	movs	r4, #1
 80023fc:	4061      	eors	r1, r4
 80023fe:	468b      	mov	fp, r1
 8002400:	428d      	cmp	r5, r1
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x52>
 8002404:	e08d      	b.n	8002522 <__aeabi_dsub+0x16e>
 8002406:	1ab4      	subs	r4, r6, r2
 8002408:	46a4      	mov	ip, r4
 800240a:	2c00      	cmp	r4, #0
 800240c:	dc00      	bgt.n	8002410 <__aeabi_dsub+0x5c>
 800240e:	e0b7      	b.n	8002580 <__aeabi_dsub+0x1cc>
 8002410:	2a00      	cmp	r2, #0
 8002412:	d100      	bne.n	8002416 <__aeabi_dsub+0x62>
 8002414:	e0cb      	b.n	80025ae <__aeabi_dsub+0x1fa>
 8002416:	4ac1      	ldr	r2, [pc, #772]	; (800271c <__aeabi_dsub+0x368>)
 8002418:	4296      	cmp	r6, r2
 800241a:	d100      	bne.n	800241e <__aeabi_dsub+0x6a>
 800241c:	e186      	b.n	800272c <__aeabi_dsub+0x378>
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	0412      	lsls	r2, r2, #16
 8002422:	4317      	orrs	r7, r2
 8002424:	4662      	mov	r2, ip
 8002426:	2a38      	cmp	r2, #56	; 0x38
 8002428:	dd00      	ble.n	800242c <__aeabi_dsub+0x78>
 800242a:	e1a4      	b.n	8002776 <__aeabi_dsub+0x3c2>
 800242c:	2a1f      	cmp	r2, #31
 800242e:	dd00      	ble.n	8002432 <__aeabi_dsub+0x7e>
 8002430:	e21d      	b.n	800286e <__aeabi_dsub+0x4ba>
 8002432:	4661      	mov	r1, ip
 8002434:	2220      	movs	r2, #32
 8002436:	003c      	movs	r4, r7
 8002438:	1a52      	subs	r2, r2, r1
 800243a:	0001      	movs	r1, r0
 800243c:	4090      	lsls	r0, r2
 800243e:	4094      	lsls	r4, r2
 8002440:	1e42      	subs	r2, r0, #1
 8002442:	4190      	sbcs	r0, r2
 8002444:	4662      	mov	r2, ip
 8002446:	46a0      	mov	r8, r4
 8002448:	4664      	mov	r4, ip
 800244a:	40d7      	lsrs	r7, r2
 800244c:	464a      	mov	r2, r9
 800244e:	40e1      	lsrs	r1, r4
 8002450:	4644      	mov	r4, r8
 8002452:	1bd2      	subs	r2, r2, r7
 8002454:	4691      	mov	r9, r2
 8002456:	430c      	orrs	r4, r1
 8002458:	4304      	orrs	r4, r0
 800245a:	1b1c      	subs	r4, r3, r4
 800245c:	42a3      	cmp	r3, r4
 800245e:	4192      	sbcs	r2, r2
 8002460:	464b      	mov	r3, r9
 8002462:	4252      	negs	r2, r2
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	469a      	mov	sl, r3
 8002468:	4653      	mov	r3, sl
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	d400      	bmi.n	8002470 <__aeabi_dsub+0xbc>
 800246e:	e12b      	b.n	80026c8 <__aeabi_dsub+0x314>
 8002470:	4653      	mov	r3, sl
 8002472:	025a      	lsls	r2, r3, #9
 8002474:	0a53      	lsrs	r3, r2, #9
 8002476:	469a      	mov	sl, r3
 8002478:	4653      	mov	r3, sl
 800247a:	2b00      	cmp	r3, #0
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0xcc>
 800247e:	e166      	b.n	800274e <__aeabi_dsub+0x39a>
 8002480:	4650      	mov	r0, sl
 8002482:	f000 fc0d 	bl	8002ca0 <__clzsi2>
 8002486:	0003      	movs	r3, r0
 8002488:	3b08      	subs	r3, #8
 800248a:	2220      	movs	r2, #32
 800248c:	0020      	movs	r0, r4
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	4651      	mov	r1, sl
 8002492:	40d0      	lsrs	r0, r2
 8002494:	4099      	lsls	r1, r3
 8002496:	0002      	movs	r2, r0
 8002498:	409c      	lsls	r4, r3
 800249a:	430a      	orrs	r2, r1
 800249c:	429e      	cmp	r6, r3
 800249e:	dd00      	ble.n	80024a2 <__aeabi_dsub+0xee>
 80024a0:	e164      	b.n	800276c <__aeabi_dsub+0x3b8>
 80024a2:	1b9b      	subs	r3, r3, r6
 80024a4:	1c59      	adds	r1, r3, #1
 80024a6:	291f      	cmp	r1, #31
 80024a8:	dd00      	ble.n	80024ac <__aeabi_dsub+0xf8>
 80024aa:	e0fe      	b.n	80026aa <__aeabi_dsub+0x2f6>
 80024ac:	2320      	movs	r3, #32
 80024ae:	0010      	movs	r0, r2
 80024b0:	0026      	movs	r6, r4
 80024b2:	1a5b      	subs	r3, r3, r1
 80024b4:	409c      	lsls	r4, r3
 80024b6:	4098      	lsls	r0, r3
 80024b8:	40ce      	lsrs	r6, r1
 80024ba:	40ca      	lsrs	r2, r1
 80024bc:	1e63      	subs	r3, r4, #1
 80024be:	419c      	sbcs	r4, r3
 80024c0:	4330      	orrs	r0, r6
 80024c2:	4692      	mov	sl, r2
 80024c4:	2600      	movs	r6, #0
 80024c6:	4304      	orrs	r4, r0
 80024c8:	0763      	lsls	r3, r4, #29
 80024ca:	d009      	beq.n	80024e0 <__aeabi_dsub+0x12c>
 80024cc:	230f      	movs	r3, #15
 80024ce:	4023      	ands	r3, r4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d005      	beq.n	80024e0 <__aeabi_dsub+0x12c>
 80024d4:	1d23      	adds	r3, r4, #4
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	41a4      	sbcs	r4, r4
 80024da:	4264      	negs	r4, r4
 80024dc:	44a2      	add	sl, r4
 80024de:	001c      	movs	r4, r3
 80024e0:	4653      	mov	r3, sl
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	d400      	bmi.n	80024e8 <__aeabi_dsub+0x134>
 80024e6:	e0f2      	b.n	80026ce <__aeabi_dsub+0x31a>
 80024e8:	4b8c      	ldr	r3, [pc, #560]	; (800271c <__aeabi_dsub+0x368>)
 80024ea:	3601      	adds	r6, #1
 80024ec:	429e      	cmp	r6, r3
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x13e>
 80024f0:	e10f      	b.n	8002712 <__aeabi_dsub+0x35e>
 80024f2:	4653      	mov	r3, sl
 80024f4:	498a      	ldr	r1, [pc, #552]	; (8002720 <__aeabi_dsub+0x36c>)
 80024f6:	08e4      	lsrs	r4, r4, #3
 80024f8:	400b      	ands	r3, r1
 80024fa:	0019      	movs	r1, r3
 80024fc:	075b      	lsls	r3, r3, #29
 80024fe:	4323      	orrs	r3, r4
 8002500:	0572      	lsls	r2, r6, #21
 8002502:	024c      	lsls	r4, r1, #9
 8002504:	0b24      	lsrs	r4, r4, #12
 8002506:	0d52      	lsrs	r2, r2, #21
 8002508:	0512      	lsls	r2, r2, #20
 800250a:	4322      	orrs	r2, r4
 800250c:	07ed      	lsls	r5, r5, #31
 800250e:	432a      	orrs	r2, r5
 8002510:	0018      	movs	r0, r3
 8002512:	0011      	movs	r1, r2
 8002514:	b003      	add	sp, #12
 8002516:	bcf0      	pop	{r4, r5, r6, r7}
 8002518:	46bb      	mov	fp, r7
 800251a:	46b2      	mov	sl, r6
 800251c:	46a9      	mov	r9, r5
 800251e:	46a0      	mov	r8, r4
 8002520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002522:	1ab4      	subs	r4, r6, r2
 8002524:	46a4      	mov	ip, r4
 8002526:	2c00      	cmp	r4, #0
 8002528:	dd59      	ble.n	80025de <__aeabi_dsub+0x22a>
 800252a:	2a00      	cmp	r2, #0
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x17c>
 800252e:	e0b0      	b.n	8002692 <__aeabi_dsub+0x2de>
 8002530:	4556      	cmp	r6, sl
 8002532:	d100      	bne.n	8002536 <__aeabi_dsub+0x182>
 8002534:	e0fa      	b.n	800272c <__aeabi_dsub+0x378>
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	0412      	lsls	r2, r2, #16
 800253a:	4317      	orrs	r7, r2
 800253c:	4662      	mov	r2, ip
 800253e:	2a38      	cmp	r2, #56	; 0x38
 8002540:	dd00      	ble.n	8002544 <__aeabi_dsub+0x190>
 8002542:	e0d4      	b.n	80026ee <__aeabi_dsub+0x33a>
 8002544:	2a1f      	cmp	r2, #31
 8002546:	dc00      	bgt.n	800254a <__aeabi_dsub+0x196>
 8002548:	e1c0      	b.n	80028cc <__aeabi_dsub+0x518>
 800254a:	0039      	movs	r1, r7
 800254c:	3a20      	subs	r2, #32
 800254e:	40d1      	lsrs	r1, r2
 8002550:	4662      	mov	r2, ip
 8002552:	2a20      	cmp	r2, #32
 8002554:	d006      	beq.n	8002564 <__aeabi_dsub+0x1b0>
 8002556:	4664      	mov	r4, ip
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	1b12      	subs	r2, r2, r4
 800255c:	003c      	movs	r4, r7
 800255e:	4094      	lsls	r4, r2
 8002560:	4304      	orrs	r4, r0
 8002562:	9401      	str	r4, [sp, #4]
 8002564:	9c01      	ldr	r4, [sp, #4]
 8002566:	1e62      	subs	r2, r4, #1
 8002568:	4194      	sbcs	r4, r2
 800256a:	430c      	orrs	r4, r1
 800256c:	e0c3      	b.n	80026f6 <__aeabi_dsub+0x342>
 800256e:	003c      	movs	r4, r7
 8002570:	4304      	orrs	r4, r0
 8002572:	d02b      	beq.n	80025cc <__aeabi_dsub+0x218>
 8002574:	468b      	mov	fp, r1
 8002576:	428d      	cmp	r5, r1
 8002578:	d02e      	beq.n	80025d8 <__aeabi_dsub+0x224>
 800257a:	4c6a      	ldr	r4, [pc, #424]	; (8002724 <__aeabi_dsub+0x370>)
 800257c:	46a4      	mov	ip, r4
 800257e:	44b4      	add	ip, r6
 8002580:	4664      	mov	r4, ip
 8002582:	2c00      	cmp	r4, #0
 8002584:	d05f      	beq.n	8002646 <__aeabi_dsub+0x292>
 8002586:	1b94      	subs	r4, r2, r6
 8002588:	46a4      	mov	ip, r4
 800258a:	2e00      	cmp	r6, #0
 800258c:	d000      	beq.n	8002590 <__aeabi_dsub+0x1dc>
 800258e:	e120      	b.n	80027d2 <__aeabi_dsub+0x41e>
 8002590:	464c      	mov	r4, r9
 8002592:	431c      	orrs	r4, r3
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x1e4>
 8002596:	e1c7      	b.n	8002928 <__aeabi_dsub+0x574>
 8002598:	4661      	mov	r1, ip
 800259a:	1e4c      	subs	r4, r1, #1
 800259c:	2901      	cmp	r1, #1
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x1ee>
 80025a0:	e223      	b.n	80029ea <__aeabi_dsub+0x636>
 80025a2:	4d5e      	ldr	r5, [pc, #376]	; (800271c <__aeabi_dsub+0x368>)
 80025a4:	45ac      	cmp	ip, r5
 80025a6:	d100      	bne.n	80025aa <__aeabi_dsub+0x1f6>
 80025a8:	e1d8      	b.n	800295c <__aeabi_dsub+0x5a8>
 80025aa:	46a4      	mov	ip, r4
 80025ac:	e11a      	b.n	80027e4 <__aeabi_dsub+0x430>
 80025ae:	003a      	movs	r2, r7
 80025b0:	4302      	orrs	r2, r0
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x202>
 80025b4:	e0e4      	b.n	8002780 <__aeabi_dsub+0x3cc>
 80025b6:	0022      	movs	r2, r4
 80025b8:	3a01      	subs	r2, #1
 80025ba:	2c01      	cmp	r4, #1
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x20c>
 80025be:	e1c3      	b.n	8002948 <__aeabi_dsub+0x594>
 80025c0:	4956      	ldr	r1, [pc, #344]	; (800271c <__aeabi_dsub+0x368>)
 80025c2:	428c      	cmp	r4, r1
 80025c4:	d100      	bne.n	80025c8 <__aeabi_dsub+0x214>
 80025c6:	e0b1      	b.n	800272c <__aeabi_dsub+0x378>
 80025c8:	4694      	mov	ip, r2
 80025ca:	e72b      	b.n	8002424 <__aeabi_dsub+0x70>
 80025cc:	2401      	movs	r4, #1
 80025ce:	4061      	eors	r1, r4
 80025d0:	468b      	mov	fp, r1
 80025d2:	428d      	cmp	r5, r1
 80025d4:	d000      	beq.n	80025d8 <__aeabi_dsub+0x224>
 80025d6:	e716      	b.n	8002406 <__aeabi_dsub+0x52>
 80025d8:	4952      	ldr	r1, [pc, #328]	; (8002724 <__aeabi_dsub+0x370>)
 80025da:	468c      	mov	ip, r1
 80025dc:	44b4      	add	ip, r6
 80025de:	4664      	mov	r4, ip
 80025e0:	2c00      	cmp	r4, #0
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x232>
 80025e4:	e0d3      	b.n	800278e <__aeabi_dsub+0x3da>
 80025e6:	1b91      	subs	r1, r2, r6
 80025e8:	468c      	mov	ip, r1
 80025ea:	2e00      	cmp	r6, #0
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x23c>
 80025ee:	e15e      	b.n	80028ae <__aeabi_dsub+0x4fa>
 80025f0:	494a      	ldr	r1, [pc, #296]	; (800271c <__aeabi_dsub+0x368>)
 80025f2:	428a      	cmp	r2, r1
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x244>
 80025f6:	e1be      	b.n	8002976 <__aeabi_dsub+0x5c2>
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	464c      	mov	r4, r9
 80025fc:	0409      	lsls	r1, r1, #16
 80025fe:	430c      	orrs	r4, r1
 8002600:	46a1      	mov	r9, r4
 8002602:	4661      	mov	r1, ip
 8002604:	2938      	cmp	r1, #56	; 0x38
 8002606:	dd00      	ble.n	800260a <__aeabi_dsub+0x256>
 8002608:	e1ba      	b.n	8002980 <__aeabi_dsub+0x5cc>
 800260a:	291f      	cmp	r1, #31
 800260c:	dd00      	ble.n	8002610 <__aeabi_dsub+0x25c>
 800260e:	e227      	b.n	8002a60 <__aeabi_dsub+0x6ac>
 8002610:	2420      	movs	r4, #32
 8002612:	1a64      	subs	r4, r4, r1
 8002614:	4649      	mov	r1, r9
 8002616:	40a1      	lsls	r1, r4
 8002618:	001e      	movs	r6, r3
 800261a:	4688      	mov	r8, r1
 800261c:	4661      	mov	r1, ip
 800261e:	40a3      	lsls	r3, r4
 8002620:	40ce      	lsrs	r6, r1
 8002622:	4641      	mov	r1, r8
 8002624:	1e5c      	subs	r4, r3, #1
 8002626:	41a3      	sbcs	r3, r4
 8002628:	4331      	orrs	r1, r6
 800262a:	4319      	orrs	r1, r3
 800262c:	000c      	movs	r4, r1
 800262e:	4663      	mov	r3, ip
 8002630:	4649      	mov	r1, r9
 8002632:	40d9      	lsrs	r1, r3
 8002634:	187f      	adds	r7, r7, r1
 8002636:	1824      	adds	r4, r4, r0
 8002638:	4284      	cmp	r4, r0
 800263a:	419b      	sbcs	r3, r3
 800263c:	425b      	negs	r3, r3
 800263e:	469a      	mov	sl, r3
 8002640:	0016      	movs	r6, r2
 8002642:	44ba      	add	sl, r7
 8002644:	e05d      	b.n	8002702 <__aeabi_dsub+0x34e>
 8002646:	4c38      	ldr	r4, [pc, #224]	; (8002728 <__aeabi_dsub+0x374>)
 8002648:	1c72      	adds	r2, r6, #1
 800264a:	4222      	tst	r2, r4
 800264c:	d000      	beq.n	8002650 <__aeabi_dsub+0x29c>
 800264e:	e0df      	b.n	8002810 <__aeabi_dsub+0x45c>
 8002650:	464a      	mov	r2, r9
 8002652:	431a      	orrs	r2, r3
 8002654:	2e00      	cmp	r6, #0
 8002656:	d000      	beq.n	800265a <__aeabi_dsub+0x2a6>
 8002658:	e15c      	b.n	8002914 <__aeabi_dsub+0x560>
 800265a:	2a00      	cmp	r2, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x2ac>
 800265e:	e1cf      	b.n	8002a00 <__aeabi_dsub+0x64c>
 8002660:	003a      	movs	r2, r7
 8002662:	4302      	orrs	r2, r0
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x2b4>
 8002666:	e17f      	b.n	8002968 <__aeabi_dsub+0x5b4>
 8002668:	1a1c      	subs	r4, r3, r0
 800266a:	464a      	mov	r2, r9
 800266c:	42a3      	cmp	r3, r4
 800266e:	4189      	sbcs	r1, r1
 8002670:	1bd2      	subs	r2, r2, r7
 8002672:	4249      	negs	r1, r1
 8002674:	1a52      	subs	r2, r2, r1
 8002676:	4692      	mov	sl, r2
 8002678:	0212      	lsls	r2, r2, #8
 800267a:	d400      	bmi.n	800267e <__aeabi_dsub+0x2ca>
 800267c:	e20a      	b.n	8002a94 <__aeabi_dsub+0x6e0>
 800267e:	1ac4      	subs	r4, r0, r3
 8002680:	42a0      	cmp	r0, r4
 8002682:	4180      	sbcs	r0, r0
 8002684:	464b      	mov	r3, r9
 8002686:	4240      	negs	r0, r0
 8002688:	1aff      	subs	r7, r7, r3
 800268a:	1a3b      	subs	r3, r7, r0
 800268c:	469a      	mov	sl, r3
 800268e:	465d      	mov	r5, fp
 8002690:	e71a      	b.n	80024c8 <__aeabi_dsub+0x114>
 8002692:	003a      	movs	r2, r7
 8002694:	4302      	orrs	r2, r0
 8002696:	d073      	beq.n	8002780 <__aeabi_dsub+0x3cc>
 8002698:	0022      	movs	r2, r4
 800269a:	3a01      	subs	r2, #1
 800269c:	2c01      	cmp	r4, #1
 800269e:	d100      	bne.n	80026a2 <__aeabi_dsub+0x2ee>
 80026a0:	e0cb      	b.n	800283a <__aeabi_dsub+0x486>
 80026a2:	4554      	cmp	r4, sl
 80026a4:	d042      	beq.n	800272c <__aeabi_dsub+0x378>
 80026a6:	4694      	mov	ip, r2
 80026a8:	e748      	b.n	800253c <__aeabi_dsub+0x188>
 80026aa:	0010      	movs	r0, r2
 80026ac:	3b1f      	subs	r3, #31
 80026ae:	40d8      	lsrs	r0, r3
 80026b0:	2920      	cmp	r1, #32
 80026b2:	d003      	beq.n	80026bc <__aeabi_dsub+0x308>
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	1a5b      	subs	r3, r3, r1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	4314      	orrs	r4, r2
 80026bc:	1e63      	subs	r3, r4, #1
 80026be:	419c      	sbcs	r4, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	2600      	movs	r6, #0
 80026c4:	469a      	mov	sl, r3
 80026c6:	4304      	orrs	r4, r0
 80026c8:	0763      	lsls	r3, r4, #29
 80026ca:	d000      	beq.n	80026ce <__aeabi_dsub+0x31a>
 80026cc:	e6fe      	b.n	80024cc <__aeabi_dsub+0x118>
 80026ce:	4652      	mov	r2, sl
 80026d0:	08e3      	lsrs	r3, r4, #3
 80026d2:	0752      	lsls	r2, r2, #29
 80026d4:	4313      	orrs	r3, r2
 80026d6:	4652      	mov	r2, sl
 80026d8:	46b4      	mov	ip, r6
 80026da:	08d2      	lsrs	r2, r2, #3
 80026dc:	490f      	ldr	r1, [pc, #60]	; (800271c <__aeabi_dsub+0x368>)
 80026de:	458c      	cmp	ip, r1
 80026e0:	d02a      	beq.n	8002738 <__aeabi_dsub+0x384>
 80026e2:	0312      	lsls	r2, r2, #12
 80026e4:	0b14      	lsrs	r4, r2, #12
 80026e6:	4662      	mov	r2, ip
 80026e8:	0552      	lsls	r2, r2, #21
 80026ea:	0d52      	lsrs	r2, r2, #21
 80026ec:	e70c      	b.n	8002508 <__aeabi_dsub+0x154>
 80026ee:	003c      	movs	r4, r7
 80026f0:	4304      	orrs	r4, r0
 80026f2:	1e62      	subs	r2, r4, #1
 80026f4:	4194      	sbcs	r4, r2
 80026f6:	18e4      	adds	r4, r4, r3
 80026f8:	429c      	cmp	r4, r3
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	4252      	negs	r2, r2
 80026fe:	444a      	add	r2, r9
 8002700:	4692      	mov	sl, r2
 8002702:	4653      	mov	r3, sl
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	d5df      	bpl.n	80026c8 <__aeabi_dsub+0x314>
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__aeabi_dsub+0x368>)
 800270a:	3601      	adds	r6, #1
 800270c:	429e      	cmp	r6, r3
 800270e:	d000      	beq.n	8002712 <__aeabi_dsub+0x35e>
 8002710:	e0a0      	b.n	8002854 <__aeabi_dsub+0x4a0>
 8002712:	0032      	movs	r2, r6
 8002714:	2400      	movs	r4, #0
 8002716:	2300      	movs	r3, #0
 8002718:	e6f6      	b.n	8002508 <__aeabi_dsub+0x154>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	000007ff 	.word	0x000007ff
 8002720:	ff7fffff 	.word	0xff7fffff
 8002724:	fffff801 	.word	0xfffff801
 8002728:	000007fe 	.word	0x000007fe
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	464a      	mov	r2, r9
 8002730:	0752      	lsls	r2, r2, #29
 8002732:	4313      	orrs	r3, r2
 8002734:	464a      	mov	r2, r9
 8002736:	08d2      	lsrs	r2, r2, #3
 8002738:	0019      	movs	r1, r3
 800273a:	4311      	orrs	r1, r2
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x38c>
 800273e:	e1b5      	b.n	8002aac <__aeabi_dsub+0x6f8>
 8002740:	2480      	movs	r4, #128	; 0x80
 8002742:	0324      	lsls	r4, r4, #12
 8002744:	4314      	orrs	r4, r2
 8002746:	0324      	lsls	r4, r4, #12
 8002748:	4ad5      	ldr	r2, [pc, #852]	; (8002aa0 <__aeabi_dsub+0x6ec>)
 800274a:	0b24      	lsrs	r4, r4, #12
 800274c:	e6dc      	b.n	8002508 <__aeabi_dsub+0x154>
 800274e:	0020      	movs	r0, r4
 8002750:	f000 faa6 	bl	8002ca0 <__clzsi2>
 8002754:	0003      	movs	r3, r0
 8002756:	3318      	adds	r3, #24
 8002758:	2b1f      	cmp	r3, #31
 800275a:	dc00      	bgt.n	800275e <__aeabi_dsub+0x3aa>
 800275c:	e695      	b.n	800248a <__aeabi_dsub+0xd6>
 800275e:	0022      	movs	r2, r4
 8002760:	3808      	subs	r0, #8
 8002762:	4082      	lsls	r2, r0
 8002764:	2400      	movs	r4, #0
 8002766:	429e      	cmp	r6, r3
 8002768:	dc00      	bgt.n	800276c <__aeabi_dsub+0x3b8>
 800276a:	e69a      	b.n	80024a2 <__aeabi_dsub+0xee>
 800276c:	1af6      	subs	r6, r6, r3
 800276e:	4bcd      	ldr	r3, [pc, #820]	; (8002aa4 <__aeabi_dsub+0x6f0>)
 8002770:	401a      	ands	r2, r3
 8002772:	4692      	mov	sl, r2
 8002774:	e6a8      	b.n	80024c8 <__aeabi_dsub+0x114>
 8002776:	003c      	movs	r4, r7
 8002778:	4304      	orrs	r4, r0
 800277a:	1e62      	subs	r2, r4, #1
 800277c:	4194      	sbcs	r4, r2
 800277e:	e66c      	b.n	800245a <__aeabi_dsub+0xa6>
 8002780:	464a      	mov	r2, r9
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	0752      	lsls	r2, r2, #29
 8002786:	4313      	orrs	r3, r2
 8002788:	464a      	mov	r2, r9
 800278a:	08d2      	lsrs	r2, r2, #3
 800278c:	e7a6      	b.n	80026dc <__aeabi_dsub+0x328>
 800278e:	4cc6      	ldr	r4, [pc, #792]	; (8002aa8 <__aeabi_dsub+0x6f4>)
 8002790:	1c72      	adds	r2, r6, #1
 8002792:	4222      	tst	r2, r4
 8002794:	d000      	beq.n	8002798 <__aeabi_dsub+0x3e4>
 8002796:	e0ac      	b.n	80028f2 <__aeabi_dsub+0x53e>
 8002798:	464a      	mov	r2, r9
 800279a:	431a      	orrs	r2, r3
 800279c:	2e00      	cmp	r6, #0
 800279e:	d000      	beq.n	80027a2 <__aeabi_dsub+0x3ee>
 80027a0:	e105      	b.n	80029ae <__aeabi_dsub+0x5fa>
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x3f4>
 80027a6:	e156      	b.n	8002a56 <__aeabi_dsub+0x6a2>
 80027a8:	003a      	movs	r2, r7
 80027aa:	4302      	orrs	r2, r0
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x3fc>
 80027ae:	e0db      	b.n	8002968 <__aeabi_dsub+0x5b4>
 80027b0:	181c      	adds	r4, r3, r0
 80027b2:	429c      	cmp	r4, r3
 80027b4:	419b      	sbcs	r3, r3
 80027b6:	444f      	add	r7, r9
 80027b8:	46ba      	mov	sl, r7
 80027ba:	425b      	negs	r3, r3
 80027bc:	449a      	add	sl, r3
 80027be:	4653      	mov	r3, sl
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	d400      	bmi.n	80027c6 <__aeabi_dsub+0x412>
 80027c4:	e780      	b.n	80026c8 <__aeabi_dsub+0x314>
 80027c6:	4652      	mov	r2, sl
 80027c8:	4bb6      	ldr	r3, [pc, #728]	; (8002aa4 <__aeabi_dsub+0x6f0>)
 80027ca:	2601      	movs	r6, #1
 80027cc:	401a      	ands	r2, r3
 80027ce:	4692      	mov	sl, r2
 80027d0:	e77a      	b.n	80026c8 <__aeabi_dsub+0x314>
 80027d2:	4cb3      	ldr	r4, [pc, #716]	; (8002aa0 <__aeabi_dsub+0x6ec>)
 80027d4:	42a2      	cmp	r2, r4
 80027d6:	d100      	bne.n	80027da <__aeabi_dsub+0x426>
 80027d8:	e0c0      	b.n	800295c <__aeabi_dsub+0x5a8>
 80027da:	2480      	movs	r4, #128	; 0x80
 80027dc:	464d      	mov	r5, r9
 80027de:	0424      	lsls	r4, r4, #16
 80027e0:	4325      	orrs	r5, r4
 80027e2:	46a9      	mov	r9, r5
 80027e4:	4664      	mov	r4, ip
 80027e6:	2c38      	cmp	r4, #56	; 0x38
 80027e8:	dc53      	bgt.n	8002892 <__aeabi_dsub+0x4de>
 80027ea:	4661      	mov	r1, ip
 80027ec:	2c1f      	cmp	r4, #31
 80027ee:	dd00      	ble.n	80027f2 <__aeabi_dsub+0x43e>
 80027f0:	e0cd      	b.n	800298e <__aeabi_dsub+0x5da>
 80027f2:	2520      	movs	r5, #32
 80027f4:	001e      	movs	r6, r3
 80027f6:	1b2d      	subs	r5, r5, r4
 80027f8:	464c      	mov	r4, r9
 80027fa:	40ab      	lsls	r3, r5
 80027fc:	40ac      	lsls	r4, r5
 80027fe:	40ce      	lsrs	r6, r1
 8002800:	1e5d      	subs	r5, r3, #1
 8002802:	41ab      	sbcs	r3, r5
 8002804:	4334      	orrs	r4, r6
 8002806:	4323      	orrs	r3, r4
 8002808:	464c      	mov	r4, r9
 800280a:	40cc      	lsrs	r4, r1
 800280c:	1b3f      	subs	r7, r7, r4
 800280e:	e045      	b.n	800289c <__aeabi_dsub+0x4e8>
 8002810:	464a      	mov	r2, r9
 8002812:	1a1c      	subs	r4, r3, r0
 8002814:	1bd1      	subs	r1, r2, r7
 8002816:	42a3      	cmp	r3, r4
 8002818:	4192      	sbcs	r2, r2
 800281a:	4252      	negs	r2, r2
 800281c:	4692      	mov	sl, r2
 800281e:	000a      	movs	r2, r1
 8002820:	4651      	mov	r1, sl
 8002822:	1a52      	subs	r2, r2, r1
 8002824:	4692      	mov	sl, r2
 8002826:	0212      	lsls	r2, r2, #8
 8002828:	d500      	bpl.n	800282c <__aeabi_dsub+0x478>
 800282a:	e083      	b.n	8002934 <__aeabi_dsub+0x580>
 800282c:	4653      	mov	r3, sl
 800282e:	4323      	orrs	r3, r4
 8002830:	d000      	beq.n	8002834 <__aeabi_dsub+0x480>
 8002832:	e621      	b.n	8002478 <__aeabi_dsub+0xc4>
 8002834:	2200      	movs	r2, #0
 8002836:	2500      	movs	r5, #0
 8002838:	e753      	b.n	80026e2 <__aeabi_dsub+0x32e>
 800283a:	181c      	adds	r4, r3, r0
 800283c:	429c      	cmp	r4, r3
 800283e:	419b      	sbcs	r3, r3
 8002840:	444f      	add	r7, r9
 8002842:	46ba      	mov	sl, r7
 8002844:	425b      	negs	r3, r3
 8002846:	449a      	add	sl, r3
 8002848:	4653      	mov	r3, sl
 800284a:	2601      	movs	r6, #1
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	d400      	bmi.n	8002852 <__aeabi_dsub+0x49e>
 8002850:	e73a      	b.n	80026c8 <__aeabi_dsub+0x314>
 8002852:	2602      	movs	r6, #2
 8002854:	4652      	mov	r2, sl
 8002856:	4b93      	ldr	r3, [pc, #588]	; (8002aa4 <__aeabi_dsub+0x6f0>)
 8002858:	2101      	movs	r1, #1
 800285a:	401a      	ands	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	4021      	ands	r1, r4
 8002860:	0862      	lsrs	r2, r4, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	07dc      	lsls	r4, r3, #31
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	469a      	mov	sl, r3
 800286a:	4314      	orrs	r4, r2
 800286c:	e62c      	b.n	80024c8 <__aeabi_dsub+0x114>
 800286e:	0039      	movs	r1, r7
 8002870:	3a20      	subs	r2, #32
 8002872:	40d1      	lsrs	r1, r2
 8002874:	4662      	mov	r2, ip
 8002876:	2a20      	cmp	r2, #32
 8002878:	d006      	beq.n	8002888 <__aeabi_dsub+0x4d4>
 800287a:	4664      	mov	r4, ip
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	1b12      	subs	r2, r2, r4
 8002880:	003c      	movs	r4, r7
 8002882:	4094      	lsls	r4, r2
 8002884:	4304      	orrs	r4, r0
 8002886:	9401      	str	r4, [sp, #4]
 8002888:	9c01      	ldr	r4, [sp, #4]
 800288a:	1e62      	subs	r2, r4, #1
 800288c:	4194      	sbcs	r4, r2
 800288e:	430c      	orrs	r4, r1
 8002890:	e5e3      	b.n	800245a <__aeabi_dsub+0xa6>
 8002892:	4649      	mov	r1, r9
 8002894:	4319      	orrs	r1, r3
 8002896:	000b      	movs	r3, r1
 8002898:	1e5c      	subs	r4, r3, #1
 800289a:	41a3      	sbcs	r3, r4
 800289c:	1ac4      	subs	r4, r0, r3
 800289e:	42a0      	cmp	r0, r4
 80028a0:	419b      	sbcs	r3, r3
 80028a2:	425b      	negs	r3, r3
 80028a4:	1afb      	subs	r3, r7, r3
 80028a6:	469a      	mov	sl, r3
 80028a8:	465d      	mov	r5, fp
 80028aa:	0016      	movs	r6, r2
 80028ac:	e5dc      	b.n	8002468 <__aeabi_dsub+0xb4>
 80028ae:	4649      	mov	r1, r9
 80028b0:	4319      	orrs	r1, r3
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x502>
 80028b4:	e0ae      	b.n	8002a14 <__aeabi_dsub+0x660>
 80028b6:	4661      	mov	r1, ip
 80028b8:	4664      	mov	r4, ip
 80028ba:	3901      	subs	r1, #1
 80028bc:	2c01      	cmp	r4, #1
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x50e>
 80028c0:	e0e0      	b.n	8002a84 <__aeabi_dsub+0x6d0>
 80028c2:	4c77      	ldr	r4, [pc, #476]	; (8002aa0 <__aeabi_dsub+0x6ec>)
 80028c4:	45a4      	cmp	ip, r4
 80028c6:	d056      	beq.n	8002976 <__aeabi_dsub+0x5c2>
 80028c8:	468c      	mov	ip, r1
 80028ca:	e69a      	b.n	8002602 <__aeabi_dsub+0x24e>
 80028cc:	4661      	mov	r1, ip
 80028ce:	2220      	movs	r2, #32
 80028d0:	003c      	movs	r4, r7
 80028d2:	1a52      	subs	r2, r2, r1
 80028d4:	4094      	lsls	r4, r2
 80028d6:	0001      	movs	r1, r0
 80028d8:	4090      	lsls	r0, r2
 80028da:	46a0      	mov	r8, r4
 80028dc:	4664      	mov	r4, ip
 80028de:	1e42      	subs	r2, r0, #1
 80028e0:	4190      	sbcs	r0, r2
 80028e2:	4662      	mov	r2, ip
 80028e4:	40e1      	lsrs	r1, r4
 80028e6:	4644      	mov	r4, r8
 80028e8:	40d7      	lsrs	r7, r2
 80028ea:	430c      	orrs	r4, r1
 80028ec:	4304      	orrs	r4, r0
 80028ee:	44b9      	add	r9, r7
 80028f0:	e701      	b.n	80026f6 <__aeabi_dsub+0x342>
 80028f2:	496b      	ldr	r1, [pc, #428]	; (8002aa0 <__aeabi_dsub+0x6ec>)
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x546>
 80028f8:	e70c      	b.n	8002714 <__aeabi_dsub+0x360>
 80028fa:	1818      	adds	r0, r3, r0
 80028fc:	4298      	cmp	r0, r3
 80028fe:	419b      	sbcs	r3, r3
 8002900:	444f      	add	r7, r9
 8002902:	425b      	negs	r3, r3
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	07dc      	lsls	r4, r3, #31
 8002908:	0840      	lsrs	r0, r0, #1
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	469a      	mov	sl, r3
 800290e:	0016      	movs	r6, r2
 8002910:	4304      	orrs	r4, r0
 8002912:	e6d9      	b.n	80026c8 <__aeabi_dsub+0x314>
 8002914:	2a00      	cmp	r2, #0
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x566>
 8002918:	e081      	b.n	8002a1e <__aeabi_dsub+0x66a>
 800291a:	003b      	movs	r3, r7
 800291c:	4303      	orrs	r3, r0
 800291e:	d11d      	bne.n	800295c <__aeabi_dsub+0x5a8>
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	2500      	movs	r5, #0
 8002924:	0312      	lsls	r2, r2, #12
 8002926:	e70b      	b.n	8002740 <__aeabi_dsub+0x38c>
 8002928:	08c0      	lsrs	r0, r0, #3
 800292a:	077b      	lsls	r3, r7, #29
 800292c:	465d      	mov	r5, fp
 800292e:	4303      	orrs	r3, r0
 8002930:	08fa      	lsrs	r2, r7, #3
 8002932:	e6d3      	b.n	80026dc <__aeabi_dsub+0x328>
 8002934:	1ac4      	subs	r4, r0, r3
 8002936:	42a0      	cmp	r0, r4
 8002938:	4180      	sbcs	r0, r0
 800293a:	464b      	mov	r3, r9
 800293c:	4240      	negs	r0, r0
 800293e:	1aff      	subs	r7, r7, r3
 8002940:	1a3b      	subs	r3, r7, r0
 8002942:	469a      	mov	sl, r3
 8002944:	465d      	mov	r5, fp
 8002946:	e597      	b.n	8002478 <__aeabi_dsub+0xc4>
 8002948:	1a1c      	subs	r4, r3, r0
 800294a:	464a      	mov	r2, r9
 800294c:	42a3      	cmp	r3, r4
 800294e:	419b      	sbcs	r3, r3
 8002950:	1bd7      	subs	r7, r2, r7
 8002952:	425b      	negs	r3, r3
 8002954:	1afb      	subs	r3, r7, r3
 8002956:	469a      	mov	sl, r3
 8002958:	2601      	movs	r6, #1
 800295a:	e585      	b.n	8002468 <__aeabi_dsub+0xb4>
 800295c:	08c0      	lsrs	r0, r0, #3
 800295e:	077b      	lsls	r3, r7, #29
 8002960:	465d      	mov	r5, fp
 8002962:	4303      	orrs	r3, r0
 8002964:	08fa      	lsrs	r2, r7, #3
 8002966:	e6e7      	b.n	8002738 <__aeabi_dsub+0x384>
 8002968:	464a      	mov	r2, r9
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	0752      	lsls	r2, r2, #29
 800296e:	4313      	orrs	r3, r2
 8002970:	464a      	mov	r2, r9
 8002972:	08d2      	lsrs	r2, r2, #3
 8002974:	e6b5      	b.n	80026e2 <__aeabi_dsub+0x32e>
 8002976:	08c0      	lsrs	r0, r0, #3
 8002978:	077b      	lsls	r3, r7, #29
 800297a:	4303      	orrs	r3, r0
 800297c:	08fa      	lsrs	r2, r7, #3
 800297e:	e6db      	b.n	8002738 <__aeabi_dsub+0x384>
 8002980:	4649      	mov	r1, r9
 8002982:	4319      	orrs	r1, r3
 8002984:	000b      	movs	r3, r1
 8002986:	1e59      	subs	r1, r3, #1
 8002988:	418b      	sbcs	r3, r1
 800298a:	001c      	movs	r4, r3
 800298c:	e653      	b.n	8002636 <__aeabi_dsub+0x282>
 800298e:	464d      	mov	r5, r9
 8002990:	3c20      	subs	r4, #32
 8002992:	40e5      	lsrs	r5, r4
 8002994:	2920      	cmp	r1, #32
 8002996:	d005      	beq.n	80029a4 <__aeabi_dsub+0x5f0>
 8002998:	2440      	movs	r4, #64	; 0x40
 800299a:	1a64      	subs	r4, r4, r1
 800299c:	4649      	mov	r1, r9
 800299e:	40a1      	lsls	r1, r4
 80029a0:	430b      	orrs	r3, r1
 80029a2:	4698      	mov	r8, r3
 80029a4:	4643      	mov	r3, r8
 80029a6:	1e5c      	subs	r4, r3, #1
 80029a8:	41a3      	sbcs	r3, r4
 80029aa:	432b      	orrs	r3, r5
 80029ac:	e776      	b.n	800289c <__aeabi_dsub+0x4e8>
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	d0e1      	beq.n	8002976 <__aeabi_dsub+0x5c2>
 80029b2:	003a      	movs	r2, r7
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	4302      	orrs	r2, r0
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x608>
 80029ba:	e6b8      	b.n	800272e <__aeabi_dsub+0x37a>
 80029bc:	464a      	mov	r2, r9
 80029be:	0752      	lsls	r2, r2, #29
 80029c0:	2480      	movs	r4, #128	; 0x80
 80029c2:	4313      	orrs	r3, r2
 80029c4:	464a      	mov	r2, r9
 80029c6:	0324      	lsls	r4, r4, #12
 80029c8:	08d2      	lsrs	r2, r2, #3
 80029ca:	4222      	tst	r2, r4
 80029cc:	d007      	beq.n	80029de <__aeabi_dsub+0x62a>
 80029ce:	08fe      	lsrs	r6, r7, #3
 80029d0:	4226      	tst	r6, r4
 80029d2:	d104      	bne.n	80029de <__aeabi_dsub+0x62a>
 80029d4:	465d      	mov	r5, fp
 80029d6:	0032      	movs	r2, r6
 80029d8:	08c3      	lsrs	r3, r0, #3
 80029da:	077f      	lsls	r7, r7, #29
 80029dc:	433b      	orrs	r3, r7
 80029de:	0f59      	lsrs	r1, r3, #29
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	0749      	lsls	r1, r1, #29
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	430b      	orrs	r3, r1
 80029e8:	e6a6      	b.n	8002738 <__aeabi_dsub+0x384>
 80029ea:	1ac4      	subs	r4, r0, r3
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	4180      	sbcs	r0, r0
 80029f0:	464b      	mov	r3, r9
 80029f2:	4240      	negs	r0, r0
 80029f4:	1aff      	subs	r7, r7, r3
 80029f6:	1a3b      	subs	r3, r7, r0
 80029f8:	469a      	mov	sl, r3
 80029fa:	465d      	mov	r5, fp
 80029fc:	2601      	movs	r6, #1
 80029fe:	e533      	b.n	8002468 <__aeabi_dsub+0xb4>
 8002a00:	003b      	movs	r3, r7
 8002a02:	4303      	orrs	r3, r0
 8002a04:	d100      	bne.n	8002a08 <__aeabi_dsub+0x654>
 8002a06:	e715      	b.n	8002834 <__aeabi_dsub+0x480>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e666      	b.n	80026e2 <__aeabi_dsub+0x32e>
 8002a14:	08c0      	lsrs	r0, r0, #3
 8002a16:	077b      	lsls	r3, r7, #29
 8002a18:	4303      	orrs	r3, r0
 8002a1a:	08fa      	lsrs	r2, r7, #3
 8002a1c:	e65e      	b.n	80026dc <__aeabi_dsub+0x328>
 8002a1e:	003a      	movs	r2, r7
 8002a20:	08db      	lsrs	r3, r3, #3
 8002a22:	4302      	orrs	r2, r0
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x674>
 8002a26:	e682      	b.n	800272e <__aeabi_dsub+0x37a>
 8002a28:	464a      	mov	r2, r9
 8002a2a:	0752      	lsls	r2, r2, #29
 8002a2c:	2480      	movs	r4, #128	; 0x80
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	464a      	mov	r2, r9
 8002a32:	0324      	lsls	r4, r4, #12
 8002a34:	08d2      	lsrs	r2, r2, #3
 8002a36:	4222      	tst	r2, r4
 8002a38:	d007      	beq.n	8002a4a <__aeabi_dsub+0x696>
 8002a3a:	08fe      	lsrs	r6, r7, #3
 8002a3c:	4226      	tst	r6, r4
 8002a3e:	d104      	bne.n	8002a4a <__aeabi_dsub+0x696>
 8002a40:	465d      	mov	r5, fp
 8002a42:	0032      	movs	r2, r6
 8002a44:	08c3      	lsrs	r3, r0, #3
 8002a46:	077f      	lsls	r7, r7, #29
 8002a48:	433b      	orrs	r3, r7
 8002a4a:	0f59      	lsrs	r1, r3, #29
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	08db      	lsrs	r3, r3, #3
 8002a50:	0749      	lsls	r1, r1, #29
 8002a52:	430b      	orrs	r3, r1
 8002a54:	e670      	b.n	8002738 <__aeabi_dsub+0x384>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e640      	b.n	80026e2 <__aeabi_dsub+0x32e>
 8002a60:	464c      	mov	r4, r9
 8002a62:	3920      	subs	r1, #32
 8002a64:	40cc      	lsrs	r4, r1
 8002a66:	4661      	mov	r1, ip
 8002a68:	2920      	cmp	r1, #32
 8002a6a:	d006      	beq.n	8002a7a <__aeabi_dsub+0x6c6>
 8002a6c:	4666      	mov	r6, ip
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	1b89      	subs	r1, r1, r6
 8002a72:	464e      	mov	r6, r9
 8002a74:	408e      	lsls	r6, r1
 8002a76:	4333      	orrs	r3, r6
 8002a78:	4698      	mov	r8, r3
 8002a7a:	4643      	mov	r3, r8
 8002a7c:	1e59      	subs	r1, r3, #1
 8002a7e:	418b      	sbcs	r3, r1
 8002a80:	431c      	orrs	r4, r3
 8002a82:	e5d8      	b.n	8002636 <__aeabi_dsub+0x282>
 8002a84:	181c      	adds	r4, r3, r0
 8002a86:	4284      	cmp	r4, r0
 8002a88:	4180      	sbcs	r0, r0
 8002a8a:	444f      	add	r7, r9
 8002a8c:	46ba      	mov	sl, r7
 8002a8e:	4240      	negs	r0, r0
 8002a90:	4482      	add	sl, r0
 8002a92:	e6d9      	b.n	8002848 <__aeabi_dsub+0x494>
 8002a94:	4653      	mov	r3, sl
 8002a96:	4323      	orrs	r3, r4
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x6e8>
 8002a9a:	e6cb      	b.n	8002834 <__aeabi_dsub+0x480>
 8002a9c:	e614      	b.n	80026c8 <__aeabi_dsub+0x314>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	000007ff 	.word	0x000007ff
 8002aa4:	ff7fffff 	.word	0xff7fffff
 8002aa8:	000007fe 	.word	0x000007fe
 8002aac:	2300      	movs	r3, #0
 8002aae:	4a01      	ldr	r2, [pc, #4]	; (8002ab4 <__aeabi_dsub+0x700>)
 8002ab0:	001c      	movs	r4, r3
 8002ab2:	e529      	b.n	8002508 <__aeabi_dsub+0x154>
 8002ab4:	000007ff 	.word	0x000007ff

08002ab8 <__aeabi_ui2d>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	1e04      	subs	r4, r0, #0
 8002abc:	d010      	beq.n	8002ae0 <__aeabi_ui2d+0x28>
 8002abe:	f000 f8ef 	bl	8002ca0 <__clzsi2>
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <__aeabi_ui2d+0x48>)
 8002ac4:	1a1b      	subs	r3, r3, r0
 8002ac6:	280a      	cmp	r0, #10
 8002ac8:	dc11      	bgt.n	8002aee <__aeabi_ui2d+0x36>
 8002aca:	220b      	movs	r2, #11
 8002acc:	0021      	movs	r1, r4
 8002ace:	1a12      	subs	r2, r2, r0
 8002ad0:	40d1      	lsrs	r1, r2
 8002ad2:	3015      	adds	r0, #21
 8002ad4:	030a      	lsls	r2, r1, #12
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	0b12      	lsrs	r2, r2, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e001      	b.n	8002ae4 <__aeabi_ui2d+0x2c>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	051b      	lsls	r3, r3, #20
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	0020      	movs	r0, r4
 8002aea:	0019      	movs	r1, r3
 8002aec:	bd10      	pop	{r4, pc}
 8002aee:	0022      	movs	r2, r4
 8002af0:	380b      	subs	r0, #11
 8002af2:	4082      	lsls	r2, r0
 8002af4:	055b      	lsls	r3, r3, #21
 8002af6:	0312      	lsls	r2, r2, #12
 8002af8:	2400      	movs	r4, #0
 8002afa:	0b12      	lsrs	r2, r2, #12
 8002afc:	0d5b      	lsrs	r3, r3, #21
 8002afe:	e7f1      	b.n	8002ae4 <__aeabi_ui2d+0x2c>
 8002b00:	0000041e 	.word	0x0000041e

08002b04 <__aeabi_f2d>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	0242      	lsls	r2, r0, #9
 8002b08:	0043      	lsls	r3, r0, #1
 8002b0a:	0fc4      	lsrs	r4, r0, #31
 8002b0c:	20fe      	movs	r0, #254	; 0xfe
 8002b0e:	0e1b      	lsrs	r3, r3, #24
 8002b10:	1c59      	adds	r1, r3, #1
 8002b12:	0a55      	lsrs	r5, r2, #9
 8002b14:	4208      	tst	r0, r1
 8002b16:	d00c      	beq.n	8002b32 <__aeabi_f2d+0x2e>
 8002b18:	21e0      	movs	r1, #224	; 0xe0
 8002b1a:	0089      	lsls	r1, r1, #2
 8002b1c:	468c      	mov	ip, r1
 8002b1e:	076d      	lsls	r5, r5, #29
 8002b20:	0b12      	lsrs	r2, r2, #12
 8002b22:	4463      	add	r3, ip
 8002b24:	051b      	lsls	r3, r3, #20
 8002b26:	4313      	orrs	r3, r2
 8002b28:	07e4      	lsls	r4, r4, #31
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	0028      	movs	r0, r5
 8002b2e:	0019      	movs	r1, r3
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d114      	bne.n	8002b60 <__aeabi_f2d+0x5c>
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d01b      	beq.n	8002b72 <__aeabi_f2d+0x6e>
 8002b3a:	0028      	movs	r0, r5
 8002b3c:	f000 f8b0 	bl	8002ca0 <__clzsi2>
 8002b40:	280a      	cmp	r0, #10
 8002b42:	dc1c      	bgt.n	8002b7e <__aeabi_f2d+0x7a>
 8002b44:	230b      	movs	r3, #11
 8002b46:	002a      	movs	r2, r5
 8002b48:	1a1b      	subs	r3, r3, r0
 8002b4a:	40da      	lsrs	r2, r3
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	3315      	adds	r3, #21
 8002b50:	409d      	lsls	r5, r3
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <__aeabi_f2d+0x88>)
 8002b54:	0312      	lsls	r2, r2, #12
 8002b56:	1a1b      	subs	r3, r3, r0
 8002b58:	055b      	lsls	r3, r3, #21
 8002b5a:	0b12      	lsrs	r2, r2, #12
 8002b5c:	0d5b      	lsrs	r3, r3, #21
 8002b5e:	e7e1      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d009      	beq.n	8002b78 <__aeabi_f2d+0x74>
 8002b64:	0b13      	lsrs	r3, r2, #12
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	0312      	lsls	r2, r2, #12
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	076d      	lsls	r5, r5, #29
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <__aeabi_f2d+0x8c>)
 8002b70:	e7d8      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2200      	movs	r2, #0
 8002b76:	e7d5      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <__aeabi_f2d+0x8c>)
 8002b7c:	e7d2      	b.n	8002b24 <__aeabi_f2d+0x20>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	002a      	movs	r2, r5
 8002b82:	3b0b      	subs	r3, #11
 8002b84:	409a      	lsls	r2, r3
 8002b86:	2500      	movs	r5, #0
 8002b88:	e7e3      	b.n	8002b52 <__aeabi_f2d+0x4e>
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	00000389 	.word	0x00000389
 8002b90:	000007ff 	.word	0x000007ff

08002b94 <__aeabi_d2f>:
 8002b94:	0002      	movs	r2, r0
 8002b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b98:	004b      	lsls	r3, r1, #1
 8002b9a:	030d      	lsls	r5, r1, #12
 8002b9c:	0f40      	lsrs	r0, r0, #29
 8002b9e:	0d5b      	lsrs	r3, r3, #21
 8002ba0:	0fcc      	lsrs	r4, r1, #31
 8002ba2:	0a6d      	lsrs	r5, r5, #9
 8002ba4:	493a      	ldr	r1, [pc, #232]	; (8002c90 <__aeabi_d2f+0xfc>)
 8002ba6:	4305      	orrs	r5, r0
 8002ba8:	1c58      	adds	r0, r3, #1
 8002baa:	00d7      	lsls	r7, r2, #3
 8002bac:	4208      	tst	r0, r1
 8002bae:	d00a      	beq.n	8002bc6 <__aeabi_d2f+0x32>
 8002bb0:	4938      	ldr	r1, [pc, #224]	; (8002c94 <__aeabi_d2f+0x100>)
 8002bb2:	1859      	adds	r1, r3, r1
 8002bb4:	29fe      	cmp	r1, #254	; 0xfe
 8002bb6:	dd16      	ble.n	8002be6 <__aeabi_d2f+0x52>
 8002bb8:	20ff      	movs	r0, #255	; 0xff
 8002bba:	2200      	movs	r2, #0
 8002bbc:	05c0      	lsls	r0, r0, #23
 8002bbe:	4310      	orrs	r0, r2
 8002bc0:	07e4      	lsls	r4, r4, #31
 8002bc2:	4320      	orrs	r0, r4
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <__aeabi_d2f+0x44>
 8002bca:	433d      	orrs	r5, r7
 8002bcc:	d026      	beq.n	8002c1c <__aeabi_d2f+0x88>
 8002bce:	2205      	movs	r2, #5
 8002bd0:	0192      	lsls	r2, r2, #6
 8002bd2:	0a52      	lsrs	r2, r2, #9
 8002bd4:	b2d8      	uxtb	r0, r3
 8002bd6:	e7f1      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002bd8:	432f      	orrs	r7, r5
 8002bda:	d0ed      	beq.n	8002bb8 <__aeabi_d2f+0x24>
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	03d2      	lsls	r2, r2, #15
 8002be0:	20ff      	movs	r0, #255	; 0xff
 8002be2:	432a      	orrs	r2, r5
 8002be4:	e7ea      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002be6:	2900      	cmp	r1, #0
 8002be8:	dd1b      	ble.n	8002c22 <__aeabi_d2f+0x8e>
 8002bea:	0192      	lsls	r2, r2, #6
 8002bec:	1e50      	subs	r0, r2, #1
 8002bee:	4182      	sbcs	r2, r0
 8002bf0:	00ed      	lsls	r5, r5, #3
 8002bf2:	0f7f      	lsrs	r7, r7, #29
 8002bf4:	432a      	orrs	r2, r5
 8002bf6:	433a      	orrs	r2, r7
 8002bf8:	0753      	lsls	r3, r2, #29
 8002bfa:	d047      	beq.n	8002c8c <__aeabi_d2f+0xf8>
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d000      	beq.n	8002c06 <__aeabi_d2f+0x72>
 8002c04:	3204      	adds	r2, #4
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	04db      	lsls	r3, r3, #19
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d03e      	beq.n	8002c8c <__aeabi_d2f+0xf8>
 8002c0e:	1c48      	adds	r0, r1, #1
 8002c10:	29fe      	cmp	r1, #254	; 0xfe
 8002c12:	d0d1      	beq.n	8002bb8 <__aeabi_d2f+0x24>
 8002c14:	0192      	lsls	r2, r2, #6
 8002c16:	0a52      	lsrs	r2, r2, #9
 8002c18:	b2c0      	uxtb	r0, r0
 8002c1a:	e7cf      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	2200      	movs	r2, #0
 8002c20:	e7cc      	b.n	8002bbc <__aeabi_d2f+0x28>
 8002c22:	000a      	movs	r2, r1
 8002c24:	3217      	adds	r2, #23
 8002c26:	db2f      	blt.n	8002c88 <__aeabi_d2f+0xf4>
 8002c28:	2680      	movs	r6, #128	; 0x80
 8002c2a:	0436      	lsls	r6, r6, #16
 8002c2c:	432e      	orrs	r6, r5
 8002c2e:	251e      	movs	r5, #30
 8002c30:	1a6d      	subs	r5, r5, r1
 8002c32:	2d1f      	cmp	r5, #31
 8002c34:	dd11      	ble.n	8002c5a <__aeabi_d2f+0xc6>
 8002c36:	2202      	movs	r2, #2
 8002c38:	4252      	negs	r2, r2
 8002c3a:	1a52      	subs	r2, r2, r1
 8002c3c:	0031      	movs	r1, r6
 8002c3e:	40d1      	lsrs	r1, r2
 8002c40:	2d20      	cmp	r5, #32
 8002c42:	d004      	beq.n	8002c4e <__aeabi_d2f+0xba>
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <__aeabi_d2f+0x104>)
 8002c46:	4694      	mov	ip, r2
 8002c48:	4463      	add	r3, ip
 8002c4a:	409e      	lsls	r6, r3
 8002c4c:	4337      	orrs	r7, r6
 8002c4e:	003a      	movs	r2, r7
 8002c50:	1e53      	subs	r3, r2, #1
 8002c52:	419a      	sbcs	r2, r3
 8002c54:	430a      	orrs	r2, r1
 8002c56:	2100      	movs	r1, #0
 8002c58:	e7ce      	b.n	8002bf8 <__aeabi_d2f+0x64>
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <__aeabi_d2f+0x108>)
 8002c5c:	0038      	movs	r0, r7
 8002c5e:	4694      	mov	ip, r2
 8002c60:	4463      	add	r3, ip
 8002c62:	4098      	lsls	r0, r3
 8002c64:	003a      	movs	r2, r7
 8002c66:	1e41      	subs	r1, r0, #1
 8002c68:	4188      	sbcs	r0, r1
 8002c6a:	409e      	lsls	r6, r3
 8002c6c:	40ea      	lsrs	r2, r5
 8002c6e:	4330      	orrs	r0, r6
 8002c70:	4302      	orrs	r2, r0
 8002c72:	2100      	movs	r1, #0
 8002c74:	0753      	lsls	r3, r2, #29
 8002c76:	d1c1      	bne.n	8002bfc <__aeabi_d2f+0x68>
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	04c9      	lsls	r1, r1, #19
 8002c7e:	2001      	movs	r0, #1
 8002c80:	400b      	ands	r3, r1
 8002c82:	420a      	tst	r2, r1
 8002c84:	d1c6      	bne.n	8002c14 <__aeabi_d2f+0x80>
 8002c86:	e7a3      	b.n	8002bd0 <__aeabi_d2f+0x3c>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e7a0      	b.n	8002bce <__aeabi_d2f+0x3a>
 8002c8c:	000b      	movs	r3, r1
 8002c8e:	e79f      	b.n	8002bd0 <__aeabi_d2f+0x3c>
 8002c90:	000007fe 	.word	0x000007fe
 8002c94:	fffffc80 	.word	0xfffffc80
 8002c98:	fffffca2 	.word	0xfffffca2
 8002c9c:	fffffc82 	.word	0xfffffc82

08002ca0 <__clzsi2>:
 8002ca0:	211c      	movs	r1, #28
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	d301      	bcc.n	8002cae <__clzsi2+0xe>
 8002caa:	0c00      	lsrs	r0, r0, #16
 8002cac:	3910      	subs	r1, #16
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d301      	bcc.n	8002cb8 <__clzsi2+0x18>
 8002cb4:	0a00      	lsrs	r0, r0, #8
 8002cb6:	3908      	subs	r1, #8
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	4298      	cmp	r0, r3
 8002cbc:	d301      	bcc.n	8002cc2 <__clzsi2+0x22>
 8002cbe:	0900      	lsrs	r0, r0, #4
 8002cc0:	3904      	subs	r1, #4
 8002cc2:	a202      	add	r2, pc, #8	; (adr r2, 8002ccc <__clzsi2+0x2c>)
 8002cc4:	5c10      	ldrb	r0, [r2, r0]
 8002cc6:	1840      	adds	r0, r0, r1
 8002cc8:	4770      	bx	lr
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	02020304 	.word	0x02020304
 8002cd0:	01010101 	.word	0x01010101
	...

08002cdc <__aeabi_d2uiz>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <__aeabi_d2uiz+0x38>)
 8002ce2:	0004      	movs	r4, r0
 8002ce4:	000d      	movs	r5, r1
 8002ce6:	f7fd facf 	bl	8000288 <__aeabi_dcmpge>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d104      	bne.n	8002cf8 <__aeabi_d2uiz+0x1c>
 8002cee:	0020      	movs	r0, r4
 8002cf0:	0029      	movs	r1, r5
 8002cf2:	f000 f811 	bl	8002d18 <__aeabi_d2iz>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <__aeabi_d2uiz+0x38>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	0020      	movs	r0, r4
 8002cfe:	0029      	movs	r1, r5
 8002d00:	f7ff fb58 	bl	80023b4 <__aeabi_dsub>
 8002d04:	f000 f808 	bl	8002d18 <__aeabi_d2iz>
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	469c      	mov	ip, r3
 8002d0e:	4460      	add	r0, ip
 8002d10:	e7f1      	b.n	8002cf6 <__aeabi_d2uiz+0x1a>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	41e00000 	.word	0x41e00000

08002d18 <__aeabi_d2iz>:
 8002d18:	000a      	movs	r2, r1
 8002d1a:	b530      	push	{r4, r5, lr}
 8002d1c:	4c13      	ldr	r4, [pc, #76]	; (8002d6c <__aeabi_d2iz+0x54>)
 8002d1e:	0053      	lsls	r3, r2, #1
 8002d20:	0309      	lsls	r1, r1, #12
 8002d22:	0005      	movs	r5, r0
 8002d24:	0b09      	lsrs	r1, r1, #12
 8002d26:	2000      	movs	r0, #0
 8002d28:	0d5b      	lsrs	r3, r3, #21
 8002d2a:	0fd2      	lsrs	r2, r2, #31
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	dd04      	ble.n	8002d3a <__aeabi_d2iz+0x22>
 8002d30:	480f      	ldr	r0, [pc, #60]	; (8002d70 <__aeabi_d2iz+0x58>)
 8002d32:	4283      	cmp	r3, r0
 8002d34:	dd02      	ble.n	8002d3c <__aeabi_d2iz+0x24>
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <__aeabi_d2iz+0x5c>)
 8002d38:	18d0      	adds	r0, r2, r3
 8002d3a:	bd30      	pop	{r4, r5, pc}
 8002d3c:	2080      	movs	r0, #128	; 0x80
 8002d3e:	0340      	lsls	r0, r0, #13
 8002d40:	4301      	orrs	r1, r0
 8002d42:	480d      	ldr	r0, [pc, #52]	; (8002d78 <__aeabi_d2iz+0x60>)
 8002d44:	1ac0      	subs	r0, r0, r3
 8002d46:	281f      	cmp	r0, #31
 8002d48:	dd08      	ble.n	8002d5c <__aeabi_d2iz+0x44>
 8002d4a:	480c      	ldr	r0, [pc, #48]	; (8002d7c <__aeabi_d2iz+0x64>)
 8002d4c:	1ac3      	subs	r3, r0, r3
 8002d4e:	40d9      	lsrs	r1, r3
 8002d50:	000b      	movs	r3, r1
 8002d52:	4258      	negs	r0, r3
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d1f0      	bne.n	8002d3a <__aeabi_d2iz+0x22>
 8002d58:	0018      	movs	r0, r3
 8002d5a:	e7ee      	b.n	8002d3a <__aeabi_d2iz+0x22>
 8002d5c:	4c08      	ldr	r4, [pc, #32]	; (8002d80 <__aeabi_d2iz+0x68>)
 8002d5e:	40c5      	lsrs	r5, r0
 8002d60:	46a4      	mov	ip, r4
 8002d62:	4463      	add	r3, ip
 8002d64:	4099      	lsls	r1, r3
 8002d66:	000b      	movs	r3, r1
 8002d68:	432b      	orrs	r3, r5
 8002d6a:	e7f2      	b.n	8002d52 <__aeabi_d2iz+0x3a>
 8002d6c:	000003fe 	.word	0x000003fe
 8002d70:	0000041d 	.word	0x0000041d
 8002d74:	7fffffff 	.word	0x7fffffff
 8002d78:	00000433 	.word	0x00000433
 8002d7c:	00000413 	.word	0x00000413
 8002d80:	fffffbed 	.word	0xfffffbed

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	1dfb      	adds	r3, r7, #7
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b7f      	cmp	r3, #127	; 0x7f
 8002d96:	d809      	bhi.n	8002dac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	231f      	movs	r3, #31
 8002da0:	401a      	ands	r2, r3
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <__NVIC_EnableIRQ+0x30>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	4091      	lsls	r1, r2
 8002da8:	000a      	movs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b7f      	cmp	r3, #127	; 0x7f
 8002dcc:	d828      	bhi.n	8002e20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <__NVIC_SetPriority+0xd4>)
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	33c0      	adds	r3, #192	; 0xc0
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	589b      	ldr	r3, [r3, r2]
 8002dde:	1dfa      	adds	r2, r7, #7
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	0011      	movs	r1, r2
 8002de4:	2203      	movs	r2, #3
 8002de6:	400a      	ands	r2, r1
 8002de8:	00d2      	lsls	r2, r2, #3
 8002dea:	21ff      	movs	r1, #255	; 0xff
 8002dec:	4091      	lsls	r1, r2
 8002dee:	000a      	movs	r2, r1
 8002df0:	43d2      	mvns	r2, r2
 8002df2:	401a      	ands	r2, r3
 8002df4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	22ff      	movs	r2, #255	; 0xff
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	0018      	movs	r0, r3
 8002e04:	2303      	movs	r3, #3
 8002e06:	4003      	ands	r3, r0
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e0c:	481f      	ldr	r0, [pc, #124]	; (8002e8c <__NVIC_SetPriority+0xd4>)
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	430a      	orrs	r2, r1
 8002e18:	33c0      	adds	r3, #192	; 0xc0
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e1e:	e031      	b.n	8002e84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <__NVIC_SetPriority+0xd8>)
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	0019      	movs	r1, r3
 8002e28:	230f      	movs	r3, #15
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	3b08      	subs	r3, #8
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3306      	adds	r3, #6
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	3304      	adds	r3, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1dfa      	adds	r2, r7, #7
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	0011      	movs	r1, r2
 8002e40:	2203      	movs	r2, #3
 8002e42:	400a      	ands	r2, r1
 8002e44:	00d2      	lsls	r2, r2, #3
 8002e46:	21ff      	movs	r1, #255	; 0xff
 8002e48:	4091      	lsls	r1, r2
 8002e4a:	000a      	movs	r2, r1
 8002e4c:	43d2      	mvns	r2, r2
 8002e4e:	401a      	ands	r2, r3
 8002e50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	22ff      	movs	r2, #255	; 0xff
 8002e58:	401a      	ands	r2, r3
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	2303      	movs	r3, #3
 8002e62:	4003      	ands	r3, r0
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e68:	4809      	ldr	r0, [pc, #36]	; (8002e90 <__NVIC_SetPriority+0xd8>)
 8002e6a:	1dfb      	adds	r3, r7, #7
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	001c      	movs	r4, r3
 8002e70:	230f      	movs	r3, #15
 8002e72:	4023      	ands	r3, r4
 8002e74:	3b08      	subs	r3, #8
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	3306      	adds	r3, #6
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	18c3      	adds	r3, r0, r3
 8002e80:	3304      	adds	r3, #4
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b003      	add	sp, #12
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <_I2C_Struct_Init>:
I2C_Struct I2C1_Slave;
I2C_Struct I2C2_Master;

int i2c_flag = 0;

void _I2C_Struct_Init(I2C_Struct *myI2C){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	myI2C->RegisterAddr = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	809a      	strh	r2, [r3, #4]
	myI2C->RegisterAddrSize = 0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	719a      	strb	r2, [r3, #6]
	myI2C->Data = 0;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
	myI2C->DataSize = 0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	811a      	strh	r2, [r3, #8]
	myI2C->SlaveAddr = 0;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	729a      	strb	r2, [r3, #10]
	myI2C->State = I2C_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	731a      	strb	r2, [r3, #12]
	myI2C->Lock = UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	72da      	strb	r2, [r3, #11]
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <I2C2_Master_Register_Init>:

void I2C2_Master_Register_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	RCC->APBENR1 |= (1<<22);				// Enable I2C2 Peripheral Clock
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	03c9      	lsls	r1, r1, #15
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	63da      	str	r2, [r3, #60]	; 0x3c
	RCC->IOPENR |= (1<<0);					// Enable GPIOA Peripheral Clock
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~((3<<22) | (3<<24));	// Enable Alternate Functions for PA11 and PA12
 8002eee:	23a0      	movs	r3, #160	; 0xa0
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	23a0      	movs	r3, #160	; 0xa0
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	492e      	ldr	r1, [pc, #184]	; (8002fb4 <I2C2_Master_Register_Init+0xe4>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2<<22) | (2<<24);
 8002efe:	23a0      	movs	r3, #160	; 0xa0
 8002f00:	05db      	lsls	r3, r3, #23
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	23a0      	movs	r3, #160	; 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	21a0      	movs	r1, #160	; 0xa0
 8002f0a:	0489      	lsls	r1, r1, #18
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER |= (1<<11) | (1<<12);		// Enable Open-Drain Output for PA11 and PA12
 8002f10:	23a0      	movs	r3, #160	; 0xa0
 8002f12:	05db      	lsls	r3, r3, #23
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	23a0      	movs	r3, #160	; 0xa0
 8002f18:	05db      	lsls	r3, r3, #23
 8002f1a:	21c0      	movs	r1, #192	; 0xc0
 8002f1c:	0149      	lsls	r1, r1, #5
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= (3<<22) | (3<<24);	// Enable Very-High Speed Output for PA11 and PA12
 8002f22:	23a0      	movs	r3, #160	; 0xa0
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	23a0      	movs	r3, #160	; 0xa0
 8002f2a:	05db      	lsls	r3, r3, #23
 8002f2c:	21f0      	movs	r1, #240	; 0xf0
 8002f2e:	0489      	lsls	r1, r1, #18
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR |= (1<<22) | (1<<24);		// Enable Pull-Up Resistors for PA11 and PA12
 8002f34:	23a0      	movs	r3, #160	; 0xa0
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	23a0      	movs	r3, #160	; 0xa0
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	21a0      	movs	r1, #160	; 0xa0
 8002f40:	0449      	lsls	r1, r1, #17
 8002f42:	430a      	orrs	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]
	GPIOA->AFR[1] &= ~((7<<12) | (7<<16));		// Enable I2C1 Alternate Function for PA11 and PA12
 8002f46:	23a0      	movs	r3, #160	; 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4c:	23a0      	movs	r3, #160	; 0xa0
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	4919      	ldr	r1, [pc, #100]	; (8002fb8 <I2C2_Master_Register_Init+0xe8>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= (6<<12) | (6<<16);		// Enable I2C1 Alternate Function for PA11 and PA12
 8002f56:	23a0      	movs	r3, #160	; 0xa0
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5c:	23a0      	movs	r3, #160	; 0xa0
 8002f5e:	05db      	lsls	r3, r3, #23
 8002f60:	21cc      	movs	r1, #204	; 0xcc
 8002f62:	02c9      	lsls	r1, r1, #11
 8002f64:	430a      	orrs	r2, r1
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->CCIPR &= ~(3<<14);					// Set SYSCLK as I2C2 Clock
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002f6e:	4913      	ldr	r1, [pc, #76]	; (8002fbc <I2C2_Master_Register_Init+0xec>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
	RCC->CCIPR |= (1<<14);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002f76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <I2C2_Master_Register_Init+0xe0>)
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	01c9      	lsls	r1, r1, #7
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
	I2C2->CR1 &= ~(1<<0);					// Disable I2C2 Peripheral
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <I2C2_Master_Register_Init+0xf0>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <I2C2_Master_Register_Init+0xf0>)
 8002f88:	2101      	movs	r1, #1
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
	I2C2->TIMINGR = 0x10C71026;				// I2C Timing for 64 Mhz/400 kHz Fast Mode with analog filter, no digital filter
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <I2C2_Master_Register_Init+0xf0>)
 8002f90:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <I2C2_Master_Register_Init+0xf4>)
 8002f92:	611a      	str	r2, [r3, #16]
	I2C2->CR1 |= (1<<0);					// Enable I2C1 Peripheral
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <I2C2_Master_Register_Init+0xf0>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <I2C2_Master_Register_Init+0xf0>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
	_I2C_Struct_Init(&I2C2_Master);
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <I2C2_Master_Register_Init+0xf8>)
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff ff76 	bl	8002e94 <_I2C_Struct_Init>
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	fc3fffff 	.word	0xfc3fffff
 8002fb8:	fff88fff 	.word	0xfff88fff
 8002fbc:	ffff3fff 	.word	0xffff3fff
 8002fc0:	40005800 	.word	0x40005800
 8002fc4:	10c71026 	.word	0x10c71026
 8002fc8:	2000003c 	.word	0x2000003c

08002fcc <I2C1_Slave_Register_Init>:

void I2C1_Slave_Register_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	RCC->APBENR1 |= (1<<21);				// Enable I2C1 Peripheral Clock
 8002fd0:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8002fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	0389      	lsls	r1, r1, #14
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c
	RCC->IOPENR |= (1<<0);					// Enable GPIOA Peripheral Clock
 8002fde:	4b49      	ldr	r3, [pc, #292]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe2:	4b48      	ldr	r3, [pc, #288]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~((3<<18) | (3<<20));	// Enable Alternate Functions for PA9 and PA10
 8002fea:	23a0      	movs	r3, #160	; 0xa0
 8002fec:	05db      	lsls	r3, r3, #23
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	23a0      	movs	r3, #160	; 0xa0
 8002ff2:	05db      	lsls	r3, r3, #23
 8002ff4:	4944      	ldr	r1, [pc, #272]	; (8003108 <I2C1_Slave_Register_Init+0x13c>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2<<18) | (2<<20);
 8002ffa:	23a0      	movs	r3, #160	; 0xa0
 8002ffc:	05db      	lsls	r3, r3, #23
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	21a0      	movs	r1, #160	; 0xa0
 8003006:	0389      	lsls	r1, r1, #14
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER |= (1<<9) | (1<<10);		// Enable Open-Drain Output for PA9 and PA10
 800300c:	23a0      	movs	r3, #160	; 0xa0
 800300e:	05db      	lsls	r3, r3, #23
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	23a0      	movs	r3, #160	; 0xa0
 8003014:	05db      	lsls	r3, r3, #23
 8003016:	21c0      	movs	r1, #192	; 0xc0
 8003018:	00c9      	lsls	r1, r1, #3
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= (3<<18) | (3<<20);	// Enable Very-High Speed Output for PA9 and PA10
 800301e:	23a0      	movs	r3, #160	; 0xa0
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	23a0      	movs	r3, #160	; 0xa0
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	21f0      	movs	r1, #240	; 0xf0
 800302a:	0389      	lsls	r1, r1, #14
 800302c:	430a      	orrs	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR |= (1<<18) | (1<<20);		// Enable Pull-Up Resistors for PA9 and PA10
 8003030:	23a0      	movs	r3, #160	; 0xa0
 8003032:	05db      	lsls	r3, r3, #23
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	23a0      	movs	r3, #160	; 0xa0
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	21a0      	movs	r1, #160	; 0xa0
 800303c:	0349      	lsls	r1, r1, #13
 800303e:	430a      	orrs	r2, r1
 8003040:	60da      	str	r2, [r3, #12]
	GPIOA->AFR[1] &= ~((7<<4) | (7<<8));		// Enable I2C1 Alternate Function for PA9 and PA10
 8003042:	23a0      	movs	r3, #160	; 0xa0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003048:	23a0      	movs	r3, #160	; 0xa0
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	492f      	ldr	r1, [pc, #188]	; (800310c <I2C1_Slave_Register_Init+0x140>)
 800304e:	400a      	ands	r2, r1
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= (6<<4) | (6<<8);		// Enable I2C1 Alternate Function for PA9 and PA10
 8003052:	23a0      	movs	r3, #160	; 0xa0
 8003054:	05db      	lsls	r3, r3, #23
 8003056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003058:	23a0      	movs	r3, #160	; 0xa0
 800305a:	05db      	lsls	r3, r3, #23
 800305c:	21cc      	movs	r1, #204	; 0xcc
 800305e:	00c9      	lsls	r1, r1, #3
 8003060:	430a      	orrs	r2, r1
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->CCIPR &= ~(3<<12);					// Set SYSCLK as I2C1 Clock
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8003066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 800306a:	4929      	ldr	r1, [pc, #164]	; (8003110 <I2C1_Slave_Register_Init+0x144>)
 800306c:	400a      	ands	r2, r1
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
	RCC->CCIPR |= (1<<12);
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8003072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <I2C1_Slave_Register_Init+0x138>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0149      	lsls	r1, r1, #5
 800307a:	430a      	orrs	r2, r1
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
	I2C1->CR1 &= ~(1<<0);					// Disable I2C1 Peripheral
 800307e:	4b25      	ldr	r3, [pc, #148]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 8003084:	2101      	movs	r1, #1
 8003086:	438a      	bics	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
	I2C1->TIMINGR = 0x10C71026;//0x10F57DAC;				// I2C Timing for 64 Mhz/100 kHz Standart Mode with analog filter, no digital filter
 800308a:	4b22      	ldr	r3, [pc, #136]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 800308c:	4a22      	ldr	r2, [pc, #136]	; (8003118 <I2C1_Slave_Register_Init+0x14c>)
 800308e:	611a      	str	r2, [r3, #16]
	I2C1->CR1 |= (1<<17);					// Disable Clock Stretching
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0289      	lsls	r1, r1, #10
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
	I2C1->OAR1 &= ~(1<<10);					// 7-Bit Slave Address Mode
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030a4:	491d      	ldr	r1, [pc, #116]	; (800311c <I2C1_Slave_Register_Init+0x150>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
	I2C1->OAR1 &= ~(127<<1);				// Set 7-Bit Slave Address to 0xC0
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030b0:	21fe      	movs	r1, #254	; 0xfe
 80030b2:	438a      	bics	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]
	I2C1->OAR1 |= (48<<1);
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030bc:	2160      	movs	r1, #96	; 0x60
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
	I2C1->OAR1 |= (1<<15);					// Enable Slave Own Address
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0209      	lsls	r1, r1, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
	I2C1->CR1 |= (1<<0);					// Enable I2C1 Peripheral
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
	I2C1->CR1 |= (1<<3);					// Enable Address Match Interrupt
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <I2C1_Slave_Register_Init+0x148>)
 80030e2:	2108      	movs	r1, #8
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(I2C1_IRQn, 0);			// Set Priority of I2C1_IRQn to 0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2017      	movs	r0, #23
 80030ec:	f7ff fe64 	bl	8002db8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_IRQn);				// Enable I2C1_IRQn
 80030f0:	2017      	movs	r0, #23
 80030f2:	f7ff fe47 	bl	8002d84 <__NVIC_EnableIRQ>
	_I2C_Struct_Init(&I2C1_Slave);
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <I2C1_Slave_Register_Init+0x154>)
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff fecb 	bl	8002e94 <_I2C_Struct_Init>
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	ffc3ffff 	.word	0xffc3ffff
 800310c:	fffff88f 	.word	0xfffff88f
 8003110:	ffffcfff 	.word	0xffffcfff
 8003114:	40005400 	.word	0x40005400
 8003118:	10c71026 	.word	0x10c71026
 800311c:	fffffbff 	.word	0xfffffbff
 8003120:	2000002c 	.word	0x2000002c

08003124 <I2C2_Master_Write_to_Register>:

I2CStatusTypeDef I2C2_Master_Write_to_Register(uint8_t SlaveAddr, uint16_t RegisterAddr, uint8_t RegisterAddrSize, uint8_t *Data, uint16_t DataSize){
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	0004      	movs	r4, r0
 800312c:	0008      	movs	r0, r1
 800312e:	0011      	movs	r1, r2
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	1c22      	adds	r2, r4, #0
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	1c02      	adds	r2, r0, #0
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	701a      	strb	r2, [r3, #0]
	if (I2C2_Master.State == I2C_READY)
 8003144:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003146:	7b1b      	ldrb	r3, [r3, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d000      	beq.n	800314e <I2C2_Master_Write_to_Register+0x2a>
 800314c:	e0ce      	b.n	80032ec <I2C2_Master_Write_to_Register+0x1c8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8310 	mrs	r3, PRIMASK
 8003152:	613b      	str	r3, [r7, #16]
  return(result);
 8003154:	693b      	ldr	r3, [r7, #16]
	{
		__I2C_Lock(&I2C2_Master);
 8003156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003158:	b672      	cpsid	i
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 800315e:	7adb      	ldrb	r3, [r3, #11]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <I2C2_Master_Write_to_Register+0x50>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	2300      	movs	r3, #0
 8003172:	e0bc      	b.n	80032ee <I2C2_Master_Write_to_Register+0x1ca>
 8003174:	4b60      	ldr	r3, [pc, #384]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003176:	2201      	movs	r2, #1
 8003178:	72da      	strb	r2, [r3, #11]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f383 8810 	msr	PRIMASK, r3
}
 8003184:	46c0      	nop			; (mov r8, r8)
		I2C2_Master.State = I2C_BUSY;
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003188:	2200      	movs	r2, #0
 800318a:	731a      	strb	r2, [r3, #12]
		// No reload, Number of Bytes are cleared, 7-bit addressing, Slave Address is cleared
		I2C2->CR2 &= ~((1<<24) | (255<<16) | (1<<11) | (1023<<0));
 800318c:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 8003192:	495b      	ldr	r1, [pc, #364]	; (8003300 <I2C2_Master_Write_to_Register+0x1dc>)
 8003194:	400a      	ands	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
		I2C2->CR2 &= ~(1<<10); 				// Master Write
 8003198:	4b58      	ldr	r3, [pc, #352]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 800319e:	4959      	ldr	r1, [pc, #356]	; (8003304 <I2C2_Master_Write_to_Register+0x1e0>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (1<<25); 				// Generate Auto Stop
 80031a4:	4b55      	ldr	r3, [pc, #340]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b54      	ldr	r3, [pc, #336]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	0489      	lsls	r1, r1, #18
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= ((RegisterAddrSize+DataSize)<<16);	// Number of Register Address Bytes and Data Bytes
 80031b2:	4b52      	ldr	r3, [pc, #328]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	1dbb      	adds	r3, r7, #6
 80031b8:	7819      	ldrb	r1, [r3, #0]
 80031ba:	2028      	movs	r0, #40	; 0x28
 80031bc:	183b      	adds	r3, r7, r0
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	18cb      	adds	r3, r1, r3
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	0019      	movs	r1, r3
 80031c6:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (SlaveAddr<<1);		// Set Slave Address
 80031cc:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	0019      	movs	r1, r3
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (1<<13);				// Set Start Bit. Start Bit and Slave Address are Sent.
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0189      	lsls	r1, r1, #6
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
		I2C2_Master.RegisterAddr = RegisterAddr;
 80031ec:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80031ee:	1d3a      	adds	r2, r7, #4
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	809a      	strh	r2, [r3, #4]
		I2C2_Master.RegisterAddrSize = RegisterAddrSize;
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80031f6:	1dba      	adds	r2, r7, #6
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	719a      	strb	r2, [r3, #6]
		I2C2_Master.Data = Data;
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	601a      	str	r2, [r3, #0]
		I2C2_Master.DataSize = DataSize;
 8003202:	4a3d      	ldr	r2, [pc, #244]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003204:	183b      	adds	r3, r7, r0
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	8113      	strh	r3, [r2, #8]
		I2C2_Master.SlaveAddr = SlaveAddr;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 800320c:	1dfa      	adds	r2, r7, #7
 800320e:	7812      	ldrb	r2, [r2, #0]
 8003210:	729a      	strb	r2, [r3, #10]

		while(!(I2C2->ISR & (1<<1)));
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	d0fa      	beq.n	8003214 <I2C2_Master_Write_to_Register+0xf0>
		if(I2C2_Master.RegisterAddrSize == 2){
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003220:	799b      	ldrb	r3, [r3, #6]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d113      	bne.n	800324e <I2C2_Master_Write_to_Register+0x12a>
			I2C2->TXDR = (uint8_t)((I2C2_Master.RegisterAddr& 0xFF00) >> 8);
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003228:	889b      	ldrh	r3, [r3, #4]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	b29b      	uxth	r3, r3
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
			I2C2_Master.RegisterAddrSize--;
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003236:	799b      	ldrb	r3, [r3, #6]
 8003238:	3b01      	subs	r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 800323e:	719a      	strb	r2, [r3, #6]
			while(!(I2C2->ISR & (1<<1)));
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d0fa      	beq.n	8003242 <I2C2_Master_Write_to_Register+0x11e>
 800324c:	e02b      	b.n	80032a6 <I2C2_Master_Write_to_Register+0x182>
		}
		else if(I2C2_Master.RegisterAddrSize == 1){
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003250:	799b      	ldrb	r3, [r3, #6]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d127      	bne.n	80032a6 <I2C2_Master_Write_to_Register+0x182>
			I2C2->TXDR = (uint8_t)(I2C2_Master.RegisterAddr & 0x00FF);
 8003256:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003258:	889b      	ldrh	r3, [r3, #4]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
			I2C2_Master.RegisterAddrSize--;
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003262:	799b      	ldrb	r3, [r3, #6]
 8003264:	3b01      	subs	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 800326a:	719a      	strb	r2, [r3, #6]
			while(!(I2C2->ISR & (1<<1)));
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d0fa      	beq.n	800326e <I2C2_Master_Write_to_Register+0x14a>
		}
		while(I2C2_Master.DataSize > 1){
 8003278:	e015      	b.n	80032a6 <I2C2_Master_Write_to_Register+0x182>
			I2C2->TXDR = *(I2C2_Master.Data);
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
			I2C2_Master.DataSize--;
 8003284:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003286:	891b      	ldrh	r3, [r3, #8]
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 800328e:	811a      	strh	r2, [r3, #8]
			I2C2_Master.Data++;
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 8003298:	601a      	str	r2, [r3, #0]
			while(!(I2C2->ISR & (1<<1)));
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d0fa      	beq.n	800329c <I2C2_Master_Write_to_Register+0x178>
		while(I2C2_Master.DataSize > 1){
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80032a8:	891b      	ldrh	r3, [r3, #8]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d8e5      	bhi.n	800327a <I2C2_Master_Write_to_Register+0x156>
		}
		I2C2->TXDR = *(I2C2_Master.Data);
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
		I2C2_Master.DataSize--;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80032ba:	891b      	ldrh	r3, [r3, #8]
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80032c2:	811a      	strh	r2, [r3, #8]
		while(!(I2C2->ISR & (1<<5)));
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	d0fa      	beq.n	80032c6 <I2C2_Master_Write_to_Register+0x1a2>
		I2C2->ICR |= (1<<5);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <I2C2_Master_Write_to_Register+0x1d8>)
 80032d6:	2120      	movs	r1, #32
 80032d8:	430a      	orrs	r2, r1
 80032da:	61da      	str	r2, [r3, #28]
		I2C2_Master.State = I2C_READY;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80032de:	2201      	movs	r2, #1
 80032e0:	731a      	strb	r2, [r3, #12]
		__I2C_Unlock(&I2C2_Master);
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <I2C2_Master_Write_to_Register+0x1d4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	72da      	strb	r2, [r3, #11]
		return I2C_OK;
 80032e8:	2302      	movs	r3, #2
 80032ea:	e000      	b.n	80032ee <I2C2_Master_Write_to_Register+0x1ca>
	}
	else
	{
		return I2C_BUSY;
 80032ec:	2300      	movs	r3, #0
	}
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b007      	add	sp, #28
 80032f4:	bd90      	pop	{r4, r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	2000003c 	.word	0x2000003c
 80032fc:	40005800 	.word	0x40005800
 8003300:	fe00f400 	.word	0xfe00f400
 8003304:	fffffbff 	.word	0xfffffbff

08003308 <I2C2_Master_Read_from_Register>:

I2CStatusTypeDef I2C2_Master_Read_from_Register(uint8_t SlaveAddr, uint16_t RegisterAddr, uint8_t RegisterAddrSize, uint8_t *Data, uint16_t DataSize){
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	0004      	movs	r4, r0
 8003310:	0008      	movs	r0, r1
 8003312:	0011      	movs	r1, r2
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	1c22      	adds	r2, r4, #0
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	1c02      	adds	r2, r0, #0
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	1dbb      	adds	r3, r7, #6
 8003324:	1c0a      	adds	r2, r1, #0
 8003326:	701a      	strb	r2, [r3, #0]
	if (I2C2_Master.State == I2C_READY)
 8003328:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 800332a:	7b1b      	ldrb	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d000      	beq.n	8003332 <I2C2_Master_Read_from_Register+0x2a>
 8003330:	e0ed      	b.n	800350e <I2C2_Master_Read_from_Register+0x206>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	613b      	str	r3, [r7, #16]
  return(result);
 8003338:	693b      	ldr	r3, [r7, #16]
	{
		__I2C_Lock(&I2C2_Master);
 800333a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	4b75      	ldr	r3, [pc, #468]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003342:	7adb      	ldrb	r3, [r3, #11]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <I2C2_Master_Read_from_Register+0x50>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	2300      	movs	r3, #0
 8003356:	e0db      	b.n	8003510 <I2C2_Master_Read_from_Register+0x208>
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 800335a:	2201      	movs	r2, #1
 800335c:	72da      	strb	r2, [r3, #11]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
		I2C2_Master.State = I2C_BUSY;
 800336a:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 800336c:	2200      	movs	r2, #0
 800336e:	731a      	strb	r2, [r3, #12]
		// No reload, Number of Bytes are cleared, 7-bit addressing, Slave Address is cleared
		I2C2->CR2 &= ~((1<<24) | (255<<16) | (1<<11) | (1023<<0));
 8003370:	4b6a      	ldr	r3, [pc, #424]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4b69      	ldr	r3, [pc, #420]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003376:	496a      	ldr	r1, [pc, #424]	; (8003520 <I2C2_Master_Read_from_Register+0x218>)
 8003378:	400a      	ands	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
		I2C2->CR2 &= ~ (1<<10); 				// Master Write
 800337c:	4b67      	ldr	r3, [pc, #412]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003382:	4968      	ldr	r1, [pc, #416]	; (8003524 <I2C2_Master_Read_from_Register+0x21c>)
 8003384:	400a      	ands	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
		I2C2->CR2 &= ~(1<<25); 				// Not Generate Auto Stop
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4b63      	ldr	r3, [pc, #396]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800338e:	4966      	ldr	r1, [pc, #408]	; (8003528 <I2C2_Master_Read_from_Register+0x220>)
 8003390:	400a      	ands	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= ((RegisterAddrSize)<<16);	// Number of Register Address Bytes and Data Bytes
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	0019      	movs	r1, r3
 80033a0:	4b5e      	ldr	r3, [pc, #376]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (SlaveAddr<<1);		// Set Slave Address
 80033a6:	4b5d      	ldr	r3, [pc, #372]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	0019      	movs	r1, r3
 80033b2:	4b5a      	ldr	r3, [pc, #360]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (1<<13);				// Set Start Bit. Start Bit and Slave Address are Sent.
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4b57      	ldr	r3, [pc, #348]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0189      	lsls	r1, r1, #6
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
		I2C2_Master.RegisterAddr = RegisterAddr;
 80033c6:	4b54      	ldr	r3, [pc, #336]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80033c8:	1d3a      	adds	r2, r7, #4
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	809a      	strh	r2, [r3, #4]
		I2C2_Master.RegisterAddrSize = RegisterAddrSize;
 80033ce:	4b52      	ldr	r3, [pc, #328]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80033d0:	1dba      	adds	r2, r7, #6
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	719a      	strb	r2, [r3, #6]
		I2C2_Master.Data = Data;
 80033d6:	4b50      	ldr	r3, [pc, #320]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	601a      	str	r2, [r3, #0]
		I2C2_Master.DataSize = DataSize;
 80033dc:	4a4e      	ldr	r2, [pc, #312]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80033de:	2328      	movs	r3, #40	; 0x28
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	8113      	strh	r3, [r2, #8]
		I2C2_Master.SlaveAddr = SlaveAddr;
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80033e8:	1dfa      	adds	r2, r7, #7
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	729a      	strb	r2, [r3, #10]

		while(!(I2C2->ISR & (1<<1)));
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2202      	movs	r2, #2
 80033f6:	4013      	ands	r3, r2
 80033f8:	d0fa      	beq.n	80033f0 <I2C2_Master_Read_from_Register+0xe8>
		if(I2C2_Master.RegisterAddrSize == 2){
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80033fc:	799b      	ldrb	r3, [r3, #6]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d113      	bne.n	800342a <I2C2_Master_Read_from_Register+0x122>
			I2C2->TXDR = (uint8_t)((I2C2_Master.RegisterAddr& 0xFF00) >> 8);
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003404:	889b      	ldrh	r3, [r3, #4]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	b29b      	uxth	r3, r3
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b43      	ldr	r3, [pc, #268]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
			I2C2_Master.RegisterAddrSize--;
 8003410:	4b41      	ldr	r3, [pc, #260]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003412:	799b      	ldrb	r3, [r3, #6]
 8003414:	3b01      	subs	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 800341a:	719a      	strb	r2, [r3, #6]
			while(!(I2C2->ISR & (1<<1)));
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2202      	movs	r2, #2
 8003424:	4013      	ands	r3, r2
 8003426:	d0fa      	beq.n	800341e <I2C2_Master_Read_from_Register+0x116>
 8003428:	e00e      	b.n	8003448 <I2C2_Master_Read_from_Register+0x140>
		}
		else if(I2C2_Master.RegisterAddrSize == 1){
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 800342c:	799b      	ldrb	r3, [r3, #6]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10a      	bne.n	8003448 <I2C2_Master_Read_from_Register+0x140>
			I2C2->TXDR = (uint8_t)(I2C2_Master.RegisterAddr & 0x00FF);
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003434:	889b      	ldrh	r3, [r3, #4]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b38      	ldr	r3, [pc, #224]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
			I2C2_Master.RegisterAddrSize--;
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 800343e:	799b      	ldrb	r3, [r3, #6]
 8003440:	3b01      	subs	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003446:	719a      	strb	r2, [r3, #6]
		}
		while(!(I2C2->ISR & (1<<6)));
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	4013      	ands	r3, r2
 8003452:	d0fa      	beq.n	800344a <I2C2_Master_Read_from_Register+0x142>

		I2C2->CR2 &= ~((1<<24) | (255<<16) | (1<<11) | (1023<<0));
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4b30      	ldr	r3, [pc, #192]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800345a:	4931      	ldr	r1, [pc, #196]	; (8003520 <I2C2_Master_Read_from_Register+0x218>)
 800345c:	400a      	ands	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (1<<10); 				// Master Read
 8003460:	4b2e      	ldr	r3, [pc, #184]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	00c9      	lsls	r1, r1, #3
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (1<<25); 				// Generate Auto Stop
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	0489      	lsls	r1, r1, #18
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (DataSize<<16);	// Number of Register Address Bytes and Data Bytes
 800347c:	4b27      	ldr	r3, [pc, #156]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	2328      	movs	r3, #40	; 0x28
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	0019      	movs	r1, r3
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (SlaveAddr<<1);		// Set Slave Address
 8003490:	4b22      	ldr	r3, [pc, #136]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	0019      	movs	r1, r3
 800349c:	4b1f      	ldr	r3, [pc, #124]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
		I2C2->CR2 |= (1<<13);				// Set Start Bit. Start Bit and Slave Address are Sent.
 80034a2:	4b1e      	ldr	r3, [pc, #120]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	0189      	lsls	r1, r1, #6
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]

		while(I2C2_Master.DataSize > 0){
 80034b0:	e015      	b.n	80034de <I2C2_Master_Read_from_Register+0x1d6>
			while(!(I2C2->ISR & (1<<2)));
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2204      	movs	r2, #4
 80034ba:	4013      	ands	r3, r2
 80034bc:	d0fa      	beq.n	80034b4 <I2C2_Master_Read_from_Register+0x1ac>
			*(Data) = I2C2->RXDR;
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
			I2C2_Master.DataSize--;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80034ca:	891b      	ldrh	r3, [r3, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80034d2:	811a      	strh	r2, [r3, #8]
			I2C2_Master.Data++;
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80034dc:	601a      	str	r2, [r3, #0]
		while(I2C2_Master.DataSize > 0){
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 80034e0:	891b      	ldrh	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <I2C2_Master_Read_from_Register+0x1aa>
		}
		while(!(I2C2->ISR & (1<<5)));
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2220      	movs	r2, #32
 80034ee:	4013      	ands	r3, r2
 80034f0:	d0fa      	beq.n	80034e8 <I2C2_Master_Read_from_Register+0x1e0>
		I2C2->ICR |= (1<<5);
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <I2C2_Master_Read_from_Register+0x214>)
 80034f8:	2120      	movs	r1, #32
 80034fa:	430a      	orrs	r2, r1
 80034fc:	61da      	str	r2, [r3, #28]
		I2C2_Master.State = I2C_READY;
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003500:	2201      	movs	r2, #1
 8003502:	731a      	strb	r2, [r3, #12]
		__I2C_Unlock(&I2C2_Master);
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <I2C2_Master_Read_from_Register+0x210>)
 8003506:	2200      	movs	r2, #0
 8003508:	72da      	strb	r2, [r3, #11]
		return I2C_OK;
 800350a:	2302      	movs	r3, #2
 800350c:	e000      	b.n	8003510 <I2C2_Master_Read_from_Register+0x208>
	}
	else
	{
		return I2C_BUSY;
 800350e:	2300      	movs	r3, #0
	}
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b007      	add	sp, #28
 8003516:	bd90      	pop	{r4, r7, pc}
 8003518:	2000003c 	.word	0x2000003c
 800351c:	40005800 	.word	0x40005800
 8003520:	fe00f400 	.word	0xfe00f400
 8003524:	fffffbff 	.word	0xfffffbff
 8003528:	fdffffff 	.word	0xfdffffff

0800352c <I2C1_IRQHandler>:

uint8_t RegisterAddr = 0;
uint8_t b;
void __attribute__ ((interrupt, used)) I2C1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003532:	f3ef 8310 	mrs	r3, PRIMASK
 8003536:	60bb      	str	r3, [r7, #8]
  return(result);
 8003538:	68bb      	ldr	r3, [r7, #8]
	__I2C_Lock(&I2C1_Slave);
 800353a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	4b56      	ldr	r3, [pc, #344]	; (800369c <I2C1_IRQHandler+0x170>)
 8003542:	7adb      	ldrb	r3, [r3, #11]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <I2C1_IRQHandler+0x2a>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	e09f      	b.n	8003696 <I2C1_IRQHandler+0x16a>
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <I2C1_IRQHandler+0x170>)
 8003558:	2201      	movs	r2, #1
 800355a:	72da      	strb	r2, [r3, #11]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f383 8810 	msr	PRIMASK, r3
}
 8003566:	46c0      	nop			; (mov r8, r8)
	if((I2C1->ISR) & (1<<3))				// If Address Matched
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2208      	movs	r2, #8
 800356e:	4013      	ands	r3, r2
 8003570:	d100      	bne.n	8003574 <I2C1_IRQHandler+0x48>
 8003572:	e08d      	b.n	8003690 <I2C1_IRQHandler+0x164>
	{
		I2C1->ICR |= (1<<3);
 8003574:	4b4a      	ldr	r3, [pc, #296]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800357a:	2108      	movs	r1, #8
 800357c:	430a      	orrs	r2, r1
 800357e:	61da      	str	r2, [r3, #28]
		while(!(I2C1->ISR & (1<<2)));
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	d0fa      	beq.n	8003582 <I2C1_IRQHandler+0x56>
		RegisterAddr = I2C1->RXDR;
 800358c:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <I2C1_IRQHandler+0x178>)
 8003594:	701a      	strb	r2, [r3, #0]
		while((!(I2C1->ISR & (1<<2)))&&(!(I2C1->ISR & (1<<1))));
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2204      	movs	r2, #4
 800359e:	4013      	ands	r3, r2
 80035a0:	d104      	bne.n	80035ac <I2C1_IRQHandler+0x80>
 80035a2:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2202      	movs	r2, #2
 80035a8:	4013      	ands	r3, r2
 80035aa:	d0f5      	beq.n	8003598 <I2C1_IRQHandler+0x6c>
		if(I2C1->ISR & (1<<2)){
 80035ac:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2204      	movs	r2, #4
 80035b2:	4013      	ands	r3, r2
 80035b4:	d023      	beq.n	80035fe <I2C1_IRQHandler+0xd2>
			if(RegisterAddr == 0x20){	// Set Backlight Level
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <I2C1_IRQHandler+0x178>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d162      	bne.n	8003684 <I2C1_IRQHandler+0x158>
				Received_DutyData[0] = I2C1->RXDR;
 80035be:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <I2C1_IRQHandler+0x17c>)
 80035c6:	701a      	strb	r2, [r3, #0]
				while(!(I2C1->ISR & (1<<2)));
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	d0fa      	beq.n	80035ca <I2C1_IRQHandler+0x9e>
				Received_DutyData[1] = I2C1->RXDR;
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <I2C1_IRQHandler+0x17c>)
 80035dc:	705a      	strb	r2, [r3, #1]
				while(!(I2C1->ISR & (1<<5)));
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2220      	movs	r2, #32
 80035e6:	4013      	ands	r3, r2
 80035e8:	d0fa      	beq.n	80035e0 <I2C1_IRQHandler+0xb4>
				I2C1->ICR |= (1<<5);
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <I2C1_IRQHandler+0x174>)
 80035f0:	2120      	movs	r1, #32
 80035f2:	430a      	orrs	r2, r1
 80035f4:	61da      	str	r2, [r3, #28]
				level_set_flag = 1;
 80035f6:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <I2C1_IRQHandler+0x180>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e042      	b.n	8003684 <I2C1_IRQHandler+0x158>
			}
		}
		else if(I2C1->ISR & (1<<1)){
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2202      	movs	r2, #2
 8003604:	4013      	ands	r3, r2
 8003606:	d03d      	beq.n	8003684 <I2C1_IRQHandler+0x158>
			if(RegisterAddr == 0x66){ 	// Send Ambient Brightness
 8003608:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <I2C1_IRQHandler+0x178>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b66      	cmp	r3, #102	; 0x66
 800360e:	d119      	bne.n	8003644 <I2C1_IRQHandler+0x118>

				I2C1->TXDR = LTR_TransmitData[0];
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <I2C1_IRQHandler+0x184>)
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
				while(!(I2C1->ISR & (1<<1)));
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	d0fa      	beq.n	800361a <I2C1_IRQHandler+0xee>
				I2C1->TXDR = LTR_TransmitData[1];
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <I2C1_IRQHandler+0x184>)
 8003626:	785a      	ldrb	r2, [r3, #1]
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
				while(!(I2C1->ISR & (1<<5)));
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2220      	movs	r2, #32
 8003634:	4013      	ands	r3, r2
 8003636:	d0fa      	beq.n	800362e <I2C1_IRQHandler+0x102>
				I2C1->ICR |= (1<<5);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800363e:	2120      	movs	r1, #32
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
			}
			if(RegisterAddr == 0x22){ 	// Send BL Level
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <I2C1_IRQHandler+0x178>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b22      	cmp	r3, #34	; 0x22
 800364a:	d11b      	bne.n	8003684 <I2C1_IRQHandler+0x158>
				Send_Backlight_Level();
 800364c:	f001 f824 	bl	8004698 <Send_Backlight_Level>

				I2C1->TXDR = BL_TransmitData[0];
 8003650:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <I2C1_IRQHandler+0x188>)
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
				while(!(I2C1->ISR & (1<<1)));
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
 8003662:	d0fa      	beq.n	800365a <I2C1_IRQHandler+0x12e>
				I2C1->TXDR = BL_TransmitData[1];
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <I2C1_IRQHandler+0x188>)
 8003666:	785a      	ldrb	r2, [r3, #1]
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
				while(!(I2C1->ISR & (1<<5)));
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2220      	movs	r2, #32
 8003674:	4013      	ands	r3, r2
 8003676:	d0fa      	beq.n	800366e <I2C1_IRQHandler+0x142>
				I2C1->ICR |= (1<<5);
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800367e:	2120      	movs	r1, #32
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]
			}
		}
		I2C1->ICR |= (1<<3);
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <I2C1_IRQHandler+0x174>)
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <I2C1_IRQHandler+0x174>)
 800368a:	2108      	movs	r1, #8
 800368c:	430a      	orrs	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
	}
	__I2C_Unlock(&I2C1_Slave);
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <I2C1_IRQHandler+0x170>)
 8003692:	2200      	movs	r2, #0
 8003694:	72da      	strb	r2, [r3, #11]
}
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}
 800369c:	2000002c 	.word	0x2000002c
 80036a0:	40005400 	.word	0x40005400
 80036a4:	2000004c 	.word	0x2000004c
 80036a8:	200001b0 	.word	0x200001b0
 80036ac:	200001b2 	.word	0x200001b2
 80036b0:	200001b8 	.word	0x200001b8
 80036b4:	200001bc 	.word	0x200001bc

080036b8 <LTR_Sensor_Init>:
/*	  LTR_Sensor_Init
*	  Gain durumu, Integration time, Measurement Time Rate, Part_id ve Manufacturer_id registerlardan okuma yapılır
*/

LTR_sensor LTR;
void LTR_Sensor_Init(LTR_sensor *LTR_Sensor){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80036c0:	23fa      	movs	r3, #250	; 0xfa
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f001 fe2f 	bl	8005328 <HAL_Delay>
	ALS_ModeSelect(LTR_Sensor,1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2101      	movs	r1, #1
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 f96e 	bl	80039b0 <ALS_ModeSelect>
	HAL_Delay(10);
 80036d4:	200a      	movs	r0, #10
 80036d6:	f001 fe27 	bl	8005328 <HAL_Delay>

	ALS_GainRead(LTR_Sensor);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f90a 	bl	80038f6 <ALS_GainRead>
	ALS_IntTimeBitRead(LTR_Sensor);		// okuma yapılan data maskelenir ve Integration Time bitleri kullanılır
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f9cf 	bl	8003a88 <ALS_IntTimeBitRead>
	ALS_MeasRateBitRead(LTR_Sensor);      // okuma yapılan data maskelenir ve Measurement Repeat Rate bitleri kullanılır
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 fba6 	bl	8003e3e <ALS_MeasRateBitRead>

	Part_Id(LTR_Sensor);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 fcf8 	bl	80040ea <Part_Id>
	Manufac_Id(LTR_Sensor);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 fd0d 	bl	800411c <Manufac_Id>
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}

0800370a <ALS_CONTR_Read>:


/*	  ALS_CONTR_Read
*	  Control Registerindan okuma işlemi yapılır.
*/
uint8_t ALS_CONTR_Read(void){
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af02      	add	r7, sp, #8
	uint8_t Data;	// ALS_CONTR register'ından okunacak olan Data
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_CONTR, 1, &Data, 1)!=I2C_OK);
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	2201      	movs	r2, #1
 8003716:	9200      	str	r2, [sp, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	2029      	movs	r0, #41	; 0x29
 800371e:	f7ff fdf3 	bl	8003308 <I2C2_Master_Read_from_Register>
 8003722:	0003      	movs	r3, r0
 8003724:	2b02      	cmp	r3, #2
 8003726:	d1f4      	bne.n	8003712 <ALS_CONTR_Read+0x8>
	return Data;
 8003728:	1dfb      	adds	r3, r7, #7
 800372a:	781b      	ldrb	r3, [r3, #0]
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}

08003734 <ALS_CONTR_GainSet>:

/*	  ALS_CONTR_GainSet
*	  Gain durumu kontrol edilir ve istenilen gain durumu ALS_CONTR register'a yazılır
*/
int8_t ALS_CONTR_GainSet (LTR_sensor *LTR_Sensor, uint8_t Gain){
 8003734:	b5b0      	push	{r4, r5, r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	000a      	movs	r2, r1
 800373e:	1cfb      	adds	r3, r7, #3
 8003740:	701a      	strb	r2, [r3, #0]
		 * Gain=48 ise sensör 48x olarak set edilir
		 * Gain=96 ise sensör 96x olarak set edilir
		 */
	uint8_t GainReadData;
	uint8_t newDataGain;
	newDataGain = ALS_CONTR_Read();	// Gain Register ından okunan data değeri
 8003742:	250f      	movs	r5, #15
 8003744:	197c      	adds	r4, r7, r5
 8003746:	f7ff ffe0 	bl	800370a <ALS_CONTR_Read>
 800374a:	0003      	movs	r3, r0
 800374c:	7023      	strb	r3, [r4, #0]
	GainReadData = newDataGain & (0xE3);		//// okunan data ile maskeleme işlemi yapılır (0x11100011)
 800374e:	230e      	movs	r3, #14
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	197a      	adds	r2, r7, r5
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	211c      	movs	r1, #28
 8003758:	438a      	bics	r2, r1
 800375a:	701a      	strb	r2, [r3, #0]
	uint8_t wrtData;		// ALS_CONTR register'ına yazılacak olan Data
		if (Gain==1 || Gain == 2 || Gain==4 || Gain == 8 || Gain==48 || Gain == 96 ){
 800375c:	1cfb      	adds	r3, r7, #3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d014      	beq.n	800378e <ALS_CONTR_GainSet+0x5a>
 8003764:	1cfb      	adds	r3, r7, #3
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d010      	beq.n	800378e <ALS_CONTR_GainSet+0x5a>
 800376c:	1cfb      	adds	r3, r7, #3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d00c      	beq.n	800378e <ALS_CONTR_GainSet+0x5a>
 8003774:	1cfb      	adds	r3, r7, #3
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d008      	beq.n	800378e <ALS_CONTR_GainSet+0x5a>
 800377c:	1cfb      	adds	r3, r7, #3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b30      	cmp	r3, #48	; 0x30
 8003782:	d004      	beq.n	800378e <ALS_CONTR_GainSet+0x5a>
 8003784:	1cfb      	adds	r3, r7, #3
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b60      	cmp	r3, #96	; 0x60
 800378a:	d000      	beq.n	800378e <ALS_CONTR_GainSet+0x5a>
 800378c:	e0ad      	b.n	80038ea <ALS_CONTR_GainSet+0x1b6>
			if     (Gain == 1){					// Gain = 1x -> 00000000
 800378e:	1cfb      	adds	r3, r7, #3
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d113      	bne.n	80037be <ALS_CONTR_GainSet+0x8a>
				wrtData = GainReadData;		// GainReadData değerine ilgili bit değeri yazılır ve gain 1x e set edilir.
 8003796:	230d      	movs	r3, #13
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	220e      	movs	r2, #14
 800379c:	18ba      	adds	r2, r7, r2
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);	//
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	230d      	movs	r3, #13
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2201      	movs	r2, #1
 80037aa:	9200      	str	r2, [sp, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	2029      	movs	r0, #41	; 0x29
 80037b2:	f7ff fcb7 	bl	8003124 <I2C2_Master_Write_to_Register>
 80037b6:	0003      	movs	r3, r0
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d1f3      	bne.n	80037a4 <ALS_CONTR_GainSet+0x70>
 80037bc:	e085      	b.n	80038ca <ALS_CONTR_GainSet+0x196>
			}
			else if(Gain == 2){					// Gain = 2x -> 00000100
 80037be:	1cfb      	adds	r3, r7, #3
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d116      	bne.n	80037f4 <ALS_CONTR_GainSet+0xc0>
				wrtData = GainReadData | (0x04);		// GainReadData değerine ilgili bit değeri yazılır ve gain 2x e set edilir.
 80037c6:	230e      	movs	r3, #14
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2204      	movs	r2, #4
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	230d      	movs	r3, #13
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	230d      	movs	r3, #13
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2201      	movs	r2, #1
 80037e0:	9200      	str	r2, [sp, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	2029      	movs	r0, #41	; 0x29
 80037e8:	f7ff fc9c 	bl	8003124 <I2C2_Master_Write_to_Register>
 80037ec:	0003      	movs	r3, r0
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d1f3      	bne.n	80037da <ALS_CONTR_GainSet+0xa6>
 80037f2:	e06a      	b.n	80038ca <ALS_CONTR_GainSet+0x196>
			}
			else if(Gain == 4){					// Gain = 4x -> 00001000
 80037f4:	1cfb      	adds	r3, r7, #3
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d116      	bne.n	800382a <ALS_CONTR_GainSet+0xf6>
				wrtData = GainReadData | (0x08);		// GainReadData değerine ilgili bit değeri yazılır ve gain 4x e set edilir.
 80037fc:	230e      	movs	r3, #14
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2208      	movs	r2, #8
 8003804:	4313      	orrs	r3, r2
 8003806:	b2da      	uxtb	r2, r3
 8003808:	230d      	movs	r3, #13
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	230d      	movs	r3, #13
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2201      	movs	r2, #1
 8003816:	9200      	str	r2, [sp, #0]
 8003818:	2201      	movs	r2, #1
 800381a:	2180      	movs	r1, #128	; 0x80
 800381c:	2029      	movs	r0, #41	; 0x29
 800381e:	f7ff fc81 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003822:	0003      	movs	r3, r0
 8003824:	2b02      	cmp	r3, #2
 8003826:	d1f3      	bne.n	8003810 <ALS_CONTR_GainSet+0xdc>
 8003828:	e04f      	b.n	80038ca <ALS_CONTR_GainSet+0x196>
			}
			else if(Gain == 8){					// Gain = 8x -> 00001100
 800382a:	1cfb      	adds	r3, r7, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d116      	bne.n	8003860 <ALS_CONTR_GainSet+0x12c>
				wrtData = GainReadData | (0x0C);		// GainReadData değerine ilgili bit değeri yazılır ve gain 8x e set edilir.
 8003832:	230e      	movs	r3, #14
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	220c      	movs	r2, #12
 800383a:	4313      	orrs	r3, r2
 800383c:	b2da      	uxtb	r2, r3
 800383e:	230d      	movs	r3, #13
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	230d      	movs	r3, #13
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	2201      	movs	r2, #1
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	2029      	movs	r0, #41	; 0x29
 8003854:	f7ff fc66 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003858:	0003      	movs	r3, r0
 800385a:	2b02      	cmp	r3, #2
 800385c:	d1f3      	bne.n	8003846 <ALS_CONTR_GainSet+0x112>
 800385e:	e034      	b.n	80038ca <ALS_CONTR_GainSet+0x196>
			}
			else if(Gain == 48){				// Gain = 48x -> 00011000
 8003860:	1cfb      	adds	r3, r7, #3
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d116      	bne.n	8003896 <ALS_CONTR_GainSet+0x162>
				wrtData = GainReadData | (0x18);		// GainReadData değerine ilgili bit değeri yazılır ve gain 48x e set edilir.
 8003868:	230e      	movs	r3, #14
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2218      	movs	r2, #24
 8003870:	4313      	orrs	r3, r2
 8003872:	b2da      	uxtb	r2, r3
 8003874:	230d      	movs	r3, #13
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	230d      	movs	r3, #13
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2201      	movs	r2, #1
 8003882:	9200      	str	r2, [sp, #0]
 8003884:	2201      	movs	r2, #1
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	2029      	movs	r0, #41	; 0x29
 800388a:	f7ff fc4b 	bl	8003124 <I2C2_Master_Write_to_Register>
 800388e:	0003      	movs	r3, r0
 8003890:	2b02      	cmp	r3, #2
 8003892:	d1f3      	bne.n	800387c <ALS_CONTR_GainSet+0x148>
 8003894:	e019      	b.n	80038ca <ALS_CONTR_GainSet+0x196>
			}
			else if(Gain == 96){										// Gain = 96x -> 00011100
 8003896:	1cfb      	adds	r3, r7, #3
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b60      	cmp	r3, #96	; 0x60
 800389c:	d115      	bne.n	80038ca <ALS_CONTR_GainSet+0x196>
				wrtData = GainReadData | (0x1C);		// GainReadData değerine ilgili bit değeri yazılır ve gain 96x e set edilir.
 800389e:	230e      	movs	r3, #14
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	221c      	movs	r2, #28
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	230d      	movs	r3, #13
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	230d      	movs	r3, #13
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	2029      	movs	r0, #41	; 0x29
 80038c0:	f7ff fc30 	bl	8003124 <I2C2_Master_Write_to_Register>
 80038c4:	0003      	movs	r3, r0
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d1f3      	bne.n	80038b2 <ALS_CONTR_GainSet+0x17e>
			}

				if (ALS_CONTR_Read() == Gain){	// Data doğru bir şekilde gönderilmiş mi? kontrol et
 80038ca:	f7ff ff1e 	bl	800370a <ALS_CONTR_Read>
 80038ce:	0003      	movs	r3, r0
 80038d0:	001a      	movs	r2, r3
 80038d2:	1cfb      	adds	r3, r7, #3
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d105      	bne.n	80038e6 <ALS_CONTR_GainSet+0x1b2>
					LTR_Sensor->Gain = Gain;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1cfa      	adds	r2, r7, #3
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	709a      	strb	r2, [r3, #2]
					return GainSet_OK;				// return = 1 ise Gönderme işlemi doğru bir şekilde gerçekleşmiştir
 80038e2:	2301      	movs	r3, #1
 80038e4:	e003      	b.n	80038ee <ALS_CONTR_GainSet+0x1ba>
				}
				else{

					return GainSet_Not_OK;			// return = 0 ise Gönderme işleminde hata oluşmuştur
 80038e6:	2300      	movs	r3, #0
 80038e8:	e001      	b.n	80038ee <ALS_CONTR_GainSet+0x1ba>
				}
		}
			else {
				return GainSet_IsNotCorrect;		// return = -1 ise Gain değeri {1,2,4,8,48,96} değerlerinden herhangi biri değildir.
 80038ea:	2301      	movs	r3, #1
 80038ec:	425b      	negs	r3, r3
			}
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bdb0      	pop	{r4, r5, r7, pc}

080038f6 <ALS_GainRead>:

/*	  ALS_GainRead
*	  Gain durumu kontrol edilir ve Lux hesabında kullanılan Gain değeri set edilir.
*/
uint8_t ALS_GainRead(LTR_sensor *LTR_Sensor){
 80038f6:	b590      	push	{r4, r7, lr}
 80038f8:	b087      	sub	sp, #28
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	6078      	str	r0, [r7, #4]
	uint8_t Data;	// ALS_STATUS register'ından okunacak olan Gain Data
	uint8_t Gain;
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_STATUS, 1, &Data, 1)!=I2C_OK);
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	240d      	movs	r4, #13
 8003902:	193b      	adds	r3, r7, r4
 8003904:	2201      	movs	r2, #1
 8003906:	9200      	str	r2, [sp, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	218c      	movs	r1, #140	; 0x8c
 800390c:	2029      	movs	r0, #41	; 0x29
 800390e:	f7ff fcfb 	bl	8003308 <I2C2_Master_Read_from_Register>
 8003912:	0003      	movs	r3, r0
 8003914:	2b02      	cmp	r3, #2
 8003916:	d1f3      	bne.n	8003900 <ALS_GainRead+0xa>
	uint8_t newDataGain = Data & (0x70);		//// okunan data ile maskeleme işlemi yapılır (0x01110000)
 8003918:	193b      	adds	r3, r7, r4
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	200e      	movs	r0, #14
 800391e:	183b      	adds	r3, r7, r0
 8003920:	2170      	movs	r1, #112	; 0x70
 8003922:	400a      	ands	r2, r1
 8003924:	701a      	strb	r2, [r3, #0]
		if 	   (newDataGain == 0x00){						// Gain = 1x -> 00000000
 8003926:	183b      	adds	r3, r7, r0
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <ALS_GainRead+0x42>
			Gain=1;
 800392e:	230f      	movs	r3, #15
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e030      	b.n	800399a <ALS_GainRead+0xa4>
		}
		else if(newDataGain == 0x10){						// Gain = 2x -> 00010000
 8003938:	230e      	movs	r3, #14
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d104      	bne.n	800394c <ALS_GainRead+0x56>
			Gain=2;
 8003942:	230f      	movs	r3, #15
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e026      	b.n	800399a <ALS_GainRead+0xa4>
		}
		else if(newDataGain == 0x20){						// Gain = 4x -> 00100000
 800394c:	230e      	movs	r3, #14
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b20      	cmp	r3, #32
 8003954:	d104      	bne.n	8003960 <ALS_GainRead+0x6a>
			Gain=4;
 8003956:	230f      	movs	r3, #15
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2204      	movs	r2, #4
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e01c      	b.n	800399a <ALS_GainRead+0xa4>
		}
		else if(newDataGain == 0x30){						// Gain = 8x -> 00110000
 8003960:	230e      	movs	r3, #14
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b30      	cmp	r3, #48	; 0x30
 8003968:	d104      	bne.n	8003974 <ALS_GainRead+0x7e>
			Gain=8;
 800396a:	230f      	movs	r3, #15
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2208      	movs	r2, #8
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e012      	b.n	800399a <ALS_GainRead+0xa4>
		}
		else if(newDataGain == 0x60){						// Gain = 48x -> 01100000
 8003974:	230e      	movs	r3, #14
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d104      	bne.n	8003988 <ALS_GainRead+0x92>
			Gain=48;
 800397e:	230f      	movs	r3, #15
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2230      	movs	r2, #48	; 0x30
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e008      	b.n	800399a <ALS_GainRead+0xa4>
		}
		else if(newDataGain == 0x70){						// Gain = 96x -> 01110000
 8003988:	230e      	movs	r3, #14
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b70      	cmp	r3, #112	; 0x70
 8003990:	d103      	bne.n	800399a <ALS_GainRead+0xa4>
			Gain=96;
 8003992:	230f      	movs	r3, #15
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2260      	movs	r2, #96	; 0x60
 8003998:	701a      	strb	r2, [r3, #0]
		}
		LTR_Sensor->Gain=Gain;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	210f      	movs	r1, #15
 800399e:	187a      	adds	r2, r7, r1
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	709a      	strb	r2, [r3, #2]
	return Gain;
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	781b      	ldrb	r3, [r3, #0]
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b005      	add	sp, #20
 80039ae:	bd90      	pop	{r4, r7, pc}

080039b0 <ALS_ModeSelect>:
}

/*	  ALS_ModeSelect
*	  Aktif mode Standby mode seçimi yapılması için gerekli fonksiyon
*/
void ALS_ModeSelect(LTR_sensor *LTR_Sensor, uint8_t mode){
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	000a      	movs	r2, r1
 80039ba:	1cfb      	adds	r3, r7, #3
 80039bc:	701a      	strb	r2, [r3, #0]
	* mode=1 ise active mode
	*/
		uint8_t Data;	// ALS_CONTR register'ından okunacak olan Mode Data
		uint8_t maskedData;	// Maskeleme sonrası kullanılacak olan Data
		uint8_t wrtData;
		while(I2C2_Master_Read_from_Register(LTR_Address, ALS_CONTR, 1, &Data, 1)!=I2C_OK);
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	240e      	movs	r4, #14
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	2201      	movs	r2, #1
 80039c6:	9200      	str	r2, [sp, #0]
 80039c8:	2201      	movs	r2, #1
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	2029      	movs	r0, #41	; 0x29
 80039ce:	f7ff fc9b 	bl	8003308 <I2C2_Master_Read_from_Register>
 80039d2:	0003      	movs	r3, r0
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d1f3      	bne.n	80039c0 <ALS_ModeSelect+0x10>
		maskedData = Data & (0xFE);							//  maskeleme işlemi yapılır  (0x11111110)
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	200f      	movs	r0, #15
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	2101      	movs	r1, #1
 80039e2:	438a      	bics	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]

		if		(mode == 0){								//	Standby-mode			// 00000000
 80039e6:	1cfb      	adds	r3, r7, #3
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d112      	bne.n	8003a14 <ALS_ModeSelect+0x64>
			wrtData = maskedData | (0x00);
 80039ee:	230d      	movs	r3, #13
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	183a      	adds	r2, r7, r0
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	701a      	strb	r2, [r3, #0]
			while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	230d      	movs	r3, #13
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	9200      	str	r2, [sp, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	2029      	movs	r0, #41	; 0x29
 8003a08:	f7ff fb8c 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d1f3      	bne.n	80039fa <ALS_ModeSelect+0x4a>
 8003a12:	e01c      	b.n	8003a4e <ALS_ModeSelect+0x9e>
		}

		else if (mode == 1)	{								// Active mode				// 00000001
 8003a14:	1cfb      	adds	r3, r7, #3
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d118      	bne.n	8003a4e <ALS_ModeSelect+0x9e>
			wrtData = maskedData | (0x01);
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	230d      	movs	r3, #13
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	701a      	strb	r2, [r3, #0]
			while(I2C2_Master_Write_to_Register(LTR_Address, ALS_CONTR, 1, &wrtData, 1)!=I2C_OK);
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	230d      	movs	r3, #13
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2201      	movs	r2, #1
 8003a36:	9200      	str	r2, [sp, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	2029      	movs	r0, #41	; 0x29
 8003a3e:	f7ff fb71 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003a42:	0003      	movs	r3, r0
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d1f3      	bne.n	8003a30 <ALS_ModeSelect+0x80>
			HAL_Delay(9); 									// wait 10ms (max) - wakeup time from standby
 8003a48:	2009      	movs	r0, #9
 8003a4a:	f001 fc6d 	bl	8005328 <HAL_Delay>
	}
		LTR_Sensor->mode = mode;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	1cfa      	adds	r2, r7, #3
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	72da      	strb	r2, [r3, #11]
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b005      	add	sp, #20
 8003a5c:	bd90      	pop	{r4, r7, pc}

08003a5e <ALS_IntTimeRead>:
 */

/*	  ALS_IntTimeRead
*	  ALS_MEAS_RATE register'ından okunacak olan Integration Time Data
*/
uint8_t ALS_IntTimeRead (void){
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af02      	add	r7, sp, #8
	uint8_t Data;
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_MEAS_RATE, 1, &Data, 1)!=I2C_OK);
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	2201      	movs	r2, #1
 8003a6a:	9200      	str	r2, [sp, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2185      	movs	r1, #133	; 0x85
 8003a70:	2029      	movs	r0, #41	; 0x29
 8003a72:	f7ff fc49 	bl	8003308 <I2C2_Master_Read_from_Register>
 8003a76:	0003      	movs	r3, r0
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d1f4      	bne.n	8003a66 <ALS_IntTimeRead+0x8>
	return Data;
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	781b      	ldrb	r3, [r3, #0]
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <ALS_IntTimeBitRead>:
/*	  ALS_IntTimeBitRead
*	  ALS_MEAS_RATE register'ından Integration Time Bitlerinin okunması
*/
void ALS_IntTimeBitRead (LTR_sensor *LTR_Sensor){
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	uint8_t MaskedData;
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_MEAS_RATE, 1, &Data, 1)!=I2C_OK);
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	240e      	movs	r4, #14
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	2201      	movs	r2, #1
 8003a98:	9200      	str	r2, [sp, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	2185      	movs	r1, #133	; 0x85
 8003a9e:	2029      	movs	r0, #41	; 0x29
 8003aa0:	f7ff fc32 	bl	8003308 <I2C2_Master_Read_from_Register>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d1f3      	bne.n	8003a92 <ALS_IntTimeBitRead+0xa>
	MaskedData = Data&(0x38);
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	200f      	movs	r0, #15
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	2138      	movs	r1, #56	; 0x38
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	701a      	strb	r2, [r3, #0]
	if (MaskedData==0){
 8003ab8:	183b      	adds	r3, r7, r0
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <ALS_IntTimeBitRead+0x40>
		LTR_Sensor->iTime=100;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2264      	movs	r2, #100	; 0x64
 8003ac4:	809a      	strh	r2, [r3, #4]
 8003ac6:	e040      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==8){
 8003ac8:	230f      	movs	r3, #15
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d103      	bne.n	8003ada <ALS_IntTimeBitRead+0x52>
		LTR_Sensor->iTime=50;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2232      	movs	r2, #50	; 0x32
 8003ad6:	809a      	strh	r2, [r3, #4]
 8003ad8:	e037      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==16){
 8003ada:	230f      	movs	r3, #15
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d103      	bne.n	8003aec <ALS_IntTimeBitRead+0x64>
		LTR_Sensor->iTime=200;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	22c8      	movs	r2, #200	; 0xc8
 8003ae8:	809a      	strh	r2, [r3, #4]
 8003aea:	e02e      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==24){
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b18      	cmp	r3, #24
 8003af4:	d104      	bne.n	8003b00 <ALS_IntTimeBitRead+0x78>
		LTR_Sensor->iTime=400;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	22c8      	movs	r2, #200	; 0xc8
 8003afa:	0052      	lsls	r2, r2, #1
 8003afc:	809a      	strh	r2, [r3, #4]
 8003afe:	e024      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==32){
 8003b00:	230f      	movs	r3, #15
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d103      	bne.n	8003b12 <ALS_IntTimeBitRead+0x8a>
		LTR_Sensor->iTime=150;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2296      	movs	r2, #150	; 0x96
 8003b0e:	809a      	strh	r2, [r3, #4]
 8003b10:	e01b      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==40){
 8003b12:	230f      	movs	r3, #15
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b28      	cmp	r3, #40	; 0x28
 8003b1a:	d103      	bne.n	8003b24 <ALS_IntTimeBitRead+0x9c>
		LTR_Sensor->iTime=250;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	22fa      	movs	r2, #250	; 0xfa
 8003b20:	809a      	strh	r2, [r3, #4]
 8003b22:	e012      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==48){
 8003b24:	230f      	movs	r3, #15
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b30      	cmp	r3, #48	; 0x30
 8003b2c:	d104      	bne.n	8003b38 <ALS_IntTimeBitRead+0xb0>
		LTR_Sensor->iTime=300;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2296      	movs	r2, #150	; 0x96
 8003b32:	0052      	lsls	r2, r2, #1
 8003b34:	809a      	strh	r2, [r3, #4]
 8003b36:	e008      	b.n	8003b4a <ALS_IntTimeBitRead+0xc2>
	}
	else if (MaskedData==56){
 8003b38:	230f      	movs	r3, #15
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b38      	cmp	r3, #56	; 0x38
 8003b40:	d103      	bne.n	8003b4a <ALS_IntTimeBitRead+0xc2>
		LTR_Sensor->iTime=350;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	22af      	movs	r2, #175	; 0xaf
 8003b46:	0052      	lsls	r2, r2, #1
 8003b48:	809a      	strh	r2, [r3, #4]
	}
	LTR_Sensor->iTime=LTR_Sensor->iTime/100;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	889b      	ldrh	r3, [r3, #4]
 8003b4e:	2164      	movs	r1, #100	; 0x64
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fc fad9 	bl	8000108 <__udivsi3>
 8003b56:	0003      	movs	r3, r0
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	809a      	strh	r2, [r3, #4]
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b005      	add	sp, #20
 8003b64:	bd90      	pop	{r4, r7, pc}
	...

08003b68 <ALS_IntTimeSet>:

/*	  ALS_IntTimeSet
*	  Integration time durumu kontrol edilir ve istenilen Integration time durumu ALS_MEAS_RATE register'a yazılır
*/
int8_t ALS_IntTimeSet(LTR_sensor *LTR_Sensor, float iTime){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
	uint8_t iTimeMaskedData;
	uint8_t wrtData;
	iTimeMaskedData=ALS_IntTimeRead() & (0xC7);	// okunan data ile maskeleme işlemi yapılır (0x11000111)
 8003b72:	f7ff ff74 	bl	8003a5e <ALS_IntTimeRead>
 8003b76:	0003      	movs	r3, r0
 8003b78:	0019      	movs	r1, r3
 8003b7a:	230f      	movs	r3, #15
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2238      	movs	r2, #56	; 0x38
 8003b80:	4391      	bics	r1, r2
 8003b82:	000a      	movs	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
	if(iTime == 100 || iTime == 50 || iTime == 200 || iTime == 400 || iTime == 150 || iTime == 250 || iTime == 300 || iTime == 350)	{
 8003b86:	499a      	ldr	r1, [pc, #616]	; (8003df0 <ALS_IntTimeSet+0x288>)
 8003b88:	6838      	ldr	r0, [r7, #0]
 8003b8a:	f7fc fb93 	bl	80002b4 <__aeabi_fcmpeq>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d12a      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003b92:	4998      	ldr	r1, [pc, #608]	; (8003df4 <ALS_IntTimeSet+0x28c>)
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f7fc fb8d 	bl	80002b4 <__aeabi_fcmpeq>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d124      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003b9e:	4996      	ldr	r1, [pc, #600]	; (8003df8 <ALS_IntTimeSet+0x290>)
 8003ba0:	6838      	ldr	r0, [r7, #0]
 8003ba2:	f7fc fb87 	bl	80002b4 <__aeabi_fcmpeq>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d11e      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003baa:	4994      	ldr	r1, [pc, #592]	; (8003dfc <ALS_IntTimeSet+0x294>)
 8003bac:	6838      	ldr	r0, [r7, #0]
 8003bae:	f7fc fb81 	bl	80002b4 <__aeabi_fcmpeq>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d118      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003bb6:	4992      	ldr	r1, [pc, #584]	; (8003e00 <ALS_IntTimeSet+0x298>)
 8003bb8:	6838      	ldr	r0, [r7, #0]
 8003bba:	f7fc fb7b 	bl	80002b4 <__aeabi_fcmpeq>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d112      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003bc2:	4990      	ldr	r1, [pc, #576]	; (8003e04 <ALS_IntTimeSet+0x29c>)
 8003bc4:	6838      	ldr	r0, [r7, #0]
 8003bc6:	f7fc fb75 	bl	80002b4 <__aeabi_fcmpeq>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d10c      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003bce:	498e      	ldr	r1, [pc, #568]	; (8003e08 <ALS_IntTimeSet+0x2a0>)
 8003bd0:	6838      	ldr	r0, [r7, #0]
 8003bd2:	f7fc fb6f 	bl	80002b4 <__aeabi_fcmpeq>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d106      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003bda:	498c      	ldr	r1, [pc, #560]	; (8003e0c <ALS_IntTimeSet+0x2a4>)
 8003bdc:	6838      	ldr	r0, [r7, #0]
 8003bde:	f7fc fb69 	bl	80002b4 <__aeabi_fcmpeq>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d100      	bne.n	8003be8 <ALS_IntTimeSet+0x80>
 8003be6:	e0fc      	b.n	8003de2 <ALS_IntTimeSet+0x27a>
			if	  (iTime == 100){								// iTime = 100ms -> 00000000
 8003be8:	4981      	ldr	r1, [pc, #516]	; (8003df0 <ALS_IntTimeSet+0x288>)
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f7fc fb62 	bl	80002b4 <__aeabi_fcmpeq>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	d013      	beq.n	8003c1c <ALS_IntTimeSet+0xb4>
				wrtData = iTimeMaskedData | (0x00);
 8003bf4:	230e      	movs	r3, #14
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	18ba      	adds	r2, r7, r2
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	230e      	movs	r3, #14
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2201      	movs	r2, #1
 8003c08:	9200      	str	r2, [sp, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	2185      	movs	r1, #133	; 0x85
 8003c0e:	2029      	movs	r0, #41	; 0x29
 8003c10:	f7ff fa88 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003c14:	0003      	movs	r3, r0
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d1f3      	bne.n	8003c02 <ALS_IntTimeSet+0x9a>
 8003c1a:	e0c9      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 50){								// iTime = 50ms -> 00001000
 8003c1c:	4975      	ldr	r1, [pc, #468]	; (8003df4 <ALS_IntTimeSet+0x28c>)
 8003c1e:	6838      	ldr	r0, [r7, #0]
 8003c20:	f7fc fb48 	bl	80002b4 <__aeabi_fcmpeq>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d016      	beq.n	8003c56 <ALS_IntTimeSet+0xee>
				wrtData = iTimeMaskedData | (0x08);
 8003c28:	230f      	movs	r3, #15
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2208      	movs	r2, #8
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	230e      	movs	r3, #14
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	230e      	movs	r3, #14
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	2201      	movs	r2, #1
 8003c42:	9200      	str	r2, [sp, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	2185      	movs	r1, #133	; 0x85
 8003c48:	2029      	movs	r0, #41	; 0x29
 8003c4a:	f7ff fa6b 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d1f3      	bne.n	8003c3c <ALS_IntTimeSet+0xd4>
 8003c54:	e0ac      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 200){								// iTime = 200ms -> 00010000
 8003c56:	4968      	ldr	r1, [pc, #416]	; (8003df8 <ALS_IntTimeSet+0x290>)
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f7fc fb2b 	bl	80002b4 <__aeabi_fcmpeq>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d016      	beq.n	8003c90 <ALS_IntTimeSet+0x128>
				wrtData = iTimeMaskedData | (0x10);
 8003c62:	230f      	movs	r3, #15
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	230e      	movs	r3, #14
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	230e      	movs	r3, #14
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	9200      	str	r2, [sp, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2185      	movs	r1, #133	; 0x85
 8003c82:	2029      	movs	r0, #41	; 0x29
 8003c84:	f7ff fa4e 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d1f3      	bne.n	8003c76 <ALS_IntTimeSet+0x10e>
 8003c8e:	e08f      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 400){								// iTime = 400ms -> 00011000
 8003c90:	495a      	ldr	r1, [pc, #360]	; (8003dfc <ALS_IntTimeSet+0x294>)
 8003c92:	6838      	ldr	r0, [r7, #0]
 8003c94:	f7fc fb0e 	bl	80002b4 <__aeabi_fcmpeq>
 8003c98:	1e03      	subs	r3, r0, #0
 8003c9a:	d016      	beq.n	8003cca <ALS_IntTimeSet+0x162>
				wrtData = iTimeMaskedData | (0x18);
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2218      	movs	r2, #24
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	230e      	movs	r3, #14
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	230e      	movs	r3, #14
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	9200      	str	r2, [sp, #0]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2185      	movs	r1, #133	; 0x85
 8003cbc:	2029      	movs	r0, #41	; 0x29
 8003cbe:	f7ff fa31 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d1f3      	bne.n	8003cb0 <ALS_IntTimeSet+0x148>
 8003cc8:	e072      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 150){								// iTime = 150ms -> 00100000
 8003cca:	494d      	ldr	r1, [pc, #308]	; (8003e00 <ALS_IntTimeSet+0x298>)
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f7fc faf1 	bl	80002b4 <__aeabi_fcmpeq>
 8003cd2:	1e03      	subs	r3, r0, #0
 8003cd4:	d016      	beq.n	8003d04 <ALS_IntTimeSet+0x19c>
				wrtData = iTimeMaskedData | (0x20);
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	230e      	movs	r3, #14
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	230e      	movs	r3, #14
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2201      	movs	r2, #1
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2185      	movs	r1, #133	; 0x85
 8003cf6:	2029      	movs	r0, #41	; 0x29
 8003cf8:	f7ff fa14 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d1f3      	bne.n	8003cea <ALS_IntTimeSet+0x182>
 8003d02:	e055      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 250){								// iTime = 250ms -> 00101000
 8003d04:	493f      	ldr	r1, [pc, #252]	; (8003e04 <ALS_IntTimeSet+0x29c>)
 8003d06:	6838      	ldr	r0, [r7, #0]
 8003d08:	f7fc fad4 	bl	80002b4 <__aeabi_fcmpeq>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d016      	beq.n	8003d3e <ALS_IntTimeSet+0x1d6>
				wrtData = iTimeMaskedData | (0x28);
 8003d10:	230f      	movs	r3, #15
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2228      	movs	r2, #40	; 0x28
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	230e      	movs	r3, #14
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	230e      	movs	r3, #14
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2201      	movs	r2, #1
 8003d2a:	9200      	str	r2, [sp, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	2185      	movs	r1, #133	; 0x85
 8003d30:	2029      	movs	r0, #41	; 0x29
 8003d32:	f7ff f9f7 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003d36:	0003      	movs	r3, r0
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d1f3      	bne.n	8003d24 <ALS_IntTimeSet+0x1bc>
 8003d3c:	e038      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 300){								// iTime = 300ms -> 00110000
 8003d3e:	4932      	ldr	r1, [pc, #200]	; (8003e08 <ALS_IntTimeSet+0x2a0>)
 8003d40:	6838      	ldr	r0, [r7, #0]
 8003d42:	f7fc fab7 	bl	80002b4 <__aeabi_fcmpeq>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d016      	beq.n	8003d78 <ALS_IntTimeSet+0x210>
				wrtData = iTimeMaskedData | (0x30);
 8003d4a:	230f      	movs	r3, #15
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2230      	movs	r2, #48	; 0x30
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	230e      	movs	r3, #14
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	230e      	movs	r3, #14
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	2201      	movs	r2, #1
 8003d64:	9200      	str	r2, [sp, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	2185      	movs	r1, #133	; 0x85
 8003d6a:	2029      	movs	r0, #41	; 0x29
 8003d6c:	f7ff f9da 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003d70:	0003      	movs	r3, r0
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d1f3      	bne.n	8003d5e <ALS_IntTimeSet+0x1f6>
 8003d76:	e01b      	b.n	8003db0 <ALS_IntTimeSet+0x248>
			}
			else if(iTime == 3.50){								// iTime = 350ms -> 00111000
 8003d78:	4925      	ldr	r1, [pc, #148]	; (8003e10 <ALS_IntTimeSet+0x2a8>)
 8003d7a:	6838      	ldr	r0, [r7, #0]
 8003d7c:	f7fc fa9a 	bl	80002b4 <__aeabi_fcmpeq>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d015      	beq.n	8003db0 <ALS_IntTimeSet+0x248>
				wrtData = iTimeMaskedData | (0x38);
 8003d84:	230f      	movs	r3, #15
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2238      	movs	r2, #56	; 0x38
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	230e      	movs	r3, #14
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	230e      	movs	r3, #14
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	9200      	str	r2, [sp, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	2185      	movs	r1, #133	; 0x85
 8003da4:	2029      	movs	r0, #41	; 0x29
 8003da6:	f7ff f9bd 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003daa:	0003      	movs	r3, r0
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d1f3      	bne.n	8003d98 <ALS_IntTimeSet+0x230>
			}
			LTR_Sensor->iTime=(float)(iTime/100);	// Lux hesaplamasında 0.5-1-1.5-2-2.5-3-3.5 değerleri kullanılacaktır.
 8003db0:	490f      	ldr	r1, [pc, #60]	; (8003df0 <ALS_IntTimeSet+0x288>)
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f7fc fcbe 	bl	8000734 <__aeabi_fdiv>
 8003db8:	1c03      	adds	r3, r0, #0
 8003dba:	1c18      	adds	r0, r3, #0
 8003dbc:	f7fc faa8 	bl	8000310 <__aeabi_f2uiz>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	809a      	strh	r2, [r3, #4]
			if (ALS_IntTimeRead() == wrtData){		// yazılan datayı tekrar oku dogru yazılmış mı kontrol et
 8003dc8:	f7ff fe49 	bl	8003a5e <ALS_IntTimeRead>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	001a      	movs	r2, r3
 8003dd0:	230e      	movs	r3, #14
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d101      	bne.n	8003dde <ALS_IntTimeSet+0x276>

				return IntTimeSet_OK;				// return = 1 ise Gönderme işlemi doğru bir şekilde gerçekleşmiştir
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e003      	b.n	8003de6 <ALS_IntTimeSet+0x27e>
			}
			else{
				return IntTimeSet_Not_OK;			// return = 0 ise Gönderme işleminde hata oluşmuştur
 8003dde:	2300      	movs	r3, #0
 8003de0:	e001      	b.n	8003de6 <ALS_IntTimeSet+0x27e>
			}
		}
		else {
			return IntTimeSet_IsNotCorrect;			// return = -1 ise Integration time değeri girilmesi gereken değerlerden herhangi biri değildir.
 8003de2:	2301      	movs	r3, #1
 8003de4:	425b      	negs	r3, r3
		}
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	42c80000 	.word	0x42c80000
 8003df4:	42480000 	.word	0x42480000
 8003df8:	43480000 	.word	0x43480000
 8003dfc:	43c80000 	.word	0x43c80000
 8003e00:	43160000 	.word	0x43160000
 8003e04:	437a0000 	.word	0x437a0000
 8003e08:	43960000 	.word	0x43960000
 8003e0c:	43af0000 	.word	0x43af0000
 8003e10:	40600000 	.word	0x40600000

08003e14 <ALS_MeasRateRead>:

/*	  ALS_MeasRateRead
*	  ALS_MEAS_RATE register'ından okunacak olan MeasureTime Data
*/
uint8_t ALS_MeasRateRead (void){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af02      	add	r7, sp, #8
	uint8_t Data;
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_MEAS_RATE, 1, &Data, 1)!=I2C_OK);
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	2201      	movs	r2, #1
 8003e20:	9200      	str	r2, [sp, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	2185      	movs	r1, #133	; 0x85
 8003e26:	2029      	movs	r0, #41	; 0x29
 8003e28:	f7ff fa6e 	bl	8003308 <I2C2_Master_Read_from_Register>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d1f4      	bne.n	8003e1c <ALS_MeasRateRead+0x8>
	return Data;
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <ALS_MeasRateBitRead>:
/*	  ALS_MeasRateBitRead
*	  ALS_MEAS_RATE register'ından Measurement Rate Time Bitlerinin okunması
*/
void ALS_MeasRateBitRead (LTR_sensor *LTR_Sensor){
 8003e3e:	b590      	push	{r4, r7, lr}
 8003e40:	b087      	sub	sp, #28
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	uint8_t MaskedData;
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_MEAS_RATE, 1, &Data, 1)!=I2C_OK);
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	240e      	movs	r4, #14
 8003e4a:	193b      	adds	r3, r7, r4
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	9200      	str	r2, [sp, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	2185      	movs	r1, #133	; 0x85
 8003e54:	2029      	movs	r0, #41	; 0x29
 8003e56:	f7ff fa57 	bl	8003308 <I2C2_Master_Read_from_Register>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d1f3      	bne.n	8003e48 <ALS_MeasRateBitRead+0xa>
	MaskedData = Data&(0x07);
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	200f      	movs	r0, #15
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	2107      	movs	r1, #7
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	701a      	strb	r2, [r3, #0]
	if      (MaskedData==0){
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <ALS_MeasRateBitRead+0x40>
		LTR_Sensor->mRate=50;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2232      	movs	r2, #50	; 0x32
 8003e7a:	811a      	strh	r2, [r3, #8]
		LTR_Sensor->mRate=1000;
	}
	else if (MaskedData==5 || MaskedData == 6 || MaskedData == 7){
		LTR_Sensor->mRate=2000;
	}
}
 8003e7c:	e036      	b.n	8003eec <ALS_MeasRateBitRead+0xae>
	else if (MaskedData==1){
 8003e7e:	230f      	movs	r3, #15
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d103      	bne.n	8003e90 <ALS_MeasRateBitRead+0x52>
		LTR_Sensor->mRate=100;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2264      	movs	r2, #100	; 0x64
 8003e8c:	811a      	strh	r2, [r3, #8]
}
 8003e8e:	e02d      	b.n	8003eec <ALS_MeasRateBitRead+0xae>
	else if (MaskedData==2){
 8003e90:	230f      	movs	r3, #15
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d103      	bne.n	8003ea2 <ALS_MeasRateBitRead+0x64>
		LTR_Sensor->mRate=200;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	22c8      	movs	r2, #200	; 0xc8
 8003e9e:	811a      	strh	r2, [r3, #8]
}
 8003ea0:	e024      	b.n	8003eec <ALS_MeasRateBitRead+0xae>
	else if (MaskedData==3){
 8003ea2:	230f      	movs	r3, #15
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d104      	bne.n	8003eb6 <ALS_MeasRateBitRead+0x78>
		LTR_Sensor->mRate=500;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	22fa      	movs	r2, #250	; 0xfa
 8003eb0:	0052      	lsls	r2, r2, #1
 8003eb2:	811a      	strh	r2, [r3, #8]
}
 8003eb4:	e01a      	b.n	8003eec <ALS_MeasRateBitRead+0xae>
	else if (MaskedData==4 ){
 8003eb6:	230f      	movs	r3, #15
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d104      	bne.n	8003eca <ALS_MeasRateBitRead+0x8c>
		LTR_Sensor->mRate=1000;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	22fa      	movs	r2, #250	; 0xfa
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	811a      	strh	r2, [r3, #8]
}
 8003ec8:	e010      	b.n	8003eec <ALS_MeasRateBitRead+0xae>
	else if (MaskedData==5 || MaskedData == 6 || MaskedData == 7){
 8003eca:	220f      	movs	r2, #15
 8003ecc:	18bb      	adds	r3, r7, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d007      	beq.n	8003ee4 <ALS_MeasRateBitRead+0xa6>
 8003ed4:	18bb      	adds	r3, r7, r2
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d003      	beq.n	8003ee4 <ALS_MeasRateBitRead+0xa6>
 8003edc:	18bb      	adds	r3, r7, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b07      	cmp	r3, #7
 8003ee2:	d103      	bne.n	8003eec <ALS_MeasRateBitRead+0xae>
		LTR_Sensor->mRate=2000;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	22fa      	movs	r2, #250	; 0xfa
 8003ee8:	00d2      	lsls	r2, r2, #3
 8003eea:	811a      	strh	r2, [r3, #8]
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b005      	add	sp, #20
 8003ef2:	bd90      	pop	{r4, r7, pc}

08003ef4 <ALS_MeasRateSet>:


/*	  ALS_MeasRateSet
*	  Measurement Rate durumu kontrol edilir ve istenilen Measurement Rate durumu ALS_MEAS_RATE register'a yazılır
*/
int8_t ALS_MeasRateSet (LTR_sensor *LTR_Sensor,uint16_t mRate){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	000a      	movs	r2, r1
 8003efe:	1cbb      	adds	r3, r7, #2
 8003f00:	801a      	strh	r2, [r3, #0]
		int8_t mRateMaskedData;
		mRateMaskedData = ALS_MeasRateRead() & (0xF8);		// okunan data ile maskeleme işlemi yapılır (0x11111000)
 8003f02:	f7ff ff87 	bl	8003e14 <ALS_MeasRateRead>
 8003f06:	0003      	movs	r3, r0
 8003f08:	b25a      	sxtb	r2, r3
 8003f0a:	230f      	movs	r3, #15
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2107      	movs	r1, #7
 8003f10:	438a      	bics	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]
		uint8_t wrtData;
		if(mRate == 50 || mRate == 100 || mRate == 200 || mRate == 500 || mRate == 1000 || mRate == 2000){
 8003f14:	1cbb      	adds	r3, r7, #2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	2b32      	cmp	r3, #50	; 0x32
 8003f1a:	d01a      	beq.n	8003f52 <ALS_MeasRateSet+0x5e>
 8003f1c:	1cbb      	adds	r3, r7, #2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	2b64      	cmp	r3, #100	; 0x64
 8003f22:	d016      	beq.n	8003f52 <ALS_MeasRateSet+0x5e>
 8003f24:	1cbb      	adds	r3, r7, #2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	2bc8      	cmp	r3, #200	; 0xc8
 8003f2a:	d012      	beq.n	8003f52 <ALS_MeasRateSet+0x5e>
 8003f2c:	1cbb      	adds	r3, r7, #2
 8003f2e:	881a      	ldrh	r2, [r3, #0]
 8003f30:	23fa      	movs	r3, #250	; 0xfa
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d00c      	beq.n	8003f52 <ALS_MeasRateSet+0x5e>
 8003f38:	1cbb      	adds	r3, r7, #2
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	23fa      	movs	r3, #250	; 0xfa
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d006      	beq.n	8003f52 <ALS_MeasRateSet+0x5e>
 8003f44:	1cbb      	adds	r3, r7, #2
 8003f46:	881a      	ldrh	r2, [r3, #0]
 8003f48:	23fa      	movs	r3, #250	; 0xfa
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d000      	beq.n	8003f52 <ALS_MeasRateSet+0x5e>
 8003f50:	e0c5      	b.n	80040de <ALS_MeasRateSet+0x1ea>
			if		(mRate == 50){								// mRate = 50ms -> 00000000
 8003f52:	1cbb      	adds	r3, r7, #2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	2b32      	cmp	r3, #50	; 0x32
 8003f58:	d113      	bne.n	8003f82 <ALS_MeasRateSet+0x8e>
				wrtData = mRateMaskedData | (0x00);
 8003f5a:	230f      	movs	r3, #15
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	230e      	movs	r3, #14
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	230e      	movs	r3, #14
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	9200      	str	r2, [sp, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	2185      	movs	r1, #133	; 0x85
 8003f74:	2029      	movs	r0, #41	; 0x29
 8003f76:	f7ff f8d5 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d1f3      	bne.n	8003f68 <ALS_MeasRateSet+0x74>
 8003f80:	e09c      	b.n	80040bc <ALS_MeasRateSet+0x1c8>
			}
			else if (mRate == 100){								// mRate = 100ms -> 00000001
 8003f82:	1cbb      	adds	r3, r7, #2
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d117      	bne.n	8003fba <ALS_MeasRateSet+0xc6>
				wrtData = mRateMaskedData | (0x01);
 8003f8a:	230f      	movs	r3, #15
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	230e      	movs	r3, #14
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	230e      	movs	r3, #14
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	9200      	str	r2, [sp, #0]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2185      	movs	r1, #133	; 0x85
 8003fac:	2029      	movs	r0, #41	; 0x29
 8003fae:	f7ff f8b9 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d1f3      	bne.n	8003fa0 <ALS_MeasRateSet+0xac>
 8003fb8:	e080      	b.n	80040bc <ALS_MeasRateSet+0x1c8>
			}
			else if (mRate == 200){								// mRate = 200ms -> 00000010
 8003fba:	1cbb      	adds	r3, r7, #2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	2bc8      	cmp	r3, #200	; 0xc8
 8003fc0:	d117      	bne.n	8003ff2 <ALS_MeasRateSet+0xfe>
				wrtData = mRateMaskedData | (0x02);
 8003fc2:	230f      	movs	r3, #15
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	230e      	movs	r3, #14
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	230e      	movs	r3, #14
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	9200      	str	r2, [sp, #0]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2185      	movs	r1, #133	; 0x85
 8003fe4:	2029      	movs	r0, #41	; 0x29
 8003fe6:	f7ff f89d 	bl	8003124 <I2C2_Master_Write_to_Register>
 8003fea:	0003      	movs	r3, r0
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d1f3      	bne.n	8003fd8 <ALS_MeasRateSet+0xe4>
 8003ff0:	e064      	b.n	80040bc <ALS_MeasRateSet+0x1c8>
			}
			else if (mRate == 500){								// mRate = 500ms -> 00000011
 8003ff2:	1cbb      	adds	r3, r7, #2
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	23fa      	movs	r3, #250	; 0xfa
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d117      	bne.n	800402e <ALS_MeasRateSet+0x13a>
				wrtData = mRateMaskedData | (0x03);
 8003ffe:	230f      	movs	r3, #15
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2203      	movs	r2, #3
 8004006:	4313      	orrs	r3, r2
 8004008:	b25b      	sxtb	r3, r3
 800400a:	b2da      	uxtb	r2, r3
 800400c:	230e      	movs	r3, #14
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	230e      	movs	r3, #14
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2201      	movs	r2, #1
 800401a:	9200      	str	r2, [sp, #0]
 800401c:	2201      	movs	r2, #1
 800401e:	2185      	movs	r1, #133	; 0x85
 8004020:	2029      	movs	r0, #41	; 0x29
 8004022:	f7ff f87f 	bl	8003124 <I2C2_Master_Write_to_Register>
 8004026:	0003      	movs	r3, r0
 8004028:	2b02      	cmp	r3, #2
 800402a:	d1f3      	bne.n	8004014 <ALS_MeasRateSet+0x120>
 800402c:	e046      	b.n	80040bc <ALS_MeasRateSet+0x1c8>
			}
			else if (mRate == 1000){								// mRate = 1000ms -> 00000100
 800402e:	1cbb      	adds	r3, r7, #2
 8004030:	881a      	ldrh	r2, [r3, #0]
 8004032:	23fa      	movs	r3, #250	; 0xfa
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	429a      	cmp	r2, r3
 8004038:	d117      	bne.n	800406a <ALS_MeasRateSet+0x176>
				wrtData = mRateMaskedData | (0x04);
 800403a:	230f      	movs	r3, #15
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2204      	movs	r2, #4
 8004042:	4313      	orrs	r3, r2
 8004044:	b25b      	sxtb	r3, r3
 8004046:	b2da      	uxtb	r2, r3
 8004048:	230e      	movs	r3, #14
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	230e      	movs	r3, #14
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2201      	movs	r2, #1
 8004056:	9200      	str	r2, [sp, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	2185      	movs	r1, #133	; 0x85
 800405c:	2029      	movs	r0, #41	; 0x29
 800405e:	f7ff f861 	bl	8003124 <I2C2_Master_Write_to_Register>
 8004062:	0003      	movs	r3, r0
 8004064:	2b02      	cmp	r3, #2
 8004066:	d1f3      	bne.n	8004050 <ALS_MeasRateSet+0x15c>
 8004068:	e028      	b.n	80040bc <ALS_MeasRateSet+0x1c8>
			}
			else if (mRate == 2000 || mRate == 2000 || mRate == 2000){	// mRate = 2000ms -> 00000---101,110,111
 800406a:	1cbb      	adds	r3, r7, #2
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	23fa      	movs	r3, #250	; 0xfa
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	429a      	cmp	r2, r3
 8004074:	d00b      	beq.n	800408e <ALS_MeasRateSet+0x19a>
 8004076:	1cbb      	adds	r3, r7, #2
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	23fa      	movs	r3, #250	; 0xfa
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	429a      	cmp	r2, r3
 8004080:	d005      	beq.n	800408e <ALS_MeasRateSet+0x19a>
 8004082:	1cbb      	adds	r3, r7, #2
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	23fa      	movs	r3, #250	; 0xfa
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	429a      	cmp	r2, r3
 800408c:	d116      	bne.n	80040bc <ALS_MeasRateSet+0x1c8>
				wrtData = mRateMaskedData | (0x05);  	// | 0x06 | 0x07 |
 800408e:	230f      	movs	r3, #15
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2205      	movs	r2, #5
 8004096:	4313      	orrs	r3, r2
 8004098:	b25b      	sxtb	r3, r3
 800409a:	b2da      	uxtb	r2, r3
 800409c:	230e      	movs	r3, #14
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	701a      	strb	r2, [r3, #0]
				while(I2C2_Master_Write_to_Register(LTR_Address, ALS_MEAS_RATE, 1, &wrtData, 1)!=I2C_OK);
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	230e      	movs	r3, #14
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2201      	movs	r2, #1
 80040aa:	9200      	str	r2, [sp, #0]
 80040ac:	2201      	movs	r2, #1
 80040ae:	2185      	movs	r1, #133	; 0x85
 80040b0:	2029      	movs	r0, #41	; 0x29
 80040b2:	f7ff f837 	bl	8003124 <I2C2_Master_Write_to_Register>
 80040b6:	0003      	movs	r3, r0
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d1f3      	bne.n	80040a4 <ALS_MeasRateSet+0x1b0>
			}

			LTR_Sensor->mRate = mRate;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	1cba      	adds	r2, r7, #2
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	811a      	strh	r2, [r3, #8]
		if (ALS_MeasRateRead() == wrtData){		// yazılan datayı tekrar oku dogru yazılmış mı kontrol et
 80040c4:	f7ff fea6 	bl	8003e14 <ALS_MeasRateRead>
 80040c8:	0003      	movs	r3, r0
 80040ca:	001a      	movs	r2, r3
 80040cc:	230e      	movs	r3, #14
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d101      	bne.n	80040da <ALS_MeasRateSet+0x1e6>
			return MeasureTimeSet_OK;			// return = 1 ise Gönderme işlemi doğru bir şekilde gerçekleşmiştir
 80040d6:	2301      	movs	r3, #1
 80040d8:	e003      	b.n	80040e2 <ALS_MeasRateSet+0x1ee>
		}
		else{
			return MeasureTimeSet_Not_OK;		// return = 0 ise Gönderme işleminde hata oluşmuştur
 80040da:	2300      	movs	r3, #0
 80040dc:	e001      	b.n	80040e2 <ALS_MeasRateSet+0x1ee>
		}
	}
	else {
		return MeasureTimeSet_IsNotCorrect;		// return = -1 ise Measurement Rate değeri girilmesi gereken değerlerden herhangi biri değildir.
 80040de:	2301      	movs	r3, #1
 80040e0:	425b      	negs	r3, r3
	}
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b004      	add	sp, #16
 80040e8:	bd80      	pop	{r7, pc}

080040ea <Part_Id>:
/*	  Part_Id
*	  Part_id okuması yapılır.
*/
void Part_Id(LTR_sensor *LTR_Sensor){			// part id = 0x0AH , revision id 0x00H	// revision identification
 80040ea:	b590      	push	{r4, r7, lr}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af02      	add	r7, sp, #8
 80040f0:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	while(I2C2_Master_Read_from_Register(LTR_Address, PART_ID, 1, &Data, 1)!=I2C_OK);
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	240f      	movs	r4, #15
 80040f6:	193b      	adds	r3, r7, r4
 80040f8:	2201      	movs	r2, #1
 80040fa:	9200      	str	r2, [sp, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	2186      	movs	r1, #134	; 0x86
 8004100:	2029      	movs	r0, #41	; 0x29
 8004102:	f7ff f901 	bl	8003308 <I2C2_Master_Read_from_Register>
 8004106:	0003      	movs	r3, r0
 8004108:	2b02      	cmp	r3, #2
 800410a:	d1f3      	bne.n	80040f4 <Part_Id+0xa>
	LTR_Sensor->Part_id=Data;
 800410c:	193b      	adds	r3, r7, r4
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	701a      	strb	r2, [r3, #0]
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b005      	add	sp, #20
 800411a:	bd90      	pop	{r4, r7, pc}

0800411c <Manufac_Id>:
/*	  Manufac_Id
*	  Device üretim id sini verir
*/
void Manufac_Id(LTR_sensor *LTR_Sensor){
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b087      	sub	sp, #28
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
	uint8_t Data;
	while(I2C2_Master_Read_from_Register(LTR_Address, MANUFAC_ID, 1, &Data, 1)!=I2C_OK);
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	240f      	movs	r4, #15
 8004128:	193b      	adds	r3, r7, r4
 800412a:	2201      	movs	r2, #1
 800412c:	9200      	str	r2, [sp, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	2187      	movs	r1, #135	; 0x87
 8004132:	2029      	movs	r0, #41	; 0x29
 8004134:	f7ff f8e8 	bl	8003308 <I2C2_Master_Read_from_Register>
 8004138:	0003      	movs	r3, r0
 800413a:	2b02      	cmp	r3, #2
 800413c:	d1f3      	bne.n	8004126 <Manufac_Id+0xa>
	LTR_Sensor->Manuf_id=Data;
 800413e:	193b      	adds	r3, r7, r4
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	705a      	strb	r2, [r3, #1]
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b005      	add	sp, #20
 800414c:	bd90      	pop	{r4, r7, pc}
	...

08004150 <ALS_GetData>:
*	  CH0 ve CH1 üzerinden ALS ölçümleri yapılır
*	  NEW_Data değişkeni Datanın eski mi yeni mi olduğunu kontrol eder,
*	  Yeni Data gelinceye kadar conversion yapılmaz
*	  Data okuma sırası CH1L, CH1H, CH0L, CH0H Şeklinde olmalıdır.
*/
uint8_t ALS_GetData (LTR_sensor *LTR_Sensor){
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	6078      	str	r0, [r7, #4]

	//while(LTR_Sensor->NEW_Data ==0){ 				// NEW_Data = 1 ise data yenidir , okumaya başla
	//	ALS_StatusNewOrOld(&LTR);
	//}

		while(I2C2_Master_Read_from_Register(LTR_Address, ALS_DATA_CH1_0, 1, &Data10, 1)!=I2C_OK);	// ALS measurement CH1 data, lower byte
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	230f      	movs	r3, #15
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	2201      	movs	r2, #1
 8004160:	9200      	str	r2, [sp, #0]
 8004162:	2201      	movs	r2, #1
 8004164:	2188      	movs	r1, #136	; 0x88
 8004166:	2029      	movs	r0, #41	; 0x29
 8004168:	f7ff f8ce 	bl	8003308 <I2C2_Master_Read_from_Register>
 800416c:	0003      	movs	r3, r0
 800416e:	2b02      	cmp	r3, #2
 8004170:	d1f3      	bne.n	800415a <ALS_GetData+0xa>
		while(I2C2_Master_Read_from_Register(LTR_Address, ALS_DATA_CH1_1, 1, &Data11, 1)!=I2C_OK);	// ALS measurement CH1 data, upper byte
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	230e      	movs	r3, #14
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	9200      	str	r2, [sp, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	2189      	movs	r1, #137	; 0x89
 8004180:	2029      	movs	r0, #41	; 0x29
 8004182:	f7ff f8c1 	bl	8003308 <I2C2_Master_Read_from_Register>
 8004186:	0003      	movs	r3, r0
 8004188:	2b02      	cmp	r3, #2
 800418a:	d1f3      	bne.n	8004174 <ALS_GetData+0x24>
		while(I2C2_Master_Read_from_Register(LTR_Address, ALS_DATA_CH0_0, 1, &Data00, 1)!=I2C_OK);	// ALS measurement CH0 data, lower byte
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	230d      	movs	r3, #13
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2201      	movs	r2, #1
 8004194:	9200      	str	r2, [sp, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	218a      	movs	r1, #138	; 0x8a
 800419a:	2029      	movs	r0, #41	; 0x29
 800419c:	f7ff f8b4 	bl	8003308 <I2C2_Master_Read_from_Register>
 80041a0:	0003      	movs	r3, r0
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d1f3      	bne.n	800418e <ALS_GetData+0x3e>
		while(I2C2_Master_Read_from_Register(LTR_Address, ALS_DATA_CH0_1, 1, &Data01, 1)!=I2C_OK);	// ALS measurement CH0 data, upper byte
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	240c      	movs	r4, #12
 80041aa:	193b      	adds	r3, r7, r4
 80041ac:	2201      	movs	r2, #1
 80041ae:	9200      	str	r2, [sp, #0]
 80041b0:	2201      	movs	r2, #1
 80041b2:	218b      	movs	r1, #139	; 0x8b
 80041b4:	2029      	movs	r0, #41	; 0x29
 80041b6:	f7ff f8a7 	bl	8003308 <I2C2_Master_Read_from_Register>
 80041ba:	0003      	movs	r3, r0
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d1f3      	bne.n	80041a8 <ALS_GetData+0x58>

		value1 =(uint16_t)(Data11<<8);		//	Data10 ve Data11 in toplami ile 16 bitlik deger
 80041c0:	230e      	movs	r3, #14
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	2016      	movs	r0, #22
 80041ca:	183b      	adds	r3, r7, r0
 80041cc:	0212      	lsls	r2, r2, #8
 80041ce:	801a      	strh	r2, [r3, #0]
		CH1 =(uint16_t)(value1|Data10);		//	CH1, CH1 register'inda (ALS_DATA_CH1 0x88 ve 0x89) bulunan ALS olcum degeri,
 80041d0:	230f      	movs	r3, #15
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b299      	uxth	r1, r3
 80041d8:	2514      	movs	r5, #20
 80041da:	197b      	adds	r3, r7, r5
 80041dc:	183a      	adds	r2, r7, r0
 80041de:	8812      	ldrh	r2, [r2, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	801a      	strh	r2, [r3, #0]
		value0 =(uint16_t)(Data01<<8); 		//	Data10 ve Data11 in toplami ile 16 bitlik deger
 80041e4:	193b      	adds	r3, r7, r4
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	2012      	movs	r0, #18
 80041ec:	183b      	adds	r3, r7, r0
 80041ee:	0212      	lsls	r2, r2, #8
 80041f0:	801a      	strh	r2, [r3, #0]
		CH0 =(uint16_t)(value0|Data00);		//	CH0, CH0 register'inda (ALS_DATA_CH0 0x8A ve 0x8B) bulunan ALS olcum degeri
 80041f2:	230d      	movs	r3, #13
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b299      	uxth	r1, r3
 80041fa:	2410      	movs	r4, #16
 80041fc:	193b      	adds	r3, r7, r4
 80041fe:	183a      	adds	r2, r7, r0
 8004200:	8812      	ldrh	r2, [r2, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	801a      	strh	r2, [r3, #0]

		LTR_Sensor->CH1 = CH1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	197a      	adds	r2, r7, r5
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	819a      	strh	r2, [r3, #12]
		LTR_Sensor->CH0 = CH0;	// CH0 ve CH1 değerlerini kaydet, işleme geçilebilir.
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	193a      	adds	r2, r7, r4
 8004212:	8812      	ldrh	r2, [r2, #0]
 8004214:	81da      	strh	r2, [r3, #14]

	 	while (LTR_Sensor->NEW_Data==0){
 8004216:	e003      	b.n	8004220 <ALS_GetData+0xd0>
			ALS_StatusNewOrOld(&LTR);
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <ALS_GetData+0xf8>)
 800421a:	0018      	movs	r0, r3
 800421c:	f000 f83f 	bl	800429e <ALS_StatusNewOrOld>
	 	while (LTR_Sensor->NEW_Data==0){
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7c5b      	ldrb	r3, [r3, #17]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f7      	beq.n	8004218 <ALS_GetData+0xc8>
		}

		ALS_StatusDataValid(&LTR);
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <ALS_GetData+0xf8>)
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f80e 	bl	800424c <ALS_StatusDataValid>
		if (LTR_Sensor->Data_Valid == 1){		// DataValid == 1 ise Data geçerlidir (Valid)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7c1b      	ldrb	r3, [r3, #16]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <ALS_GetData+0xec>
			return DataValid;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <ALS_GetData+0xee>
			//lux=LuxCalc(&LTR);
			}
		else{		// DataValid == 0 ise Data geçerli değildir (InValid)
			return DataNotValid;		// Data geçerli değil ise NEW_Data kontrolü yapılmalıdır
 800423c:	2300      	movs	r3, #0
			}		// ALS_New Data is invalid, discard and wait for new ALS Data

}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b006      	add	sp, #24
 8004244:	bdb0      	pop	{r4, r5, r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	20000050 	.word	0x20000050

0800424c <ALS_StatusDataValid>:
*///********************************************************************************************************************************

/*	  ALS_StatusDataValid
*	  CH0,CH1 kanallarından okunan Data'nın geçerli olup olmadığını kontrol eder.
*/
uint8_t ALS_StatusDataValid(LTR_sensor *LTR_Sensor){					//Data Valid(0) or InValid (1), Valid(default)
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b087      	sub	sp, #28
 8004250:	af02      	add	r7, sp, #8
 8004252:	6078      	str	r0, [r7, #4]
	uint8_t maskedData;
	uint8_t Data;		// ALS_MEAS_RATE register'ından okunacak olan MeasureTime Data
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_STATUS, 1, &Data, 1)!=I2C_OK);
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	240e      	movs	r4, #14
 8004258:	193b      	adds	r3, r7, r4
 800425a:	2201      	movs	r2, #1
 800425c:	9200      	str	r2, [sp, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	218c      	movs	r1, #140	; 0x8c
 8004262:	2029      	movs	r0, #41	; 0x29
 8004264:	f7ff f850 	bl	8003308 <I2C2_Master_Read_from_Register>
 8004268:	0003      	movs	r3, r0
 800426a:	2b02      	cmp	r3, #2
 800426c:	d1f3      	bne.n	8004256 <ALS_StatusDataValid+0xa>
	maskedData = Data&(0x80);						// okunan data ile maskeleme işlemi yapılır (0x10000000)
 800426e:	193b      	adds	r3, r7, r4
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	200f      	movs	r0, #15
 8004274:	183b      	adds	r3, r7, r0
 8004276:	217f      	movs	r1, #127	; 0x7f
 8004278:	438a      	bics	r2, r1
 800427a:	701a      	strb	r2, [r3, #0]
		if	(maskedData==0x00){
 800427c:	183b      	adds	r3, r7, r0
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <ALS_StatusDataValid+0x40>
			LTR_Sensor->Data_Valid = 1;							// 0x00 ise Valid
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	741a      	strb	r2, [r3, #16]
 800428a:	e002      	b.n	8004292 <ALS_StatusDataValid+0x46>
		}
		else{
			LTR_Sensor->Data_Valid = 0;							// Data Not Valid
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	741a      	strb	r2, [r3, #16]
		}

		return LTR_Sensor->Data_Valid;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7c1b      	ldrb	r3, [r3, #16]
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b005      	add	sp, #20
 800429c:	bd90      	pop	{r4, r7, pc}

0800429e <ALS_StatusNewOrOld>:

/*	  ALS_StatusNewOrOld
*	  Data yeni mi eski mi kontrol edilir, NEWData = 1 henüz okunmamıştır.
*/
void ALS_StatusNewOrOld(LTR_sensor *LTR_Sensor){
 800429e:	b590      	push	{r4, r7, lr}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af02      	add	r7, sp, #8
 80042a4:	6078      	str	r0, [r7, #4]
	uint8_t maskedData;
	uint8_t Data;									// NEW data ( first time data is being read )
	while(I2C2_Master_Read_from_Register(LTR_Address, ALS_STATUS, 1, &Data, 1)!=I2C_OK);
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	240e      	movs	r4, #14
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	2201      	movs	r2, #1
 80042ae:	9200      	str	r2, [sp, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	218c      	movs	r1, #140	; 0x8c
 80042b4:	2029      	movs	r0, #41	; 0x29
 80042b6:	f7ff f827 	bl	8003308 <I2C2_Master_Read_from_Register>
 80042ba:	0003      	movs	r3, r0
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d1f3      	bne.n	80042a8 <ALS_StatusNewOrOld+0xa>
	maskedData = Data & (0x04);						// okunan data ile maskeleme işlemi yapılır (0x00000100)
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	200f      	movs	r0, #15
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	2104      	movs	r1, #4
 80042ca:	400a      	ands	r2, r1
 80042cc:	701a      	strb	r2, [r3, #0]
		if		(maskedData == 0x00){
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <ALS_StatusNewOrOld+0x40>
			LTR_Sensor->NEW_Data = 0;	// NEWData =  0 Data okunmuş, eski data konumundadır.
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	745a      	strb	r2, [r3, #17]
		}
		else if (maskedData == 0x04)
		{
			LTR_Sensor->NEW_Data = 1;	 // Data yeni mi eski mi kontrol edilir, NEW_Data =0 henüz okunmamıştır.
		}
}
 80042dc:	e007      	b.n	80042ee <ALS_StatusNewOrOld+0x50>
		else if (maskedData == 0x04)
 80042de:	230f      	movs	r3, #15
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d102      	bne.n	80042ee <ALS_StatusNewOrOld+0x50>
			LTR_Sensor->NEW_Data = 1;	 // Data yeni mi eski mi kontrol edilir, NEW_Data =0 henüz okunmamıştır.
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	745a      	strb	r2, [r3, #17]
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b005      	add	sp, #20
 80042f4:	bd90      	pop	{r4, r7, pc}
	...

080042f8 <LuxCalc>:
/*	  LuxCalc
*	  LuxCalc fonksiyonunda integrationTime, CH0 ve CH1 den elde edilen değerler ile lux hesabı yapılır
*	  Fonksiyonun çıktısı hesaplanan (float)lux değeridir.
*	  Hesaplama formülleri Datasheet'te belirtilen Appendix A ekinde mevcuttur.
*/
float LuxCalc ( LTR_sensor *LTR_Sensor ){
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

	if ( (float)(LTR_Sensor->CH1 + LTR_Sensor->CH0)>=0 ) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	899b      	ldrh	r3, [r3, #12]
 8004304:	001a      	movs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	89db      	ldrh	r3, [r3, #14]
 800430a:	18d3      	adds	r3, r2, r3
 800430c:	0018      	movs	r0, r3
 800430e:	f7fc fd9b 	bl	8000e48 <__aeabi_i2f>
 8004312:	1c03      	adds	r3, r0, #0
 8004314:	2100      	movs	r1, #0
 8004316:	1c18      	adds	r0, r3, #0
 8004318:	f7fb fff0 	bl	80002fc <__aeabi_fcmpge>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d100      	bne.n	8004322 <LuxCalc+0x2a>
 8004320:	e189      	b.n	8004636 <LuxCalc+0x33e>
				LTR_Sensor->ratio = (float)(((float)LTR_Sensor->CH1)/((float)LTR_Sensor->CH0 + (float)LTR_Sensor->CH1));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	899b      	ldrh	r3, [r3, #12]
 8004326:	0018      	movs	r0, r3
 8004328:	f7fc fde0 	bl	8000eec <__aeabi_ui2f>
 800432c:	1c04      	adds	r4, r0, #0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	89db      	ldrh	r3, [r3, #14]
 8004332:	0018      	movs	r0, r3
 8004334:	f7fc fdda 	bl	8000eec <__aeabi_ui2f>
 8004338:	1c05      	adds	r5, r0, #0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	899b      	ldrh	r3, [r3, #12]
 800433e:	0018      	movs	r0, r3
 8004340:	f7fc fdd4 	bl	8000eec <__aeabi_ui2f>
 8004344:	1c03      	adds	r3, r0, #0
 8004346:	1c19      	adds	r1, r3, #0
 8004348:	1c28      	adds	r0, r5, #0
 800434a:	f7fc f853 	bl	80003f4 <__aeabi_fadd>
 800434e:	1c03      	adds	r3, r0, #0
 8004350:	1c19      	adds	r1, r3, #0
 8004352:	1c20      	adds	r0, r4, #0
 8004354:	f7fc f9ee 	bl	8000734 <__aeabi_fdiv>
 8004358:	1c03      	adds	r3, r0, #0
 800435a:	1c18      	adds	r0, r3, #0
 800435c:	f7fb fff0 	bl	8000340 <__aeabi_f2ulz>
 8004360:	0002      	movs	r2, r0
 8004362:	000b      	movs	r3, r1
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	620a      	str	r2, [r1, #32]
 8004368:	624b      	str	r3, [r1, #36]	; 0x24

			if 		((float)LTR_Sensor->ratio < 0.45){
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	0010      	movs	r0, r2
 8004372:	0019      	movs	r1, r3
 8004374:	f7fc f804 	bl	8000380 <__aeabi_ul2f>
 8004378:	1c03      	adds	r3, r0, #0
 800437a:	1c18      	adds	r0, r3, #0
 800437c:	f7fe fbc2 	bl	8002b04 <__aeabi_f2d>
 8004380:	4ab3      	ldr	r2, [pc, #716]	; (8004650 <LuxCalc+0x358>)
 8004382:	4bb4      	ldr	r3, [pc, #720]	; (8004654 <LuxCalc+0x35c>)
 8004384:	f7fb ff62 	bl	800024c <__aeabi_dcmplt>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d05b      	beq.n	8004444 <LuxCalc+0x14c>
				LTR_Sensor->lux =(float)(((1.7743 * (float)LTR_Sensor->CH0) + (float)(1.1059 * (float)LTR_Sensor->CH1))/((float)LTR_Sensor->Gain/(float)LTR_Sensor->iTime));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	89db      	ldrh	r3, [r3, #14]
 8004390:	0018      	movs	r0, r3
 8004392:	f7fc fdab 	bl	8000eec <__aeabi_ui2f>
 8004396:	1c03      	adds	r3, r0, #0
 8004398:	1c18      	adds	r0, r3, #0
 800439a:	f7fe fbb3 	bl	8002b04 <__aeabi_f2d>
 800439e:	4aae      	ldr	r2, [pc, #696]	; (8004658 <LuxCalc+0x360>)
 80043a0:	4bae      	ldr	r3, [pc, #696]	; (800465c <LuxCalc+0x364>)
 80043a2:	f7fd fd45 	bl	8001e30 <__aeabi_dmul>
 80043a6:	0002      	movs	r2, r0
 80043a8:	000b      	movs	r3, r1
 80043aa:	0014      	movs	r4, r2
 80043ac:	001d      	movs	r5, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	899b      	ldrh	r3, [r3, #12]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f7fc fd9a 	bl	8000eec <__aeabi_ui2f>
 80043b8:	1c03      	adds	r3, r0, #0
 80043ba:	1c18      	adds	r0, r3, #0
 80043bc:	f7fe fba2 	bl	8002b04 <__aeabi_f2d>
 80043c0:	4aa7      	ldr	r2, [pc, #668]	; (8004660 <LuxCalc+0x368>)
 80043c2:	4ba8      	ldr	r3, [pc, #672]	; (8004664 <LuxCalc+0x36c>)
 80043c4:	f7fd fd34 	bl	8001e30 <__aeabi_dmul>
 80043c8:	0002      	movs	r2, r0
 80043ca:	000b      	movs	r3, r1
 80043cc:	0010      	movs	r0, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	f7fe fbe0 	bl	8002b94 <__aeabi_d2f>
 80043d4:	1c03      	adds	r3, r0, #0
 80043d6:	1c18      	adds	r0, r3, #0
 80043d8:	f7fe fb94 	bl	8002b04 <__aeabi_f2d>
 80043dc:	0002      	movs	r2, r0
 80043de:	000b      	movs	r3, r1
 80043e0:	0020      	movs	r0, r4
 80043e2:	0029      	movs	r1, r5
 80043e4:	f7fc fdca 	bl	8000f7c <__aeabi_dadd>
 80043e8:	0002      	movs	r2, r0
 80043ea:	000b      	movs	r3, r1
 80043ec:	0014      	movs	r4, r2
 80043ee:	001d      	movs	r5, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	789b      	ldrb	r3, [r3, #2]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7fc fd79 	bl	8000eec <__aeabi_ui2f>
 80043fa:	1c06      	adds	r6, r0, #0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	889b      	ldrh	r3, [r3, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f7fc fd73 	bl	8000eec <__aeabi_ui2f>
 8004406:	1c03      	adds	r3, r0, #0
 8004408:	1c19      	adds	r1, r3, #0
 800440a:	1c30      	adds	r0, r6, #0
 800440c:	f7fc f992 	bl	8000734 <__aeabi_fdiv>
 8004410:	1c03      	adds	r3, r0, #0
 8004412:	1c18      	adds	r0, r3, #0
 8004414:	f7fe fb76 	bl	8002b04 <__aeabi_f2d>
 8004418:	0002      	movs	r2, r0
 800441a:	000b      	movs	r3, r1
 800441c:	0020      	movs	r0, r4
 800441e:	0029      	movs	r1, r5
 8004420:	f7fd f90c 	bl	800163c <__aeabi_ddiv>
 8004424:	0002      	movs	r2, r0
 8004426:	000b      	movs	r3, r1
 8004428:	0010      	movs	r0, r2
 800442a:	0019      	movs	r1, r3
 800442c:	f7fe fbb2 	bl	8002b94 <__aeabi_d2f>
 8004430:	1c03      	adds	r3, r0, #0
 8004432:	1c18      	adds	r0, r3, #0
 8004434:	f7fb ff84 	bl	8000340 <__aeabi_f2ulz>
 8004438:	0002      	movs	r2, r0
 800443a:	000b      	movs	r3, r1
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	618a      	str	r2, [r1, #24]
 8004440:	61cb      	str	r3, [r1, #28]
 8004442:	e0f8      	b.n	8004636 <LuxCalc+0x33e>
			}
			else if ((float)LTR_Sensor->ratio >= 0.45 && LTR_Sensor->ratio < 0.64){
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	0010      	movs	r0, r2
 800444c:	0019      	movs	r1, r3
 800444e:	f7fb ff97 	bl	8000380 <__aeabi_ul2f>
 8004452:	1c03      	adds	r3, r0, #0
 8004454:	1c18      	adds	r0, r3, #0
 8004456:	f7fe fb55 	bl	8002b04 <__aeabi_f2d>
 800445a:	4a7d      	ldr	r2, [pc, #500]	; (8004650 <LuxCalc+0x358>)
 800445c:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <LuxCalc+0x35c>)
 800445e:	f7fb ff13 	bl	8000288 <__aeabi_dcmpge>
 8004462:	1e03      	subs	r3, r0, #0
 8004464:	d068      	beq.n	8004538 <LuxCalc+0x240>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1a      	ldr	r2, [r3, #32]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	0010      	movs	r0, r2
 800446e:	0019      	movs	r1, r3
 8004470:	f7fb ffaa 	bl	80003c8 <__aeabi_ul2d>
 8004474:	4a7c      	ldr	r2, [pc, #496]	; (8004668 <LuxCalc+0x370>)
 8004476:	4b7d      	ldr	r3, [pc, #500]	; (800466c <LuxCalc+0x374>)
 8004478:	f7fb fee8 	bl	800024c <__aeabi_dcmplt>
 800447c:	1e03      	subs	r3, r0, #0
 800447e:	d05b      	beq.n	8004538 <LuxCalc+0x240>
				LTR_Sensor->lux = (float)(((4.2785 * (float)LTR_Sensor->CH0) - (float)(1.9548 * (float)LTR_Sensor->CH1))/((float)LTR_Sensor->Gain/(float)LTR_Sensor->iTime));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	89db      	ldrh	r3, [r3, #14]
 8004484:	0018      	movs	r0, r3
 8004486:	f7fc fd31 	bl	8000eec <__aeabi_ui2f>
 800448a:	1c03      	adds	r3, r0, #0
 800448c:	1c18      	adds	r0, r3, #0
 800448e:	f7fe fb39 	bl	8002b04 <__aeabi_f2d>
 8004492:	4a77      	ldr	r2, [pc, #476]	; (8004670 <LuxCalc+0x378>)
 8004494:	4b77      	ldr	r3, [pc, #476]	; (8004674 <LuxCalc+0x37c>)
 8004496:	f7fd fccb 	bl	8001e30 <__aeabi_dmul>
 800449a:	0002      	movs	r2, r0
 800449c:	000b      	movs	r3, r1
 800449e:	0014      	movs	r4, r2
 80044a0:	001d      	movs	r5, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	899b      	ldrh	r3, [r3, #12]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fc fd20 	bl	8000eec <__aeabi_ui2f>
 80044ac:	1c03      	adds	r3, r0, #0
 80044ae:	1c18      	adds	r0, r3, #0
 80044b0:	f7fe fb28 	bl	8002b04 <__aeabi_f2d>
 80044b4:	4a70      	ldr	r2, [pc, #448]	; (8004678 <LuxCalc+0x380>)
 80044b6:	4b71      	ldr	r3, [pc, #452]	; (800467c <LuxCalc+0x384>)
 80044b8:	f7fd fcba 	bl	8001e30 <__aeabi_dmul>
 80044bc:	0002      	movs	r2, r0
 80044be:	000b      	movs	r3, r1
 80044c0:	0010      	movs	r0, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	f7fe fb66 	bl	8002b94 <__aeabi_d2f>
 80044c8:	1c03      	adds	r3, r0, #0
 80044ca:	1c18      	adds	r0, r3, #0
 80044cc:	f7fe fb1a 	bl	8002b04 <__aeabi_f2d>
 80044d0:	0002      	movs	r2, r0
 80044d2:	000b      	movs	r3, r1
 80044d4:	0020      	movs	r0, r4
 80044d6:	0029      	movs	r1, r5
 80044d8:	f7fd ff6c 	bl	80023b4 <__aeabi_dsub>
 80044dc:	0002      	movs	r2, r0
 80044de:	000b      	movs	r3, r1
 80044e0:	0014      	movs	r4, r2
 80044e2:	001d      	movs	r5, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	789b      	ldrb	r3, [r3, #2]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7fc fcff 	bl	8000eec <__aeabi_ui2f>
 80044ee:	1c06      	adds	r6, r0, #0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	889b      	ldrh	r3, [r3, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f7fc fcf9 	bl	8000eec <__aeabi_ui2f>
 80044fa:	1c03      	adds	r3, r0, #0
 80044fc:	1c19      	adds	r1, r3, #0
 80044fe:	1c30      	adds	r0, r6, #0
 8004500:	f7fc f918 	bl	8000734 <__aeabi_fdiv>
 8004504:	1c03      	adds	r3, r0, #0
 8004506:	1c18      	adds	r0, r3, #0
 8004508:	f7fe fafc 	bl	8002b04 <__aeabi_f2d>
 800450c:	0002      	movs	r2, r0
 800450e:	000b      	movs	r3, r1
 8004510:	0020      	movs	r0, r4
 8004512:	0029      	movs	r1, r5
 8004514:	f7fd f892 	bl	800163c <__aeabi_ddiv>
 8004518:	0002      	movs	r2, r0
 800451a:	000b      	movs	r3, r1
 800451c:	0010      	movs	r0, r2
 800451e:	0019      	movs	r1, r3
 8004520:	f7fe fb38 	bl	8002b94 <__aeabi_d2f>
 8004524:	1c03      	adds	r3, r0, #0
 8004526:	1c18      	adds	r0, r3, #0
 8004528:	f7fb ff0a 	bl	8000340 <__aeabi_f2ulz>
 800452c:	0002      	movs	r2, r0
 800452e:	000b      	movs	r3, r1
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	618a      	str	r2, [r1, #24]
 8004534:	61cb      	str	r3, [r1, #28]
 8004536:	e07e      	b.n	8004636 <LuxCalc+0x33e>
			}
			else if ((float)LTR_Sensor->ratio < 0.85 && LTR_Sensor->ratio >= 0.64){
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	0010      	movs	r0, r2
 8004540:	0019      	movs	r1, r3
 8004542:	f7fb ff1d 	bl	8000380 <__aeabi_ul2f>
 8004546:	1c03      	adds	r3, r0, #0
 8004548:	1c18      	adds	r0, r3, #0
 800454a:	f7fe fadb 	bl	8002b04 <__aeabi_f2d>
 800454e:	4a4c      	ldr	r2, [pc, #304]	; (8004680 <LuxCalc+0x388>)
 8004550:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <LuxCalc+0x38c>)
 8004552:	f7fb fe7b 	bl	800024c <__aeabi_dcmplt>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d068      	beq.n	800462c <LuxCalc+0x334>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	0010      	movs	r0, r2
 8004562:	0019      	movs	r1, r3
 8004564:	f7fb ff30 	bl	80003c8 <__aeabi_ul2d>
 8004568:	4a3f      	ldr	r2, [pc, #252]	; (8004668 <LuxCalc+0x370>)
 800456a:	4b40      	ldr	r3, [pc, #256]	; (800466c <LuxCalc+0x374>)
 800456c:	f7fb fe8c 	bl	8000288 <__aeabi_dcmpge>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d05b      	beq.n	800462c <LuxCalc+0x334>
				LTR_Sensor->lux = (float)(((0.5926 * (float)LTR_Sensor->CH0) + (float)(0.1185 * (float)LTR_Sensor->CH1))/((float)LTR_Sensor->Gain/(float)LTR_Sensor->iTime));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	89db      	ldrh	r3, [r3, #14]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fc fcb7 	bl	8000eec <__aeabi_ui2f>
 800457e:	1c03      	adds	r3, r0, #0
 8004580:	1c18      	adds	r0, r3, #0
 8004582:	f7fe fabf 	bl	8002b04 <__aeabi_f2d>
 8004586:	4a40      	ldr	r2, [pc, #256]	; (8004688 <LuxCalc+0x390>)
 8004588:	4b40      	ldr	r3, [pc, #256]	; (800468c <LuxCalc+0x394>)
 800458a:	f7fd fc51 	bl	8001e30 <__aeabi_dmul>
 800458e:	0002      	movs	r2, r0
 8004590:	000b      	movs	r3, r1
 8004592:	0014      	movs	r4, r2
 8004594:	001d      	movs	r5, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	899b      	ldrh	r3, [r3, #12]
 800459a:	0018      	movs	r0, r3
 800459c:	f7fc fca6 	bl	8000eec <__aeabi_ui2f>
 80045a0:	1c03      	adds	r3, r0, #0
 80045a2:	1c18      	adds	r0, r3, #0
 80045a4:	f7fe faae 	bl	8002b04 <__aeabi_f2d>
 80045a8:	4a39      	ldr	r2, [pc, #228]	; (8004690 <LuxCalc+0x398>)
 80045aa:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <LuxCalc+0x39c>)
 80045ac:	f7fd fc40 	bl	8001e30 <__aeabi_dmul>
 80045b0:	0002      	movs	r2, r0
 80045b2:	000b      	movs	r3, r1
 80045b4:	0010      	movs	r0, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	f7fe faec 	bl	8002b94 <__aeabi_d2f>
 80045bc:	1c03      	adds	r3, r0, #0
 80045be:	1c18      	adds	r0, r3, #0
 80045c0:	f7fe faa0 	bl	8002b04 <__aeabi_f2d>
 80045c4:	0002      	movs	r2, r0
 80045c6:	000b      	movs	r3, r1
 80045c8:	0020      	movs	r0, r4
 80045ca:	0029      	movs	r1, r5
 80045cc:	f7fc fcd6 	bl	8000f7c <__aeabi_dadd>
 80045d0:	0002      	movs	r2, r0
 80045d2:	000b      	movs	r3, r1
 80045d4:	0014      	movs	r4, r2
 80045d6:	001d      	movs	r5, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	789b      	ldrb	r3, [r3, #2]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fc fc85 	bl	8000eec <__aeabi_ui2f>
 80045e2:	1c06      	adds	r6, r0, #0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	889b      	ldrh	r3, [r3, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fc fc7f 	bl	8000eec <__aeabi_ui2f>
 80045ee:	1c03      	adds	r3, r0, #0
 80045f0:	1c19      	adds	r1, r3, #0
 80045f2:	1c30      	adds	r0, r6, #0
 80045f4:	f7fc f89e 	bl	8000734 <__aeabi_fdiv>
 80045f8:	1c03      	adds	r3, r0, #0
 80045fa:	1c18      	adds	r0, r3, #0
 80045fc:	f7fe fa82 	bl	8002b04 <__aeabi_f2d>
 8004600:	0002      	movs	r2, r0
 8004602:	000b      	movs	r3, r1
 8004604:	0020      	movs	r0, r4
 8004606:	0029      	movs	r1, r5
 8004608:	f7fd f818 	bl	800163c <__aeabi_ddiv>
 800460c:	0002      	movs	r2, r0
 800460e:	000b      	movs	r3, r1
 8004610:	0010      	movs	r0, r2
 8004612:	0019      	movs	r1, r3
 8004614:	f7fe fabe 	bl	8002b94 <__aeabi_d2f>
 8004618:	1c03      	adds	r3, r0, #0
 800461a:	1c18      	adds	r0, r3, #0
 800461c:	f7fb fe90 	bl	8000340 <__aeabi_f2ulz>
 8004620:	0002      	movs	r2, r0
 8004622:	000b      	movs	r3, r1
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	618a      	str	r2, [r1, #24]
 8004628:	61cb      	str	r3, [r1, #28]
 800462a:	e004      	b.n	8004636 <LuxCalc+0x33e>
			}
		else
			{
			LTR_Sensor->lux = 0;
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	2300      	movs	r3, #0
 8004632:	618a      	str	r2, [r1, #24]
 8004634:	61cb      	str	r3, [r1, #28]
			}
		}
	   return LTR_Sensor->lux;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	0010      	movs	r0, r2
 800463e:	0019      	movs	r1, r3
 8004640:	f7fb fe9e 	bl	8000380 <__aeabi_ul2f>
 8004644:	1c03      	adds	r3, r0, #0
}
 8004646:	1c18      	adds	r0, r3, #0
 8004648:	46bd      	mov	sp, r7
 800464a:	b003      	add	sp, #12
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	cccccccd 	.word	0xcccccccd
 8004654:	3fdccccc 	.word	0x3fdccccc
 8004658:	6594af4f 	.word	0x6594af4f
 800465c:	3ffc6388 	.word	0x3ffc6388
 8004660:	32ca57a8 	.word	0x32ca57a8
 8004664:	3ff1b1c4 	.word	0x3ff1b1c4
 8004668:	47ae147b 	.word	0x47ae147b
 800466c:	3fe47ae1 	.word	0x3fe47ae1
 8004670:	1a9fbe77 	.word	0x1a9fbe77
 8004674:	40111d2f 	.word	0x40111d2f
 8004678:	5d638866 	.word	0x5d638866
 800467c:	3fff46dc 	.word	0x3fff46dc
 8004680:	33333333 	.word	0x33333333
 8004684:	3feb3333 	.word	0x3feb3333
 8004688:	467381d8 	.word	0x467381d8
 800468c:	3fe2f694 	.word	0x3fe2f694
 8004690:	189374bc 	.word	0x189374bc
 8004694:	3fbe5604 	.word	0x3fbe5604

08004698 <Send_Backlight_Level>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Send_Backlight_Level(void){
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	BL_TransmitData[0] =(uint8_t)(duty>>8);
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <Send_Backlight_Level+0x28>)
 800469e:	2200      	movs	r2, #0
 80046a0:	5e9b      	ldrsh	r3, [r3, r2]
 80046a2:	121b      	asrs	r3, r3, #8
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <Send_Backlight_Level+0x2c>)
 80046aa:	701a      	strb	r2, [r3, #0]
	BL_TransmitData[1] =(uint8_t)(duty);
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <Send_Backlight_Level+0x28>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	5e9b      	ldrsh	r3, [r3, r2]
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <Send_Backlight_Level+0x2c>)
 80046b6:	705a      	strb	r2, [r3, #1]
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	200001b4 	.word	0x200001b4
 80046c4:	200001bc 	.word	0x200001bc

080046c8 <LTR_Meas>:

void LTR_Meas(void){
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
	if(ALS_GetData(&LTR)==DataValid){
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <LTR_Meas+0x4c>)
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff fd3e 	bl	8004150 <ALS_GetData>
 80046d4:	0003      	movs	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d118      	bne.n	800470c <LTR_Meas+0x44>
		 LuxCalc(&LTR);
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <LTR_Meas+0x4c>)
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff fe0b 	bl	80042f8 <LuxCalc>
		 LTR_TransmitData[0] =(uint8_t)(((uint16_t)((LTR.lux)*50))>>8);
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <LTR_Meas+0x4c>)
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	b293      	uxth	r3, r2
 80046ea:	2232      	movs	r2, #50	; 0x32
 80046ec:	4353      	muls	r3, r2
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <LTR_Meas+0x50>)
 80046f8:	701a      	strb	r2, [r3, #0]
		 LTR_TransmitData[1] =(uint8_t)(LTR.lux*50);
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <LTR_Meas+0x4c>)
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	b2d3      	uxtb	r3, r2
 8004702:	2232      	movs	r2, #50	; 0x32
 8004704:	4353      	muls	r3, r2
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <LTR_Meas+0x50>)
 800470a:	705a      	strb	r2, [r3, #1]
	}
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	20000050 	.word	0x20000050
 8004718:	200001b8 	.word	0x200001b8

0800471c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004720:	f000 fd7c 	bl	800521c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004724:	f000 f8b8 	bl	8004898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004728:	f000 fb76 	bl	8004e18 <MX_GPIO_Init>
  MX_TIM1_Init();
 800472c:	f000 f92a 	bl	8004984 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004730:	f000 f9f6 	bl	8004b20 <MX_TIM3_Init>
  MX_TIM14_Init();
 8004734:	f000 fa94 	bl	8004c60 <MX_TIM14_Init>
  MX_TIM16_Init();
 8004738:	f000 fae4 	bl	8004d04 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  duty = htim1.Instance->CCR1;
 800473c:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <main+0x154>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	b21a      	sxth	r2, r3
 8004744:	4b4b      	ldr	r3, [pc, #300]	; (8004874 <main+0x158>)
 8004746:	801a      	strh	r2, [r3, #0]
	I2C2_Master_Register_Init();
 8004748:	f7fe fbc2 	bl	8002ed0 <I2C2_Master_Register_Init>
  I2C1_Slave_Register_Init();
 800474c:	f7fe fc3e 	bl	8002fcc <I2C1_Slave_Register_Init>

  	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);//TPS61196 Enable edilir.
 8004750:	23a0      	movs	r3, #160	; 0xa0
 8004752:	05db      	lsls	r3, r3, #23
 8004754:	2201      	movs	r2, #1
 8004756:	2108      	movs	r1, #8
 8004758:	0018      	movs	r0, r3
 800475a:	f001 f837 	bl	80057cc <HAL_GPIO_WritePin>
     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//TPS61196 PWM1 başlatılır.(100Hz,1:5000)
 800475e:	4b44      	ldr	r3, [pc, #272]	; (8004870 <main+0x154>)
 8004760:	2100      	movs	r1, #0
 8004762:	0018      	movs	r0, r3
 8004764:	f001 ffca 	bl	80066fc <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//TPS61196 PWM2 başlatılır.(100Hz,1:5000)
 8004768:	4b43      	ldr	r3, [pc, #268]	; (8004878 <main+0x15c>)
 800476a:	2100      	movs	r1, #0
 800476c:	0018      	movs	r0, r3
 800476e:	f001 ffc5 	bl	80066fc <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//TPS61196 PWM3 başlatılır.(100Hz,1:5000)
 8004772:	4b41      	ldr	r3, [pc, #260]	; (8004878 <main+0x15c>)
 8004774:	2104      	movs	r1, #4
 8004776:	0018      	movs	r0, r3
 8004778:	f001 ffc0 	bl	80066fc <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//TPS61196 PWM4 başlatılır.(100Hz,1:5000)
 800477c:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <main+0x15c>)
 800477e:	2108      	movs	r1, #8
 8004780:	0018      	movs	r0, r3
 8004782:	f001 ffbb 	bl	80066fc <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);//TPS61196 PWM5 başlatılır.(100Hz,1:5000)
 8004786:	4b3c      	ldr	r3, [pc, #240]	; (8004878 <main+0x15c>)
 8004788:	210c      	movs	r1, #12
 800478a:	0018      	movs	r0, r3
 800478c:	f001 ffb6 	bl	80066fc <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);//TPS61196 PWM6 başlatılır.(100Hz,1:5000)
 8004790:	4b3a      	ldr	r3, [pc, #232]	; (800487c <main+0x160>)
 8004792:	2100      	movs	r1, #0
 8004794:	0018      	movs	r0, r3
 8004796:	f001 ffb1 	bl	80066fc <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);//TPS61196 PWM7 başlatılır.(100Hz,1:5000)
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <main+0x164>)
 800479c:	2100      	movs	r1, #0
 800479e:	0018      	movs	r0, r3
 80047a0:	f001 ffac 	bl	80066fc <HAL_TIM_PWM_Start>
   	// LTR SENSOR ACTIVATİON

     LTR_Sensor_Init(&LTR);	// LTR Sensor Startup
 80047a4:	4b37      	ldr	r3, [pc, #220]	; (8004884 <main+0x168>)
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7fe ff86 	bl	80036b8 <LTR_Sensor_Init>
     ALS_IntTimeBitRead(&LTR);
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <main+0x168>)
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff f96a 	bl	8003a88 <ALS_IntTimeBitRead>

     ALS_CONTR_GainSet(&LTR, 1);	// LTR Sensor Gain Set INPUTS --> 1 - 2 - 4 - 8 - 48 - 96
 80047b4:	4b33      	ldr	r3, [pc, #204]	; (8004884 <main+0x168>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fe ffbb 	bl	8003734 <ALS_CONTR_GainSet>
     ALS_IntTimeSet(&LTR, 100);   // LTR Sensor Integration Time Set INPUTS --> 50 - 100 - 150 - 200 - 250 - 300 - 350
 80047be:	4a32      	ldr	r2, [pc, #200]	; (8004888 <main+0x16c>)
 80047c0:	4b30      	ldr	r3, [pc, #192]	; (8004884 <main+0x168>)
 80047c2:	1c11      	adds	r1, r2, #0
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff f9cf 	bl	8003b68 <ALS_IntTimeSet>
     ALS_MeasRateSet(&LTR, 200);  // LTR Sensor Measurement Rate Time Set INPUTS --> 50 - 100 - 200 - 500 - 1000 - 2000*/
 80047ca:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <main+0x168>)
 80047cc:	21c8      	movs	r1, #200	; 0xc8
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff fb90 	bl	8003ef4 <ALS_MeasRateSet>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(level_set_flag == 1){
 80047d4:	4b2d      	ldr	r3, [pc, #180]	; (800488c <main+0x170>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d139      	bne.n	8004850 <main+0x134>
		  	duty=(uint32_t)((((uint32_t)Received_DutyData[0])<<8)|((uint32_t)Received_DutyData[1]));
 80047dc:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <main+0x174>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <main+0x174>)
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4313      	orrs	r3, r2
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b21a      	sxth	r2, r3
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <main+0x158>)
 80047f4:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR1=duty;//TPS61196  PWM1 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <main+0x158>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	5e9a      	ldrsh	r2, [r3, r2]
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <main+0x154>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR1=duty;//TPS61196  PWM2 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <main+0x158>)
 8004804:	2200      	movs	r2, #0
 8004806:	5e9a      	ldrsh	r2, [r3, r2]
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <main+0x15c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2=duty;//TPS61196  PWM3 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <main+0x158>)
 8004810:	2200      	movs	r2, #0
 8004812:	5e9a      	ldrsh	r2, [r3, r2]
 8004814:	4b18      	ldr	r3, [pc, #96]	; (8004878 <main+0x15c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3=duty;//TPS61196  PWM4 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 800481a:	4b16      	ldr	r3, [pc, #88]	; (8004874 <main+0x158>)
 800481c:	2200      	movs	r2, #0
 800481e:	5e9a      	ldrsh	r2, [r3, r2]
 8004820:	4b15      	ldr	r3, [pc, #84]	; (8004878 <main+0x15c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4=duty;//TPS61196  PWM5 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <main+0x158>)
 8004828:	2200      	movs	r2, #0
 800482a:	5e9a      	ldrsh	r2, [r3, r2]
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <main+0x15c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
			htim14.Instance->CCR1=duty;//TPS61196 PWM6 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <main+0x158>)
 8004834:	2200      	movs	r2, #0
 8004836:	5e9a      	ldrsh	r2, [r3, r2]
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <main+0x160>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34
			htim16.Instance->CCR1=duty;//TPS61196 PWM7 darbe genişliği terminalden gelen 0-5000 aralığındaki bir değerle değiştirilir.
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <main+0x158>)
 8004840:	2200      	movs	r2, #0
 8004842:	5e9a      	ldrsh	r2, [r3, r2]
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <main+0x164>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	635a      	str	r2, [r3, #52]	; 0x34
			level_set_flag = 0;
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <main+0x170>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
	  }
	  cntxx++;
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <main+0x178>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <main+0x178>)
 8004858:	601a      	str	r2, [r3, #0]
	  if(cntxx == 200){
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <main+0x178>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2bc8      	cmp	r3, #200	; 0xc8
 8004860:	d1b8      	bne.n	80047d4 <main+0xb8>
		  LTR_Meas();
 8004862:	f7ff ff31 	bl	80046c8 <LTR_Meas>
		  cntxx = 0;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <main+0x178>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
	  if(level_set_flag == 1){
 800486c:	e7b2      	b.n	80047d4 <main+0xb8>
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000080 	.word	0x20000080
 8004874:	200001b4 	.word	0x200001b4
 8004878:	200000cc 	.word	0x200000cc
 800487c:	20000118 	.word	0x20000118
 8004880:	20000164 	.word	0x20000164
 8004884:	20000050 	.word	0x20000050
 8004888:	42c80000 	.word	0x42c80000
 800488c:	200001b2 	.word	0x200001b2
 8004890:	200001b0 	.word	0x200001b0
 8004894:	200001c0 	.word	0x200001c0

08004898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b0a1      	sub	sp, #132	; 0x84
 800489c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800489e:	2448      	movs	r4, #72	; 0x48
 80048a0:	193b      	adds	r3, r7, r4
 80048a2:	0018      	movs	r0, r3
 80048a4:	2338      	movs	r3, #56	; 0x38
 80048a6:	001a      	movs	r2, r3
 80048a8:	2100      	movs	r1, #0
 80048aa:	f002 feeb 	bl	8007684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048ae:	2338      	movs	r3, #56	; 0x38
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	0018      	movs	r0, r3
 80048b4:	2310      	movs	r3, #16
 80048b6:	001a      	movs	r2, r3
 80048b8:	2100      	movs	r1, #0
 80048ba:	f002 fee3 	bl	8007684 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048be:	003b      	movs	r3, r7
 80048c0:	0018      	movs	r0, r3
 80048c2:	2338      	movs	r3, #56	; 0x38
 80048c4:	001a      	movs	r2, r3
 80048c6:	2100      	movs	r1, #0
 80048c8:	f002 fedc 	bl	8007684 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 ff99 	bl	8005808 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048d6:	193b      	adds	r3, r7, r4
 80048d8:	2202      	movs	r2, #2
 80048da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048dc:	193b      	adds	r3, r7, r4
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	0052      	lsls	r2, r2, #1
 80048e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80048e4:	0021      	movs	r1, r4
 80048e6:	187b      	adds	r3, r7, r1
 80048e8:	2200      	movs	r2, #0
 80048ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	2202      	movs	r2, #2
 80048f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	2202      	movs	r2, #2
 80048fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	2200      	movs	r2, #0
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004904:	187b      	adds	r3, r7, r1
 8004906:	2208      	movs	r2, #8
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800490a:	187b      	adds	r3, r7, r1
 800490c:	2280      	movs	r2, #128	; 0x80
 800490e:	0292      	lsls	r2, r2, #10
 8004910:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004912:	187b      	adds	r3, r7, r1
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	0492      	lsls	r2, r2, #18
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800491a:	187b      	adds	r3, r7, r1
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	0592      	lsls	r2, r2, #22
 8004920:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004922:	187b      	adds	r3, r7, r1
 8004924:	0018      	movs	r0, r3
 8004926:	f000 ffaf 	bl	8005888 <HAL_RCC_OscConfig>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800492e:	f000 fab7 	bl	8004ea0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004932:	2138      	movs	r1, #56	; 0x38
 8004934:	187b      	adds	r3, r7, r1
 8004936:	2207      	movs	r2, #7
 8004938:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800493a:	187b      	adds	r3, r7, r1
 800493c:	2202      	movs	r2, #2
 800493e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004946:	187b      	adds	r3, r7, r1
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800494c:	187b      	adds	r3, r7, r1
 800494e:	2102      	movs	r1, #2
 8004950:	0018      	movs	r0, r3
 8004952:	f001 fab9 	bl	8005ec8 <HAL_RCC_ClockConfig>
 8004956:	1e03      	subs	r3, r0, #0
 8004958:	d001      	beq.n	800495e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800495a:	f000 faa1 	bl	8004ea0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800495e:	003b      	movs	r3, r7
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	0392      	lsls	r2, r2, #14
 8004964:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004966:	003b      	movs	r3, r7
 8004968:	2200      	movs	r2, #0
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800496c:	003b      	movs	r3, r7
 800496e:	0018      	movs	r0, r3
 8004970:	f001 fc34 	bl	80061dc <HAL_RCCEx_PeriphCLKConfig>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d001      	beq.n	800497c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004978:	f000 fa92 	bl	8004ea0 <Error_Handler>
  }
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b021      	add	sp, #132	; 0x84
 8004982:	bd90      	pop	{r4, r7, pc}

08004984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b09c      	sub	sp, #112	; 0x70
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800498a:	2360      	movs	r3, #96	; 0x60
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	0018      	movs	r0, r3
 8004990:	2310      	movs	r3, #16
 8004992:	001a      	movs	r2, r3
 8004994:	2100      	movs	r1, #0
 8004996:	f002 fe75 	bl	8007684 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800499a:	2354      	movs	r3, #84	; 0x54
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	0018      	movs	r0, r3
 80049a0:	230c      	movs	r3, #12
 80049a2:	001a      	movs	r2, r3
 80049a4:	2100      	movs	r1, #0
 80049a6:	f002 fe6d 	bl	8007684 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049aa:	2338      	movs	r3, #56	; 0x38
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	0018      	movs	r0, r3
 80049b0:	231c      	movs	r3, #28
 80049b2:	001a      	movs	r2, r3
 80049b4:	2100      	movs	r1, #0
 80049b6:	f002 fe65 	bl	8007684 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	0018      	movs	r0, r3
 80049be:	2334      	movs	r3, #52	; 0x34
 80049c0:	001a      	movs	r2, r3
 80049c2:	2100      	movs	r1, #0
 80049c4:	f002 fe5e 	bl	8007684 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049c8:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049ca:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <MX_TIM1_Init+0x190>)
 80049cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 80049ce:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049d0:	227f      	movs	r2, #127	; 0x7f
 80049d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d4:	4b4e      	ldr	r3, [pc, #312]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80049da:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049dc:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <MX_TIM1_Init+0x194>)
 80049de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049e0:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049e6:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ec:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <MX_TIM1_Init+0x18c>)
 80049f4:	0018      	movs	r0, r3
 80049f6:	f001 fdc9 	bl	800658c <HAL_TIM_Base_Init>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d001      	beq.n	8004a02 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80049fe:	f000 fa4f 	bl	8004ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a02:	2160      	movs	r1, #96	; 0x60
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	2280      	movs	r2, #128	; 0x80
 8004a08:	0152      	lsls	r2, r2, #5
 8004a0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a0c:	187a      	adds	r2, r7, r1
 8004a0e:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <MX_TIM1_Init+0x18c>)
 8004a10:	0011      	movs	r1, r2
 8004a12:	0018      	movs	r0, r3
 8004a14:	f002 f852 	bl	8006abc <HAL_TIM_ConfigClockSource>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8004a1c:	f000 fa40 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a20:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <MX_TIM1_Init+0x18c>)
 8004a22:	0018      	movs	r0, r3
 8004a24:	f001 fe0a 	bl	800663c <HAL_TIM_PWM_Init>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8004a2c:	f000 fa38 	bl	8004ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a30:	2154      	movs	r1, #84	; 0x54
 8004a32:	187b      	adds	r3, r7, r1
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a44:	187a      	adds	r2, r7, r1
 8004a46:	4b32      	ldr	r3, [pc, #200]	; (8004b10 <MX_TIM1_Init+0x18c>)
 8004a48:	0011      	movs	r1, r2
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f002 fd06 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d001      	beq.n	8004a58 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8004a54:	f000 fa24 	bl	8004ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a58:	2138      	movs	r1, #56	; 0x38
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	2260      	movs	r2, #96	; 0x60
 8004a5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <MX_TIM1_Init+0x198>)
 8004a64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a72:	187b      	adds	r3, r7, r1
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	2200      	movs	r2, #0
 8004a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a84:	1879      	adds	r1, r7, r1
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <MX_TIM1_Init+0x18c>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f001 ff20 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004a90:	1e03      	subs	r3, r0, #0
 8004a92:	d001      	beq.n	8004a98 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8004a94:	f000 fa04 	bl	8004ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a98:	1d3b      	adds	r3, r7, #4
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	2200      	movs	r2, #0
 8004aae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	0192      	lsls	r2, r2, #6
 8004abc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004ac4:	1d3b      	adds	r3, r7, #4
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	2200      	movs	r2, #0
 8004ace:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	0492      	lsls	r2, r2, #18
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	2200      	movs	r2, #0
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004aea:	1d3a      	adds	r2, r7, #4
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <MX_TIM1_Init+0x18c>)
 8004aee:	0011      	movs	r1, r2
 8004af0:	0018      	movs	r0, r3
 8004af2:	f002 fd21 	bl	8007538 <HAL_TIMEx_ConfigBreakDeadTime>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d001      	beq.n	8004afe <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8004afa:	f000 f9d1 	bl	8004ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <MX_TIM1_Init+0x18c>)
 8004b00:	0018      	movs	r0, r3
 8004b02:	f000 fa5b 	bl	8004fbc <HAL_TIM_MspPostInit>

}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b01c      	add	sp, #112	; 0x70
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	20000080 	.word	0x20000080
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	00001387 	.word	0x00001387
 8004b1c:	00001388 	.word	0x00001388

08004b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08e      	sub	sp, #56	; 0x38
 8004b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b26:	2328      	movs	r3, #40	; 0x28
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	001a      	movs	r2, r3
 8004b30:	2100      	movs	r1, #0
 8004b32:	f002 fda7 	bl	8007684 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b36:	231c      	movs	r3, #28
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	001a      	movs	r2, r3
 8004b40:	2100      	movs	r1, #0
 8004b42:	f002 fd9f 	bl	8007684 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b46:	003b      	movs	r3, r7
 8004b48:	0018      	movs	r0, r3
 8004b4a:	231c      	movs	r3, #28
 8004b4c:	001a      	movs	r2, r3
 8004b4e:	2100      	movs	r1, #0
 8004b50:	f002 fd98 	bl	8007684 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b54:	4b3e      	ldr	r3, [pc, #248]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b56:	4a3f      	ldr	r2, [pc, #252]	; (8004c54 <MX_TIM3_Init+0x134>)
 8004b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127;
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b5c:	227f      	movs	r2, #127	; 0x7f
 8004b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b60:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8004b66:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b68:	4a3b      	ldr	r2, [pc, #236]	; (8004c58 <MX_TIM3_Init+0x138>)
 8004b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b6c:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b72:	4b37      	ldr	r3, [pc, #220]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b78:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f001 fd06 	bl	800658c <HAL_TIM_Base_Init>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d001      	beq.n	8004b88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004b84:	f000 f98c 	bl	8004ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b88:	2128      	movs	r1, #40	; 0x28
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	0152      	lsls	r2, r2, #5
 8004b90:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b92:	187a      	adds	r2, r7, r1
 8004b94:	4b2e      	ldr	r3, [pc, #184]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004b96:	0011      	movs	r1, r2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f001 ff8f 	bl	8006abc <HAL_TIM_ConfigClockSource>
 8004b9e:	1e03      	subs	r3, r0, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8004ba2:	f000 f97d 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f001 fd47 	bl	800663c <HAL_TIM_PWM_Init>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d001      	beq.n	8004bb6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004bb2:	f000 f975 	bl	8004ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bb6:	211c      	movs	r1, #28
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004bc4:	187a      	adds	r2, r7, r1
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f002 fc46 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004bd4:	f000 f964 	bl	8004ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bd8:	003b      	movs	r3, r7
 8004bda:	2260      	movs	r2, #96	; 0x60
 8004bdc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8004bde:	003b      	movs	r3, r7
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <MX_TIM3_Init+0x13c>)
 8004be2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004be4:	003b      	movs	r3, r7
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bea:	003b      	movs	r3, r7
 8004bec:	2200      	movs	r2, #0
 8004bee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bf0:	0039      	movs	r1, r7
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f001 fe6a 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004c00:	f000 f94e 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c04:	0039      	movs	r1, r7
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004c08:	2204      	movs	r2, #4
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f001 fe60 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004c10:	1e03      	subs	r3, r0, #0
 8004c12:	d001      	beq.n	8004c18 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8004c14:	f000 f944 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c18:	0039      	movs	r1, r7
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f001 fe56 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8004c28:	f000 f93a 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c2c:	0039      	movs	r1, r7
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004c30:	220c      	movs	r2, #12
 8004c32:	0018      	movs	r0, r3
 8004c34:	f001 fe4c 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8004c3c:	f000 f930 	bl	8004ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <MX_TIM3_Init+0x130>)
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f9ba 	bl	8004fbc <HAL_TIM_MspPostInit>

}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b00e      	add	sp, #56	; 0x38
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200000cc 	.word	0x200000cc
 8004c54:	40000400 	.word	0x40000400
 8004c58:	00001387 	.word	0x00001387
 8004c5c:	00001388 	.word	0x00001388

08004c60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	0018      	movs	r0, r3
 8004c6a:	231c      	movs	r3, #28
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f002 fd08 	bl	8007684 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004c74:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c76:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <MX_TIM14_Init+0x98>)
 8004c78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 127;
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c7c:	227f      	movs	r2, #127	; 0x7f
 8004c7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c80:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <MX_TIM14_Init+0x9c>)
 8004c8a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004c98:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f001 fc76 	bl	800658c <HAL_TIM_Base_Init>
 8004ca0:	1e03      	subs	r3, r0, #0
 8004ca2:	d001      	beq.n	8004ca8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8004ca4:	f000 f8fc 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004caa:	0018      	movs	r0, r3
 8004cac:	f001 fcc6 	bl	800663c <HAL_TIM_PWM_Init>
 8004cb0:	1e03      	subs	r3, r0, #0
 8004cb2:	d001      	beq.n	8004cb8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8004cb4:	f000 f8f4 	bl	8004ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	2260      	movs	r2, #96	; 0x60
 8004cbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <MX_TIM14_Init+0xa0>)
 8004cc2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cca:	1d3b      	adds	r3, r7, #4
 8004ccc:	2200      	movs	r2, #0
 8004cce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cd0:	1d39      	adds	r1, r7, #4
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f001 fdfa 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004cdc:	1e03      	subs	r3, r0, #0
 8004cde:	d001      	beq.n	8004ce4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004ce0:	f000 f8de 	bl	8004ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <MX_TIM14_Init+0x94>)
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 f968 	bl	8004fbc <HAL_TIM_MspPostInit>

}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b008      	add	sp, #32
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000118 	.word	0x20000118
 8004cf8:	40002000 	.word	0x40002000
 8004cfc:	00001387 	.word	0x00001387
 8004d00:	00001388 	.word	0x00001388

08004d04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b094      	sub	sp, #80	; 0x50
 8004d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d0a:	2334      	movs	r3, #52	; 0x34
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	0018      	movs	r0, r3
 8004d10:	231c      	movs	r3, #28
 8004d12:	001a      	movs	r2, r3
 8004d14:	2100      	movs	r1, #0
 8004d16:	f002 fcb5 	bl	8007684 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d1a:	003b      	movs	r3, r7
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	2334      	movs	r3, #52	; 0x34
 8004d20:	001a      	movs	r2, r3
 8004d22:	2100      	movs	r1, #0
 8004d24:	f002 fcae 	bl	8007684 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004d28:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d2a:	4a38      	ldr	r2, [pc, #224]	; (8004e0c <MX_TIM16_Init+0x108>)
 8004d2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 127;
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d30:	227f      	movs	r2, #127	; 0x7f
 8004d32:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d34:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d3c:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <MX_TIM16_Init+0x10c>)
 8004d3e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d40:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004d52:	4b2d      	ldr	r3, [pc, #180]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f001 fc19 	bl	800658c <HAL_TIM_Base_Init>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8004d5e:	f000 f89f 	bl	8004ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8004d62:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004d64:	0018      	movs	r0, r3
 8004d66:	f001 fc69 	bl	800663c <HAL_TIM_PWM_Init>
 8004d6a:	1e03      	subs	r3, r0, #0
 8004d6c:	d001      	beq.n	8004d72 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8004d6e:	f000 f897 	bl	8004ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d72:	2134      	movs	r1, #52	; 0x34
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	2260      	movs	r2, #96	; 0x60
 8004d78:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <MX_TIM16_Init+0x110>)
 8004d7e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d80:	187b      	adds	r3, r7, r1
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d86:	187b      	adds	r3, r7, r1
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d92:	187b      	adds	r3, r7, r1
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d9e:	1879      	adds	r1, r7, r1
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	0018      	movs	r0, r3
 8004da6:	f001 fd93 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d001      	beq.n	8004db2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8004dae:	f000 f877 	bl	8004ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004db2:	003b      	movs	r3, r7
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004db8:	003b      	movs	r3, r7
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dbe:	003b      	movs	r3, r7
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004dc4:	003b      	movs	r3, r7
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dca:	003b      	movs	r3, r7
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dd0:	003b      	movs	r3, r7
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	0192      	lsls	r2, r2, #6
 8004dd6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004dd8:	003b      	movs	r3, r7
 8004dda:	2200      	movs	r2, #0
 8004ddc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dde:	003b      	movs	r3, r7
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004de4:	003a      	movs	r2, r7
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f002 fba4 	bl	8007538 <HAL_TIMEx_ConfigBreakDeadTime>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8004df4:	f000 f854 	bl	8004ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <MX_TIM16_Init+0x104>)
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 f8de 	bl	8004fbc <HAL_TIM_MspPostInit>

}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b014      	add	sp, #80	; 0x50
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000164 	.word	0x20000164
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	00001387 	.word	0x00001387
 8004e14:	00001388 	.word	0x00001388

08004e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1e:	240c      	movs	r4, #12
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	0018      	movs	r0, r3
 8004e24:	2314      	movs	r3, #20
 8004e26:	001a      	movs	r2, r3
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f002 fc2b 	bl	8007684 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <MX_GPIO_Init+0x84>)
 8004e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <MX_GPIO_Init+0x84>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	635a      	str	r2, [r3, #52]	; 0x34
 8004e3a:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <MX_GPIO_Init+0x84>)
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <MX_GPIO_Init+0x84>)
 8004e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <MX_GPIO_Init+0x84>)
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	635a      	str	r2, [r3, #52]	; 0x34
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <MX_GPIO_Init+0x84>)
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8004e5e:	23a0      	movs	r3, #160	; 0xa0
 8004e60:	05db      	lsls	r3, r3, #23
 8004e62:	2200      	movs	r2, #0
 8004e64:	2108      	movs	r1, #8
 8004e66:	0018      	movs	r0, r3
 8004e68:	f000 fcb0 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e6c:	0021      	movs	r1, r4
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2208      	movs	r2, #8
 8004e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2201      	movs	r2, #1
 8004e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	2200      	movs	r2, #0
 8004e84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e86:	187a      	adds	r2, r7, r1
 8004e88:	23a0      	movs	r3, #160	; 0xa0
 8004e8a:	05db      	lsls	r3, r3, #23
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f000 fb38 	bl	8005504 <HAL_GPIO_Init>

}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b009      	add	sp, #36	; 0x24
 8004e9a:	bd90      	pop	{r4, r7, pc}
 8004e9c:	40021000 	.word	0x40021000

08004ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea4:	b672      	cpsid	i
}
 8004ea6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ea8:	e7fe      	b.n	8004ea8 <Error_Handler+0x8>
	...

08004eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	0549      	lsls	r1, r1, #21
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	055b      	lsls	r3, r3, #21
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 fa40 	bl	8005370 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000

08004efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <HAL_TIM_Base_MspInit+0xac>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10e      	bne.n	8004f2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f0e:	4b27      	ldr	r3, [pc, #156]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	0109      	lsls	r1, r1, #4
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f1c:	4b23      	ldr	r3, [pc, #140]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4013      	ands	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004f2a:	e038      	b.n	8004f9e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_TIM_Base_MspInit+0xb4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10c      	bne.n	8004f50 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	2202      	movs	r2, #2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
}
 8004f4e:	e026      	b.n	8004f9e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM14)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <HAL_TIM_Base_MspInit+0xb8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10e      	bne.n	8004f78 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f5a:	4b14      	ldr	r3, [pc, #80]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	0209      	lsls	r1, r1, #8
 8004f64:	430a      	orrs	r2, r1
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
 8004f68:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	4013      	ands	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	e012      	b.n	8004f9e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10d      	bne.n	8004f9e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	0289      	lsls	r1, r1, #10
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_TIM_Base_MspInit+0xb0>)
 8004f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	029b      	lsls	r3, r3, #10
 8004f98:	4013      	ands	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b006      	add	sp, #24
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40002000 	.word	0x40002000
 8004fb8:	40014400 	.word	0x40014400

08004fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b08d      	sub	sp, #52	; 0x34
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	241c      	movs	r4, #28
 8004fc6:	193b      	adds	r3, r7, r4
 8004fc8:	0018      	movs	r0, r3
 8004fca:	2314      	movs	r3, #20
 8004fcc:	001a      	movs	r2, r3
 8004fce:	2100      	movs	r1, #0
 8004fd0:	f002 fb58 	bl	8007684 <memset>
  if(htim->Instance==TIM1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a63      	ldr	r2, [pc, #396]	; (8005168 <HAL_TIM_MspPostInit+0x1ac>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d124      	bne.n	8005028 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fde:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	4b62      	ldr	r3, [pc, #392]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fea:	4b60      	ldr	r3, [pc, #384]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	2201      	movs	r2, #1
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ff6:	193b      	adds	r3, r7, r4
 8004ff8:	2280      	movs	r2, #128	; 0x80
 8004ffa:	0052      	lsls	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffe:	0021      	movs	r1, r4
 8005000:	187b      	adds	r3, r7, r1
 8005002:	2202      	movs	r2, #2
 8005004:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	187b      	adds	r3, r7, r1
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500c:	187b      	adds	r3, r7, r1
 800500e:	2200      	movs	r2, #0
 8005010:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005012:	187b      	adds	r3, r7, r1
 8005014:	2202      	movs	r2, #2
 8005016:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	187a      	adds	r2, r7, r1
 800501a:	23a0      	movs	r3, #160	; 0xa0
 800501c:	05db      	lsls	r3, r3, #23
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f000 fa6f 	bl	8005504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8005026:	e09b      	b.n	8005160 <HAL_TIM_MspPostInit+0x1a4>
  else if(htim->Instance==TIM3)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a50      	ldr	r2, [pc, #320]	; (8005170 <HAL_TIM_MspPostInit+0x1b4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d145      	bne.n	80050be <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005032:	4b4e      	ldr	r3, [pc, #312]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005038:	2101      	movs	r1, #1
 800503a:	430a      	orrs	r2, r1
 800503c:	635a      	str	r2, [r3, #52]	; 0x34
 800503e:	4b4b      	ldr	r3, [pc, #300]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	2201      	movs	r2, #1
 8005044:	4013      	ands	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800504a:	4b48      	ldr	r3, [pc, #288]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 800504c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504e:	4b47      	ldr	r3, [pc, #284]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005050:	2102      	movs	r1, #2
 8005052:	430a      	orrs	r2, r1
 8005054:	635a      	str	r2, [r3, #52]	; 0x34
 8005056:	4b45      	ldr	r3, [pc, #276]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	2202      	movs	r2, #2
 800505c:	4013      	ands	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005062:	241c      	movs	r4, #28
 8005064:	193b      	adds	r3, r7, r4
 8005066:	22c0      	movs	r2, #192	; 0xc0
 8005068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506a:	193b      	adds	r3, r7, r4
 800506c:	2202      	movs	r2, #2
 800506e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005070:	193b      	adds	r3, r7, r4
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005076:	193b      	adds	r3, r7, r4
 8005078:	2200      	movs	r2, #0
 800507a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800507c:	193b      	adds	r3, r7, r4
 800507e:	2201      	movs	r2, #1
 8005080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005082:	193a      	adds	r2, r7, r4
 8005084:	23a0      	movs	r3, #160	; 0xa0
 8005086:	05db      	lsls	r3, r3, #23
 8005088:	0011      	movs	r1, r2
 800508a:	0018      	movs	r0, r3
 800508c:	f000 fa3a 	bl	8005504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005090:	0021      	movs	r1, r4
 8005092:	187b      	adds	r3, r7, r1
 8005094:	2203      	movs	r2, #3
 8005096:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	187b      	adds	r3, r7, r1
 800509a:	2202      	movs	r2, #2
 800509c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	187b      	adds	r3, r7, r1
 80050a0:	2200      	movs	r2, #0
 80050a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2200      	movs	r2, #0
 80050a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2201      	movs	r2, #1
 80050ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <HAL_TIM_MspPostInit+0x1b8>)
 80050b4:	0019      	movs	r1, r3
 80050b6:	0010      	movs	r0, r2
 80050b8:	f000 fa24 	bl	8005504 <HAL_GPIO_Init>
}
 80050bc:	e050      	b.n	8005160 <HAL_TIM_MspPostInit+0x1a4>
  else if(htim->Instance==TIM14)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <HAL_TIM_MspPostInit+0x1bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d123      	bne.n	8005110 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 80050ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 80050ce:	2101      	movs	r1, #1
 80050d0:	430a      	orrs	r2, r1
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80050e0:	211c      	movs	r1, #28
 80050e2:	187b      	adds	r3, r7, r1
 80050e4:	2210      	movs	r2, #16
 80050e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	2202      	movs	r2, #2
 80050ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	2200      	movs	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	2204      	movs	r2, #4
 80050fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005100:	187a      	adds	r2, r7, r1
 8005102:	23a0      	movs	r3, #160	; 0xa0
 8005104:	05db      	lsls	r3, r3, #23
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f000 f9fb 	bl	8005504 <HAL_GPIO_Init>
}
 800510e:	e027      	b.n	8005160 <HAL_TIM_MspPostInit+0x1a4>
  else if(htim->Instance==TIM16)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_TIM_MspPostInit+0x1c0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d122      	bne.n	8005160 <HAL_TIM_MspPostInit+0x1a4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 800511c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005120:	2102      	movs	r1, #2
 8005122:	430a      	orrs	r2, r1
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_TIM_MspPostInit+0x1b0>)
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	2202      	movs	r2, #2
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005132:	211c      	movs	r1, #28
 8005134:	187b      	adds	r3, r7, r1
 8005136:	2280      	movs	r2, #128	; 0x80
 8005138:	0052      	lsls	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	187b      	adds	r3, r7, r1
 800513e:	2202      	movs	r2, #2
 8005140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005142:	187b      	adds	r3, r7, r1
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005148:	187b      	adds	r3, r7, r1
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800514e:	187b      	adds	r3, r7, r1
 8005150:	2202      	movs	r2, #2
 8005152:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005154:	187b      	adds	r3, r7, r1
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <HAL_TIM_MspPostInit+0x1b8>)
 8005158:	0019      	movs	r1, r3
 800515a:	0010      	movs	r0, r2
 800515c:	f000 f9d2 	bl	8005504 <HAL_GPIO_Init>
}
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b00d      	add	sp, #52	; 0x34
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40021000 	.word	0x40021000
 8005170:	40000400 	.word	0x40000400
 8005174:	50000400 	.word	0x50000400
 8005178:	40002000 	.word	0x40002000
 800517c:	40014400 	.word	0x40014400

08005180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005184:	e7fe      	b.n	8005184 <NMI_Handler+0x4>

08005186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800518a:	e7fe      	b.n	800518a <HardFault_Handler+0x4>

0800518c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051a4:	f000 f8a4 	bl	80052f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <SystemInit+0x14>)
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	0512      	lsls	r2, r2, #20
 80051ba:	609a      	str	r2, [r3, #8]
#endif
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051c8:	480d      	ldr	r0, [pc, #52]	; (8005200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051cc:	f7ff fff0 	bl	80051b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051d0:	480c      	ldr	r0, [pc, #48]	; (8005204 <LoopForever+0x6>)
  ldr r1, =_edata
 80051d2:	490d      	ldr	r1, [pc, #52]	; (8005208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <LoopForever+0xe>)
  movs r3, #0
 80051d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051d8:	e002      	b.n	80051e0 <LoopCopyDataInit>

080051da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051de:	3304      	adds	r3, #4

080051e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051e4:	d3f9      	bcc.n	80051da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051e8:	4c0a      	ldr	r4, [pc, #40]	; (8005214 <LoopForever+0x16>)
  movs r3, #0
 80051ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051ec:	e001      	b.n	80051f2 <LoopFillZerobss>

080051ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051f0:	3204      	adds	r2, #4

080051f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051f4:	d3fb      	bcc.n	80051ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80051f6:	f002 fa4d 	bl	8007694 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80051fa:	f7ff fa8f 	bl	800471c <main>

080051fe <LoopForever>:

LoopForever:
  b LoopForever
 80051fe:	e7fe      	b.n	80051fe <LoopForever>
  ldr   r0, =_estack
 8005200:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005208:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800520c:	08007850 	.word	0x08007850
  ldr r2, =_sbss
 8005210:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005214:	200001c8 	.word	0x200001c8

08005218 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005218:	e7fe      	b.n	8005218 <ADC1_COMP_IRQHandler>
	...

0800521c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005222:	1dfb      	adds	r3, r7, #7
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_Init+0x3c>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_Init+0x3c>)
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	0049      	lsls	r1, r1, #1
 8005232:	430a      	orrs	r2, r1
 8005234:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005236:	2000      	movs	r0, #0
 8005238:	f000 f810 	bl	800525c <HAL_InitTick>
 800523c:	1e03      	subs	r3, r0, #0
 800523e:	d003      	beq.n	8005248 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005240:	1dfb      	adds	r3, r7, #7
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e001      	b.n	800524c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005248:	f7ff fe30 	bl	8004eac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800524c:	1dfb      	adds	r3, r7, #7
 800524e:	781b      	ldrb	r3, [r3, #0]
}
 8005250:	0018      	movs	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40022000 	.word	0x40022000

0800525c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005264:	230f      	movs	r3, #15
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HAL_InitTick+0x88>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02b      	beq.n	80052cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <HAL_InitTick+0x8c>)
 8005276:	681c      	ldr	r4, [r3, #0]
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <HAL_InitTick+0x88>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	0019      	movs	r1, r3
 800527e:	23fa      	movs	r3, #250	; 0xfa
 8005280:	0098      	lsls	r0, r3, #2
 8005282:	f7fa ff41 	bl	8000108 <__udivsi3>
 8005286:	0003      	movs	r3, r0
 8005288:	0019      	movs	r1, r3
 800528a:	0020      	movs	r0, r4
 800528c:	f7fa ff3c 	bl	8000108 <__udivsi3>
 8005290:	0003      	movs	r3, r0
 8005292:	0018      	movs	r0, r3
 8005294:	f000 f929 	bl	80054ea <HAL_SYSTICK_Config>
 8005298:	1e03      	subs	r3, r0, #0
 800529a:	d112      	bne.n	80052c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d80a      	bhi.n	80052b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	2301      	movs	r3, #1
 80052a6:	425b      	negs	r3, r3
 80052a8:	2200      	movs	r2, #0
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 f908 	bl	80054c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <HAL_InitTick+0x90>)
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e00d      	b.n	80052d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80052b8:	230f      	movs	r3, #15
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e008      	b.n	80052d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052c2:	230f      	movs	r3, #15
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e003      	b.n	80052d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052cc:	230f      	movs	r3, #15
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	2201      	movs	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b005      	add	sp, #20
 80052e0:	bd90      	pop	{r4, r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20000008 	.word	0x20000008
 80052e8:	20000000 	.word	0x20000000
 80052ec:	20000004 	.word	0x20000004

080052f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_IncTick+0x1c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	001a      	movs	r2, r3
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_IncTick+0x20>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	18d2      	adds	r2, r2, r3
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <HAL_IncTick+0x20>)
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	20000008 	.word	0x20000008
 8005310:	200001c4 	.word	0x200001c4

08005314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  return uwTick;
 8005318:	4b02      	ldr	r3, [pc, #8]	; (8005324 <HAL_GetTick+0x10>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	200001c4 	.word	0x200001c4

08005328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005330:	f7ff fff0 	bl	8005314 <HAL_GetTick>
 8005334:	0003      	movs	r3, r0
 8005336:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	d005      	beq.n	800534e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <HAL_Delay+0x44>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	001a      	movs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	189b      	adds	r3, r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	f7ff ffe0 	bl	8005314 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d8f7      	bhi.n	8005350 <HAL_Delay+0x28>
  {
  }
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000008 	.word	0x20000008

08005370 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005378:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a06      	ldr	r2, [pc, #24]	; (8005398 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800537e:	4013      	ands	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	4b04      	ldr	r3, [pc, #16]	; (8005394 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	b002      	add	sp, #8
 8005390:	bd80      	pop	{r7, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	40010000 	.word	0x40010000
 8005398:	fffff9ff 	.word	0xfffff9ff

0800539c <__NVIC_SetPriority>:
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	0002      	movs	r2, r0
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	1dfb      	adds	r3, r7, #7
 80053a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053aa:	1dfb      	adds	r3, r7, #7
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b7f      	cmp	r3, #127	; 0x7f
 80053b0:	d828      	bhi.n	8005404 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <__NVIC_SetPriority+0xd4>)
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	33c0      	adds	r3, #192	; 0xc0
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	589b      	ldr	r3, [r3, r2]
 80053c2:	1dfa      	adds	r2, r7, #7
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	0011      	movs	r1, r2
 80053c8:	2203      	movs	r2, #3
 80053ca:	400a      	ands	r2, r1
 80053cc:	00d2      	lsls	r2, r2, #3
 80053ce:	21ff      	movs	r1, #255	; 0xff
 80053d0:	4091      	lsls	r1, r2
 80053d2:	000a      	movs	r2, r1
 80053d4:	43d2      	mvns	r2, r2
 80053d6:	401a      	ands	r2, r3
 80053d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	401a      	ands	r2, r3
 80053e2:	1dfb      	adds	r3, r7, #7
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	0018      	movs	r0, r3
 80053e8:	2303      	movs	r3, #3
 80053ea:	4003      	ands	r3, r0
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053f0:	481f      	ldr	r0, [pc, #124]	; (8005470 <__NVIC_SetPriority+0xd4>)
 80053f2:	1dfb      	adds	r3, r7, #7
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	089b      	lsrs	r3, r3, #2
 80053fa:	430a      	orrs	r2, r1
 80053fc:	33c0      	adds	r3, #192	; 0xc0
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	501a      	str	r2, [r3, r0]
}
 8005402:	e031      	b.n	8005468 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <__NVIC_SetPriority+0xd8>)
 8005406:	1dfb      	adds	r3, r7, #7
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	0019      	movs	r1, r3
 800540c:	230f      	movs	r3, #15
 800540e:	400b      	ands	r3, r1
 8005410:	3b08      	subs	r3, #8
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3306      	adds	r3, #6
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	3304      	adds	r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1dfa      	adds	r2, r7, #7
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	0011      	movs	r1, r2
 8005424:	2203      	movs	r2, #3
 8005426:	400a      	ands	r2, r1
 8005428:	00d2      	lsls	r2, r2, #3
 800542a:	21ff      	movs	r1, #255	; 0xff
 800542c:	4091      	lsls	r1, r2
 800542e:	000a      	movs	r2, r1
 8005430:	43d2      	mvns	r2, r2
 8005432:	401a      	ands	r2, r3
 8005434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	401a      	ands	r2, r3
 800543e:	1dfb      	adds	r3, r7, #7
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	0018      	movs	r0, r3
 8005444:	2303      	movs	r3, #3
 8005446:	4003      	ands	r3, r0
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800544c:	4809      	ldr	r0, [pc, #36]	; (8005474 <__NVIC_SetPriority+0xd8>)
 800544e:	1dfb      	adds	r3, r7, #7
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	001c      	movs	r4, r3
 8005454:	230f      	movs	r3, #15
 8005456:	4023      	ands	r3, r4
 8005458:	3b08      	subs	r3, #8
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	430a      	orrs	r2, r1
 800545e:	3306      	adds	r3, #6
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	18c3      	adds	r3, r0, r3
 8005464:	3304      	adds	r3, #4
 8005466:	601a      	str	r2, [r3, #0]
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b003      	add	sp, #12
 800546e:	bd90      	pop	{r4, r7, pc}
 8005470:	e000e100 	.word	0xe000e100
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	045b      	lsls	r3, r3, #17
 8005488:	429a      	cmp	r2, r3
 800548a:	d301      	bcc.n	8005490 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800548c:	2301      	movs	r3, #1
 800548e:	e010      	b.n	80054b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <SysTick_Config+0x44>)
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	3a01      	subs	r2, #1
 8005496:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005498:	2301      	movs	r3, #1
 800549a:	425b      	negs	r3, r3
 800549c:	2103      	movs	r1, #3
 800549e:	0018      	movs	r0, r3
 80054a0:	f7ff ff7c 	bl	800539c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <SysTick_Config+0x44>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <SysTick_Config+0x44>)
 80054ac:	2207      	movs	r2, #7
 80054ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	0018      	movs	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b002      	add	sp, #8
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	e000e010 	.word	0xe000e010

080054c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	210f      	movs	r1, #15
 80054cc:	187b      	adds	r3, r7, r1
 80054ce:	1c02      	adds	r2, r0, #0
 80054d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	b25b      	sxtb	r3, r3
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f7ff ff5d 	bl	800539c <__NVIC_SetPriority>
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b004      	add	sp, #16
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7ff ffbf 	bl	8005478 <SysTick_Config>
 80054fa:	0003      	movs	r3, r0
}
 80054fc:	0018      	movs	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005512:	e147      	b.n	80057a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4091      	lsls	r1, r2
 800551e:	000a      	movs	r2, r1
 8005520:	4013      	ands	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d100      	bne.n	800552c <HAL_GPIO_Init+0x28>
 800552a:	e138      	b.n	800579e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d00b      	beq.n	800554c <HAL_GPIO_Init+0x48>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d007      	beq.n	800554c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005540:	2b11      	cmp	r3, #17
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b12      	cmp	r3, #18
 800554a:	d130      	bne.n	80055ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	2203      	movs	r2, #3
 8005558:	409a      	lsls	r2, r3
 800555a:	0013      	movs	r3, r2
 800555c:	43da      	mvns	r2, r3
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	409a      	lsls	r2, r3
 800556e:	0013      	movs	r3, r2
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005582:	2201      	movs	r2, #1
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	409a      	lsls	r2, r3
 8005588:	0013      	movs	r3, r2
 800558a:	43da      	mvns	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4013      	ands	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	2201      	movs	r2, #1
 800559a:	401a      	ands	r2, r3
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	409a      	lsls	r2, r3
 80055a0:	0013      	movs	r3, r2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	2203      	movs	r2, #3
 80055ba:	409a      	lsls	r2, r3
 80055bc:	0013      	movs	r3, r2
 80055be:	43da      	mvns	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	0013      	movs	r3, r2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_Init+0xea>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b12      	cmp	r3, #18
 80055ec:	d123      	bne.n	8005636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	58d3      	ldr	r3, [r2, r3]
 80055fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2207      	movs	r2, #7
 8005600:	4013      	ands	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	220f      	movs	r2, #15
 8005606:	409a      	lsls	r2, r3
 8005608:	0013      	movs	r3, r2
 800560a:	43da      	mvns	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4013      	ands	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2107      	movs	r1, #7
 800561a:	400b      	ands	r3, r1
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	409a      	lsls	r2, r3
 8005620:	0013      	movs	r3, r2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	08da      	lsrs	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3208      	adds	r2, #8
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	6939      	ldr	r1, [r7, #16]
 8005634:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	2203      	movs	r2, #3
 8005642:	409a      	lsls	r2, r3
 8005644:	0013      	movs	r3, r2
 8005646:	43da      	mvns	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4013      	ands	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2203      	movs	r2, #3
 8005654:	401a      	ands	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	0013      	movs	r3, r2
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	055b      	lsls	r3, r3, #21
 8005672:	4013      	ands	r3, r2
 8005674:	d100      	bne.n	8005678 <HAL_GPIO_Init+0x174>
 8005676:	e092      	b.n	800579e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005678:	4a50      	ldr	r2, [pc, #320]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	3318      	adds	r3, #24
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	589b      	ldr	r3, [r3, r2]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2203      	movs	r2, #3
 800568a:	4013      	ands	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	220f      	movs	r2, #15
 8005690:	409a      	lsls	r2, r3
 8005692:	0013      	movs	r3, r2
 8005694:	43da      	mvns	r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	23a0      	movs	r3, #160	; 0xa0
 80056a0:	05db      	lsls	r3, r3, #23
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d013      	beq.n	80056ce <HAL_GPIO_Init+0x1ca>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a45      	ldr	r2, [pc, #276]	; (80057c0 <HAL_GPIO_Init+0x2bc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00d      	beq.n	80056ca <HAL_GPIO_Init+0x1c6>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a44      	ldr	r2, [pc, #272]	; (80057c4 <HAL_GPIO_Init+0x2c0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <HAL_GPIO_Init+0x1c2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a43      	ldr	r2, [pc, #268]	; (80057c8 <HAL_GPIO_Init+0x2c4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_GPIO_Init+0x1be>
 80056be:	2303      	movs	r3, #3
 80056c0:	e006      	b.n	80056d0 <HAL_GPIO_Init+0x1cc>
 80056c2:	2305      	movs	r3, #5
 80056c4:	e004      	b.n	80056d0 <HAL_GPIO_Init+0x1cc>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e002      	b.n	80056d0 <HAL_GPIO_Init+0x1cc>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_GPIO_Init+0x1cc>
 80056ce:	2300      	movs	r3, #0
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	2103      	movs	r1, #3
 80056d4:	400a      	ands	r2, r1
 80056d6:	00d2      	lsls	r2, r2, #3
 80056d8:	4093      	lsls	r3, r2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80056e0:	4936      	ldr	r1, [pc, #216]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	3318      	adds	r3, #24
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056ee:	4a33      	ldr	r2, [pc, #204]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	58d3      	ldr	r3, [r2, r3]
 80056f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4013      	ands	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	025b      	lsls	r3, r3, #9
 8005708:	4013      	ands	r3, r2
 800570a:	d003      	beq.n	8005714 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005714:	4929      	ldr	r1, [pc, #164]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800571c:	4a27      	ldr	r2, [pc, #156]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 800571e:	2384      	movs	r3, #132	; 0x84
 8005720:	58d3      	ldr	r3, [r2, r3]
 8005722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43da      	mvns	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4013      	ands	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	029b      	lsls	r3, r3, #10
 8005736:	4013      	ands	r3, r2
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005742:	491e      	ldr	r1, [pc, #120]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 8005744:	2284      	movs	r2, #132	; 0x84
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800574a:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	43da      	mvns	r2, r3
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4013      	ands	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	035b      	lsls	r3, r3, #13
 8005762:	4013      	ands	r3, r2
 8005764:	d003      	beq.n	800576e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005774:	4b11      	ldr	r3, [pc, #68]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	43da      	mvns	r2, r3
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	039b      	lsls	r3, r3, #14
 800578c:	4013      	ands	r3, r2
 800578e:	d003      	beq.n	8005798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <HAL_GPIO_Init+0x2b8>)
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	3301      	adds	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	40da      	lsrs	r2, r3
 80057ac:	1e13      	subs	r3, r2, #0
 80057ae:	d000      	beq.n	80057b2 <HAL_GPIO_Init+0x2ae>
 80057b0:	e6b0      	b.n	8005514 <HAL_GPIO_Init+0x10>
  }
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021800 	.word	0x40021800
 80057c0:	50000400 	.word	0x50000400
 80057c4:	50000800 	.word	0x50000800
 80057c8:	50000c00 	.word	0x50000c00

080057cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	0008      	movs	r0, r1
 80057d6:	0011      	movs	r1, r2
 80057d8:	1cbb      	adds	r3, r7, #2
 80057da:	1c02      	adds	r2, r0, #0
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	1c7b      	adds	r3, r7, #1
 80057e0:	1c0a      	adds	r2, r1, #0
 80057e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057e4:	1c7b      	adds	r3, r7, #1
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ec:	1cbb      	adds	r3, r7, #2
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057f4:	e003      	b.n	80057fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057f6:	1cbb      	adds	r3, r7, #2
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	46bd      	mov	sp, r7
 8005802:	b002      	add	sp, #8
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005816:	4013      	ands	r3, r2
 8005818:	0019      	movs	r1, r3
 800581a:	4b17      	ldr	r3, [pc, #92]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	430a      	orrs	r2, r1
 8005820:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	429a      	cmp	r2, r3
 800582a:	d11f      	bne.n	800586c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	0013      	movs	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	189b      	adds	r3, r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4912      	ldr	r1, [pc, #72]	; (8005884 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800583a:	0018      	movs	r0, r3
 800583c:	f7fa fc64 	bl	8000108 <__udivsi3>
 8005840:	0003      	movs	r3, r0
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005846:	e008      	b.n	800585a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3b01      	subs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e001      	b.n	800585a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e009      	b.n	800586e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	401a      	ands	r2, r3
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	429a      	cmp	r2, r3
 800586a:	d0ed      	beq.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b004      	add	sp, #16
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	40007000 	.word	0x40007000
 800587c:	fffff9ff 	.word	0xfffff9ff
 8005880:	20000000 	.word	0x20000000
 8005884:	000f4240 	.word	0x000f4240

08005888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e304      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2201      	movs	r2, #1
 80058a0:	4013      	ands	r3, r2
 80058a2:	d100      	bne.n	80058a6 <HAL_RCC_OscConfig+0x1e>
 80058a4:	e07c      	b.n	80059a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a6:	4bc3      	ldr	r3, [pc, #780]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2238      	movs	r2, #56	; 0x38
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b0:	4bc0      	ldr	r3, [pc, #768]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2203      	movs	r2, #3
 80058b6:	4013      	ands	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_OscConfig+0x3e>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d002      	beq.n	80058cc <HAL_RCC_OscConfig+0x44>
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d10b      	bne.n	80058e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058cc:	4bb9      	ldr	r3, [pc, #740]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	4013      	ands	r3, r2
 80058d6:	d062      	beq.n	800599e <HAL_RCC_OscConfig+0x116>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d15e      	bne.n	800599e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e2df      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	025b      	lsls	r3, r3, #9
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x78>
 80058f0:	4bb0      	ldr	r3, [pc, #704]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4baf      	ldr	r3, [pc, #700]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	0249      	lsls	r1, r1, #9
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e020      	b.n	8005942 <HAL_RCC_OscConfig+0xba>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	23a0      	movs	r3, #160	; 0xa0
 8005906:	02db      	lsls	r3, r3, #11
 8005908:	429a      	cmp	r2, r3
 800590a:	d10e      	bne.n	800592a <HAL_RCC_OscConfig+0xa2>
 800590c:	4ba9      	ldr	r3, [pc, #676]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4ba8      	ldr	r3, [pc, #672]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	02c9      	lsls	r1, r1, #11
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	4ba6      	ldr	r3, [pc, #664]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4ba5      	ldr	r3, [pc, #660]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005920:	2180      	movs	r1, #128	; 0x80
 8005922:	0249      	lsls	r1, r1, #9
 8005924:	430a      	orrs	r2, r1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e00b      	b.n	8005942 <HAL_RCC_OscConfig+0xba>
 800592a:	4ba2      	ldr	r3, [pc, #648]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4ba1      	ldr	r3, [pc, #644]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005930:	49a1      	ldr	r1, [pc, #644]	; (8005bb8 <HAL_RCC_OscConfig+0x330>)
 8005932:	400a      	ands	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	4b9f      	ldr	r3, [pc, #636]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b9e      	ldr	r3, [pc, #632]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 800593c:	499f      	ldr	r1, [pc, #636]	; (8005bbc <HAL_RCC_OscConfig+0x334>)
 800593e:	400a      	ands	r2, r1
 8005940:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7ff fce3 	bl	8005314 <HAL_GetTick>
 800594e:	0003      	movs	r3, r0
 8005950:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7ff fcde 	bl	8005314 <HAL_GetTick>
 8005958:	0002      	movs	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e29e      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005966:	4b93      	ldr	r3, [pc, #588]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	029b      	lsls	r3, r3, #10
 800596e:	4013      	ands	r3, r2
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0xcc>
 8005972:	e015      	b.n	80059a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7ff fcce 	bl	8005314 <HAL_GetTick>
 8005978:	0003      	movs	r3, r0
 800597a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597e:	f7ff fcc9 	bl	8005314 <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	; 0x64
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e289      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005990:	4b88      	ldr	r3, [pc, #544]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	4013      	ands	r3, r2
 800599a:	d1f0      	bne.n	800597e <HAL_RCC_OscConfig+0xf6>
 800599c:	e000      	b.n	80059a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2202      	movs	r2, #2
 80059a6:	4013      	ands	r3, r2
 80059a8:	d100      	bne.n	80059ac <HAL_RCC_OscConfig+0x124>
 80059aa:	e099      	b.n	8005ae0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ac:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2238      	movs	r2, #56	; 0x38
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b6:	4b7f      	ldr	r3, [pc, #508]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2203      	movs	r2, #3
 80059bc:	4013      	ands	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d102      	bne.n	80059cc <HAL_RCC_OscConfig+0x144>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d002      	beq.n	80059d2 <HAL_RCC_OscConfig+0x14a>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d135      	bne.n	8005a3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d2:	4b78      	ldr	r3, [pc, #480]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4013      	ands	r3, r2
 80059dc:	d005      	beq.n	80059ea <HAL_RCC_OscConfig+0x162>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e25c      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ea:	4b72      	ldr	r3, [pc, #456]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a74      	ldr	r2, [pc, #464]	; (8005bc0 <HAL_RCC_OscConfig+0x338>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	0019      	movs	r1, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	021a      	lsls	r2, r3, #8
 80059fa:	4b6e      	ldr	r3, [pc, #440]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d112      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a06:	4b6b      	ldr	r3, [pc, #428]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a6e      	ldr	r2, [pc, #440]	; (8005bc4 <HAL_RCC_OscConfig+0x33c>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	0019      	movs	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	4b67      	ldr	r3, [pc, #412]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a16:	430a      	orrs	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005a1a:	4b66      	ldr	r3, [pc, #408]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	0adb      	lsrs	r3, r3, #11
 8005a20:	2207      	movs	r2, #7
 8005a22:	4013      	ands	r3, r2
 8005a24:	4a68      	ldr	r2, [pc, #416]	; (8005bc8 <HAL_RCC_OscConfig+0x340>)
 8005a26:	40da      	lsrs	r2, r3
 8005a28:	4b68      	ldr	r3, [pc, #416]	; (8005bcc <HAL_RCC_OscConfig+0x344>)
 8005a2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a2c:	4b68      	ldr	r3, [pc, #416]	; (8005bd0 <HAL_RCC_OscConfig+0x348>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7ff fc13 	bl	800525c <HAL_InitTick>
 8005a36:	1e03      	subs	r3, r0, #0
 8005a38:	d051      	beq.n	8005ade <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e232      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d030      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a46:	4b5b      	ldr	r3, [pc, #364]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a5e      	ldr	r2, [pc, #376]	; (8005bc4 <HAL_RCC_OscConfig+0x33c>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	4b57      	ldr	r3, [pc, #348]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a56:	430a      	orrs	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005a5a:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b55      	ldr	r3, [pc, #340]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	0049      	lsls	r1, r1, #1
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7ff fc54 	bl	8005314 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a72:	f7ff fc4f 	bl	8005314 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e20f      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a84:	4b4b      	ldr	r3, [pc, #300]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a90:	4b48      	ldr	r3, [pc, #288]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4a4a      	ldr	r2, [pc, #296]	; (8005bc0 <HAL_RCC_OscConfig+0x338>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	4b44      	ldr	r3, [pc, #272]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e01b      	b.n	8005ae0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4b41      	ldr	r3, [pc, #260]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005aae:	4949      	ldr	r1, [pc, #292]	; (8005bd4 <HAL_RCC_OscConfig+0x34c>)
 8005ab0:	400a      	ands	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7ff fc2e 	bl	8005314 <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005abe:	f7ff fc29 	bl	8005314 <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e1e9      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad0:	4b38      	ldr	r3, [pc, #224]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d1f0      	bne.n	8005abe <HAL_RCC_OscConfig+0x236>
 8005adc:	e000      	b.n	8005ae0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ade:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d047      	beq.n	8005b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005aea:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2238      	movs	r2, #56	; 0x38
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b18      	cmp	r3, #24
 8005af4:	d10a      	bne.n	8005b0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005af6:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	2202      	movs	r2, #2
 8005afc:	4013      	ands	r3, r2
 8005afe:	d03c      	beq.n	8005b7a <HAL_RCC_OscConfig+0x2f2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d138      	bne.n	8005b7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e1cb      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d019      	beq.n	8005b48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b18:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7ff fbf8 	bl	8005314 <HAL_GetTick>
 8005b24:	0003      	movs	r3, r0
 8005b26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2a:	f7ff fbf3 	bl	8005314 <HAL_GetTick>
 8005b2e:	0002      	movs	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e1b3      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	2202      	movs	r2, #2
 8005b42:	4013      	ands	r3, r2
 8005b44:	d0f1      	beq.n	8005b2a <HAL_RCC_OscConfig+0x2a2>
 8005b46:	e018      	b.n	8005b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b4e:	2101      	movs	r1, #1
 8005b50:	438a      	bics	r2, r1
 8005b52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7ff fbde 	bl	8005314 <HAL_GetTick>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7ff fbd9 	bl	8005314 <HAL_GetTick>
 8005b62:	0002      	movs	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e199      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	2202      	movs	r2, #2
 8005b76:	4013      	ands	r3, r2
 8005b78:	d1f1      	bne.n	8005b5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2204      	movs	r2, #4
 8005b80:	4013      	ands	r3, r2
 8005b82:	d100      	bne.n	8005b86 <HAL_RCC_OscConfig+0x2fe>
 8005b84:	e0c6      	b.n	8005d14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	231f      	movs	r3, #31
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2238      	movs	r2, #56	; 0x38
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d11e      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <HAL_RCC_OscConfig+0x32c>)
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x31e>
 8005ba4:	e0b6      	b.n	8005d14 <HAL_RCC_OscConfig+0x48c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d000      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x328>
 8005bae:	e0b1      	b.n	8005d14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e177      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	fffeffff 	.word	0xfffeffff
 8005bbc:	fffbffff 	.word	0xfffbffff
 8005bc0:	ffff80ff 	.word	0xffff80ff
 8005bc4:	ffffc7ff 	.word	0xffffc7ff
 8005bc8:	00f42400 	.word	0x00f42400
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	20000004 	.word	0x20000004
 8005bd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bd8:	4bb4      	ldr	r3, [pc, #720]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	055b      	lsls	r3, r3, #21
 8005be0:	4013      	ands	r3, r2
 8005be2:	d101      	bne.n	8005be8 <HAL_RCC_OscConfig+0x360>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <HAL_RCC_OscConfig+0x362>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	4baf      	ldr	r3, [pc, #700]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf2:	4bae      	ldr	r3, [pc, #696]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	0549      	lsls	r1, r1, #21
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bfc:	4bab      	ldr	r3, [pc, #684]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	055b      	lsls	r3, r3, #21
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005c0a:	231f      	movs	r3, #31
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c12:	4ba7      	ldr	r3, [pc, #668]	; (8005eb0 <HAL_RCC_OscConfig+0x628>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d11a      	bne.n	8005c54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c1e:	4ba4      	ldr	r3, [pc, #656]	; (8005eb0 <HAL_RCC_OscConfig+0x628>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4ba3      	ldr	r3, [pc, #652]	; (8005eb0 <HAL_RCC_OscConfig+0x628>)
 8005c24:	2180      	movs	r1, #128	; 0x80
 8005c26:	0049      	lsls	r1, r1, #1
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005c2c:	f7ff fb72 	bl	8005314 <HAL_GetTick>
 8005c30:	0003      	movs	r3, r0
 8005c32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c36:	f7ff fb6d 	bl	8005314 <HAL_GetTick>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e12d      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c48:	4b99      	ldr	r3, [pc, #612]	; (8005eb0 <HAL_RCC_OscConfig+0x628>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4013      	ands	r3, r2
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCC_OscConfig+0x3e2>
 8005c5c:	4b93      	ldr	r3, [pc, #588]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c60:	4b92      	ldr	r3, [pc, #584]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c62:	2101      	movs	r1, #1
 8005c64:	430a      	orrs	r2, r1
 8005c66:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c68:	e01c      	b.n	8005ca4 <HAL_RCC_OscConfig+0x41c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b05      	cmp	r3, #5
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCC_OscConfig+0x404>
 8005c72:	4b8e      	ldr	r3, [pc, #568]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c76:	4b8d      	ldr	r3, [pc, #564]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c78:	2104      	movs	r1, #4
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c7e:	4b8b      	ldr	r3, [pc, #556]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c82:	4b8a      	ldr	r3, [pc, #552]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c84:	2101      	movs	r1, #1
 8005c86:	430a      	orrs	r2, r1
 8005c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c8a:	e00b      	b.n	8005ca4 <HAL_RCC_OscConfig+0x41c>
 8005c8c:	4b87      	ldr	r3, [pc, #540]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c90:	4b86      	ldr	r3, [pc, #536]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c92:	2101      	movs	r1, #1
 8005c94:	438a      	bics	r2, r1
 8005c96:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c98:	4b84      	ldr	r3, [pc, #528]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c9c:	4b83      	ldr	r3, [pc, #524]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005c9e:	2104      	movs	r1, #4
 8005ca0:	438a      	bics	r2, r1
 8005ca2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d014      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7ff fb32 	bl	8005314 <HAL_GetTick>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb4:	e009      	b.n	8005cca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb6:	f7ff fb2d 	bl	8005314 <HAL_GetTick>
 8005cba:	0002      	movs	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	4a7c      	ldr	r2, [pc, #496]	; (8005eb4 <HAL_RCC_OscConfig+0x62c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0ec      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	4b78      	ldr	r3, [pc, #480]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cce:	2202      	movs	r2, #2
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x42e>
 8005cd4:	e013      	b.n	8005cfe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd6:	f7ff fb1d 	bl	8005314 <HAL_GetTick>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cde:	e009      	b.n	8005cf4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce0:	f7ff fb18 	bl	8005314 <HAL_GetTick>
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	4a72      	ldr	r2, [pc, #456]	; (8005eb4 <HAL_RCC_OscConfig+0x62c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0d7      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cf4:	4b6d      	ldr	r3, [pc, #436]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005cfe:	231f      	movs	r3, #31
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d105      	bne.n	8005d14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d08:	4b68      	ldr	r3, [pc, #416]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d0c:	4b67      	ldr	r3, [pc, #412]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d0e:	496a      	ldr	r1, [pc, #424]	; (8005eb8 <HAL_RCC_OscConfig+0x630>)
 8005d10:	400a      	ands	r2, r1
 8005d12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d100      	bne.n	8005d1e <HAL_RCC_OscConfig+0x496>
 8005d1c:	e0c1      	b.n	8005ea2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d1e:	4b63      	ldr	r3, [pc, #396]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2238      	movs	r2, #56	; 0x38
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d100      	bne.n	8005d2c <HAL_RCC_OscConfig+0x4a4>
 8005d2a:	e081      	b.n	8005e30 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d156      	bne.n	8005de2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d34:	4b5d      	ldr	r3, [pc, #372]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b5c      	ldr	r3, [pc, #368]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d3a:	4960      	ldr	r1, [pc, #384]	; (8005ebc <HAL_RCC_OscConfig+0x634>)
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7ff fae8 	bl	8005314 <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4a:	f7ff fae3 	bl	8005314 <HAL_GetTick>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0a3      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5c:	4b53      	ldr	r3, [pc, #332]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	049b      	lsls	r3, r3, #18
 8005d64:	4013      	ands	r3, r2
 8005d66:	d1f0      	bne.n	8005d4a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d68:	4b50      	ldr	r3, [pc, #320]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a54      	ldr	r2, [pc, #336]	; (8005ec0 <HAL_RCC_OscConfig+0x638>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	0019      	movs	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1a      	ldr	r2, [r3, #32]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	431a      	orrs	r2, r3
 8005d96:	4b45      	ldr	r3, [pc, #276]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d9c:	4b43      	ldr	r3, [pc, #268]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b42      	ldr	r3, [pc, #264]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	0449      	lsls	r1, r1, #17
 8005da6:	430a      	orrs	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005daa:	4b40      	ldr	r3, [pc, #256]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	0549      	lsls	r1, r1, #21
 8005db4:	430a      	orrs	r2, r1
 8005db6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7ff faac 	bl	8005314 <HAL_GetTick>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7ff faa7 	bl	8005314 <HAL_GetTick>
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e067      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	049b      	lsls	r3, r3, #18
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x53a>
 8005de0:	e05f      	b.n	8005ea2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de2:	4b32      	ldr	r3, [pc, #200]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b31      	ldr	r3, [pc, #196]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005de8:	4934      	ldr	r1, [pc, #208]	; (8005ebc <HAL_RCC_OscConfig+0x634>)
 8005dea:	400a      	ands	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005dee:	4b2f      	ldr	r3, [pc, #188]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	4b2e      	ldr	r3, [pc, #184]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005df4:	2103      	movs	r1, #3
 8005df6:	438a      	bics	r2, r1
 8005df8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005e00:	4930      	ldr	r1, [pc, #192]	; (8005ec4 <HAL_RCC_OscConfig+0x63c>)
 8005e02:	400a      	ands	r2, r1
 8005e04:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7ff fa85 	bl	8005314 <HAL_GetTick>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e10:	f7ff fa80 	bl	8005314 <HAL_GetTick>
 8005e14:	0002      	movs	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e040      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e22:	4b22      	ldr	r3, [pc, #136]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	049b      	lsls	r3, r3, #18
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x588>
 8005e2e:	e038      	b.n	8005ea2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e033      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x624>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2203      	movs	r2, #3
 8005e46:	401a      	ands	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d126      	bne.n	8005e9e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2270      	movs	r2, #112	; 0x70
 8005e54:	401a      	ands	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d11f      	bne.n	8005e9e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	23fe      	movs	r3, #254	; 0xfe
 8005e62:	01db      	lsls	r3, r3, #7
 8005e64:	401a      	ands	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d116      	bne.n	8005e9e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	23f8      	movs	r3, #248	; 0xf8
 8005e74:	039b      	lsls	r3, r3, #14
 8005e76:	401a      	ands	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d10e      	bne.n	8005e9e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	23e0      	movs	r3, #224	; 0xe0
 8005e84:	051b      	lsls	r3, r3, #20
 8005e86:	401a      	ands	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	0f5b      	lsrs	r3, r3, #29
 8005e94:	075a      	lsls	r2, r3, #29
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b008      	add	sp, #32
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	00001388 	.word	0x00001388
 8005eb8:	efffffff 	.word	0xefffffff
 8005ebc:	feffffff 	.word	0xfeffffff
 8005ec0:	11c1808c 	.word	0x11c1808c
 8005ec4:	eefeffff 	.word	0xeefeffff

08005ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0e9      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005edc:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d91e      	bls.n	8005f28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eea:	4b73      	ldr	r3, [pc, #460]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2207      	movs	r2, #7
 8005ef0:	4393      	bics	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	4b70      	ldr	r3, [pc, #448]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005efc:	f7ff fa0a 	bl	8005314 <HAL_GetTick>
 8005f00:	0003      	movs	r3, r0
 8005f02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f04:	e009      	b.n	8005f1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f06:	f7ff fa05 	bl	8005314 <HAL_GetTick>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	4a6a      	ldr	r2, [pc, #424]	; (80060bc <HAL_RCC_ClockConfig+0x1f4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e0ca      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f1a:	4b67      	ldr	r3, [pc, #412]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2207      	movs	r2, #7
 8005f20:	4013      	ands	r3, r2
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1ee      	bne.n	8005f06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d015      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2204      	movs	r2, #4
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d006      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f3c:	4b60      	ldr	r3, [pc, #384]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	4b5f      	ldr	r3, [pc, #380]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f42:	21e0      	movs	r1, #224	; 0xe0
 8005f44:	01c9      	lsls	r1, r1, #7
 8005f46:	430a      	orrs	r2, r1
 8005f48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4a:	4b5d      	ldr	r3, [pc, #372]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4a5d      	ldr	r2, [pc, #372]	; (80060c4 <HAL_RCC_ClockConfig+0x1fc>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	0019      	movs	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	d057      	beq.n	8006018 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f70:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	029b      	lsls	r3, r3, #10
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d12b      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e097      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f88:	4b4d      	ldr	r3, [pc, #308]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	049b      	lsls	r3, r3, #18
 8005f90:	4013      	ands	r3, r2
 8005f92:	d11f      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e08b      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fa0:	4b47      	ldr	r3, [pc, #284]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d113      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e07f      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fb8:	4b41      	ldr	r3, [pc, #260]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d108      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e074      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	2202      	movs	r2, #2
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e06d      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fd4:	4b3a      	ldr	r3, [pc, #232]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2207      	movs	r2, #7
 8005fda:	4393      	bics	r3, r2
 8005fdc:	0019      	movs	r1, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4b37      	ldr	r3, [pc, #220]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe8:	f7ff f994 	bl	8005314 <HAL_GetTick>
 8005fec:	0003      	movs	r3, r0
 8005fee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff0:	e009      	b.n	8006006 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff2:	f7ff f98f 	bl	8005314 <HAL_GetTick>
 8005ff6:	0002      	movs	r2, r0
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_RCC_ClockConfig+0x1f4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e054      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006006:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2238      	movs	r2, #56	; 0x38
 800600c:	401a      	ands	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	429a      	cmp	r2, r3
 8006016:	d1ec      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2207      	movs	r2, #7
 800601e:	4013      	ands	r3, r2
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d21e      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2207      	movs	r2, #7
 800602c:	4393      	bics	r3, r2
 800602e:	0019      	movs	r1, r3
 8006030:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006038:	f7ff f96c 	bl	8005314 <HAL_GetTick>
 800603c:	0003      	movs	r3, r0
 800603e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006040:	e009      	b.n	8006056 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006042:	f7ff f967 	bl	8005314 <HAL_GetTick>
 8006046:	0002      	movs	r2, r0
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <HAL_RCC_ClockConfig+0x1f4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e02c      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2207      	movs	r2, #7
 800605c:	4013      	ands	r3, r2
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d1ee      	bne.n	8006042 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2204      	movs	r2, #4
 800606a:	4013      	ands	r3, r2
 800606c:	d009      	beq.n	8006082 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800606e:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <HAL_RCC_ClockConfig+0x200>)
 8006074:	4013      	ands	r3, r2
 8006076:	0019      	movs	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006082:	f000 f829 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006086:	0001      	movs	r1, r0
 8006088:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <HAL_RCC_ClockConfig+0x1f8>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	220f      	movs	r2, #15
 8006090:	401a      	ands	r2, r3
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_RCC_ClockConfig+0x204>)
 8006094:	0092      	lsls	r2, r2, #2
 8006096:	58d3      	ldr	r3, [r2, r3]
 8006098:	221f      	movs	r2, #31
 800609a:	4013      	ands	r3, r2
 800609c:	000a      	movs	r2, r1
 800609e:	40da      	lsrs	r2, r3
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_RCC_ClockConfig+0x208>)
 80060a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060a4:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <HAL_RCC_ClockConfig+0x20c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7ff f8d7 	bl	800525c <HAL_InitTick>
 80060ae:	0003      	movs	r3, r0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b004      	add	sp, #16
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40022000 	.word	0x40022000
 80060bc:	00001388 	.word	0x00001388
 80060c0:	40021000 	.word	0x40021000
 80060c4:	fffff0ff 	.word	0xfffff0ff
 80060c8:	ffff8fff 	.word	0xffff8fff
 80060cc:	080077b4 	.word	0x080077b4
 80060d0:	20000000 	.word	0x20000000
 80060d4:	20000004 	.word	0x20000004

080060d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060de:	4b3c      	ldr	r3, [pc, #240]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2238      	movs	r2, #56	; 0x38
 80060e4:	4013      	ands	r3, r2
 80060e6:	d10f      	bne.n	8006108 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80060e8:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	0adb      	lsrs	r3, r3, #11
 80060ee:	2207      	movs	r2, #7
 80060f0:	4013      	ands	r3, r2
 80060f2:	2201      	movs	r2, #1
 80060f4:	409a      	lsls	r2, r3
 80060f6:	0013      	movs	r3, r2
 80060f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	4835      	ldr	r0, [pc, #212]	; (80061d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80060fe:	f7fa f803 	bl	8000108 <__udivsi3>
 8006102:	0003      	movs	r3, r0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e05d      	b.n	80061c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006108:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2238      	movs	r2, #56	; 0x38
 800610e:	4013      	ands	r3, r2
 8006110:	2b08      	cmp	r3, #8
 8006112:	d102      	bne.n	800611a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006114:	4b30      	ldr	r3, [pc, #192]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	e054      	b.n	80061c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800611a:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2238      	movs	r2, #56	; 0x38
 8006120:	4013      	ands	r3, r2
 8006122:	2b10      	cmp	r3, #16
 8006124:	d138      	bne.n	8006198 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006126:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2203      	movs	r2, #3
 800612c:	4013      	ands	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	2207      	movs	r2, #7
 8006138:	4013      	ands	r3, r2
 800613a:	3301      	adds	r3, #1
 800613c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d10d      	bne.n	8006160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4824      	ldr	r0, [pc, #144]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006148:	f7f9 ffde 	bl	8000108 <__udivsi3>
 800614c:	0003      	movs	r3, r0
 800614e:	0019      	movs	r1, r3
 8006150:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	227f      	movs	r2, #127	; 0x7f
 8006158:	4013      	ands	r3, r2
 800615a:	434b      	muls	r3, r1
 800615c:	617b      	str	r3, [r7, #20]
        break;
 800615e:	e00d      	b.n	800617c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	481c      	ldr	r0, [pc, #112]	; (80061d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006164:	f7f9 ffd0 	bl	8000108 <__udivsi3>
 8006168:	0003      	movs	r3, r0
 800616a:	0019      	movs	r1, r3
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	227f      	movs	r2, #127	; 0x7f
 8006174:	4013      	ands	r3, r2
 8006176:	434b      	muls	r3, r1
 8006178:	617b      	str	r3, [r7, #20]
        break;
 800617a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	0f5b      	lsrs	r3, r3, #29
 8006182:	2207      	movs	r2, #7
 8006184:	4013      	ands	r3, r2
 8006186:	3301      	adds	r3, #1
 8006188:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	6978      	ldr	r0, [r7, #20]
 800618e:	f7f9 ffbb 	bl	8000108 <__udivsi3>
 8006192:	0003      	movs	r3, r0
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e015      	b.n	80061c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2238      	movs	r2, #56	; 0x38
 800619e:	4013      	ands	r3, r2
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d103      	bne.n	80061ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e00b      	b.n	80061c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80061ac:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2238      	movs	r2, #56	; 0x38
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b18      	cmp	r3, #24
 80061b6:	d103      	bne.n	80061c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80061b8:	23fa      	movs	r3, #250	; 0xfa
 80061ba:	01db      	lsls	r3, r3, #7
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	e001      	b.n	80061c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061c4:	693b      	ldr	r3, [r7, #16]
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b006      	add	sp, #24
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	40021000 	.word	0x40021000
 80061d4:	00f42400 	.word	0x00f42400
 80061d8:	007a1200 	.word	0x007a1200

080061dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80061e4:	2313      	movs	r3, #19
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061ec:	2312      	movs	r3, #18
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	4013      	ands	r3, r2
 80061fe:	d100      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006200:	e0ad      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006202:	2011      	movs	r0, #17
 8006204:	183b      	adds	r3, r7, r0
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800620c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	055b      	lsls	r3, r3, #21
 8006212:	4013      	ands	r3, r2
 8006214:	d110      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006216:	4b44      	ldr	r3, [pc, #272]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800621a:	4b43      	ldr	r3, [pc, #268]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	0549      	lsls	r1, r1, #21
 8006220:	430a      	orrs	r2, r1
 8006222:	63da      	str	r2, [r3, #60]	; 0x3c
 8006224:	4b40      	ldr	r3, [pc, #256]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	055b      	lsls	r3, r3, #21
 800622c:	4013      	ands	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006232:	183b      	adds	r3, r7, r0
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006238:	4b3c      	ldr	r3, [pc, #240]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800623e:	2180      	movs	r1, #128	; 0x80
 8006240:	0049      	lsls	r1, r1, #1
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006246:	f7ff f865 	bl	8005314 <HAL_GetTick>
 800624a:	0003      	movs	r3, r0
 800624c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624e:	e00b      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7ff f860 	bl	8005314 <HAL_GetTick>
 8006254:	0002      	movs	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d904      	bls.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800625e:	2313      	movs	r3, #19
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	2203      	movs	r2, #3
 8006264:	701a      	strb	r2, [r3, #0]
        break;
 8006266:	e005      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006268:	4b30      	ldr	r3, [pc, #192]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4013      	ands	r3, r2
 8006272:	d0ed      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006274:	2313      	movs	r3, #19
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d15e      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006282:	23c0      	movs	r3, #192	; 0xc0
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4013      	ands	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d019      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	429a      	cmp	r2, r3
 8006298:	d014      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800629a:	4b23      	ldr	r3, [pc, #140]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800629c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a4:	4b20      	ldr	r3, [pc, #128]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062a8:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	0249      	lsls	r1, r1, #9
 80062ae:	430a      	orrs	r2, r1
 80062b0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062b6:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062b8:	491e      	ldr	r1, [pc, #120]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80062ba:	400a      	ands	r2, r1
 80062bc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062be:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2201      	movs	r2, #1
 80062c8:	4013      	ands	r3, r2
 80062ca:	d016      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7ff f822 	bl	8005314 <HAL_GetTick>
 80062d0:	0003      	movs	r3, r0
 80062d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d4:	e00c      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d6:	f7ff f81d 	bl	8005314 <HAL_GetTick>
 80062da:	0002      	movs	r2, r0
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d904      	bls.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80062e6:	2313      	movs	r3, #19
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	2203      	movs	r2, #3
 80062ec:	701a      	strb	r2, [r3, #0]
            break;
 80062ee:	e004      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f0:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	2202      	movs	r2, #2
 80062f6:	4013      	ands	r3, r2
 80062f8:	d0ed      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80062fa:	2313      	movs	r3, #19
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006304:	4b08      	ldr	r3, [pc, #32]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	4a09      	ldr	r2, [pc, #36]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800630a:	4013      	ands	r3, r2
 800630c:	0019      	movs	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006314:	430a      	orrs	r2, r1
 8006316:	65da      	str	r2, [r3, #92]	; 0x5c
 8006318:	e016      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800631a:	2312      	movs	r3, #18
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	2213      	movs	r2, #19
 8006320:	18ba      	adds	r2, r7, r2
 8006322:	7812      	ldrb	r2, [r2, #0]
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e00f      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
 8006330:	fffffcff 	.word	0xfffffcff
 8006334:	fffeffff 	.word	0xfffeffff
 8006338:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	2312      	movs	r3, #18
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	2213      	movs	r2, #19
 8006342:	18ba      	adds	r2, r7, r2
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006348:	2311      	movs	r3, #17
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d105      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006352:	4b84      	ldr	r3, [pc, #528]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006356:	4b83      	ldr	r3, [pc, #524]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006358:	4983      	ldr	r1, [pc, #524]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800635a:	400a      	ands	r2, r1
 800635c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	4013      	ands	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006368:	4b7e      	ldr	r3, [pc, #504]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2203      	movs	r2, #3
 800636e:	4393      	bics	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006378:	430a      	orrs	r2, r1
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2202      	movs	r2, #2
 8006382:	4013      	ands	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006386:	4b77      	ldr	r3, [pc, #476]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	220c      	movs	r2, #12
 800638c:	4393      	bics	r3, r2
 800638e:	0019      	movs	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	4b73      	ldr	r3, [pc, #460]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006396:	430a      	orrs	r2, r1
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2210      	movs	r2, #16
 80063a0:	4013      	ands	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063a4:	4b6f      	ldr	r3, [pc, #444]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	4a70      	ldr	r2, [pc, #448]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80063b4:	430a      	orrs	r2, r1
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4013      	ands	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063c4:	4b67      	ldr	r3, [pc, #412]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80063c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c8:	4a69      	ldr	r2, [pc, #420]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	0019      	movs	r1, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	4b64      	ldr	r3, [pc, #400]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80063d4:	430a      	orrs	r2, r1
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4013      	ands	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063e4:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	4a62      	ldr	r2, [pc, #392]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	0019      	movs	r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	4b5c      	ldr	r3, [pc, #368]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80063f4:	430a      	orrs	r2, r1
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2220      	movs	r2, #32
 80063fe:	4013      	ands	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006402:	4b58      	ldr	r3, [pc, #352]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006406:	4a5c      	ldr	r2, [pc, #368]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006408:	4013      	ands	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	4b54      	ldr	r3, [pc, #336]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006412:	430a      	orrs	r2, r1
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	02db      	lsls	r3, r3, #11
 800641e:	4013      	ands	r3, r2
 8006420:	d016      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006422:	4b50      	ldr	r3, [pc, #320]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	4a55      	ldr	r2, [pc, #340]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006428:	4013      	ands	r3, r2
 800642a:	0019      	movs	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	4b4c      	ldr	r3, [pc, #304]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006432:	430a      	orrs	r2, r1
 8006434:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	23c0      	movs	r3, #192	; 0xc0
 800643c:	051b      	lsls	r3, r3, #20
 800643e:	429a      	cmp	r2, r3
 8006440:	d106      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x274>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006442:	4b48      	ldr	r3, [pc, #288]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	4b47      	ldr	r3, [pc, #284]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	0449      	lsls	r1, r1, #17
 800644c:	430a      	orrs	r2, r1
 800644e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	01db      	lsls	r3, r3, #7
 8006458:	4013      	ands	r3, r2
 800645a:	d015      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800645c:	4b41      	ldr	r3, [pc, #260]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	0899      	lsrs	r1, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006468:	4b3e      	ldr	r3, [pc, #248]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800646a:	430a      	orrs	r2, r1
 800646c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	05db      	lsls	r3, r3, #23
 8006476:	429a      	cmp	r2, r3
 8006478:	d106      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800647a:	4b3a      	ldr	r3, [pc, #232]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	4b39      	ldr	r3, [pc, #228]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	0249      	lsls	r1, r1, #9
 8006484:	430a      	orrs	r2, r1
 8006486:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	2380      	movs	r3, #128	; 0x80
 800648e:	031b      	lsls	r3, r3, #12
 8006490:	4013      	ands	r3, r2
 8006492:	d009      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006494:	4b33      	ldr	r3, [pc, #204]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	4393      	bics	r3, r2
 800649c:	0019      	movs	r1, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064a2:	4b30      	ldr	r3, [pc, #192]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064a4:	430a      	orrs	r2, r1
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	2380      	movs	r3, #128	; 0x80
 80064ae:	039b      	lsls	r3, r3, #14
 80064b0:	4013      	ands	r3, r2
 80064b2:	d016      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80064b4:	4b2b      	ldr	r3, [pc, #172]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	4a31      	ldr	r2, [pc, #196]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	0019      	movs	r1, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	4b28      	ldr	r3, [pc, #160]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064c4:	430a      	orrs	r2, r1
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	03db      	lsls	r3, r3, #15
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d106      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80064d4:	4b23      	ldr	r3, [pc, #140]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	4b22      	ldr	r3, [pc, #136]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	0449      	lsls	r1, r1, #17
 80064de:	430a      	orrs	r2, r1
 80064e0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	03db      	lsls	r3, r3, #15
 80064ea:	4013      	ands	r3, r2
 80064ec:	d016      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	4a24      	ldr	r2, [pc, #144]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	0019      	movs	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fc:	4b19      	ldr	r3, [pc, #100]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80064fe:	430a      	orrs	r2, r1
 8006500:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	045b      	lsls	r3, r3, #17
 800650a:	429a      	cmp	r2, r3
 800650c:	d106      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800650e:	4b15      	ldr	r3, [pc, #84]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	0449      	lsls	r1, r1, #17
 8006518:	430a      	orrs	r2, r1
 800651a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	4013      	ands	r3, r2
 8006526:	d016      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800652e:	4013      	ands	r3, r2
 8006530:	0019      	movs	r1, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006538:	430a      	orrs	r2, r1
 800653a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	01db      	lsls	r3, r3, #7
 8006544:	429a      	cmp	r2, r3
 8006546:	d106      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	0249      	lsls	r1, r1, #9
 8006552:	430a      	orrs	r2, r1
 8006554:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006556:	2312      	movs	r3, #18
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	781b      	ldrb	r3, [r3, #0]
}
 800655c:	0018      	movs	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	b006      	add	sp, #24
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40021000 	.word	0x40021000
 8006568:	efffffff 	.word	0xefffffff
 800656c:	fffff3ff 	.word	0xfffff3ff
 8006570:	fff3ffff 	.word	0xfff3ffff
 8006574:	ffcfffff 	.word	0xffcfffff
 8006578:	ffffcfff 	.word	0xffffcfff
 800657c:	f3ffffff 	.word	0xf3ffffff
 8006580:	ffbfffff 	.word	0xffbfffff
 8006584:	feffffff 	.word	0xfeffffff
 8006588:	ffff3fff 	.word	0xffff3fff

0800658c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e04a      	b.n	8006634 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	223d      	movs	r2, #61	; 0x3d
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	223c      	movs	r2, #60	; 0x3c
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fe fca1 	bl	8004efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	223d      	movs	r2, #61	; 0x3d
 80065be:	2102      	movs	r1, #2
 80065c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	0019      	movs	r1, r3
 80065cc:	0010      	movs	r0, r2
 80065ce:	f000 fb41 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2248      	movs	r2, #72	; 0x48
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	223e      	movs	r2, #62	; 0x3e
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	2101      	movs	r1, #1
 80065e8:	5499      	strb	r1, [r3, r2]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2240      	movs	r2, #64	; 0x40
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2241      	movs	r2, #65	; 0x41
 80065f6:	2101      	movs	r1, #1
 80065f8:	5499      	strb	r1, [r3, r2]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2242      	movs	r2, #66	; 0x42
 80065fe:	2101      	movs	r1, #1
 8006600:	5499      	strb	r1, [r3, r2]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2243      	movs	r2, #67	; 0x43
 8006606:	2101      	movs	r1, #1
 8006608:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2244      	movs	r2, #68	; 0x44
 800660e:	2101      	movs	r1, #1
 8006610:	5499      	strb	r1, [r3, r2]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2245      	movs	r2, #69	; 0x45
 8006616:	2101      	movs	r1, #1
 8006618:	5499      	strb	r1, [r3, r2]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2246      	movs	r2, #70	; 0x46
 800661e:	2101      	movs	r1, #1
 8006620:	5499      	strb	r1, [r3, r2]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2247      	movs	r2, #71	; 0x47
 8006626:	2101      	movs	r1, #1
 8006628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	223d      	movs	r2, #61	; 0x3d
 800662e:	2101      	movs	r1, #1
 8006630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	0018      	movs	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e04a      	b.n	80066e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	223d      	movs	r2, #61	; 0x3d
 8006652:	5c9b      	ldrb	r3, [r3, r2]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	223c      	movs	r2, #60	; 0x3c
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	0018      	movs	r0, r3
 8006666:	f000 f841 	bl	80066ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	223d      	movs	r2, #61	; 0x3d
 800666e:	2102      	movs	r1, #2
 8006670:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	0019      	movs	r1, r3
 800667c:	0010      	movs	r0, r2
 800667e:	f000 fae9 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2248      	movs	r2, #72	; 0x48
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	223e      	movs	r2, #62	; 0x3e
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	223f      	movs	r2, #63	; 0x3f
 8006696:	2101      	movs	r1, #1
 8006698:	5499      	strb	r1, [r3, r2]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2240      	movs	r2, #64	; 0x40
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2241      	movs	r2, #65	; 0x41
 80066a6:	2101      	movs	r1, #1
 80066a8:	5499      	strb	r1, [r3, r2]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2242      	movs	r2, #66	; 0x42
 80066ae:	2101      	movs	r1, #1
 80066b0:	5499      	strb	r1, [r3, r2]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2243      	movs	r2, #67	; 0x43
 80066b6:	2101      	movs	r1, #1
 80066b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2244      	movs	r2, #68	; 0x44
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2245      	movs	r2, #69	; 0x45
 80066c6:	2101      	movs	r1, #1
 80066c8:	5499      	strb	r1, [r3, r2]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2246      	movs	r2, #70	; 0x46
 80066ce:	2101      	movs	r1, #1
 80066d0:	5499      	strb	r1, [r3, r2]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2247      	movs	r2, #71	; 0x47
 80066d6:	2101      	movs	r1, #1
 80066d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	223d      	movs	r2, #61	; 0x3d
 80066de:	2101      	movs	r1, #1
 80066e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b002      	add	sp, #8
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d108      	bne.n	800671e <HAL_TIM_PWM_Start+0x22>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	223e      	movs	r2, #62	; 0x3e
 8006710:	5c9b      	ldrb	r3, [r3, r2]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	4193      	sbcs	r3, r2
 800671a:	b2db      	uxtb	r3, r3
 800671c:	e037      	b.n	800678e <HAL_TIM_PWM_Start+0x92>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d108      	bne.n	8006736 <HAL_TIM_PWM_Start+0x3a>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	223f      	movs	r2, #63	; 0x3f
 8006728:	5c9b      	ldrb	r3, [r3, r2]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	1e5a      	subs	r2, r3, #1
 8006730:	4193      	sbcs	r3, r2
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e02b      	b.n	800678e <HAL_TIM_PWM_Start+0x92>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d108      	bne.n	800674e <HAL_TIM_PWM_Start+0x52>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	4193      	sbcs	r3, r2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e01f      	b.n	800678e <HAL_TIM_PWM_Start+0x92>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d108      	bne.n	8006766 <HAL_TIM_PWM_Start+0x6a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2241      	movs	r2, #65	; 0x41
 8006758:	5c9b      	ldrb	r3, [r3, r2]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	1e5a      	subs	r2, r3, #1
 8006760:	4193      	sbcs	r3, r2
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e013      	b.n	800678e <HAL_TIM_PWM_Start+0x92>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b10      	cmp	r3, #16
 800676a:	d108      	bne.n	800677e <HAL_TIM_PWM_Start+0x82>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2242      	movs	r2, #66	; 0x42
 8006770:	5c9b      	ldrb	r3, [r3, r2]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	1e5a      	subs	r2, r3, #1
 8006778:	4193      	sbcs	r3, r2
 800677a:	b2db      	uxtb	r3, r3
 800677c:	e007      	b.n	800678e <HAL_TIM_PWM_Start+0x92>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2243      	movs	r2, #67	; 0x43
 8006782:	5c9b      	ldrb	r3, [r3, r2]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	1e5a      	subs	r2, r3, #1
 800678a:	4193      	sbcs	r3, r2
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e08b      	b.n	80068ae <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_TIM_PWM_Start+0xaa>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	223e      	movs	r2, #62	; 0x3e
 80067a0:	2102      	movs	r1, #2
 80067a2:	5499      	strb	r1, [r3, r2]
 80067a4:	e023      	b.n	80067ee <HAL_TIM_PWM_Start+0xf2>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_PWM_Start+0xba>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	223f      	movs	r2, #63	; 0x3f
 80067b0:	2102      	movs	r1, #2
 80067b2:	5499      	strb	r1, [r3, r2]
 80067b4:	e01b      	b.n	80067ee <HAL_TIM_PWM_Start+0xf2>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d104      	bne.n	80067c6 <HAL_TIM_PWM_Start+0xca>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2240      	movs	r2, #64	; 0x40
 80067c0:	2102      	movs	r1, #2
 80067c2:	5499      	strb	r1, [r3, r2]
 80067c4:	e013      	b.n	80067ee <HAL_TIM_PWM_Start+0xf2>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	d104      	bne.n	80067d6 <HAL_TIM_PWM_Start+0xda>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2241      	movs	r2, #65	; 0x41
 80067d0:	2102      	movs	r1, #2
 80067d2:	5499      	strb	r1, [r3, r2]
 80067d4:	e00b      	b.n	80067ee <HAL_TIM_PWM_Start+0xf2>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d104      	bne.n	80067e6 <HAL_TIM_PWM_Start+0xea>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2242      	movs	r2, #66	; 0x42
 80067e0:	2102      	movs	r1, #2
 80067e2:	5499      	strb	r1, [r3, r2]
 80067e4:	e003      	b.n	80067ee <HAL_TIM_PWM_Start+0xf2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2243      	movs	r2, #67	; 0x43
 80067ea:	2102      	movs	r1, #2
 80067ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	0018      	movs	r0, r3
 80067f8:	f000 fe0c 	bl	8007414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a2d      	ldr	r2, [pc, #180]	; (80068b8 <HAL_TIM_PWM_Start+0x1bc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_TIM_PWM_Start+0x128>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <HAL_TIM_PWM_Start+0x1c0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_TIM_PWM_Start+0x128>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <HAL_TIM_PWM_Start+0x1c4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_TIM_PWM_Start+0x128>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_TIM_PWM_Start+0x1c8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <HAL_TIM_PWM_Start+0x12c>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <HAL_TIM_PWM_Start+0x12e>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	0209      	lsls	r1, r1, #8
 800683c:	430a      	orrs	r2, r1
 800683e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <HAL_TIM_PWM_Start+0x1bc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <HAL_TIM_PWM_Start+0x16e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	05db      	lsls	r3, r3, #23
 8006852:	429a      	cmp	r2, r3
 8006854:	d009      	beq.n	800686a <HAL_TIM_PWM_Start+0x16e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_TIM_PWM_Start+0x1cc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIM_PWM_Start+0x16e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a15      	ldr	r2, [pc, #84]	; (80068bc <HAL_TIM_PWM_Start+0x1c0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d116      	bne.n	8006898 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a16      	ldr	r2, [pc, #88]	; (80068cc <HAL_TIM_PWM_Start+0x1d0>)
 8006872:	4013      	ands	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d016      	beq.n	80068aa <HAL_TIM_PWM_Start+0x1ae>
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	429a      	cmp	r2, r3
 8006884:	d011      	beq.n	80068aa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2101      	movs	r1, #1
 8006892:	430a      	orrs	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	e008      	b.n	80068aa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2101      	movs	r1, #1
 80068a4:	430a      	orrs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e000      	b.n	80068ac <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	0018      	movs	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b004      	add	sp, #16
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800
 80068c8:	40000400 	.word	0x40000400
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	223c      	movs	r2, #60	; 0x3c
 80068e0:	5c9b      	ldrb	r3, [r3, r2]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0df      	b.n	8006aaa <HAL_TIM_PWM_ConfigChannel+0x1da>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	223c      	movs	r2, #60	; 0x3c
 80068ee:	2101      	movs	r1, #1
 80068f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b14      	cmp	r3, #20
 80068f6:	d900      	bls.n	80068fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 80068f8:	e0d1      	b.n	8006a9e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	009a      	lsls	r2, r3, #2
 80068fe:	4b6d      	ldr	r3, [pc, #436]	; (8006ab4 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8006900:	18d3      	adds	r3, r2, r3
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f000 fa20 	bl	8006d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2108      	movs	r1, #8
 8006920:	430a      	orrs	r2, r1
 8006922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2104      	movs	r1, #4
 8006930:	438a      	bics	r2, r1
 8006932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6999      	ldr	r1, [r3, #24]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	619a      	str	r2, [r3, #24]
      break;
 8006946:	e0ab      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fa89 	bl	8006e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	0109      	lsls	r1, r1, #4
 8006964:	430a      	orrs	r2, r1
 8006966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4951      	ldr	r1, [pc, #324]	; (8006ab8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006974:	400a      	ands	r2, r1
 8006976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6999      	ldr	r1, [r3, #24]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	021a      	lsls	r2, r3, #8
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	619a      	str	r2, [r3, #24]
      break;
 800698c:	e088      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f000 faea 	bl	8006f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2108      	movs	r1, #8
 80069a8:	430a      	orrs	r2, r1
 80069aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2104      	movs	r1, #4
 80069b8:	438a      	bics	r2, r1
 80069ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69d9      	ldr	r1, [r3, #28]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	61da      	str	r2, [r3, #28]
      break;
 80069ce:	e067      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	0011      	movs	r1, r2
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 fb51 	bl	8007080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2180      	movs	r1, #128	; 0x80
 80069ea:	0109      	lsls	r1, r1, #4
 80069ec:	430a      	orrs	r2, r1
 80069ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	492f      	ldr	r1, [pc, #188]	; (8006ab8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80069fc:	400a      	ands	r2, r1
 80069fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69d9      	ldr	r1, [r3, #28]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	021a      	lsls	r2, r3, #8
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	61da      	str	r2, [r3, #28]
      break;
 8006a14:	e044      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0011      	movs	r1, r2
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f000 fb98 	bl	8007154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2108      	movs	r1, #8
 8006a30:	430a      	orrs	r2, r1
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2104      	movs	r1, #4
 8006a40:	438a      	bics	r2, r1
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a56:	e023      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	0011      	movs	r1, r2
 8006a60:	0018      	movs	r0, r3
 8006a62:	f000 fbd7 	bl	8007214 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	0109      	lsls	r1, r1, #4
 8006a74:	430a      	orrs	r2, r1
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	490d      	ldr	r1, [pc, #52]	; (8006ab8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006a84:	400a      	ands	r2, r1
 8006a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	021a      	lsls	r2, r3, #8
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8006a9e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	223c      	movs	r2, #60	; 0x3c
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	0018      	movs	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b004      	add	sp, #16
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	080077f4 	.word	0x080077f4
 8006ab8:	fffffbff 	.word	0xfffffbff

08006abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	223c      	movs	r2, #60	; 0x3c
 8006aca:	5c9b      	ldrb	r3, [r3, r2]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIM_ConfigClockSource+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e0b7      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x188>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	223c      	movs	r2, #60	; 0x3c
 8006ad8:	2101      	movs	r1, #1
 8006ada:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	223d      	movs	r2, #61	; 0x3d
 8006ae0:	2102      	movs	r1, #2
 8006ae2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a57      	ldr	r2, [pc, #348]	; (8006c4c <HAL_TIM_ConfigClockSource+0x190>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a56      	ldr	r2, [pc, #344]	; (8006c50 <HAL_TIM_ConfigClockSource+0x194>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2280      	movs	r2, #128	; 0x80
 8006b0a:	0192      	lsls	r2, r2, #6
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d040      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0xd6>
 8006b10:	2280      	movs	r2, #128	; 0x80
 8006b12:	0192      	lsls	r2, r2, #6
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d900      	bls.n	8006b1a <HAL_TIM_ConfigClockSource+0x5e>
 8006b18:	e088      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b1a:	2280      	movs	r2, #128	; 0x80
 8006b1c:	0152      	lsls	r2, r2, #5
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d100      	bne.n	8006b24 <HAL_TIM_ConfigClockSource+0x68>
 8006b22:	e085      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x174>
 8006b24:	2280      	movs	r2, #128	; 0x80
 8006b26:	0152      	lsls	r2, r2, #5
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d900      	bls.n	8006b2e <HAL_TIM_ConfigClockSource+0x72>
 8006b2c:	e07e      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b2e:	2b70      	cmp	r3, #112	; 0x70
 8006b30:	d018      	beq.n	8006b64 <HAL_TIM_ConfigClockSource+0xa8>
 8006b32:	d900      	bls.n	8006b36 <HAL_TIM_ConfigClockSource+0x7a>
 8006b34:	e07a      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b36:	2b60      	cmp	r3, #96	; 0x60
 8006b38:	d04f      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0x11e>
 8006b3a:	d900      	bls.n	8006b3e <HAL_TIM_ConfigClockSource+0x82>
 8006b3c:	e076      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b3e:	2b50      	cmp	r3, #80	; 0x50
 8006b40:	d03b      	beq.n	8006bba <HAL_TIM_ConfigClockSource+0xfe>
 8006b42:	d900      	bls.n	8006b46 <HAL_TIM_ConfigClockSource+0x8a>
 8006b44:	e072      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d057      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x13e>
 8006b4a:	d900      	bls.n	8006b4e <HAL_TIM_ConfigClockSource+0x92>
 8006b4c:	e06e      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b4e:	2b30      	cmp	r3, #48	; 0x30
 8006b50:	d063      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x15e>
 8006b52:	d86b      	bhi.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d060      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x15e>
 8006b58:	d868      	bhi.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d05d      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x15e>
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d05b      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006b62:	e063      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6899      	ldr	r1, [r3, #8]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f000 fc2e 	bl	80073d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2277      	movs	r2, #119	; 0x77
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	609a      	str	r2, [r3, #8]
      break;
 8006b90:	e04f      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6899      	ldr	r1, [r3, #8]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f000 fc17 	bl	80073d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	01c9      	lsls	r1, r1, #7
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]
      break;
 8006bb8:	e03b      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	6859      	ldr	r1, [r3, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	f000 fb88 	bl	80072dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2150      	movs	r1, #80	; 0x50
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 fbe2 	bl	800739c <TIM_ITRx_SetConfig>
      break;
 8006bd8:	e02b      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6859      	ldr	r1, [r3, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	001a      	movs	r2, r3
 8006be8:	f000 fba6 	bl	8007338 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2160      	movs	r1, #96	; 0x60
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f000 fbd2 	bl	800739c <TIM_ITRx_SetConfig>
      break;
 8006bf8:	e01b      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6859      	ldr	r1, [r3, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	001a      	movs	r2, r3
 8006c08:	f000 fb68 	bl	80072dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2140      	movs	r1, #64	; 0x40
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 fbc2 	bl	800739c <TIM_ITRx_SetConfig>
      break;
 8006c18:	e00b      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	0019      	movs	r1, r3
 8006c24:	0010      	movs	r0, r2
 8006c26:	f000 fbb9 	bl	800739c <TIM_ITRx_SetConfig>
        break;
 8006c2a:	e002      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006c2c:	46c0      	nop			; (mov r8, r8)
 8006c2e:	e000      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006c30:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	223d      	movs	r2, #61	; 0x3d
 8006c36:	2101      	movs	r1, #1
 8006c38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	223c      	movs	r2, #60	; 0x3c
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b004      	add	sp, #16
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	ffceff88 	.word	0xffceff88
 8006c50:	ffff00ff 	.word	0xffff00ff

08006c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a34      	ldr	r2, [pc, #208]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d008      	beq.n	8006c7e <TIM_Base_SetConfig+0x2a>
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	05db      	lsls	r3, r3, #23
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d003      	beq.n	8006c7e <TIM_Base_SetConfig+0x2a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a30      	ldr	r2, [pc, #192]	; (8006d3c <TIM_Base_SetConfig+0xe8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d108      	bne.n	8006c90 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2270      	movs	r2, #112	; 0x70
 8006c82:	4393      	bics	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a29      	ldr	r2, [pc, #164]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d018      	beq.n	8006cca <TIM_Base_SetConfig+0x76>
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	2380      	movs	r3, #128	; 0x80
 8006c9c:	05db      	lsls	r3, r3, #23
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d013      	beq.n	8006cca <TIM_Base_SetConfig+0x76>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <TIM_Base_SetConfig+0xe8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_Base_SetConfig+0x76>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a24      	ldr	r2, [pc, #144]	; (8006d40 <TIM_Base_SetConfig+0xec>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_Base_SetConfig+0x76>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a23      	ldr	r2, [pc, #140]	; (8006d44 <TIM_Base_SetConfig+0xf0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_Base_SetConfig+0x76>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <TIM_Base_SetConfig+0xf4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_Base_SetConfig+0x76>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <TIM_Base_SetConfig+0xf8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d108      	bne.n	8006cdc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <TIM_Base_SetConfig+0xfc>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	4393      	bics	r3, r2
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <TIM_Base_SetConfig+0xe4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0xce>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <TIM_Base_SetConfig+0xf0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0xce>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a0c      	ldr	r2, [pc, #48]	; (8006d48 <TIM_Base_SetConfig+0xf4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0xce>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <TIM_Base_SetConfig+0xf8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d103      	bne.n	8006d2a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	615a      	str	r2, [r3, #20]
}
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b004      	add	sp, #16
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40002000 	.word	0x40002000
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800
 8006d50:	fffffcff 	.word	0xfffffcff

08006d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	2201      	movs	r2, #1
 8006d64:	4393      	bics	r3, r2
 8006d66:	001a      	movs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <TIM_OC1_SetConfig+0xf8>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	4393      	bics	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	4393      	bics	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a28      	ldr	r2, [pc, #160]	; (8006e50 <TIM_OC1_SetConfig+0xfc>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_OC1_SetConfig+0x76>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a27      	ldr	r2, [pc, #156]	; (8006e54 <TIM_OC1_SetConfig+0x100>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_OC1_SetConfig+0x76>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a26      	ldr	r2, [pc, #152]	; (8006e58 <TIM_OC1_SetConfig+0x104>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_OC1_SetConfig+0x76>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a25      	ldr	r2, [pc, #148]	; (8006e5c <TIM_OC1_SetConfig+0x108>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10c      	bne.n	8006de4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2208      	movs	r2, #8
 8006dce:	4393      	bics	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2204      	movs	r2, #4
 8006de0:	4393      	bics	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC1_SetConfig+0xfc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC1_SetConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC1_SetConfig+0x100>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC1_SetConfig+0xb0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC1_SetConfig+0x104>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC1_SetConfig+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <TIM_OC1_SetConfig+0x108>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d111      	bne.n	8006e28 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <TIM_OC1_SetConfig+0x10c>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <TIM_OC1_SetConfig+0x110>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	46bd      	mov	sp, r7
 8006e46:	b006      	add	sp, #24
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	fffeff8f 	.word	0xfffeff8f
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800
 8006e60:	fffffeff 	.word	0xfffffeff
 8006e64:	fffffdff 	.word	0xfffffdff

08006e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	2210      	movs	r2, #16
 8006e78:	4393      	bics	r3, r2
 8006e7a:	001a      	movs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a2e      	ldr	r2, [pc, #184]	; (8006f50 <TIM_OC2_SetConfig+0xe8>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <TIM_OC2_SetConfig+0xec>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	4393      	bics	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a24      	ldr	r2, [pc, #144]	; (8006f58 <TIM_OC2_SetConfig+0xf0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d10d      	bne.n	8006ee6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2280      	movs	r2, #128	; 0x80
 8006ece:	4393      	bics	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2240      	movs	r2, #64	; 0x40
 8006ee2:	4393      	bics	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1b      	ldr	r2, [pc, #108]	; (8006f58 <TIM_OC2_SetConfig+0xf0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00b      	beq.n	8006f06 <TIM_OC2_SetConfig+0x9e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <TIM_OC2_SetConfig+0xf4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d007      	beq.n	8006f06 <TIM_OC2_SetConfig+0x9e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <TIM_OC2_SetConfig+0xf8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_OC2_SetConfig+0x9e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <TIM_OC2_SetConfig+0xfc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d113      	bne.n	8006f2e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <TIM_OC2_SetConfig+0x100>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4a16      	ldr	r2, [pc, #88]	; (8006f6c <TIM_OC2_SetConfig+0x104>)
 8006f12:	4013      	ands	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	46c0      	nop			; (mov r8, r8)
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b006      	add	sp, #24
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	feff8fff 	.word	0xfeff8fff
 8006f54:	fffffcff 	.word	0xfffffcff
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800
 8006f68:	fffffbff 	.word	0xfffffbff
 8006f6c:	fffff7ff 	.word	0xfffff7ff

08006f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	4a35      	ldr	r2, [pc, #212]	; (8007054 <TIM_OC3_SetConfig+0xe4>)
 8006f80:	401a      	ands	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	; (8007058 <TIM_OC3_SetConfig+0xe8>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	4393      	bics	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	; (800705c <TIM_OC3_SetConfig+0xec>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a25      	ldr	r2, [pc, #148]	; (8007060 <TIM_OC3_SetConfig+0xf0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d10d      	bne.n	8006fea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	4a24      	ldr	r2, [pc, #144]	; (8007064 <TIM_OC3_SetConfig+0xf4>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <TIM_OC3_SetConfig+0xf8>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <TIM_OC3_SetConfig+0xf0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_OC3_SetConfig+0x9a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	; (800706c <TIM_OC3_SetConfig+0xfc>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_OC3_SetConfig+0x9a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <TIM_OC3_SetConfig+0x100>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_OC3_SetConfig+0x9a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <TIM_OC3_SetConfig+0x104>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d113      	bne.n	8007032 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <TIM_OC3_SetConfig+0x108>)
 800700e:	4013      	ands	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4a19      	ldr	r2, [pc, #100]	; (800707c <TIM_OC3_SetConfig+0x10c>)
 8007016:	4013      	ands	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	621a      	str	r2, [r3, #32]
}
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b006      	add	sp, #24
 8007052:	bd80      	pop	{r7, pc}
 8007054:	fffffeff 	.word	0xfffffeff
 8007058:	fffeff8f 	.word	0xfffeff8f
 800705c:	fffffdff 	.word	0xfffffdff
 8007060:	40012c00 	.word	0x40012c00
 8007064:	fffff7ff 	.word	0xfffff7ff
 8007068:	fffffbff 	.word	0xfffffbff
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800
 8007078:	ffffefff 	.word	0xffffefff
 800707c:	ffffdfff 	.word	0xffffdfff

08007080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4a28      	ldr	r2, [pc, #160]	; (8007130 <TIM_OC4_SetConfig+0xb0>)
 8007090:	401a      	ands	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a22      	ldr	r2, [pc, #136]	; (8007134 <TIM_OC4_SetConfig+0xb4>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a21      	ldr	r2, [pc, #132]	; (8007138 <TIM_OC4_SetConfig+0xb8>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4a1d      	ldr	r2, [pc, #116]	; (800713c <TIM_OC4_SetConfig+0xbc>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	031b      	lsls	r3, r3, #12
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a19      	ldr	r2, [pc, #100]	; (8007140 <TIM_OC4_SetConfig+0xc0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00b      	beq.n	80070f8 <TIM_OC4_SetConfig+0x78>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a18      	ldr	r2, [pc, #96]	; (8007144 <TIM_OC4_SetConfig+0xc4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d007      	beq.n	80070f8 <TIM_OC4_SetConfig+0x78>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <TIM_OC4_SetConfig+0xc8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_OC4_SetConfig+0x78>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <TIM_OC4_SetConfig+0xcc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d109      	bne.n	800710c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4a15      	ldr	r2, [pc, #84]	; (8007150 <TIM_OC4_SetConfig+0xd0>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	019b      	lsls	r3, r3, #6
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	46bd      	mov	sp, r7
 800712a:	b006      	add	sp, #24
 800712c:	bd80      	pop	{r7, pc}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	ffffefff 	.word	0xffffefff
 8007134:	feff8fff 	.word	0xfeff8fff
 8007138:	fffffcff 	.word	0xfffffcff
 800713c:	ffffdfff 	.word	0xffffdfff
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800
 8007150:	ffffbfff 	.word	0xffffbfff

08007154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	4a25      	ldr	r2, [pc, #148]	; (80071f8 <TIM_OC5_SetConfig+0xa4>)
 8007164:	401a      	ands	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <TIM_OC5_SetConfig+0xa8>)
 8007180:	4013      	ands	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	4a1b      	ldr	r2, [pc, #108]	; (8007200 <TIM_OC5_SetConfig+0xac>)
 8007192:	4013      	ands	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a17      	ldr	r2, [pc, #92]	; (8007204 <TIM_OC5_SetConfig+0xb0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00b      	beq.n	80071c2 <TIM_OC5_SetConfig+0x6e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <TIM_OC5_SetConfig+0xb4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d007      	beq.n	80071c2 <TIM_OC5_SetConfig+0x6e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <TIM_OC5_SetConfig+0xb8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_OC5_SetConfig+0x6e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a14      	ldr	r2, [pc, #80]	; (8007210 <TIM_OC5_SetConfig+0xbc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d109      	bne.n	80071d6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4a0c      	ldr	r2, [pc, #48]	; (80071f8 <TIM_OC5_SetConfig+0xa4>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	46c0      	nop			; (mov r8, r8)
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b006      	add	sp, #24
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	fffeffff 	.word	0xfffeffff
 80071fc:	fffeff8f 	.word	0xfffeff8f
 8007200:	fffdffff 	.word	0xfffdffff
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800

08007214 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	4a26      	ldr	r2, [pc, #152]	; (80072bc <TIM_OC6_SetConfig+0xa8>)
 8007224:	401a      	ands	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a20      	ldr	r2, [pc, #128]	; (80072c0 <TIM_OC6_SetConfig+0xac>)
 8007240:	4013      	ands	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	4a1c      	ldr	r2, [pc, #112]	; (80072c4 <TIM_OC6_SetConfig+0xb0>)
 8007254:	4013      	ands	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	051b      	lsls	r3, r3, #20
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <TIM_OC6_SetConfig+0xb4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00b      	beq.n	8007284 <TIM_OC6_SetConfig+0x70>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a17      	ldr	r2, [pc, #92]	; (80072cc <TIM_OC6_SetConfig+0xb8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d007      	beq.n	8007284 <TIM_OC6_SetConfig+0x70>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <TIM_OC6_SetConfig+0xbc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_OC6_SetConfig+0x70>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <TIM_OC6_SetConfig+0xc0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d109      	bne.n	8007298 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4a14      	ldr	r2, [pc, #80]	; (80072d8 <TIM_OC6_SetConfig+0xc4>)
 8007288:	4013      	ands	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	029b      	lsls	r3, r3, #10
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b006      	add	sp, #24
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	ffefffff 	.word	0xffefffff
 80072c0:	feff8fff 	.word	0xfeff8fff
 80072c4:	ffdfffff 	.word	0xffdfffff
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40014000 	.word	0x40014000
 80072d0:	40014400 	.word	0x40014400
 80072d4:	40014800 	.word	0x40014800
 80072d8:	fffbffff 	.word	0xfffbffff

080072dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	2201      	movs	r2, #1
 80072f4:	4393      	bics	r3, r2
 80072f6:	001a      	movs	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	22f0      	movs	r2, #240	; 0xf0
 8007306:	4393      	bics	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	220a      	movs	r2, #10
 8007318:	4393      	bics	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	621a      	str	r2, [r3, #32]
}
 8007330:	46c0      	nop			; (mov r8, r8)
 8007332:	46bd      	mov	sp, r7
 8007334:	b006      	add	sp, #24
 8007336:	bd80      	pop	{r7, pc}

08007338 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	2210      	movs	r2, #16
 800734a:	4393      	bics	r3, r2
 800734c:	001a      	movs	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	4a0d      	ldr	r2, [pc, #52]	; (8007398 <TIM_TI2_ConfigInputStage+0x60>)
 8007362:	4013      	ands	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	031b      	lsls	r3, r3, #12
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	22a0      	movs	r2, #160	; 0xa0
 8007374:	4393      	bics	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	621a      	str	r2, [r3, #32]
}
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	46bd      	mov	sp, r7
 8007392:	b006      	add	sp, #24
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	ffff0fff 	.word	0xffff0fff

0800739c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a08      	ldr	r2, [pc, #32]	; (80073d0 <TIM_ITRx_SetConfig+0x34>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	2207      	movs	r2, #7
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	609a      	str	r2, [r3, #8]
}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	46bd      	mov	sp, r7
 80073ca:	b004      	add	sp, #16
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	ffcfff8f 	.word	0xffcfff8f

080073d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4a09      	ldr	r2, [pc, #36]	; (8007410 <TIM_ETR_SetConfig+0x3c>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	021a      	lsls	r2, r3, #8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	609a      	str	r2, [r3, #8]
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	46bd      	mov	sp, r7
 800740c:	b006      	add	sp, #24
 800740e:	bd80      	pop	{r7, pc}
 8007410:	ffff00ff 	.word	0xffff00ff

08007414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	221f      	movs	r2, #31
 8007424:	4013      	ands	r3, r2
 8007426:	2201      	movs	r2, #1
 8007428:	409a      	lsls	r2, r3
 800742a:	0013      	movs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	43d2      	mvns	r2, r2
 8007436:	401a      	ands	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a1a      	ldr	r2, [r3, #32]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	211f      	movs	r1, #31
 8007444:	400b      	ands	r3, r1
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4099      	lsls	r1, r3
 800744a:	000b      	movs	r3, r1
 800744c:	431a      	orrs	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	46bd      	mov	sp, r7
 8007456:	b006      	add	sp, #24
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	223c      	movs	r2, #60	; 0x3c
 800746a:	5c9b      	ldrb	r3, [r3, r2]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e055      	b.n	8007520 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	223c      	movs	r2, #60	; 0x3c
 8007478:	2101      	movs	r1, #1
 800747a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	223d      	movs	r2, #61	; 0x3d
 8007480:	2102      	movs	r1, #2
 8007482:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a23      	ldr	r2, [pc, #140]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d108      	bne.n	80074b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2270      	movs	r2, #112	; 0x70
 80074b4:	4393      	bics	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a16      	ldr	r2, [pc, #88]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00f      	beq.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	2380      	movs	r3, #128	; 0x80
 80074da:	05db      	lsls	r3, r3, #23
 80074dc:	429a      	cmp	r2, r3
 80074de:	d009      	beq.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a12      	ldr	r2, [pc, #72]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a11      	ldr	r2, [pc, #68]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d10c      	bne.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2280      	movs	r2, #128	; 0x80
 80074f8:	4393      	bics	r3, r2
 80074fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	4313      	orrs	r3, r2
 8007504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	223d      	movs	r2, #61	; 0x3d
 8007512:	2101      	movs	r1, #1
 8007514:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	223c      	movs	r2, #60	; 0x3c
 800751a:	2100      	movs	r1, #0
 800751c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b004      	add	sp, #16
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40012c00 	.word	0x40012c00
 800752c:	ff0fffff 	.word	0xff0fffff
 8007530:	40000400 	.word	0x40000400
 8007534:	40014000 	.word	0x40014000

08007538 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	223c      	movs	r2, #60	; 0x3c
 800754a:	5c9b      	ldrb	r3, [r3, r2]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007550:	2302      	movs	r3, #2
 8007552:	e079      	b.n	8007648 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	223c      	movs	r2, #60	; 0x3c
 8007558:	2101      	movs	r1, #1
 800755a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	22ff      	movs	r2, #255	; 0xff
 8007560:	4393      	bics	r3, r2
 8007562:	001a      	movs	r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a38      	ldr	r2, [pc, #224]	; (8007650 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007570:	401a      	ands	r2, r3
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4a35      	ldr	r2, [pc, #212]	; (8007654 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800757e:	401a      	ands	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4a33      	ldr	r2, [pc, #204]	; (8007658 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800758c:	401a      	ands	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a30      	ldr	r2, [pc, #192]	; (800765c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800759a:	401a      	ands	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4a2e      	ldr	r2, [pc, #184]	; (8007660 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80075a8:	401a      	ands	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a2b      	ldr	r2, [pc, #172]	; (8007664 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80075b6:	401a      	ands	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a29      	ldr	r2, [pc, #164]	; (8007668 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80075c4:	401a      	ands	r2, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a25      	ldr	r2, [pc, #148]	; (800766c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d106      	bne.n	80075e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a24      	ldr	r2, [pc, #144]	; (8007670 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80075de:	401a      	ands	r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1f      	ldr	r2, [pc, #124]	; (800766c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d121      	bne.n	8007636 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80075f6:	401a      	ands	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	051b      	lsls	r3, r3, #20
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4a1c      	ldr	r2, [pc, #112]	; (8007678 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007606:	401a      	ands	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a1a      	ldr	r2, [pc, #104]	; (800767c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007614:	401a      	ands	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a12      	ldr	r2, [pc, #72]	; (800766c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d106      	bne.n	8007636 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a15      	ldr	r2, [pc, #84]	; (8007680 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800762c:	401a      	ands	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	223c      	movs	r2, #60	; 0x3c
 8007642:	2100      	movs	r1, #0
 8007644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	0018      	movs	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	b004      	add	sp, #16
 800764e:	bd80      	pop	{r7, pc}
 8007650:	fffffcff 	.word	0xfffffcff
 8007654:	fffffbff 	.word	0xfffffbff
 8007658:	fffff7ff 	.word	0xfffff7ff
 800765c:	ffffefff 	.word	0xffffefff
 8007660:	ffffdfff 	.word	0xffffdfff
 8007664:	ffffbfff 	.word	0xffffbfff
 8007668:	fff0ffff 	.word	0xfff0ffff
 800766c:	40012c00 	.word	0x40012c00
 8007670:	efffffff 	.word	0xefffffff
 8007674:	ff0fffff 	.word	0xff0fffff
 8007678:	feffffff 	.word	0xfeffffff
 800767c:	fdffffff 	.word	0xfdffffff
 8007680:	dfffffff 	.word	0xdfffffff

08007684 <memset>:
 8007684:	0003      	movs	r3, r0
 8007686:	1882      	adds	r2, r0, r2
 8007688:	4293      	cmp	r3, r2
 800768a:	d100      	bne.n	800768e <memset+0xa>
 800768c:	4770      	bx	lr
 800768e:	7019      	strb	r1, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	e7f9      	b.n	8007688 <memset+0x4>

08007694 <__libc_init_array>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	2600      	movs	r6, #0
 8007698:	4c0c      	ldr	r4, [pc, #48]	; (80076cc <__libc_init_array+0x38>)
 800769a:	4d0d      	ldr	r5, [pc, #52]	; (80076d0 <__libc_init_array+0x3c>)
 800769c:	1b64      	subs	r4, r4, r5
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	42a6      	cmp	r6, r4
 80076a2:	d109      	bne.n	80076b8 <__libc_init_array+0x24>
 80076a4:	2600      	movs	r6, #0
 80076a6:	f000 f819 	bl	80076dc <_init>
 80076aa:	4c0a      	ldr	r4, [pc, #40]	; (80076d4 <__libc_init_array+0x40>)
 80076ac:	4d0a      	ldr	r5, [pc, #40]	; (80076d8 <__libc_init_array+0x44>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	42a6      	cmp	r6, r4
 80076b4:	d105      	bne.n	80076c2 <__libc_init_array+0x2e>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	00b3      	lsls	r3, r6, #2
 80076ba:	58eb      	ldr	r3, [r5, r3]
 80076bc:	4798      	blx	r3
 80076be:	3601      	adds	r6, #1
 80076c0:	e7ee      	b.n	80076a0 <__libc_init_array+0xc>
 80076c2:	00b3      	lsls	r3, r6, #2
 80076c4:	58eb      	ldr	r3, [r5, r3]
 80076c6:	4798      	blx	r3
 80076c8:	3601      	adds	r6, #1
 80076ca:	e7f2      	b.n	80076b2 <__libc_init_array+0x1e>
 80076cc:	08007848 	.word	0x08007848
 80076d0:	08007848 	.word	0x08007848
 80076d4:	0800784c 	.word	0x0800784c
 80076d8:	08007848 	.word	0x08007848

080076dc <_init>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr

080076e8 <_fini>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr
